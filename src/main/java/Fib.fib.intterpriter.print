
----------------------------------------------------------------------
Interpreter

code size        =     85K bytes
total space      =     85K bytes
wasted space     =      0K bytes

# of codelets    =    271
avg codelet size =    323 bytes


----------------------------------------------------------------------
slow signature handler  [0x000000011c05c520, 0x000000011c05c6e0]  448 bytes

Loaded disassembler from /Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home/lib/server/hsdis-amd64.dylib
[Disassembling for mach='i386:x86-64']
  0x000000011c05c520: mov    %rsp,%rcx
  0x000000011c05c523: sub    $0x70,%rsp
  0x000000011c05c527: callq  0x000000011c05c531
  0x000000011c05c52c: jmpq   0x000000011c05c5c9
  0x000000011c05c531: mov    %r14,%rdx
  0x000000011c05c534: mov    %rbx,%rsi
  0x000000011c05c537: lea    0x8(%rsp),%rax
  0x000000011c05c53c: mov    %r13,-0x40(%rbp)
  0x000000011c05c540: mov    %r15,%rdi
  0x000000011c05c543: vzeroupper 
  0x000000011c05c546: mov    %rbp,0x330(%r15)
  0x000000011c05c54d: mov    %rax,0x320(%r15)
  0x000000011c05c554: test   $0xf,%esp
  0x000000011c05c55a: je     0x000000011c05c572
  0x000000011c05c560: sub    $0x8,%rsp
  0x000000011c05c564: callq  0x00000001103a9588 = InterpreterRuntime::slow_signature_handler(JavaThread*, Method*, long*, long*)
  0x000000011c05c569: add    $0x8,%rsp
  0x000000011c05c56d: jmpq   0x000000011c05c577
  0x000000011c05c572: callq  0x00000001103a9588 = InterpreterRuntime::slow_signature_handler(JavaThread*, Method*, long*, long*)
  0x000000011c05c577: movabs $0x0,%r10
  0x000000011c05c581: mov    %r10,0x320(%r15)
  0x000000011c05c588: movabs $0x0,%r10
  0x000000011c05c592: mov    %r10,0x330(%r15)
  0x000000011c05c599: movabs $0x0,%r10
  0x000000011c05c5a3: mov    %r10,0x328(%r15)
  0x000000011c05c5aa: vzeroupper 
  0x000000011c05c5ad: cmpq   $0x0,0x8(%r15)
  0x000000011c05c5b5: je     0x000000011c05c5c0
  0x000000011c05c5bb: jmpq   0x000000011c054780
  0x000000011c05c5c0: mov    -0x40(%rbp),%r13
  0x000000011c05c5c4: mov    -0x38(%rbp),%r14
  0x000000011c05c5c8: retq   
  0x000000011c05c5c9: mov    0x28(%rsp),%ecx
  0x000000011c05c5cd: test   $0x1,%ecx
  0x000000011c05c5d3: jne    0x000000011c05c5e4
  0x000000011c05c5d9: vmovss 0x30(%rsp),%xmm0
  0x000000011c05c5df: jmpq   0x000000011c05c5ea
  0x000000011c05c5e4: vmovsd 0x30(%rsp),%xmm0
  0x000000011c05c5ea: test   $0x2,%ecx
  0x000000011c05c5f0: jne    0x000000011c05c601
  0x000000011c05c5f6: vmovss 0x38(%rsp),%xmm1
  0x000000011c05c5fc: jmpq   0x000000011c05c607
  0x000000011c05c601: vmovsd 0x38(%rsp),%xmm1
  0x000000011c05c607: test   $0x4,%ecx
  0x000000011c05c60d: jne    0x000000011c05c61e
  0x000000011c05c613: vmovss 0x40(%rsp),%xmm2
  0x000000011c05c619: jmpq   0x000000011c05c624
  0x000000011c05c61e: vmovsd 0x40(%rsp),%xmm2
  0x000000011c05c624: test   $0x8,%ecx
  0x000000011c05c62a: jne    0x000000011c05c63b
  0x000000011c05c630: vmovss 0x48(%rsp),%xmm3
  0x000000011c05c636: jmpq   0x000000011c05c641
  0x000000011c05c63b: vmovsd 0x48(%rsp),%xmm3
  0x000000011c05c641: test   $0x10,%ecx
  0x000000011c05c647: jne    0x000000011c05c658
  0x000000011c05c64d: vmovss 0x50(%rsp),%xmm4
  0x000000011c05c653: jmpq   0x000000011c05c65e
  0x000000011c05c658: vmovsd 0x50(%rsp),%xmm4
  0x000000011c05c65e: test   $0x20,%ecx
  0x000000011c05c664: jne    0x000000011c05c675
  0x000000011c05c66a: vmovss 0x58(%rsp),%xmm5
  0x000000011c05c670: jmpq   0x000000011c05c67b
  0x000000011c05c675: vmovsd 0x58(%rsp),%xmm5
  0x000000011c05c67b: test   $0x40,%ecx
  0x000000011c05c681: jne    0x000000011c05c692
  0x000000011c05c687: vmovss 0x60(%rsp),%xmm6
  0x000000011c05c68d: jmpq   0x000000011c05c698
  0x000000011c05c692: vmovsd 0x60(%rsp),%xmm6
  0x000000011c05c698: test   $0x80,%ecx
  0x000000011c05c69e: jne    0x000000011c05c6af
  0x000000011c05c6a4: vmovss 0x68(%rsp),%xmm7
  0x000000011c05c6aa: jmpq   0x000000011c05c6b5
  0x000000011c05c6af: vmovsd 0x68(%rsp),%xmm7
  0x000000011c05c6b5: mov    0x20(%rbx),%ecx
  0x000000011c05c6b8: test   $0x8,%ecx
  0x000000011c05c6be: cmove  (%rsp),%rsi
  0x000000011c05c6c3: mov    0x8(%rsp),%rdx
  0x000000011c05c6c8: mov    0x10(%rsp),%rcx
  0x000000011c05c6cd: mov    0x18(%rsp),%r8
  0x000000011c05c6d2: mov    0x20(%rsp),%r9
  0x000000011c05c6d7: add    $0x70,%rsp
  0x000000011c05c6db: retq   
  0x000000011c05c6dc: nopl   0x0(%rax)

----------------------------------------------------------------------
error exits  [0x000000011c05c700, 0x000000011c05c740]  64 bytes

  0x000000011c05c700: movabs $0x110851413,%rdi
  0x000000011c05c70a: and    $0xfffffffffffffff0,%rsp
  0x000000011c05c70e: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c05c713: hlt    
  0x000000011c05c714: movabs $0x11085142a,%rdi
  0x000000011c05c71e: and    $0xfffffffffffffff0,%rsp
  0x000000011c05c722: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c05c727: hlt    
  0x000000011c05c728: add    %al,(%rax)
  0x000000011c05c72a: add    %al,(%rax)
  0x000000011c05c72c: add    %al,(%rax)
  0x000000011c05c72e: add    %al,(%rax)
  0x000000011c05c730: add    %al,(%rax)
  0x000000011c05c732: add    %al,(%rax)
  0x000000011c05c734: add    %al,(%rax)
  0x000000011c05c736: add    %al,(%rax)
  0x000000011c05c738: add    %al,(%rax)
  0x000000011c05c73a: add    %al,(%rax)
  0x000000011c05c73c: add    %al,(%rax)
  0x000000011c05c73e: add    %al,(%rax)

----------------------------------------------------------------------
return entry points  [0x000000011c05c760, 0x000000011c05cf80]  2080 bytes

  0x000000011c05c760: mov    -0x10(%rbp),%rsp
  0x000000011c05c764: movq   $0x0,-0x10(%rbp)
  0x000000011c05c76c: mov    -0x40(%rbp),%r13
  0x000000011c05c770: mov    -0x38(%rbp),%r14
  0x000000011c05c774: movzwl 0x1(%r13),%ecx
  0x000000011c05c779: mov    -0x30(%rbp),%rbx
  0x000000011c05c77d: shl    $0x2,%ecx
  0x000000011c05c780: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05c784: and    $0xff,%ebx
  0x000000011c05c78a: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05c78e: movzbl 0x1(%r13),%ebx
  0x000000011c05c793: inc    %r13
  0x000000011c05c796: movabs $0x1109d5220,%r10
  0x000000011c05c7a0: jmpq   *(%r10,%rbx,8)
  0x000000011c05c7a4: mov    -0x10(%rbp),%rsp
  0x000000011c05c7a8: movq   $0x0,-0x10(%rbp)
  0x000000011c05c7b0: mov    -0x40(%rbp),%r13
  0x000000011c05c7b4: mov    -0x38(%rbp),%r14
  0x000000011c05c7b8: movzwl 0x1(%r13),%ecx
  0x000000011c05c7bd: mov    -0x30(%rbp),%rbx
  0x000000011c05c7c1: shl    $0x2,%ecx
  0x000000011c05c7c4: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05c7c8: and    $0xff,%ebx
  0x000000011c05c7ce: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05c7d2: movzbl 0x1(%r13),%ebx
  0x000000011c05c7d7: inc    %r13
  0x000000011c05c7da: movabs $0x1109d7220,%r10
  0x000000011c05c7e4: jmpq   *(%r10,%rbx,8)
  0x000000011c05c7e8: mov    -0x10(%rbp),%rsp
  0x000000011c05c7ec: movq   $0x0,-0x10(%rbp)
  0x000000011c05c7f4: mov    -0x40(%rbp),%r13
  0x000000011c05c7f8: mov    -0x38(%rbp),%r14
  0x000000011c05c7fc: movzwl 0x1(%r13),%ecx
  0x000000011c05c801: mov    -0x30(%rbp),%rbx
  0x000000011c05c805: shl    $0x2,%ecx
  0x000000011c05c808: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05c80c: and    $0xff,%ebx
  0x000000011c05c812: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05c816: movzbl 0x1(%r13),%ebx
  0x000000011c05c81b: inc    %r13
  0x000000011c05c81e: movabs $0x1109d5a20,%r10
  0x000000011c05c828: jmpq   *(%r10,%rbx,8)
  0x000000011c05c82c: mov    -0x10(%rbp),%rsp
  0x000000011c05c830: movq   $0x0,-0x10(%rbp)
  0x000000011c05c838: mov    -0x40(%rbp),%r13
  0x000000011c05c83c: mov    -0x38(%rbp),%r14
  0x000000011c05c840: movzwl 0x1(%r13),%ecx
  0x000000011c05c845: mov    -0x30(%rbp),%rbx
  0x000000011c05c849: shl    $0x2,%ecx
  0x000000011c05c84c: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05c850: and    $0xff,%ebx
  0x000000011c05c856: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05c85a: movzbl 0x1(%r13),%ebx
  0x000000011c05c85f: inc    %r13
  0x000000011c05c862: movabs $0x1109d6220,%r10
  0x000000011c05c86c: jmpq   *(%r10,%rbx,8)
  0x000000011c05c870: mov    -0x10(%rbp),%rsp
  0x000000011c05c874: movq   $0x0,-0x10(%rbp)
  0x000000011c05c87c: mov    -0x40(%rbp),%r13
  0x000000011c05c880: mov    -0x38(%rbp),%r14
  0x000000011c05c884: movzwl 0x1(%r13),%ecx
  0x000000011c05c889: mov    -0x30(%rbp),%rbx
  0x000000011c05c88d: shl    $0x2,%ecx
  0x000000011c05c890: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05c894: and    $0xff,%ebx
  0x000000011c05c89a: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05c89e: movzbl 0x1(%r13),%ebx
  0x000000011c05c8a3: inc    %r13
  0x000000011c05c8a6: movabs $0x1109d6a20,%r10
  0x000000011c05c8b0: jmpq   *(%r10,%rbx,8)
  0x000000011c05c8b4: mov    -0x10(%rbp),%rsp
  0x000000011c05c8b8: movq   $0x0,-0x10(%rbp)
  0x000000011c05c8c0: mov    -0x40(%rbp),%r13
  0x000000011c05c8c4: mov    -0x38(%rbp),%r14
  0x000000011c05c8c8: movzwl 0x1(%r13),%ecx
  0x000000011c05c8cd: mov    -0x30(%rbp),%rbx
  0x000000011c05c8d1: shl    $0x2,%ecx
  0x000000011c05c8d4: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05c8d8: and    $0xff,%ebx
  0x000000011c05c8de: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05c8e2: movzbl 0x1(%r13),%ebx
  0x000000011c05c8e7: inc    %r13
  0x000000011c05c8ea: movabs $0x1109d7a20,%r10
  0x000000011c05c8f4: jmpq   *(%r10,%rbx,8)
  0x000000011c05c8f8: mov    -0x10(%rbp),%rsp
  0x000000011c05c8fc: movq   $0x0,-0x10(%rbp)
  0x000000011c05c904: mov    -0x40(%rbp),%r13
  0x000000011c05c908: mov    -0x38(%rbp),%r14
  0x000000011c05c90c: movzwl 0x1(%r13),%ecx
  0x000000011c05c911: mov    -0x30(%rbp),%rbx
  0x000000011c05c915: shl    $0x2,%ecx
  0x000000011c05c918: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05c91c: and    $0xff,%ebx
  0x000000011c05c922: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05c926: movzbl 0x2(%r13),%ebx
  0x000000011c05c92b: add    $0x2,%r13
  0x000000011c05c92f: movabs $0x1109d5220,%r10
  0x000000011c05c939: jmpq   *(%r10,%rbx,8)
  0x000000011c05c93d: mov    -0x10(%rbp),%rsp
  0x000000011c05c941: movq   $0x0,-0x10(%rbp)
  0x000000011c05c949: mov    -0x40(%rbp),%r13
  0x000000011c05c94d: mov    -0x38(%rbp),%r14
  0x000000011c05c951: movzwl 0x1(%r13),%ecx
  0x000000011c05c956: mov    -0x30(%rbp),%rbx
  0x000000011c05c95a: shl    $0x2,%ecx
  0x000000011c05c95d: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05c961: and    $0xff,%ebx
  0x000000011c05c967: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05c96b: movzbl 0x2(%r13),%ebx
  0x000000011c05c970: add    $0x2,%r13
  0x000000011c05c974: movabs $0x1109d7220,%r10
  0x000000011c05c97e: jmpq   *(%r10,%rbx,8)
  0x000000011c05c982: mov    -0x10(%rbp),%rsp
  0x000000011c05c986: movq   $0x0,-0x10(%rbp)
  0x000000011c05c98e: mov    -0x40(%rbp),%r13
  0x000000011c05c992: mov    -0x38(%rbp),%r14
  0x000000011c05c996: movzwl 0x1(%r13),%ecx
  0x000000011c05c99b: mov    -0x30(%rbp),%rbx
  0x000000011c05c99f: shl    $0x2,%ecx
  0x000000011c05c9a2: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05c9a6: and    $0xff,%ebx
  0x000000011c05c9ac: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05c9b0: movzbl 0x2(%r13),%ebx
  0x000000011c05c9b5: add    $0x2,%r13
  0x000000011c05c9b9: movabs $0x1109d5a20,%r10
  0x000000011c05c9c3: jmpq   *(%r10,%rbx,8)
  0x000000011c05c9c7: mov    -0x10(%rbp),%rsp
  0x000000011c05c9cb: movq   $0x0,-0x10(%rbp)
  0x000000011c05c9d3: mov    -0x40(%rbp),%r13
  0x000000011c05c9d7: mov    -0x38(%rbp),%r14
  0x000000011c05c9db: movzwl 0x1(%r13),%ecx
  0x000000011c05c9e0: mov    -0x30(%rbp),%rbx
  0x000000011c05c9e4: shl    $0x2,%ecx
  0x000000011c05c9e7: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05c9eb: and    $0xff,%ebx
  0x000000011c05c9f1: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05c9f5: movzbl 0x2(%r13),%ebx
  0x000000011c05c9fa: add    $0x2,%r13
  0x000000011c05c9fe: movabs $0x1109d6220,%r10
  0x000000011c05ca08: jmpq   *(%r10,%rbx,8)
  0x000000011c05ca0c: mov    -0x10(%rbp),%rsp
  0x000000011c05ca10: movq   $0x0,-0x10(%rbp)
  0x000000011c05ca18: mov    -0x40(%rbp),%r13
  0x000000011c05ca1c: mov    -0x38(%rbp),%r14
  0x000000011c05ca20: movzwl 0x1(%r13),%ecx
  0x000000011c05ca25: mov    -0x30(%rbp),%rbx
  0x000000011c05ca29: shl    $0x2,%ecx
  0x000000011c05ca2c: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05ca30: and    $0xff,%ebx
  0x000000011c05ca36: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05ca3a: movzbl 0x2(%r13),%ebx
  0x000000011c05ca3f: add    $0x2,%r13
  0x000000011c05ca43: movabs $0x1109d6a20,%r10
  0x000000011c05ca4d: jmpq   *(%r10,%rbx,8)
  0x000000011c05ca51: mov    -0x10(%rbp),%rsp
  0x000000011c05ca55: movq   $0x0,-0x10(%rbp)
  0x000000011c05ca5d: mov    -0x40(%rbp),%r13
  0x000000011c05ca61: mov    -0x38(%rbp),%r14
  0x000000011c05ca65: movzwl 0x1(%r13),%ecx
  0x000000011c05ca6a: mov    -0x30(%rbp),%rbx
  0x000000011c05ca6e: shl    $0x2,%ecx
  0x000000011c05ca71: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05ca75: and    $0xff,%ebx
  0x000000011c05ca7b: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05ca7f: movzbl 0x2(%r13),%ebx
  0x000000011c05ca84: add    $0x2,%r13
  0x000000011c05ca88: movabs $0x1109d7a20,%r10
  0x000000011c05ca92: jmpq   *(%r10,%rbx,8)
  0x000000011c05ca96: mov    -0x10(%rbp),%rsp
  0x000000011c05ca9a: movq   $0x0,-0x10(%rbp)
  0x000000011c05caa2: mov    -0x40(%rbp),%r13
  0x000000011c05caa6: mov    -0x38(%rbp),%r14
  0x000000011c05caaa: movzwl 0x1(%r13),%ecx
  0x000000011c05caaf: mov    -0x30(%rbp),%rbx
  0x000000011c05cab3: shl    $0x2,%ecx
  0x000000011c05cab6: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05caba: and    $0xff,%ebx
  0x000000011c05cac0: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05cac4: movzbl 0x3(%r13),%ebx
  0x000000011c05cac9: add    $0x3,%r13
  0x000000011c05cacd: movabs $0x1109d5220,%r10
  0x000000011c05cad7: jmpq   *(%r10,%rbx,8)
  0x000000011c05cadb: mov    -0x10(%rbp),%rsp
  0x000000011c05cadf: movq   $0x0,-0x10(%rbp)
  0x000000011c05cae7: mov    -0x40(%rbp),%r13
  0x000000011c05caeb: mov    -0x38(%rbp),%r14
  0x000000011c05caef: movzwl 0x1(%r13),%ecx
  0x000000011c05caf4: mov    -0x30(%rbp),%rbx
  0x000000011c05caf8: shl    $0x2,%ecx
  0x000000011c05cafb: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05caff: and    $0xff,%ebx
  0x000000011c05cb05: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05cb09: movzbl 0x3(%r13),%ebx
  0x000000011c05cb0e: add    $0x3,%r13
  0x000000011c05cb12: movabs $0x1109d7220,%r10
  0x000000011c05cb1c: jmpq   *(%r10,%rbx,8)
  0x000000011c05cb20: mov    -0x10(%rbp),%rsp
  0x000000011c05cb24: movq   $0x0,-0x10(%rbp)
  0x000000011c05cb2c: mov    -0x40(%rbp),%r13
  0x000000011c05cb30: mov    -0x38(%rbp),%r14
  0x000000011c05cb34: movzwl 0x1(%r13),%ecx
  0x000000011c05cb39: mov    -0x30(%rbp),%rbx
  0x000000011c05cb3d: shl    $0x2,%ecx
  0x000000011c05cb40: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05cb44: and    $0xff,%ebx
  0x000000011c05cb4a: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05cb4e: movzbl 0x3(%r13),%ebx
  0x000000011c05cb53: add    $0x3,%r13
  0x000000011c05cb57: movabs $0x1109d5a20,%r10
  0x000000011c05cb61: jmpq   *(%r10,%rbx,8)
  0x000000011c05cb65: mov    -0x10(%rbp),%rsp
  0x000000011c05cb69: movq   $0x0,-0x10(%rbp)
  0x000000011c05cb71: mov    -0x40(%rbp),%r13
  0x000000011c05cb75: mov    -0x38(%rbp),%r14
  0x000000011c05cb79: movzwl 0x1(%r13),%ecx
  0x000000011c05cb7e: mov    -0x30(%rbp),%rbx
  0x000000011c05cb82: shl    $0x2,%ecx
  0x000000011c05cb85: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05cb89: and    $0xff,%ebx
  0x000000011c05cb8f: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05cb93: movzbl 0x3(%r13),%ebx
  0x000000011c05cb98: add    $0x3,%r13
  0x000000011c05cb9c: movabs $0x1109d6220,%r10
  0x000000011c05cba6: jmpq   *(%r10,%rbx,8)
  0x000000011c05cbaa: mov    -0x10(%rbp),%rsp
  0x000000011c05cbae: movq   $0x0,-0x10(%rbp)
  0x000000011c05cbb6: mov    -0x40(%rbp),%r13
  0x000000011c05cbba: mov    -0x38(%rbp),%r14
  0x000000011c05cbbe: movzwl 0x1(%r13),%ecx
  0x000000011c05cbc3: mov    -0x30(%rbp),%rbx
  0x000000011c05cbc7: shl    $0x2,%ecx
  0x000000011c05cbca: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05cbce: and    $0xff,%ebx
  0x000000011c05cbd4: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05cbd8: movzbl 0x3(%r13),%ebx
  0x000000011c05cbdd: add    $0x3,%r13
  0x000000011c05cbe1: movabs $0x1109d6a20,%r10
  0x000000011c05cbeb: jmpq   *(%r10,%rbx,8)
  0x000000011c05cbef: mov    -0x10(%rbp),%rsp
  0x000000011c05cbf3: movq   $0x0,-0x10(%rbp)
  0x000000011c05cbfb: mov    -0x40(%rbp),%r13
  0x000000011c05cbff: mov    -0x38(%rbp),%r14
  0x000000011c05cc03: movzwl 0x1(%r13),%ecx
  0x000000011c05cc08: mov    -0x30(%rbp),%rbx
  0x000000011c05cc0c: shl    $0x2,%ecx
  0x000000011c05cc0f: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05cc13: and    $0xff,%ebx
  0x000000011c05cc19: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05cc1d: movzbl 0x3(%r13),%ebx
  0x000000011c05cc22: add    $0x3,%r13
  0x000000011c05cc26: movabs $0x1109d7a20,%r10
  0x000000011c05cc30: jmpq   *(%r10,%rbx,8)
  0x000000011c05cc34: mov    -0x10(%rbp),%rsp
  0x000000011c05cc38: movq   $0x0,-0x10(%rbp)
  0x000000011c05cc40: mov    -0x40(%rbp),%r13
  0x000000011c05cc44: mov    -0x38(%rbp),%r14
  0x000000011c05cc48: movzwl 0x1(%r13),%ecx
  0x000000011c05cc4d: mov    -0x30(%rbp),%rbx
  0x000000011c05cc51: shl    $0x2,%ecx
  0x000000011c05cc54: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05cc58: and    $0xff,%ebx
  0x000000011c05cc5e: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05cc62: movzbl 0x4(%r13),%ebx
  0x000000011c05cc67: add    $0x4,%r13
  0x000000011c05cc6b: movabs $0x1109d5220,%r10
  0x000000011c05cc75: jmpq   *(%r10,%rbx,8)
  0x000000011c05cc79: mov    -0x10(%rbp),%rsp
  0x000000011c05cc7d: movq   $0x0,-0x10(%rbp)
  0x000000011c05cc85: mov    -0x40(%rbp),%r13
  0x000000011c05cc89: mov    -0x38(%rbp),%r14
  0x000000011c05cc8d: movzwl 0x1(%r13),%ecx
  0x000000011c05cc92: mov    -0x30(%rbp),%rbx
  0x000000011c05cc96: shl    $0x2,%ecx
  0x000000011c05cc99: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05cc9d: and    $0xff,%ebx
  0x000000011c05cca3: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05cca7: movzbl 0x4(%r13),%ebx
  0x000000011c05ccac: add    $0x4,%r13
  0x000000011c05ccb0: movabs $0x1109d7220,%r10
  0x000000011c05ccba: jmpq   *(%r10,%rbx,8)
  0x000000011c05ccbe: mov    -0x10(%rbp),%rsp
  0x000000011c05ccc2: movq   $0x0,-0x10(%rbp)
  0x000000011c05ccca: mov    -0x40(%rbp),%r13
  0x000000011c05ccce: mov    -0x38(%rbp),%r14
  0x000000011c05ccd2: movzwl 0x1(%r13),%ecx
  0x000000011c05ccd7: mov    -0x30(%rbp),%rbx
  0x000000011c05ccdb: shl    $0x2,%ecx
  0x000000011c05ccde: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05cce2: and    $0xff,%ebx
  0x000000011c05cce8: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05ccec: movzbl 0x4(%r13),%ebx
  0x000000011c05ccf1: add    $0x4,%r13
  0x000000011c05ccf5: movabs $0x1109d5a20,%r10
  0x000000011c05ccff: jmpq   *(%r10,%rbx,8)
  0x000000011c05cd03: mov    -0x10(%rbp),%rsp
  0x000000011c05cd07: movq   $0x0,-0x10(%rbp)
  0x000000011c05cd0f: mov    -0x40(%rbp),%r13
  0x000000011c05cd13: mov    -0x38(%rbp),%r14
  0x000000011c05cd17: movzwl 0x1(%r13),%ecx
  0x000000011c05cd1c: mov    -0x30(%rbp),%rbx
  0x000000011c05cd20: shl    $0x2,%ecx
  0x000000011c05cd23: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05cd27: and    $0xff,%ebx
  0x000000011c05cd2d: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05cd31: movzbl 0x4(%r13),%ebx
  0x000000011c05cd36: add    $0x4,%r13
  0x000000011c05cd3a: movabs $0x1109d6220,%r10
  0x000000011c05cd44: jmpq   *(%r10,%rbx,8)
  0x000000011c05cd48: mov    -0x10(%rbp),%rsp
  0x000000011c05cd4c: movq   $0x0,-0x10(%rbp)
  0x000000011c05cd54: mov    -0x40(%rbp),%r13
  0x000000011c05cd58: mov    -0x38(%rbp),%r14
  0x000000011c05cd5c: movzwl 0x1(%r13),%ecx
  0x000000011c05cd61: mov    -0x30(%rbp),%rbx
  0x000000011c05cd65: shl    $0x2,%ecx
  0x000000011c05cd68: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05cd6c: and    $0xff,%ebx
  0x000000011c05cd72: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05cd76: movzbl 0x4(%r13),%ebx
  0x000000011c05cd7b: add    $0x4,%r13
  0x000000011c05cd7f: movabs $0x1109d6a20,%r10
  0x000000011c05cd89: jmpq   *(%r10,%rbx,8)
  0x000000011c05cd8d: mov    -0x10(%rbp),%rsp
  0x000000011c05cd91: movq   $0x0,-0x10(%rbp)
  0x000000011c05cd99: mov    -0x40(%rbp),%r13
  0x000000011c05cd9d: mov    -0x38(%rbp),%r14
  0x000000011c05cda1: movzwl 0x1(%r13),%ecx
  0x000000011c05cda6: mov    -0x30(%rbp),%rbx
  0x000000011c05cdaa: shl    $0x2,%ecx
  0x000000011c05cdad: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05cdb1: and    $0xff,%ebx
  0x000000011c05cdb7: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05cdbb: movzbl 0x4(%r13),%ebx
  0x000000011c05cdc0: add    $0x4,%r13
  0x000000011c05cdc4: movabs $0x1109d7a20,%r10
  0x000000011c05cdce: jmpq   *(%r10,%rbx,8)
  0x000000011c05cdd2: mov    -0x10(%rbp),%rsp
  0x000000011c05cdd6: movq   $0x0,-0x10(%rbp)
  0x000000011c05cdde: mov    -0x40(%rbp),%r13
  0x000000011c05cde2: mov    -0x38(%rbp),%r14
  0x000000011c05cde6: movzwl 0x1(%r13),%ecx
  0x000000011c05cdeb: mov    -0x30(%rbp),%rbx
  0x000000011c05cdef: shl    $0x2,%ecx
  0x000000011c05cdf2: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05cdf6: and    $0xff,%ebx
  0x000000011c05cdfc: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05ce00: movzbl 0x5(%r13),%ebx
  0x000000011c05ce05: add    $0x5,%r13
  0x000000011c05ce09: movabs $0x1109d5220,%r10
  0x000000011c05ce13: jmpq   *(%r10,%rbx,8)
  0x000000011c05ce17: mov    -0x10(%rbp),%rsp
  0x000000011c05ce1b: movq   $0x0,-0x10(%rbp)
  0x000000011c05ce23: mov    -0x40(%rbp),%r13
  0x000000011c05ce27: mov    -0x38(%rbp),%r14
  0x000000011c05ce2b: movzwl 0x1(%r13),%ecx
  0x000000011c05ce30: mov    -0x30(%rbp),%rbx
  0x000000011c05ce34: shl    $0x2,%ecx
  0x000000011c05ce37: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05ce3b: and    $0xff,%ebx
  0x000000011c05ce41: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05ce45: movzbl 0x5(%r13),%ebx
  0x000000011c05ce4a: add    $0x5,%r13
  0x000000011c05ce4e: movabs $0x1109d7220,%r10
  0x000000011c05ce58: jmpq   *(%r10,%rbx,8)
  0x000000011c05ce5c: mov    -0x10(%rbp),%rsp
  0x000000011c05ce60: movq   $0x0,-0x10(%rbp)
  0x000000011c05ce68: mov    -0x40(%rbp),%r13
  0x000000011c05ce6c: mov    -0x38(%rbp),%r14
  0x000000011c05ce70: movzwl 0x1(%r13),%ecx
  0x000000011c05ce75: mov    -0x30(%rbp),%rbx
  0x000000011c05ce79: shl    $0x2,%ecx
  0x000000011c05ce7c: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05ce80: and    $0xff,%ebx
  0x000000011c05ce86: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05ce8a: movzbl 0x5(%r13),%ebx
  0x000000011c05ce8f: add    $0x5,%r13
  0x000000011c05ce93: movabs $0x1109d5a20,%r10
  0x000000011c05ce9d: jmpq   *(%r10,%rbx,8)
  0x000000011c05cea1: mov    -0x10(%rbp),%rsp
  0x000000011c05cea5: movq   $0x0,-0x10(%rbp)
  0x000000011c05cead: mov    -0x40(%rbp),%r13
  0x000000011c05ceb1: mov    -0x38(%rbp),%r14
  0x000000011c05ceb5: movzwl 0x1(%r13),%ecx
  0x000000011c05ceba: mov    -0x30(%rbp),%rbx
  0x000000011c05cebe: shl    $0x2,%ecx
  0x000000011c05cec1: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05cec5: and    $0xff,%ebx
  0x000000011c05cecb: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05cecf: movzbl 0x5(%r13),%ebx
  0x000000011c05ced4: add    $0x5,%r13
  0x000000011c05ced8: movabs $0x1109d6220,%r10
  0x000000011c05cee2: jmpq   *(%r10,%rbx,8)
  0x000000011c05cee6: mov    -0x10(%rbp),%rsp
  0x000000011c05ceea: movq   $0x0,-0x10(%rbp)
  0x000000011c05cef2: mov    -0x40(%rbp),%r13
  0x000000011c05cef6: mov    -0x38(%rbp),%r14
  0x000000011c05cefa: movzwl 0x1(%r13),%ecx
  0x000000011c05ceff: mov    -0x30(%rbp),%rbx
  0x000000011c05cf03: shl    $0x2,%ecx
  0x000000011c05cf06: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05cf0a: and    $0xff,%ebx
  0x000000011c05cf10: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05cf14: movzbl 0x5(%r13),%ebx
  0x000000011c05cf19: add    $0x5,%r13
  0x000000011c05cf1d: movabs $0x1109d6a20,%r10
  0x000000011c05cf27: jmpq   *(%r10,%rbx,8)
  0x000000011c05cf2b: mov    -0x10(%rbp),%rsp
  0x000000011c05cf2f: movq   $0x0,-0x10(%rbp)
  0x000000011c05cf37: mov    -0x40(%rbp),%r13
  0x000000011c05cf3b: mov    -0x38(%rbp),%r14
  0x000000011c05cf3f: movzwl 0x1(%r13),%ecx
  0x000000011c05cf44: mov    -0x30(%rbp),%rbx
  0x000000011c05cf48: shl    $0x2,%ecx
  0x000000011c05cf4b: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05cf4f: and    $0xff,%ebx
  0x000000011c05cf55: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05cf59: movzbl 0x5(%r13),%ebx
  0x000000011c05cf5e: add    $0x5,%r13
  0x000000011c05cf62: movabs $0x1109d7a20,%r10
  0x000000011c05cf6c: jmpq   *(%r10,%rbx,8)
  0x000000011c05cf70: add    %al,(%rax)
  0x000000011c05cf72: add    %al,(%rax)
  0x000000011c05cf74: add    %al,(%rax)
  0x000000011c05cf76: add    %al,(%rax)
  0x000000011c05cf78: add    %al,(%rax)
  0x000000011c05cf7a: add    %al,(%rax)
  0x000000011c05cf7c: add    %al,(%rax)
  0x000000011c05cf7e: add    %al,(%rax)

----------------------------------------------------------------------
invoke return entry points  [0x000000011c05cfa0, 0x000000011c05d7c0]  2080 bytes

  0x000000011c05cfa0: mov    -0x10(%rbp),%rsp
  0x000000011c05cfa4: movq   $0x0,-0x10(%rbp)
  0x000000011c05cfac: mov    -0x40(%rbp),%r13
  0x000000011c05cfb0: mov    -0x38(%rbp),%r14
  0x000000011c05cfb4: movzwl 0x1(%r13),%ecx
  0x000000011c05cfb9: mov    -0x30(%rbp),%rbx
  0x000000011c05cfbd: shl    $0x2,%ecx
  0x000000011c05cfc0: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05cfc4: and    $0xff,%ebx
  0x000000011c05cfca: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05cfce: movzbl 0x3(%r13),%ebx
  0x000000011c05cfd3: add    $0x3,%r13
  0x000000011c05cfd7: movabs $0x1109d5220,%r10
  0x000000011c05cfe1: jmpq   *(%r10,%rbx,8)
  0x000000011c05cfe5: mov    -0x10(%rbp),%rsp
  0x000000011c05cfe9: movq   $0x0,-0x10(%rbp)
  0x000000011c05cff1: mov    -0x40(%rbp),%r13
  0x000000011c05cff5: mov    -0x38(%rbp),%r14
  0x000000011c05cff9: movzwl 0x1(%r13),%ecx
  0x000000011c05cffe: mov    -0x30(%rbp),%rbx
  0x000000011c05d002: shl    $0x2,%ecx
  0x000000011c05d005: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05d009: and    $0xff,%ebx
  0x000000011c05d00f: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05d013: movzbl 0x5(%r13),%ebx
  0x000000011c05d018: add    $0x5,%r13
  0x000000011c05d01c: movabs $0x1109d5220,%r10
  0x000000011c05d026: jmpq   *(%r10,%rbx,8)
  0x000000011c05d02a: mov    -0x10(%rbp),%rsp
  0x000000011c05d02e: movq   $0x0,-0x10(%rbp)
  0x000000011c05d036: mov    -0x40(%rbp),%r13
  0x000000011c05d03a: mov    -0x38(%rbp),%r14
  0x000000011c05d03e: mov    0x1(%r13),%ecx
  0x000000011c05d042: not    %ecx
  0x000000011c05d044: mov    -0x30(%rbp),%rbx
  0x000000011c05d048: shl    $0x2,%ecx
  0x000000011c05d04b: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05d04f: and    $0xff,%ebx
  0x000000011c05d055: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05d059: movzbl 0x5(%r13),%ebx
  0x000000011c05d05e: add    $0x5,%r13
  0x000000011c05d062: movabs $0x1109d5220,%r10
  0x000000011c05d06c: jmpq   *(%r10,%rbx,8)
  0x000000011c05d070: mov    -0x10(%rbp),%rsp
  0x000000011c05d074: movq   $0x0,-0x10(%rbp)
  0x000000011c05d07c: mov    -0x40(%rbp),%r13
  0x000000011c05d080: mov    -0x38(%rbp),%r14
  0x000000011c05d084: movzwl 0x1(%r13),%ecx
  0x000000011c05d089: mov    -0x30(%rbp),%rbx
  0x000000011c05d08d: shl    $0x2,%ecx
  0x000000011c05d090: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05d094: and    $0xff,%ebx
  0x000000011c05d09a: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05d09e: movzbl 0x3(%r13),%ebx
  0x000000011c05d0a3: add    $0x3,%r13
  0x000000011c05d0a7: movabs $0x1109d5220,%r10
  0x000000011c05d0b1: jmpq   *(%r10,%rbx,8)
  0x000000011c05d0b5: mov    -0x10(%rbp),%rsp
  0x000000011c05d0b9: movq   $0x0,-0x10(%rbp)
  0x000000011c05d0c1: mov    -0x40(%rbp),%r13
  0x000000011c05d0c5: mov    -0x38(%rbp),%r14
  0x000000011c05d0c9: movzwl 0x1(%r13),%ecx
  0x000000011c05d0ce: mov    -0x30(%rbp),%rbx
  0x000000011c05d0d2: shl    $0x2,%ecx
  0x000000011c05d0d5: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05d0d9: and    $0xff,%ebx
  0x000000011c05d0df: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05d0e3: movzbl 0x5(%r13),%ebx
  0x000000011c05d0e8: add    $0x5,%r13
  0x000000011c05d0ec: movabs $0x1109d5220,%r10
  0x000000011c05d0f6: jmpq   *(%r10,%rbx,8)
  0x000000011c05d0fa: mov    -0x10(%rbp),%rsp
  0x000000011c05d0fe: movq   $0x0,-0x10(%rbp)
  0x000000011c05d106: mov    -0x40(%rbp),%r13
  0x000000011c05d10a: mov    -0x38(%rbp),%r14
  0x000000011c05d10e: mov    0x1(%r13),%ecx
  0x000000011c05d112: not    %ecx
  0x000000011c05d114: mov    -0x30(%rbp),%rbx
  0x000000011c05d118: shl    $0x2,%ecx
  0x000000011c05d11b: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05d11f: and    $0xff,%ebx
  0x000000011c05d125: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05d129: movzbl 0x5(%r13),%ebx
  0x000000011c05d12e: add    $0x5,%r13
  0x000000011c05d132: movabs $0x1109d5220,%r10
  0x000000011c05d13c: jmpq   *(%r10,%rbx,8)
  0x000000011c05d140: mov    -0x10(%rbp),%rsp
  0x000000011c05d144: movq   $0x0,-0x10(%rbp)
  0x000000011c05d14c: mov    -0x40(%rbp),%r13
  0x000000011c05d150: mov    -0x38(%rbp),%r14
  0x000000011c05d154: movzwl 0x1(%r13),%ecx
  0x000000011c05d159: mov    -0x30(%rbp),%rbx
  0x000000011c05d15d: shl    $0x2,%ecx
  0x000000011c05d160: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05d164: and    $0xff,%ebx
  0x000000011c05d16a: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05d16e: movzbl 0x3(%r13),%ebx
  0x000000011c05d173: add    $0x3,%r13
  0x000000011c05d177: movabs $0x1109d5220,%r10
  0x000000011c05d181: jmpq   *(%r10,%rbx,8)
  0x000000011c05d185: mov    -0x10(%rbp),%rsp
  0x000000011c05d189: movq   $0x0,-0x10(%rbp)
  0x000000011c05d191: mov    -0x40(%rbp),%r13
  0x000000011c05d195: mov    -0x38(%rbp),%r14
  0x000000011c05d199: movzwl 0x1(%r13),%ecx
  0x000000011c05d19e: mov    -0x30(%rbp),%rbx
  0x000000011c05d1a2: shl    $0x2,%ecx
  0x000000011c05d1a5: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05d1a9: and    $0xff,%ebx
  0x000000011c05d1af: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05d1b3: movzbl 0x5(%r13),%ebx
  0x000000011c05d1b8: add    $0x5,%r13
  0x000000011c05d1bc: movabs $0x1109d5220,%r10
  0x000000011c05d1c6: jmpq   *(%r10,%rbx,8)
  0x000000011c05d1ca: mov    -0x10(%rbp),%rsp
  0x000000011c05d1ce: movq   $0x0,-0x10(%rbp)
  0x000000011c05d1d6: mov    -0x40(%rbp),%r13
  0x000000011c05d1da: mov    -0x38(%rbp),%r14
  0x000000011c05d1de: mov    0x1(%r13),%ecx
  0x000000011c05d1e2: not    %ecx
  0x000000011c05d1e4: mov    -0x30(%rbp),%rbx
  0x000000011c05d1e8: shl    $0x2,%ecx
  0x000000011c05d1eb: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05d1ef: and    $0xff,%ebx
  0x000000011c05d1f5: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05d1f9: movzbl 0x5(%r13),%ebx
  0x000000011c05d1fe: add    $0x5,%r13
  0x000000011c05d202: movabs $0x1109d5220,%r10
  0x000000011c05d20c: jmpq   *(%r10,%rbx,8)
  0x000000011c05d210: mov    -0x10(%rbp),%rsp
  0x000000011c05d214: movq   $0x0,-0x10(%rbp)
  0x000000011c05d21c: mov    -0x40(%rbp),%r13
  0x000000011c05d220: mov    -0x38(%rbp),%r14
  0x000000011c05d224: movzwl 0x1(%r13),%ecx
  0x000000011c05d229: mov    -0x30(%rbp),%rbx
  0x000000011c05d22d: shl    $0x2,%ecx
  0x000000011c05d230: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05d234: and    $0xff,%ebx
  0x000000011c05d23a: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05d23e: movzbl 0x3(%r13),%ebx
  0x000000011c05d243: add    $0x3,%r13
  0x000000011c05d247: movabs $0x1109d5220,%r10
  0x000000011c05d251: jmpq   *(%r10,%rbx,8)
  0x000000011c05d255: mov    -0x10(%rbp),%rsp
  0x000000011c05d259: movq   $0x0,-0x10(%rbp)
  0x000000011c05d261: mov    -0x40(%rbp),%r13
  0x000000011c05d265: mov    -0x38(%rbp),%r14
  0x000000011c05d269: movzwl 0x1(%r13),%ecx
  0x000000011c05d26e: mov    -0x30(%rbp),%rbx
  0x000000011c05d272: shl    $0x2,%ecx
  0x000000011c05d275: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05d279: and    $0xff,%ebx
  0x000000011c05d27f: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05d283: movzbl 0x5(%r13),%ebx
  0x000000011c05d288: add    $0x5,%r13
  0x000000011c05d28c: movabs $0x1109d5220,%r10
  0x000000011c05d296: jmpq   *(%r10,%rbx,8)
  0x000000011c05d29a: mov    -0x10(%rbp),%rsp
  0x000000011c05d29e: movq   $0x0,-0x10(%rbp)
  0x000000011c05d2a6: mov    -0x40(%rbp),%r13
  0x000000011c05d2aa: mov    -0x38(%rbp),%r14
  0x000000011c05d2ae: mov    0x1(%r13),%ecx
  0x000000011c05d2b2: not    %ecx
  0x000000011c05d2b4: mov    -0x30(%rbp),%rbx
  0x000000011c05d2b8: shl    $0x2,%ecx
  0x000000011c05d2bb: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05d2bf: and    $0xff,%ebx
  0x000000011c05d2c5: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05d2c9: movzbl 0x5(%r13),%ebx
  0x000000011c05d2ce: add    $0x5,%r13
  0x000000011c05d2d2: movabs $0x1109d5220,%r10
  0x000000011c05d2dc: jmpq   *(%r10,%rbx,8)
  0x000000011c05d2e0: mov    -0x10(%rbp),%rsp
  0x000000011c05d2e4: movq   $0x0,-0x10(%rbp)
  0x000000011c05d2ec: mov    -0x40(%rbp),%r13
  0x000000011c05d2f0: mov    -0x38(%rbp),%r14
  0x000000011c05d2f4: movzwl 0x1(%r13),%ecx
  0x000000011c05d2f9: mov    -0x30(%rbp),%rbx
  0x000000011c05d2fd: shl    $0x2,%ecx
  0x000000011c05d300: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05d304: and    $0xff,%ebx
  0x000000011c05d30a: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05d30e: movzbl 0x3(%r13),%ebx
  0x000000011c05d313: add    $0x3,%r13
  0x000000011c05d317: movabs $0x1109d5220,%r10
  0x000000011c05d321: jmpq   *(%r10,%rbx,8)
  0x000000011c05d325: mov    -0x10(%rbp),%rsp
  0x000000011c05d329: movq   $0x0,-0x10(%rbp)
  0x000000011c05d331: mov    -0x40(%rbp),%r13
  0x000000011c05d335: mov    -0x38(%rbp),%r14
  0x000000011c05d339: movzwl 0x1(%r13),%ecx
  0x000000011c05d33e: mov    -0x30(%rbp),%rbx
  0x000000011c05d342: shl    $0x2,%ecx
  0x000000011c05d345: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05d349: and    $0xff,%ebx
  0x000000011c05d34f: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05d353: movzbl 0x5(%r13),%ebx
  0x000000011c05d358: add    $0x5,%r13
  0x000000011c05d35c: movabs $0x1109d5220,%r10
  0x000000011c05d366: jmpq   *(%r10,%rbx,8)
  0x000000011c05d36a: mov    -0x10(%rbp),%rsp
  0x000000011c05d36e: movq   $0x0,-0x10(%rbp)
  0x000000011c05d376: mov    -0x40(%rbp),%r13
  0x000000011c05d37a: mov    -0x38(%rbp),%r14
  0x000000011c05d37e: mov    0x1(%r13),%ecx
  0x000000011c05d382: not    %ecx
  0x000000011c05d384: mov    -0x30(%rbp),%rbx
  0x000000011c05d388: shl    $0x2,%ecx
  0x000000011c05d38b: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05d38f: and    $0xff,%ebx
  0x000000011c05d395: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05d399: movzbl 0x5(%r13),%ebx
  0x000000011c05d39e: add    $0x5,%r13
  0x000000011c05d3a2: movabs $0x1109d5220,%r10
  0x000000011c05d3ac: jmpq   *(%r10,%rbx,8)
  0x000000011c05d3b0: mov    -0x10(%rbp),%rsp
  0x000000011c05d3b4: movq   $0x0,-0x10(%rbp)
  0x000000011c05d3bc: mov    -0x40(%rbp),%r13
  0x000000011c05d3c0: mov    -0x38(%rbp),%r14
  0x000000011c05d3c4: movzwl 0x1(%r13),%ecx
  0x000000011c05d3c9: mov    -0x30(%rbp),%rbx
  0x000000011c05d3cd: shl    $0x2,%ecx
  0x000000011c05d3d0: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05d3d4: and    $0xff,%ebx
  0x000000011c05d3da: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05d3de: movzbl 0x3(%r13),%ebx
  0x000000011c05d3e3: add    $0x3,%r13
  0x000000011c05d3e7: movabs $0x1109d5a20,%r10
  0x000000011c05d3f1: jmpq   *(%r10,%rbx,8)
  0x000000011c05d3f5: mov    -0x10(%rbp),%rsp
  0x000000011c05d3f9: movq   $0x0,-0x10(%rbp)
  0x000000011c05d401: mov    -0x40(%rbp),%r13
  0x000000011c05d405: mov    -0x38(%rbp),%r14
  0x000000011c05d409: movzwl 0x1(%r13),%ecx
  0x000000011c05d40e: mov    -0x30(%rbp),%rbx
  0x000000011c05d412: shl    $0x2,%ecx
  0x000000011c05d415: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05d419: and    $0xff,%ebx
  0x000000011c05d41f: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05d423: movzbl 0x5(%r13),%ebx
  0x000000011c05d428: add    $0x5,%r13
  0x000000011c05d42c: movabs $0x1109d5a20,%r10
  0x000000011c05d436: jmpq   *(%r10,%rbx,8)
  0x000000011c05d43a: mov    -0x10(%rbp),%rsp
  0x000000011c05d43e: movq   $0x0,-0x10(%rbp)
  0x000000011c05d446: mov    -0x40(%rbp),%r13
  0x000000011c05d44a: mov    -0x38(%rbp),%r14
  0x000000011c05d44e: mov    0x1(%r13),%ecx
  0x000000011c05d452: not    %ecx
  0x000000011c05d454: mov    -0x30(%rbp),%rbx
  0x000000011c05d458: shl    $0x2,%ecx
  0x000000011c05d45b: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05d45f: and    $0xff,%ebx
  0x000000011c05d465: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05d469: movzbl 0x5(%r13),%ebx
  0x000000011c05d46e: add    $0x5,%r13
  0x000000011c05d472: movabs $0x1109d5a20,%r10
  0x000000011c05d47c: jmpq   *(%r10,%rbx,8)
  0x000000011c05d480: mov    -0x10(%rbp),%rsp
  0x000000011c05d484: movq   $0x0,-0x10(%rbp)
  0x000000011c05d48c: mov    -0x40(%rbp),%r13
  0x000000011c05d490: mov    -0x38(%rbp),%r14
  0x000000011c05d494: movzwl 0x1(%r13),%ecx
  0x000000011c05d499: mov    -0x30(%rbp),%rbx
  0x000000011c05d49d: shl    $0x2,%ecx
  0x000000011c05d4a0: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05d4a4: and    $0xff,%ebx
  0x000000011c05d4aa: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05d4ae: movzbl 0x3(%r13),%ebx
  0x000000011c05d4b3: add    $0x3,%r13
  0x000000011c05d4b7: movabs $0x1109d6220,%r10
  0x000000011c05d4c1: jmpq   *(%r10,%rbx,8)
  0x000000011c05d4c5: mov    -0x10(%rbp),%rsp
  0x000000011c05d4c9: movq   $0x0,-0x10(%rbp)
  0x000000011c05d4d1: mov    -0x40(%rbp),%r13
  0x000000011c05d4d5: mov    -0x38(%rbp),%r14
  0x000000011c05d4d9: movzwl 0x1(%r13),%ecx
  0x000000011c05d4de: mov    -0x30(%rbp),%rbx
  0x000000011c05d4e2: shl    $0x2,%ecx
  0x000000011c05d4e5: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05d4e9: and    $0xff,%ebx
  0x000000011c05d4ef: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05d4f3: movzbl 0x5(%r13),%ebx
  0x000000011c05d4f8: add    $0x5,%r13
  0x000000011c05d4fc: movabs $0x1109d6220,%r10
  0x000000011c05d506: jmpq   *(%r10,%rbx,8)
  0x000000011c05d50a: mov    -0x10(%rbp),%rsp
  0x000000011c05d50e: movq   $0x0,-0x10(%rbp)
  0x000000011c05d516: mov    -0x40(%rbp),%r13
  0x000000011c05d51a: mov    -0x38(%rbp),%r14
  0x000000011c05d51e: mov    0x1(%r13),%ecx
  0x000000011c05d522: not    %ecx
  0x000000011c05d524: mov    -0x30(%rbp),%rbx
  0x000000011c05d528: shl    $0x2,%ecx
  0x000000011c05d52b: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05d52f: and    $0xff,%ebx
  0x000000011c05d535: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05d539: movzbl 0x5(%r13),%ebx
  0x000000011c05d53e: add    $0x5,%r13
  0x000000011c05d542: movabs $0x1109d6220,%r10
  0x000000011c05d54c: jmpq   *(%r10,%rbx,8)
  0x000000011c05d550: mov    -0x10(%rbp),%rsp
  0x000000011c05d554: movq   $0x0,-0x10(%rbp)
  0x000000011c05d55c: mov    -0x40(%rbp),%r13
  0x000000011c05d560: mov    -0x38(%rbp),%r14
  0x000000011c05d564: movzwl 0x1(%r13),%ecx
  0x000000011c05d569: mov    -0x30(%rbp),%rbx
  0x000000011c05d56d: shl    $0x2,%ecx
  0x000000011c05d570: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05d574: and    $0xff,%ebx
  0x000000011c05d57a: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05d57e: movzbl 0x3(%r13),%ebx
  0x000000011c05d583: add    $0x3,%r13
  0x000000011c05d587: movabs $0x1109d6a20,%r10
  0x000000011c05d591: jmpq   *(%r10,%rbx,8)
  0x000000011c05d595: mov    -0x10(%rbp),%rsp
  0x000000011c05d599: movq   $0x0,-0x10(%rbp)
  0x000000011c05d5a1: mov    -0x40(%rbp),%r13
  0x000000011c05d5a5: mov    -0x38(%rbp),%r14
  0x000000011c05d5a9: movzwl 0x1(%r13),%ecx
  0x000000011c05d5ae: mov    -0x30(%rbp),%rbx
  0x000000011c05d5b2: shl    $0x2,%ecx
  0x000000011c05d5b5: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05d5b9: and    $0xff,%ebx
  0x000000011c05d5bf: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05d5c3: movzbl 0x5(%r13),%ebx
  0x000000011c05d5c8: add    $0x5,%r13
  0x000000011c05d5cc: movabs $0x1109d6a20,%r10
  0x000000011c05d5d6: jmpq   *(%r10,%rbx,8)
  0x000000011c05d5da: mov    -0x10(%rbp),%rsp
  0x000000011c05d5de: movq   $0x0,-0x10(%rbp)
  0x000000011c05d5e6: mov    -0x40(%rbp),%r13
  0x000000011c05d5ea: mov    -0x38(%rbp),%r14
  0x000000011c05d5ee: mov    0x1(%r13),%ecx
  0x000000011c05d5f2: not    %ecx
  0x000000011c05d5f4: mov    -0x30(%rbp),%rbx
  0x000000011c05d5f8: shl    $0x2,%ecx
  0x000000011c05d5fb: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05d5ff: and    $0xff,%ebx
  0x000000011c05d605: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05d609: movzbl 0x5(%r13),%ebx
  0x000000011c05d60e: add    $0x5,%r13
  0x000000011c05d612: movabs $0x1109d6a20,%r10
  0x000000011c05d61c: jmpq   *(%r10,%rbx,8)
  0x000000011c05d620: mov    -0x10(%rbp),%rsp
  0x000000011c05d624: movq   $0x0,-0x10(%rbp)
  0x000000011c05d62c: mov    -0x40(%rbp),%r13
  0x000000011c05d630: mov    -0x38(%rbp),%r14
  0x000000011c05d634: movzwl 0x1(%r13),%ecx
  0x000000011c05d639: mov    -0x30(%rbp),%rbx
  0x000000011c05d63d: shl    $0x2,%ecx
  0x000000011c05d640: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05d644: and    $0xff,%ebx
  0x000000011c05d64a: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05d64e: movzbl 0x3(%r13),%ebx
  0x000000011c05d653: add    $0x3,%r13
  0x000000011c05d657: movabs $0x1109d7220,%r10
  0x000000011c05d661: jmpq   *(%r10,%rbx,8)
  0x000000011c05d665: mov    -0x10(%rbp),%rsp
  0x000000011c05d669: movq   $0x0,-0x10(%rbp)
  0x000000011c05d671: mov    -0x40(%rbp),%r13
  0x000000011c05d675: mov    -0x38(%rbp),%r14
  0x000000011c05d679: movzwl 0x1(%r13),%ecx
  0x000000011c05d67e: mov    -0x30(%rbp),%rbx
  0x000000011c05d682: shl    $0x2,%ecx
  0x000000011c05d685: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05d689: and    $0xff,%ebx
  0x000000011c05d68f: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05d693: movzbl 0x5(%r13),%ebx
  0x000000011c05d698: add    $0x5,%r13
  0x000000011c05d69c: movabs $0x1109d7220,%r10
  0x000000011c05d6a6: jmpq   *(%r10,%rbx,8)
  0x000000011c05d6aa: mov    -0x10(%rbp),%rsp
  0x000000011c05d6ae: movq   $0x0,-0x10(%rbp)
  0x000000011c05d6b6: mov    -0x40(%rbp),%r13
  0x000000011c05d6ba: mov    -0x38(%rbp),%r14
  0x000000011c05d6be: mov    0x1(%r13),%ecx
  0x000000011c05d6c2: not    %ecx
  0x000000011c05d6c4: mov    -0x30(%rbp),%rbx
  0x000000011c05d6c8: shl    $0x2,%ecx
  0x000000011c05d6cb: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05d6cf: and    $0xff,%ebx
  0x000000011c05d6d5: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05d6d9: movzbl 0x5(%r13),%ebx
  0x000000011c05d6de: add    $0x5,%r13
  0x000000011c05d6e2: movabs $0x1109d7220,%r10
  0x000000011c05d6ec: jmpq   *(%r10,%rbx,8)
  0x000000011c05d6f0: mov    -0x10(%rbp),%rsp
  0x000000011c05d6f4: movq   $0x0,-0x10(%rbp)
  0x000000011c05d6fc: mov    -0x40(%rbp),%r13
  0x000000011c05d700: mov    -0x38(%rbp),%r14
  0x000000011c05d704: movzwl 0x1(%r13),%ecx
  0x000000011c05d709: mov    -0x30(%rbp),%rbx
  0x000000011c05d70d: shl    $0x2,%ecx
  0x000000011c05d710: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05d714: and    $0xff,%ebx
  0x000000011c05d71a: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05d71e: movzbl 0x3(%r13),%ebx
  0x000000011c05d723: add    $0x3,%r13
  0x000000011c05d727: movabs $0x1109d7a20,%r10
  0x000000011c05d731: jmpq   *(%r10,%rbx,8)
  0x000000011c05d735: mov    -0x10(%rbp),%rsp
  0x000000011c05d739: movq   $0x0,-0x10(%rbp)
  0x000000011c05d741: mov    -0x40(%rbp),%r13
  0x000000011c05d745: mov    -0x38(%rbp),%r14
  0x000000011c05d749: movzwl 0x1(%r13),%ecx
  0x000000011c05d74e: mov    -0x30(%rbp),%rbx
  0x000000011c05d752: shl    $0x2,%ecx
  0x000000011c05d755: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05d759: and    $0xff,%ebx
  0x000000011c05d75f: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05d763: movzbl 0x5(%r13),%ebx
  0x000000011c05d768: add    $0x5,%r13
  0x000000011c05d76c: movabs $0x1109d7a20,%r10
  0x000000011c05d776: jmpq   *(%r10,%rbx,8)
  0x000000011c05d77a: mov    -0x10(%rbp),%rsp
  0x000000011c05d77e: movq   $0x0,-0x10(%rbp)
  0x000000011c05d786: mov    -0x40(%rbp),%r13
  0x000000011c05d78a: mov    -0x38(%rbp),%r14
  0x000000011c05d78e: mov    0x1(%r13),%ecx
  0x000000011c05d792: not    %ecx
  0x000000011c05d794: mov    -0x30(%rbp),%rbx
  0x000000011c05d798: shl    $0x2,%ecx
  0x000000011c05d79b: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000011c05d79f: and    $0xff,%ebx
  0x000000011c05d7a5: lea    (%rsp,%rbx,8),%rsp
  0x000000011c05d7a9: movzbl 0x5(%r13),%ebx
  0x000000011c05d7ae: add    $0x5,%r13
  0x000000011c05d7b2: movabs $0x1109d7a20,%r10
  0x000000011c05d7bc: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
earlyret entry points  [0x000000011c05d7e0, 0x000000011c05fec0]  9952 bytes

  0x000000011c05d7e0: mov    -0x40(%rbp),%r13
  0x000000011c05d7e4: mov    -0x38(%rbp),%r14
  0x000000011c05d7e8: mov    -0x48(%rbp),%rsp
  0x000000011c05d7ec: movq   $0x0,-0x10(%rbp)
  0x000000011c05d7f4: mov    0x488(%r15),%rcx
  0x000000011c05d7fb: mov    0x80(%rcx),%eax
  0x000000011c05d801: movl   $0xb,0x78(%rcx)
  0x000000011c05d808: movl   $0x0,0x80(%rcx)
  0x000000011c05d812: movl   $0xb,0x78(%rcx)
  0x000000011c05d819: movabs $0x0,%r10
  0x000000011c05d823: mov    %r10,0x80(%rcx)
  0x000000011c05d82a: mov    0x488(%r15),%rcx
  0x000000011c05d831: movl   $0x0,0x74(%rcx)
  0x000000011c05d838: mov    0x3dd(%r15),%bl
  0x000000011c05d83f: movb   $0x0,0x3dd(%r15)
  0x000000011c05d847: mov    -0x18(%rbp),%rcx
  0x000000011c05d84b: mov    0x20(%rcx),%ecx
  0x000000011c05d84e: test   $0x20,%ecx
  0x000000011c05d854: je     0x000000011c05d967
  0x000000011c05d85a: test   $0xff,%bl
  0x000000011c05d85d: jne    0x000000011c05da7a
  0x000000011c05d863: push   %rax
  0x000000011c05d864: lea    -0x58(%rbp),%rsi
  0x000000011c05d868: mov    0x8(%rsi),%rax
  0x000000011c05d86c: test   %rax,%rax
  0x000000011c05d86f: jne    0x000000011c05d881
  0x000000011c05d875: mov    (%rsp),%eax
  0x000000011c05d878: add    $0x8,%rsp
  0x000000011c05d87c: jmpq   0x000000011c05d967
  0x000000011c05d881: mov    %r13,-0x40(%rbp)
  0x000000011c05d885: lea    (%rsi),%rax
  0x000000011c05d888: mov    0x8(%rsi),%rcx
  0x000000011c05d88c: movq   $0x0,0x8(%rsi)
  0x000000011c05d894: mov    (%rcx),%rdx
  0x000000011c05d897: and    $0x7,%rdx
  0x000000011c05d89b: cmp    $0x5,%rdx
  0x000000011c05d89f: je     0x000000011c05d95c
  0x000000011c05d8a5: mov    (%rax),%rdx
  0x000000011c05d8a8: test   %rdx,%rdx
  0x000000011c05d8ab: je     0x000000011c05d95c
  0x000000011c05d8b1: lock cmpxchg %rdx,(%rcx)
  0x000000011c05d8b6: je     0x000000011c05d95c
  0x000000011c05d8bc: mov    %rcx,0x8(%rsi)
  0x000000011c05d8c0: callq  0x000000011c05d8ca
  0x000000011c05d8c5: jmpq   0x000000011c05d95c
  0x000000011c05d8ca: lea    0x8(%rsp),%rax
  0x000000011c05d8cf: mov    %r13,-0x40(%rbp)
  0x000000011c05d8d3: mov    %r15,%rdi
  0x000000011c05d8d6: vzeroupper 
  0x000000011c05d8d9: mov    %rbp,0x330(%r15)
  0x000000011c05d8e0: mov    %rax,0x320(%r15)
  0x000000011c05d8e7: test   $0xf,%esp
  0x000000011c05d8ed: je     0x000000011c05d905
  0x000000011c05d8f3: sub    $0x8,%rsp
  0x000000011c05d8f7: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05d8fc: add    $0x8,%rsp
  0x000000011c05d900: jmpq   0x000000011c05d90a
  0x000000011c05d905: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05d90a: movabs $0x0,%r10
  0x000000011c05d914: mov    %r10,0x320(%r15)
  0x000000011c05d91b: movabs $0x0,%r10
  0x000000011c05d925: mov    %r10,0x330(%r15)
  0x000000011c05d92c: movabs $0x0,%r10
  0x000000011c05d936: mov    %r10,0x328(%r15)
  0x000000011c05d93d: vzeroupper 
  0x000000011c05d940: cmpq   $0x0,0x8(%r15)
  0x000000011c05d948: je     0x000000011c05d953
  0x000000011c05d94e: jmpq   0x000000011c054780
  0x000000011c05d953: mov    -0x40(%rbp),%r13
  0x000000011c05d957: mov    -0x38(%rbp),%r14
  0x000000011c05d95b: retq   
  0x000000011c05d95c: mov    -0x40(%rbp),%r13
  0x000000011c05d960: mov    (%rsp),%eax
  0x000000011c05d963: add    $0x8,%rsp
  0x000000011c05d967: mov    -0x48(%rbp),%rsi
  0x000000011c05d96b: lea    -0x48(%rbp),%rbx
  0x000000011c05d96f: jmpq   0x000000011c05da75
  0x000000011c05d974: push   %rax
  0x000000011c05d975: mov    %rsi,%rsi
  0x000000011c05d978: mov    %r13,-0x40(%rbp)
  0x000000011c05d97c: lea    (%rsi),%rax
  0x000000011c05d97f: mov    0x8(%rsi),%rcx
  0x000000011c05d983: movq   $0x0,0x8(%rsi)
  0x000000011c05d98b: mov    (%rcx),%rdx
  0x000000011c05d98e: and    $0x7,%rdx
  0x000000011c05d992: cmp    $0x5,%rdx
  0x000000011c05d996: je     0x000000011c05da53
  0x000000011c05d99c: mov    (%rax),%rdx
  0x000000011c05d99f: test   %rdx,%rdx
  0x000000011c05d9a2: je     0x000000011c05da53
  0x000000011c05d9a8: lock cmpxchg %rdx,(%rcx)
  0x000000011c05d9ad: je     0x000000011c05da53
  0x000000011c05d9b3: mov    %rcx,0x8(%rsi)
  0x000000011c05d9b7: callq  0x000000011c05d9c1
  0x000000011c05d9bc: jmpq   0x000000011c05da53
  0x000000011c05d9c1: lea    0x8(%rsp),%rax
  0x000000011c05d9c6: mov    %r13,-0x40(%rbp)
  0x000000011c05d9ca: mov    %r15,%rdi
  0x000000011c05d9cd: vzeroupper 
  0x000000011c05d9d0: mov    %rbp,0x330(%r15)
  0x000000011c05d9d7: mov    %rax,0x320(%r15)
  0x000000011c05d9de: test   $0xf,%esp
  0x000000011c05d9e4: je     0x000000011c05d9fc
  0x000000011c05d9ea: sub    $0x8,%rsp
  0x000000011c05d9ee: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05d9f3: add    $0x8,%rsp
  0x000000011c05d9f7: jmpq   0x000000011c05da01
  0x000000011c05d9fc: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05da01: movabs $0x0,%r10
  0x000000011c05da0b: mov    %r10,0x320(%r15)
  0x000000011c05da12: movabs $0x0,%r10
  0x000000011c05da1c: mov    %r10,0x330(%r15)
  0x000000011c05da23: movabs $0x0,%r10
  0x000000011c05da2d: mov    %r10,0x328(%r15)
  0x000000011c05da34: vzeroupper 
  0x000000011c05da37: cmpq   $0x0,0x8(%r15)
  0x000000011c05da3f: je     0x000000011c05da4a
  0x000000011c05da45: jmpq   0x000000011c054780
  0x000000011c05da4a: mov    -0x40(%rbp),%r13
  0x000000011c05da4e: mov    -0x38(%rbp),%r14
  0x000000011c05da52: retq   
  0x000000011c05da53: mov    -0x40(%rbp),%r13
  0x000000011c05da57: mov    (%rsp),%eax
  0x000000011c05da5a: add    $0x8,%rsp
  0x000000011c05da5e: jmpq   0x000000011c05d967
  0x000000011c05da63: cmpq   $0x0,0x8(%rsi)
  0x000000011c05da6b: jne    0x000000011c05d974
  0x000000011c05da71: add    $0x10,%rsi
  0x000000011c05da75: cmp    %rbx,%rsi
  0x000000011c05da78: jne    0x000000011c05da63
  0x000000011c05da7a: cmpb   $0x0,-0xb6a39a7(%rip)        # 0x00000001109ba0da = DTraceMethodProbes
  0x000000011c05da81: je     0x000000011c05dab9
  0x000000011c05da87: push   %rax
  0x000000011c05da88: mov    -0x18(%rbp),%rsi
  0x000000011c05da8c: mov    %r15,%rdi
  0x000000011c05da8f: test   $0xf,%esp
  0x000000011c05da95: je     0x000000011c05daad
  0x000000011c05da9b: sub    $0x8,%rsp
  0x000000011c05da9f: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c05daa4: add    $0x8,%rsp
  0x000000011c05daa8: jmpq   0x000000011c05dab2
  0x000000011c05daad: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c05dab2: mov    (%rsp),%eax
  0x000000011c05dab5: add    $0x8,%rsp
  0x000000011c05dab9: mov    -0x8(%rbp),%rbx
  0x000000011c05dabd: cmpl   $0x3,0x408(%r15)
  0x000000011c05dac8: je     0x000000011c05dbb1
  0x000000011c05dace: cmp    0x418(%r15),%rbx
  0x000000011c05dad5: jle    0x000000011c05dbb1
  0x000000011c05dadb: mov    %r15,%rdi
  0x000000011c05dade: test   $0xf,%esp
  0x000000011c05dae4: je     0x000000011c05dafc
  0x000000011c05daea: sub    $0x8,%rsp
  0x000000011c05daee: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c05daf3: add    $0x8,%rsp
  0x000000011c05daf7: jmpq   0x000000011c05db01
  0x000000011c05dafc: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c05db01: callq  0x000000011c05db0b
  0x000000011c05db06: jmpq   0x000000011c05db9d
  0x000000011c05db0b: lea    0x8(%rsp),%rax
  0x000000011c05db10: mov    %r13,-0x40(%rbp)
  0x000000011c05db14: mov    %r15,%rdi
  0x000000011c05db17: vzeroupper 
  0x000000011c05db1a: mov    %rbp,0x330(%r15)
  0x000000011c05db21: mov    %rax,0x320(%r15)
  0x000000011c05db28: test   $0xf,%esp
  0x000000011c05db2e: je     0x000000011c05db46
  0x000000011c05db34: sub    $0x8,%rsp
  0x000000011c05db38: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c05db3d: add    $0x8,%rsp
  0x000000011c05db41: jmpq   0x000000011c05db4b
  0x000000011c05db46: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c05db4b: movabs $0x0,%r10
  0x000000011c05db55: mov    %r10,0x320(%r15)
  0x000000011c05db5c: movabs $0x0,%r10
  0x000000011c05db66: mov    %r10,0x330(%r15)
  0x000000011c05db6d: movabs $0x0,%r10
  0x000000011c05db77: mov    %r10,0x328(%r15)
  0x000000011c05db7e: vzeroupper 
  0x000000011c05db81: cmpq   $0x0,0x8(%r15)
  0x000000011c05db89: je     0x000000011c05db94
  0x000000011c05db8f: jmpq   0x000000011c054780
  0x000000011c05db94: mov    -0x40(%rbp),%r13
  0x000000011c05db98: mov    -0x38(%rbp),%r14
  0x000000011c05db9c: retq   
  0x000000011c05db9d: movabs $0x1107f3493,%rdi
  0x000000011c05dba7: and    $0xfffffffffffffff0,%rsp
  0x000000011c05dbab: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c05dbb0: hlt    
  0x000000011c05dbb1: leaveq 
  0x000000011c05dbb2: pop    %rsi
  0x000000011c05dbb3: mov    %rbx,%rsp
  0x000000011c05dbb6: jmpq   *%rsi
  0x000000011c05dbb8: mov    -0x40(%rbp),%r13
  0x000000011c05dbbc: mov    -0x38(%rbp),%r14
  0x000000011c05dbc0: mov    -0x48(%rbp),%rsp
  0x000000011c05dbc4: movq   $0x0,-0x10(%rbp)
  0x000000011c05dbcc: mov    0x488(%r15),%rcx
  0x000000011c05dbd3: mov    0x80(%rcx),%eax
  0x000000011c05dbd9: movl   $0xb,0x78(%rcx)
  0x000000011c05dbe0: movl   $0x0,0x80(%rcx)
  0x000000011c05dbea: movl   $0xb,0x78(%rcx)
  0x000000011c05dbf1: movabs $0x0,%r10
  0x000000011c05dbfb: mov    %r10,0x80(%rcx)
  0x000000011c05dc02: mov    0x488(%r15),%rcx
  0x000000011c05dc09: movl   $0x0,0x74(%rcx)
  0x000000011c05dc10: mov    0x3dd(%r15),%bl
  0x000000011c05dc17: movb   $0x0,0x3dd(%r15)
  0x000000011c05dc1f: mov    -0x18(%rbp),%rcx
  0x000000011c05dc23: mov    0x20(%rcx),%ecx
  0x000000011c05dc26: test   $0x20,%ecx
  0x000000011c05dc2c: je     0x000000011c05dd3f
  0x000000011c05dc32: test   $0xff,%bl
  0x000000011c05dc35: jne    0x000000011c05de52
  0x000000011c05dc3b: push   %rax
  0x000000011c05dc3c: lea    -0x58(%rbp),%rsi
  0x000000011c05dc40: mov    0x8(%rsi),%rax
  0x000000011c05dc44: test   %rax,%rax
  0x000000011c05dc47: jne    0x000000011c05dc59
  0x000000011c05dc4d: mov    (%rsp),%eax
  0x000000011c05dc50: add    $0x8,%rsp
  0x000000011c05dc54: jmpq   0x000000011c05dd3f
  0x000000011c05dc59: mov    %r13,-0x40(%rbp)
  0x000000011c05dc5d: lea    (%rsi),%rax
  0x000000011c05dc60: mov    0x8(%rsi),%rcx
  0x000000011c05dc64: movq   $0x0,0x8(%rsi)
  0x000000011c05dc6c: mov    (%rcx),%rdx
  0x000000011c05dc6f: and    $0x7,%rdx
  0x000000011c05dc73: cmp    $0x5,%rdx
  0x000000011c05dc77: je     0x000000011c05dd34
  0x000000011c05dc7d: mov    (%rax),%rdx
  0x000000011c05dc80: test   %rdx,%rdx
  0x000000011c05dc83: je     0x000000011c05dd34
  0x000000011c05dc89: lock cmpxchg %rdx,(%rcx)
  0x000000011c05dc8e: je     0x000000011c05dd34
  0x000000011c05dc94: mov    %rcx,0x8(%rsi)
  0x000000011c05dc98: callq  0x000000011c05dca2
  0x000000011c05dc9d: jmpq   0x000000011c05dd34
  0x000000011c05dca2: lea    0x8(%rsp),%rax
  0x000000011c05dca7: mov    %r13,-0x40(%rbp)
  0x000000011c05dcab: mov    %r15,%rdi
  0x000000011c05dcae: vzeroupper 
  0x000000011c05dcb1: mov    %rbp,0x330(%r15)
  0x000000011c05dcb8: mov    %rax,0x320(%r15)
  0x000000011c05dcbf: test   $0xf,%esp
  0x000000011c05dcc5: je     0x000000011c05dcdd
  0x000000011c05dccb: sub    $0x8,%rsp
  0x000000011c05dccf: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05dcd4: add    $0x8,%rsp
  0x000000011c05dcd8: jmpq   0x000000011c05dce2
  0x000000011c05dcdd: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05dce2: movabs $0x0,%r10
  0x000000011c05dcec: mov    %r10,0x320(%r15)
  0x000000011c05dcf3: movabs $0x0,%r10
  0x000000011c05dcfd: mov    %r10,0x330(%r15)
  0x000000011c05dd04: movabs $0x0,%r10
  0x000000011c05dd0e: mov    %r10,0x328(%r15)
  0x000000011c05dd15: vzeroupper 
  0x000000011c05dd18: cmpq   $0x0,0x8(%r15)
  0x000000011c05dd20: je     0x000000011c05dd2b
  0x000000011c05dd26: jmpq   0x000000011c054780
  0x000000011c05dd2b: mov    -0x40(%rbp),%r13
  0x000000011c05dd2f: mov    -0x38(%rbp),%r14
  0x000000011c05dd33: retq   
  0x000000011c05dd34: mov    -0x40(%rbp),%r13
  0x000000011c05dd38: mov    (%rsp),%eax
  0x000000011c05dd3b: add    $0x8,%rsp
  0x000000011c05dd3f: mov    -0x48(%rbp),%rsi
  0x000000011c05dd43: lea    -0x48(%rbp),%rbx
  0x000000011c05dd47: jmpq   0x000000011c05de4d
  0x000000011c05dd4c: push   %rax
  0x000000011c05dd4d: mov    %rsi,%rsi
  0x000000011c05dd50: mov    %r13,-0x40(%rbp)
  0x000000011c05dd54: lea    (%rsi),%rax
  0x000000011c05dd57: mov    0x8(%rsi),%rcx
  0x000000011c05dd5b: movq   $0x0,0x8(%rsi)
  0x000000011c05dd63: mov    (%rcx),%rdx
  0x000000011c05dd66: and    $0x7,%rdx
  0x000000011c05dd6a: cmp    $0x5,%rdx
  0x000000011c05dd6e: je     0x000000011c05de2b
  0x000000011c05dd74: mov    (%rax),%rdx
  0x000000011c05dd77: test   %rdx,%rdx
  0x000000011c05dd7a: je     0x000000011c05de2b
  0x000000011c05dd80: lock cmpxchg %rdx,(%rcx)
  0x000000011c05dd85: je     0x000000011c05de2b
  0x000000011c05dd8b: mov    %rcx,0x8(%rsi)
  0x000000011c05dd8f: callq  0x000000011c05dd99
  0x000000011c05dd94: jmpq   0x000000011c05de2b
  0x000000011c05dd99: lea    0x8(%rsp),%rax
  0x000000011c05dd9e: mov    %r13,-0x40(%rbp)
  0x000000011c05dda2: mov    %r15,%rdi
  0x000000011c05dda5: vzeroupper 
  0x000000011c05dda8: mov    %rbp,0x330(%r15)
  0x000000011c05ddaf: mov    %rax,0x320(%r15)
  0x000000011c05ddb6: test   $0xf,%esp
  0x000000011c05ddbc: je     0x000000011c05ddd4
  0x000000011c05ddc2: sub    $0x8,%rsp
  0x000000011c05ddc6: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05ddcb: add    $0x8,%rsp
  0x000000011c05ddcf: jmpq   0x000000011c05ddd9
  0x000000011c05ddd4: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05ddd9: movabs $0x0,%r10
  0x000000011c05dde3: mov    %r10,0x320(%r15)
  0x000000011c05ddea: movabs $0x0,%r10
  0x000000011c05ddf4: mov    %r10,0x330(%r15)
  0x000000011c05ddfb: movabs $0x0,%r10
  0x000000011c05de05: mov    %r10,0x328(%r15)
  0x000000011c05de0c: vzeroupper 
  0x000000011c05de0f: cmpq   $0x0,0x8(%r15)
  0x000000011c05de17: je     0x000000011c05de22
  0x000000011c05de1d: jmpq   0x000000011c054780
  0x000000011c05de22: mov    -0x40(%rbp),%r13
  0x000000011c05de26: mov    -0x38(%rbp),%r14
  0x000000011c05de2a: retq   
  0x000000011c05de2b: mov    -0x40(%rbp),%r13
  0x000000011c05de2f: mov    (%rsp),%eax
  0x000000011c05de32: add    $0x8,%rsp
  0x000000011c05de36: jmpq   0x000000011c05dd3f
  0x000000011c05de3b: cmpq   $0x0,0x8(%rsi)
  0x000000011c05de43: jne    0x000000011c05dd4c
  0x000000011c05de49: add    $0x10,%rsi
  0x000000011c05de4d: cmp    %rbx,%rsi
  0x000000011c05de50: jne    0x000000011c05de3b
  0x000000011c05de52: cmpb   $0x0,-0xb6a3d7f(%rip)        # 0x00000001109ba0da = DTraceMethodProbes
  0x000000011c05de59: je     0x000000011c05de91
  0x000000011c05de5f: push   %rax
  0x000000011c05de60: mov    -0x18(%rbp),%rsi
  0x000000011c05de64: mov    %r15,%rdi
  0x000000011c05de67: test   $0xf,%esp
  0x000000011c05de6d: je     0x000000011c05de85
  0x000000011c05de73: sub    $0x8,%rsp
  0x000000011c05de77: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c05de7c: add    $0x8,%rsp
  0x000000011c05de80: jmpq   0x000000011c05de8a
  0x000000011c05de85: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c05de8a: mov    (%rsp),%eax
  0x000000011c05de8d: add    $0x8,%rsp
  0x000000011c05de91: mov    -0x8(%rbp),%rbx
  0x000000011c05de95: cmpl   $0x3,0x408(%r15)
  0x000000011c05dea0: je     0x000000011c05df89
  0x000000011c05dea6: cmp    0x418(%r15),%rbx
  0x000000011c05dead: jle    0x000000011c05df89
  0x000000011c05deb3: mov    %r15,%rdi
  0x000000011c05deb6: test   $0xf,%esp
  0x000000011c05debc: je     0x000000011c05ded4
  0x000000011c05dec2: sub    $0x8,%rsp
  0x000000011c05dec6: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c05decb: add    $0x8,%rsp
  0x000000011c05decf: jmpq   0x000000011c05ded9
  0x000000011c05ded4: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c05ded9: callq  0x000000011c05dee3
  0x000000011c05dede: jmpq   0x000000011c05df75
  0x000000011c05dee3: lea    0x8(%rsp),%rax
  0x000000011c05dee8: mov    %r13,-0x40(%rbp)
  0x000000011c05deec: mov    %r15,%rdi
  0x000000011c05deef: vzeroupper 
  0x000000011c05def2: mov    %rbp,0x330(%r15)
  0x000000011c05def9: mov    %rax,0x320(%r15)
  0x000000011c05df00: test   $0xf,%esp
  0x000000011c05df06: je     0x000000011c05df1e
  0x000000011c05df0c: sub    $0x8,%rsp
  0x000000011c05df10: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c05df15: add    $0x8,%rsp
  0x000000011c05df19: jmpq   0x000000011c05df23
  0x000000011c05df1e: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c05df23: movabs $0x0,%r10
  0x000000011c05df2d: mov    %r10,0x320(%r15)
  0x000000011c05df34: movabs $0x0,%r10
  0x000000011c05df3e: mov    %r10,0x330(%r15)
  0x000000011c05df45: movabs $0x0,%r10
  0x000000011c05df4f: mov    %r10,0x328(%r15)
  0x000000011c05df56: vzeroupper 
  0x000000011c05df59: cmpq   $0x0,0x8(%r15)
  0x000000011c05df61: je     0x000000011c05df6c
  0x000000011c05df67: jmpq   0x000000011c054780
  0x000000011c05df6c: mov    -0x40(%rbp),%r13
  0x000000011c05df70: mov    -0x38(%rbp),%r14
  0x000000011c05df74: retq   
  0x000000011c05df75: movabs $0x1107f3493,%rdi
  0x000000011c05df7f: and    $0xfffffffffffffff0,%rsp
  0x000000011c05df83: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c05df88: hlt    
  0x000000011c05df89: leaveq 
  0x000000011c05df8a: pop    %rsi
  0x000000011c05df8b: mov    %rbx,%rsp
  0x000000011c05df8e: jmpq   *%rsi
  0x000000011c05df90: mov    -0x40(%rbp),%r13
  0x000000011c05df94: mov    -0x38(%rbp),%r14
  0x000000011c05df98: mov    -0x48(%rbp),%rsp
  0x000000011c05df9c: movq   $0x0,-0x10(%rbp)
  0x000000011c05dfa4: mov    0x488(%r15),%rcx
  0x000000011c05dfab: mov    0x80(%rcx),%eax
  0x000000011c05dfb1: movl   $0xb,0x78(%rcx)
  0x000000011c05dfb8: movl   $0x0,0x80(%rcx)
  0x000000011c05dfc2: movl   $0xb,0x78(%rcx)
  0x000000011c05dfc9: movabs $0x0,%r10
  0x000000011c05dfd3: mov    %r10,0x80(%rcx)
  0x000000011c05dfda: mov    0x488(%r15),%rcx
  0x000000011c05dfe1: movl   $0x0,0x74(%rcx)
  0x000000011c05dfe8: mov    0x3dd(%r15),%bl
  0x000000011c05dfef: movb   $0x0,0x3dd(%r15)
  0x000000011c05dff7: mov    -0x18(%rbp),%rcx
  0x000000011c05dffb: mov    0x20(%rcx),%ecx
  0x000000011c05dffe: test   $0x20,%ecx
  0x000000011c05e004: je     0x000000011c05e117
  0x000000011c05e00a: test   $0xff,%bl
  0x000000011c05e00d: jne    0x000000011c05e22a
  0x000000011c05e013: push   %rax
  0x000000011c05e014: lea    -0x58(%rbp),%rsi
  0x000000011c05e018: mov    0x8(%rsi),%rax
  0x000000011c05e01c: test   %rax,%rax
  0x000000011c05e01f: jne    0x000000011c05e031
  0x000000011c05e025: mov    (%rsp),%eax
  0x000000011c05e028: add    $0x8,%rsp
  0x000000011c05e02c: jmpq   0x000000011c05e117
  0x000000011c05e031: mov    %r13,-0x40(%rbp)
  0x000000011c05e035: lea    (%rsi),%rax
  0x000000011c05e038: mov    0x8(%rsi),%rcx
  0x000000011c05e03c: movq   $0x0,0x8(%rsi)
  0x000000011c05e044: mov    (%rcx),%rdx
  0x000000011c05e047: and    $0x7,%rdx
  0x000000011c05e04b: cmp    $0x5,%rdx
  0x000000011c05e04f: je     0x000000011c05e10c
  0x000000011c05e055: mov    (%rax),%rdx
  0x000000011c05e058: test   %rdx,%rdx
  0x000000011c05e05b: je     0x000000011c05e10c
  0x000000011c05e061: lock cmpxchg %rdx,(%rcx)
  0x000000011c05e066: je     0x000000011c05e10c
  0x000000011c05e06c: mov    %rcx,0x8(%rsi)
  0x000000011c05e070: callq  0x000000011c05e07a
  0x000000011c05e075: jmpq   0x000000011c05e10c
  0x000000011c05e07a: lea    0x8(%rsp),%rax
  0x000000011c05e07f: mov    %r13,-0x40(%rbp)
  0x000000011c05e083: mov    %r15,%rdi
  0x000000011c05e086: vzeroupper 
  0x000000011c05e089: mov    %rbp,0x330(%r15)
  0x000000011c05e090: mov    %rax,0x320(%r15)
  0x000000011c05e097: test   $0xf,%esp
  0x000000011c05e09d: je     0x000000011c05e0b5
  0x000000011c05e0a3: sub    $0x8,%rsp
  0x000000011c05e0a7: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05e0ac: add    $0x8,%rsp
  0x000000011c05e0b0: jmpq   0x000000011c05e0ba
  0x000000011c05e0b5: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05e0ba: movabs $0x0,%r10
  0x000000011c05e0c4: mov    %r10,0x320(%r15)
  0x000000011c05e0cb: movabs $0x0,%r10
  0x000000011c05e0d5: mov    %r10,0x330(%r15)
  0x000000011c05e0dc: movabs $0x0,%r10
  0x000000011c05e0e6: mov    %r10,0x328(%r15)
  0x000000011c05e0ed: vzeroupper 
  0x000000011c05e0f0: cmpq   $0x0,0x8(%r15)
  0x000000011c05e0f8: je     0x000000011c05e103
  0x000000011c05e0fe: jmpq   0x000000011c054780
  0x000000011c05e103: mov    -0x40(%rbp),%r13
  0x000000011c05e107: mov    -0x38(%rbp),%r14
  0x000000011c05e10b: retq   
  0x000000011c05e10c: mov    -0x40(%rbp),%r13
  0x000000011c05e110: mov    (%rsp),%eax
  0x000000011c05e113: add    $0x8,%rsp
  0x000000011c05e117: mov    -0x48(%rbp),%rsi
  0x000000011c05e11b: lea    -0x48(%rbp),%rbx
  0x000000011c05e11f: jmpq   0x000000011c05e225
  0x000000011c05e124: push   %rax
  0x000000011c05e125: mov    %rsi,%rsi
  0x000000011c05e128: mov    %r13,-0x40(%rbp)
  0x000000011c05e12c: lea    (%rsi),%rax
  0x000000011c05e12f: mov    0x8(%rsi),%rcx
  0x000000011c05e133: movq   $0x0,0x8(%rsi)
  0x000000011c05e13b: mov    (%rcx),%rdx
  0x000000011c05e13e: and    $0x7,%rdx
  0x000000011c05e142: cmp    $0x5,%rdx
  0x000000011c05e146: je     0x000000011c05e203
  0x000000011c05e14c: mov    (%rax),%rdx
  0x000000011c05e14f: test   %rdx,%rdx
  0x000000011c05e152: je     0x000000011c05e203
  0x000000011c05e158: lock cmpxchg %rdx,(%rcx)
  0x000000011c05e15d: je     0x000000011c05e203
  0x000000011c05e163: mov    %rcx,0x8(%rsi)
  0x000000011c05e167: callq  0x000000011c05e171
  0x000000011c05e16c: jmpq   0x000000011c05e203
  0x000000011c05e171: lea    0x8(%rsp),%rax
  0x000000011c05e176: mov    %r13,-0x40(%rbp)
  0x000000011c05e17a: mov    %r15,%rdi
  0x000000011c05e17d: vzeroupper 
  0x000000011c05e180: mov    %rbp,0x330(%r15)
  0x000000011c05e187: mov    %rax,0x320(%r15)
  0x000000011c05e18e: test   $0xf,%esp
  0x000000011c05e194: je     0x000000011c05e1ac
  0x000000011c05e19a: sub    $0x8,%rsp
  0x000000011c05e19e: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05e1a3: add    $0x8,%rsp
  0x000000011c05e1a7: jmpq   0x000000011c05e1b1
  0x000000011c05e1ac: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05e1b1: movabs $0x0,%r10
  0x000000011c05e1bb: mov    %r10,0x320(%r15)
  0x000000011c05e1c2: movabs $0x0,%r10
  0x000000011c05e1cc: mov    %r10,0x330(%r15)
  0x000000011c05e1d3: movabs $0x0,%r10
  0x000000011c05e1dd: mov    %r10,0x328(%r15)
  0x000000011c05e1e4: vzeroupper 
  0x000000011c05e1e7: cmpq   $0x0,0x8(%r15)
  0x000000011c05e1ef: je     0x000000011c05e1fa
  0x000000011c05e1f5: jmpq   0x000000011c054780
  0x000000011c05e1fa: mov    -0x40(%rbp),%r13
  0x000000011c05e1fe: mov    -0x38(%rbp),%r14
  0x000000011c05e202: retq   
  0x000000011c05e203: mov    -0x40(%rbp),%r13
  0x000000011c05e207: mov    (%rsp),%eax
  0x000000011c05e20a: add    $0x8,%rsp
  0x000000011c05e20e: jmpq   0x000000011c05e117
  0x000000011c05e213: cmpq   $0x0,0x8(%rsi)
  0x000000011c05e21b: jne    0x000000011c05e124
  0x000000011c05e221: add    $0x10,%rsi
  0x000000011c05e225: cmp    %rbx,%rsi
  0x000000011c05e228: jne    0x000000011c05e213
  0x000000011c05e22a: cmpb   $0x0,-0xb6a4157(%rip)        # 0x00000001109ba0da = DTraceMethodProbes
  0x000000011c05e231: je     0x000000011c05e269
  0x000000011c05e237: push   %rax
  0x000000011c05e238: mov    -0x18(%rbp),%rsi
  0x000000011c05e23c: mov    %r15,%rdi
  0x000000011c05e23f: test   $0xf,%esp
  0x000000011c05e245: je     0x000000011c05e25d
  0x000000011c05e24b: sub    $0x8,%rsp
  0x000000011c05e24f: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c05e254: add    $0x8,%rsp
  0x000000011c05e258: jmpq   0x000000011c05e262
  0x000000011c05e25d: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c05e262: mov    (%rsp),%eax
  0x000000011c05e265: add    $0x8,%rsp
  0x000000011c05e269: mov    -0x8(%rbp),%rbx
  0x000000011c05e26d: cmpl   $0x3,0x408(%r15)
  0x000000011c05e278: je     0x000000011c05e361
  0x000000011c05e27e: cmp    0x418(%r15),%rbx
  0x000000011c05e285: jle    0x000000011c05e361
  0x000000011c05e28b: mov    %r15,%rdi
  0x000000011c05e28e: test   $0xf,%esp
  0x000000011c05e294: je     0x000000011c05e2ac
  0x000000011c05e29a: sub    $0x8,%rsp
  0x000000011c05e29e: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c05e2a3: add    $0x8,%rsp
  0x000000011c05e2a7: jmpq   0x000000011c05e2b1
  0x000000011c05e2ac: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c05e2b1: callq  0x000000011c05e2bb
  0x000000011c05e2b6: jmpq   0x000000011c05e34d
  0x000000011c05e2bb: lea    0x8(%rsp),%rax
  0x000000011c05e2c0: mov    %r13,-0x40(%rbp)
  0x000000011c05e2c4: mov    %r15,%rdi
  0x000000011c05e2c7: vzeroupper 
  0x000000011c05e2ca: mov    %rbp,0x330(%r15)
  0x000000011c05e2d1: mov    %rax,0x320(%r15)
  0x000000011c05e2d8: test   $0xf,%esp
  0x000000011c05e2de: je     0x000000011c05e2f6
  0x000000011c05e2e4: sub    $0x8,%rsp
  0x000000011c05e2e8: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c05e2ed: add    $0x8,%rsp
  0x000000011c05e2f1: jmpq   0x000000011c05e2fb
  0x000000011c05e2f6: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c05e2fb: movabs $0x0,%r10
  0x000000011c05e305: mov    %r10,0x320(%r15)
  0x000000011c05e30c: movabs $0x0,%r10
  0x000000011c05e316: mov    %r10,0x330(%r15)
  0x000000011c05e31d: movabs $0x0,%r10
  0x000000011c05e327: mov    %r10,0x328(%r15)
  0x000000011c05e32e: vzeroupper 
  0x000000011c05e331: cmpq   $0x0,0x8(%r15)
  0x000000011c05e339: je     0x000000011c05e344
  0x000000011c05e33f: jmpq   0x000000011c054780
  0x000000011c05e344: mov    -0x40(%rbp),%r13
  0x000000011c05e348: mov    -0x38(%rbp),%r14
  0x000000011c05e34c: retq   
  0x000000011c05e34d: movabs $0x1107f3493,%rdi
  0x000000011c05e357: and    $0xfffffffffffffff0,%rsp
  0x000000011c05e35b: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c05e360: hlt    
  0x000000011c05e361: leaveq 
  0x000000011c05e362: pop    %rsi
  0x000000011c05e363: mov    %rbx,%rsp
  0x000000011c05e366: jmpq   *%rsi
  0x000000011c05e368: mov    -0x40(%rbp),%r13
  0x000000011c05e36c: mov    -0x38(%rbp),%r14
  0x000000011c05e370: mov    -0x48(%rbp),%rsp
  0x000000011c05e374: movq   $0x0,-0x10(%rbp)
  0x000000011c05e37c: mov    0x488(%r15),%rcx
  0x000000011c05e383: mov    0x80(%rcx),%eax
  0x000000011c05e389: movl   $0xb,0x78(%rcx)
  0x000000011c05e390: movl   $0x0,0x80(%rcx)
  0x000000011c05e39a: movl   $0xb,0x78(%rcx)
  0x000000011c05e3a1: movabs $0x0,%r10
  0x000000011c05e3ab: mov    %r10,0x80(%rcx)
  0x000000011c05e3b2: mov    0x488(%r15),%rcx
  0x000000011c05e3b9: movl   $0x0,0x74(%rcx)
  0x000000011c05e3c0: mov    0x3dd(%r15),%bl
  0x000000011c05e3c7: movb   $0x0,0x3dd(%r15)
  0x000000011c05e3cf: mov    -0x18(%rbp),%rcx
  0x000000011c05e3d3: mov    0x20(%rcx),%ecx
  0x000000011c05e3d6: test   $0x20,%ecx
  0x000000011c05e3dc: je     0x000000011c05e4ef
  0x000000011c05e3e2: test   $0xff,%bl
  0x000000011c05e3e5: jne    0x000000011c05e602
  0x000000011c05e3eb: push   %rax
  0x000000011c05e3ec: lea    -0x58(%rbp),%rsi
  0x000000011c05e3f0: mov    0x8(%rsi),%rax
  0x000000011c05e3f4: test   %rax,%rax
  0x000000011c05e3f7: jne    0x000000011c05e409
  0x000000011c05e3fd: mov    (%rsp),%eax
  0x000000011c05e400: add    $0x8,%rsp
  0x000000011c05e404: jmpq   0x000000011c05e4ef
  0x000000011c05e409: mov    %r13,-0x40(%rbp)
  0x000000011c05e40d: lea    (%rsi),%rax
  0x000000011c05e410: mov    0x8(%rsi),%rcx
  0x000000011c05e414: movq   $0x0,0x8(%rsi)
  0x000000011c05e41c: mov    (%rcx),%rdx
  0x000000011c05e41f: and    $0x7,%rdx
  0x000000011c05e423: cmp    $0x5,%rdx
  0x000000011c05e427: je     0x000000011c05e4e4
  0x000000011c05e42d: mov    (%rax),%rdx
  0x000000011c05e430: test   %rdx,%rdx
  0x000000011c05e433: je     0x000000011c05e4e4
  0x000000011c05e439: lock cmpxchg %rdx,(%rcx)
  0x000000011c05e43e: je     0x000000011c05e4e4
  0x000000011c05e444: mov    %rcx,0x8(%rsi)
  0x000000011c05e448: callq  0x000000011c05e452
  0x000000011c05e44d: jmpq   0x000000011c05e4e4
  0x000000011c05e452: lea    0x8(%rsp),%rax
  0x000000011c05e457: mov    %r13,-0x40(%rbp)
  0x000000011c05e45b: mov    %r15,%rdi
  0x000000011c05e45e: vzeroupper 
  0x000000011c05e461: mov    %rbp,0x330(%r15)
  0x000000011c05e468: mov    %rax,0x320(%r15)
  0x000000011c05e46f: test   $0xf,%esp
  0x000000011c05e475: je     0x000000011c05e48d
  0x000000011c05e47b: sub    $0x8,%rsp
  0x000000011c05e47f: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05e484: add    $0x8,%rsp
  0x000000011c05e488: jmpq   0x000000011c05e492
  0x000000011c05e48d: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05e492: movabs $0x0,%r10
  0x000000011c05e49c: mov    %r10,0x320(%r15)
  0x000000011c05e4a3: movabs $0x0,%r10
  0x000000011c05e4ad: mov    %r10,0x330(%r15)
  0x000000011c05e4b4: movabs $0x0,%r10
  0x000000011c05e4be: mov    %r10,0x328(%r15)
  0x000000011c05e4c5: vzeroupper 
  0x000000011c05e4c8: cmpq   $0x0,0x8(%r15)
  0x000000011c05e4d0: je     0x000000011c05e4db
  0x000000011c05e4d6: jmpq   0x000000011c054780
  0x000000011c05e4db: mov    -0x40(%rbp),%r13
  0x000000011c05e4df: mov    -0x38(%rbp),%r14
  0x000000011c05e4e3: retq   
  0x000000011c05e4e4: mov    -0x40(%rbp),%r13
  0x000000011c05e4e8: mov    (%rsp),%eax
  0x000000011c05e4eb: add    $0x8,%rsp
  0x000000011c05e4ef: mov    -0x48(%rbp),%rsi
  0x000000011c05e4f3: lea    -0x48(%rbp),%rbx
  0x000000011c05e4f7: jmpq   0x000000011c05e5fd
  0x000000011c05e4fc: push   %rax
  0x000000011c05e4fd: mov    %rsi,%rsi
  0x000000011c05e500: mov    %r13,-0x40(%rbp)
  0x000000011c05e504: lea    (%rsi),%rax
  0x000000011c05e507: mov    0x8(%rsi),%rcx
  0x000000011c05e50b: movq   $0x0,0x8(%rsi)
  0x000000011c05e513: mov    (%rcx),%rdx
  0x000000011c05e516: and    $0x7,%rdx
  0x000000011c05e51a: cmp    $0x5,%rdx
  0x000000011c05e51e: je     0x000000011c05e5db
  0x000000011c05e524: mov    (%rax),%rdx
  0x000000011c05e527: test   %rdx,%rdx
  0x000000011c05e52a: je     0x000000011c05e5db
  0x000000011c05e530: lock cmpxchg %rdx,(%rcx)
  0x000000011c05e535: je     0x000000011c05e5db
  0x000000011c05e53b: mov    %rcx,0x8(%rsi)
  0x000000011c05e53f: callq  0x000000011c05e549
  0x000000011c05e544: jmpq   0x000000011c05e5db
  0x000000011c05e549: lea    0x8(%rsp),%rax
  0x000000011c05e54e: mov    %r13,-0x40(%rbp)
  0x000000011c05e552: mov    %r15,%rdi
  0x000000011c05e555: vzeroupper 
  0x000000011c05e558: mov    %rbp,0x330(%r15)
  0x000000011c05e55f: mov    %rax,0x320(%r15)
  0x000000011c05e566: test   $0xf,%esp
  0x000000011c05e56c: je     0x000000011c05e584
  0x000000011c05e572: sub    $0x8,%rsp
  0x000000011c05e576: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05e57b: add    $0x8,%rsp
  0x000000011c05e57f: jmpq   0x000000011c05e589
  0x000000011c05e584: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05e589: movabs $0x0,%r10
  0x000000011c05e593: mov    %r10,0x320(%r15)
  0x000000011c05e59a: movabs $0x0,%r10
  0x000000011c05e5a4: mov    %r10,0x330(%r15)
  0x000000011c05e5ab: movabs $0x0,%r10
  0x000000011c05e5b5: mov    %r10,0x328(%r15)
  0x000000011c05e5bc: vzeroupper 
  0x000000011c05e5bf: cmpq   $0x0,0x8(%r15)
  0x000000011c05e5c7: je     0x000000011c05e5d2
  0x000000011c05e5cd: jmpq   0x000000011c054780
  0x000000011c05e5d2: mov    -0x40(%rbp),%r13
  0x000000011c05e5d6: mov    -0x38(%rbp),%r14
  0x000000011c05e5da: retq   
  0x000000011c05e5db: mov    -0x40(%rbp),%r13
  0x000000011c05e5df: mov    (%rsp),%eax
  0x000000011c05e5e2: add    $0x8,%rsp
  0x000000011c05e5e6: jmpq   0x000000011c05e4ef
  0x000000011c05e5eb: cmpq   $0x0,0x8(%rsi)
  0x000000011c05e5f3: jne    0x000000011c05e4fc
  0x000000011c05e5f9: add    $0x10,%rsi
  0x000000011c05e5fd: cmp    %rbx,%rsi
  0x000000011c05e600: jne    0x000000011c05e5eb
  0x000000011c05e602: cmpb   $0x0,-0xb6a452f(%rip)        # 0x00000001109ba0da = DTraceMethodProbes
  0x000000011c05e609: je     0x000000011c05e641
  0x000000011c05e60f: push   %rax
  0x000000011c05e610: mov    -0x18(%rbp),%rsi
  0x000000011c05e614: mov    %r15,%rdi
  0x000000011c05e617: test   $0xf,%esp
  0x000000011c05e61d: je     0x000000011c05e635
  0x000000011c05e623: sub    $0x8,%rsp
  0x000000011c05e627: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c05e62c: add    $0x8,%rsp
  0x000000011c05e630: jmpq   0x000000011c05e63a
  0x000000011c05e635: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c05e63a: mov    (%rsp),%eax
  0x000000011c05e63d: add    $0x8,%rsp
  0x000000011c05e641: mov    -0x8(%rbp),%rbx
  0x000000011c05e645: cmpl   $0x3,0x408(%r15)
  0x000000011c05e650: je     0x000000011c05e739
  0x000000011c05e656: cmp    0x418(%r15),%rbx
  0x000000011c05e65d: jle    0x000000011c05e739
  0x000000011c05e663: mov    %r15,%rdi
  0x000000011c05e666: test   $0xf,%esp
  0x000000011c05e66c: je     0x000000011c05e684
  0x000000011c05e672: sub    $0x8,%rsp
  0x000000011c05e676: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c05e67b: add    $0x8,%rsp
  0x000000011c05e67f: jmpq   0x000000011c05e689
  0x000000011c05e684: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c05e689: callq  0x000000011c05e693
  0x000000011c05e68e: jmpq   0x000000011c05e725
  0x000000011c05e693: lea    0x8(%rsp),%rax
  0x000000011c05e698: mov    %r13,-0x40(%rbp)
  0x000000011c05e69c: mov    %r15,%rdi
  0x000000011c05e69f: vzeroupper 
  0x000000011c05e6a2: mov    %rbp,0x330(%r15)
  0x000000011c05e6a9: mov    %rax,0x320(%r15)
  0x000000011c05e6b0: test   $0xf,%esp
  0x000000011c05e6b6: je     0x000000011c05e6ce
  0x000000011c05e6bc: sub    $0x8,%rsp
  0x000000011c05e6c0: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c05e6c5: add    $0x8,%rsp
  0x000000011c05e6c9: jmpq   0x000000011c05e6d3
  0x000000011c05e6ce: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c05e6d3: movabs $0x0,%r10
  0x000000011c05e6dd: mov    %r10,0x320(%r15)
  0x000000011c05e6e4: movabs $0x0,%r10
  0x000000011c05e6ee: mov    %r10,0x330(%r15)
  0x000000011c05e6f5: movabs $0x0,%r10
  0x000000011c05e6ff: mov    %r10,0x328(%r15)
  0x000000011c05e706: vzeroupper 
  0x000000011c05e709: cmpq   $0x0,0x8(%r15)
  0x000000011c05e711: je     0x000000011c05e71c
  0x000000011c05e717: jmpq   0x000000011c054780
  0x000000011c05e71c: mov    -0x40(%rbp),%r13
  0x000000011c05e720: mov    -0x38(%rbp),%r14
  0x000000011c05e724: retq   
  0x000000011c05e725: movabs $0x1107f3493,%rdi
  0x000000011c05e72f: and    $0xfffffffffffffff0,%rsp
  0x000000011c05e733: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c05e738: hlt    
  0x000000011c05e739: leaveq 
  0x000000011c05e73a: pop    %rsi
  0x000000011c05e73b: mov    %rbx,%rsp
  0x000000011c05e73e: jmpq   *%rsi
  0x000000011c05e740: mov    -0x40(%rbp),%r13
  0x000000011c05e744: mov    -0x38(%rbp),%r14
  0x000000011c05e748: mov    -0x48(%rbp),%rsp
  0x000000011c05e74c: movq   $0x0,-0x10(%rbp)
  0x000000011c05e754: mov    0x488(%r15),%rcx
  0x000000011c05e75b: mov    0x88(%rcx),%rax
  0x000000011c05e762: movq   $0x0,0x88(%rcx)
  0x000000011c05e76d: movl   $0xb,0x78(%rcx)
  0x000000011c05e774: movl   $0x0,0x80(%rcx)
  0x000000011c05e77e: movl   $0xb,0x78(%rcx)
  0x000000011c05e785: movabs $0x0,%r10
  0x000000011c05e78f: mov    %r10,0x80(%rcx)
  0x000000011c05e796: mov    0x488(%r15),%rcx
  0x000000011c05e79d: movl   $0x0,0x74(%rcx)
  0x000000011c05e7a4: mov    0x3dd(%r15),%bl
  0x000000011c05e7ab: movb   $0x0,0x3dd(%r15)
  0x000000011c05e7b3: mov    -0x18(%rbp),%rcx
  0x000000011c05e7b7: mov    0x20(%rcx),%ecx
  0x000000011c05e7ba: test   $0x20,%ecx
  0x000000011c05e7c0: je     0x000000011c05e8c7
  0x000000011c05e7c6: test   $0xff,%bl
  0x000000011c05e7c9: jne    0x000000011c05e9d4
  0x000000011c05e7cf: push   %rax
  0x000000011c05e7d0: lea    -0x58(%rbp),%rsi
  0x000000011c05e7d4: mov    0x8(%rsi),%rax
  0x000000011c05e7d8: test   %rax,%rax
  0x000000011c05e7db: jne    0x000000011c05e7e7
  0x000000011c05e7e1: pop    %rax
  0x000000011c05e7e2: jmpq   0x000000011c05e8c7
  0x000000011c05e7e7: mov    %r13,-0x40(%rbp)
  0x000000011c05e7eb: lea    (%rsi),%rax
  0x000000011c05e7ee: mov    0x8(%rsi),%rcx
  0x000000011c05e7f2: movq   $0x0,0x8(%rsi)
  0x000000011c05e7fa: mov    (%rcx),%rdx
  0x000000011c05e7fd: and    $0x7,%rdx
  0x000000011c05e801: cmp    $0x5,%rdx
  0x000000011c05e805: je     0x000000011c05e8c2
  0x000000011c05e80b: mov    (%rax),%rdx
  0x000000011c05e80e: test   %rdx,%rdx
  0x000000011c05e811: je     0x000000011c05e8c2
  0x000000011c05e817: lock cmpxchg %rdx,(%rcx)
  0x000000011c05e81c: je     0x000000011c05e8c2
  0x000000011c05e822: mov    %rcx,0x8(%rsi)
  0x000000011c05e826: callq  0x000000011c05e830
  0x000000011c05e82b: jmpq   0x000000011c05e8c2
  0x000000011c05e830: lea    0x8(%rsp),%rax
  0x000000011c05e835: mov    %r13,-0x40(%rbp)
  0x000000011c05e839: mov    %r15,%rdi
  0x000000011c05e83c: vzeroupper 
  0x000000011c05e83f: mov    %rbp,0x330(%r15)
  0x000000011c05e846: mov    %rax,0x320(%r15)
  0x000000011c05e84d: test   $0xf,%esp
  0x000000011c05e853: je     0x000000011c05e86b
  0x000000011c05e859: sub    $0x8,%rsp
  0x000000011c05e85d: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05e862: add    $0x8,%rsp
  0x000000011c05e866: jmpq   0x000000011c05e870
  0x000000011c05e86b: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05e870: movabs $0x0,%r10
  0x000000011c05e87a: mov    %r10,0x320(%r15)
  0x000000011c05e881: movabs $0x0,%r10
  0x000000011c05e88b: mov    %r10,0x330(%r15)
  0x000000011c05e892: movabs $0x0,%r10
  0x000000011c05e89c: mov    %r10,0x328(%r15)
  0x000000011c05e8a3: vzeroupper 
  0x000000011c05e8a6: cmpq   $0x0,0x8(%r15)
  0x000000011c05e8ae: je     0x000000011c05e8b9
  0x000000011c05e8b4: jmpq   0x000000011c054780
  0x000000011c05e8b9: mov    -0x40(%rbp),%r13
  0x000000011c05e8bd: mov    -0x38(%rbp),%r14
  0x000000011c05e8c1: retq   
  0x000000011c05e8c2: mov    -0x40(%rbp),%r13
  0x000000011c05e8c6: pop    %rax
  0x000000011c05e8c7: mov    -0x48(%rbp),%rsi
  0x000000011c05e8cb: lea    -0x48(%rbp),%rbx
  0x000000011c05e8cf: jmpq   0x000000011c05e9cf
  0x000000011c05e8d4: push   %rax
  0x000000011c05e8d5: mov    %rsi,%rsi
  0x000000011c05e8d8: mov    %r13,-0x40(%rbp)
  0x000000011c05e8dc: lea    (%rsi),%rax
  0x000000011c05e8df: mov    0x8(%rsi),%rcx
  0x000000011c05e8e3: movq   $0x0,0x8(%rsi)
  0x000000011c05e8eb: mov    (%rcx),%rdx
  0x000000011c05e8ee: and    $0x7,%rdx
  0x000000011c05e8f2: cmp    $0x5,%rdx
  0x000000011c05e8f6: je     0x000000011c05e9b3
  0x000000011c05e8fc: mov    (%rax),%rdx
  0x000000011c05e8ff: test   %rdx,%rdx
  0x000000011c05e902: je     0x000000011c05e9b3
  0x000000011c05e908: lock cmpxchg %rdx,(%rcx)
  0x000000011c05e90d: je     0x000000011c05e9b3
  0x000000011c05e913: mov    %rcx,0x8(%rsi)
  0x000000011c05e917: callq  0x000000011c05e921
  0x000000011c05e91c: jmpq   0x000000011c05e9b3
  0x000000011c05e921: lea    0x8(%rsp),%rax
  0x000000011c05e926: mov    %r13,-0x40(%rbp)
  0x000000011c05e92a: mov    %r15,%rdi
  0x000000011c05e92d: vzeroupper 
  0x000000011c05e930: mov    %rbp,0x330(%r15)
  0x000000011c05e937: mov    %rax,0x320(%r15)
  0x000000011c05e93e: test   $0xf,%esp
  0x000000011c05e944: je     0x000000011c05e95c
  0x000000011c05e94a: sub    $0x8,%rsp
  0x000000011c05e94e: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05e953: add    $0x8,%rsp
  0x000000011c05e957: jmpq   0x000000011c05e961
  0x000000011c05e95c: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05e961: movabs $0x0,%r10
  0x000000011c05e96b: mov    %r10,0x320(%r15)
  0x000000011c05e972: movabs $0x0,%r10
  0x000000011c05e97c: mov    %r10,0x330(%r15)
  0x000000011c05e983: movabs $0x0,%r10
  0x000000011c05e98d: mov    %r10,0x328(%r15)
  0x000000011c05e994: vzeroupper 
  0x000000011c05e997: cmpq   $0x0,0x8(%r15)
  0x000000011c05e99f: je     0x000000011c05e9aa
  0x000000011c05e9a5: jmpq   0x000000011c054780
  0x000000011c05e9aa: mov    -0x40(%rbp),%r13
  0x000000011c05e9ae: mov    -0x38(%rbp),%r14
  0x000000011c05e9b2: retq   
  0x000000011c05e9b3: mov    -0x40(%rbp),%r13
  0x000000011c05e9b7: pop    %rax
  0x000000011c05e9b8: jmpq   0x000000011c05e8c7
  0x000000011c05e9bd: cmpq   $0x0,0x8(%rsi)
  0x000000011c05e9c5: jne    0x000000011c05e8d4
  0x000000011c05e9cb: add    $0x10,%rsi
  0x000000011c05e9cf: cmp    %rbx,%rsi
  0x000000011c05e9d2: jne    0x000000011c05e9bd
  0x000000011c05e9d4: cmpb   $0x0,-0xb6a4901(%rip)        # 0x00000001109ba0da = DTraceMethodProbes
  0x000000011c05e9db: je     0x000000011c05ea0d
  0x000000011c05e9e1: push   %rax
  0x000000011c05e9e2: mov    -0x18(%rbp),%rsi
  0x000000011c05e9e6: mov    %r15,%rdi
  0x000000011c05e9e9: test   $0xf,%esp
  0x000000011c05e9ef: je     0x000000011c05ea07
  0x000000011c05e9f5: sub    $0x8,%rsp
  0x000000011c05e9f9: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c05e9fe: add    $0x8,%rsp
  0x000000011c05ea02: jmpq   0x000000011c05ea0c
  0x000000011c05ea07: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c05ea0c: pop    %rax
  0x000000011c05ea0d: mov    -0x8(%rbp),%rbx
  0x000000011c05ea11: cmpl   $0x3,0x408(%r15)
  0x000000011c05ea1c: je     0x000000011c05eb05
  0x000000011c05ea22: cmp    0x418(%r15),%rbx
  0x000000011c05ea29: jle    0x000000011c05eb05
  0x000000011c05ea2f: mov    %r15,%rdi
  0x000000011c05ea32: test   $0xf,%esp
  0x000000011c05ea38: je     0x000000011c05ea50
  0x000000011c05ea3e: sub    $0x8,%rsp
  0x000000011c05ea42: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c05ea47: add    $0x8,%rsp
  0x000000011c05ea4b: jmpq   0x000000011c05ea55
  0x000000011c05ea50: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c05ea55: callq  0x000000011c05ea5f
  0x000000011c05ea5a: jmpq   0x000000011c05eaf1
  0x000000011c05ea5f: lea    0x8(%rsp),%rax
  0x000000011c05ea64: mov    %r13,-0x40(%rbp)
  0x000000011c05ea68: mov    %r15,%rdi
  0x000000011c05ea6b: vzeroupper 
  0x000000011c05ea6e: mov    %rbp,0x330(%r15)
  0x000000011c05ea75: mov    %rax,0x320(%r15)
  0x000000011c05ea7c: test   $0xf,%esp
  0x000000011c05ea82: je     0x000000011c05ea9a
  0x000000011c05ea88: sub    $0x8,%rsp
  0x000000011c05ea8c: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c05ea91: add    $0x8,%rsp
  0x000000011c05ea95: jmpq   0x000000011c05ea9f
  0x000000011c05ea9a: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c05ea9f: movabs $0x0,%r10
  0x000000011c05eaa9: mov    %r10,0x320(%r15)
  0x000000011c05eab0: movabs $0x0,%r10
  0x000000011c05eaba: mov    %r10,0x330(%r15)
  0x000000011c05eac1: movabs $0x0,%r10
  0x000000011c05eacb: mov    %r10,0x328(%r15)
  0x000000011c05ead2: vzeroupper 
  0x000000011c05ead5: cmpq   $0x0,0x8(%r15)
  0x000000011c05eadd: je     0x000000011c05eae8
  0x000000011c05eae3: jmpq   0x000000011c054780
  0x000000011c05eae8: mov    -0x40(%rbp),%r13
  0x000000011c05eaec: mov    -0x38(%rbp),%r14
  0x000000011c05eaf0: retq   
  0x000000011c05eaf1: movabs $0x1107f3493,%rdi
  0x000000011c05eafb: and    $0xfffffffffffffff0,%rsp
  0x000000011c05eaff: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c05eb04: hlt    
  0x000000011c05eb05: leaveq 
  0x000000011c05eb06: pop    %rsi
  0x000000011c05eb07: mov    %rbx,%rsp
  0x000000011c05eb0a: jmpq   *%rsi
  0x000000011c05eb0c: mov    -0x40(%rbp),%r13
  0x000000011c05eb10: mov    -0x38(%rbp),%r14
  0x000000011c05eb14: mov    -0x48(%rbp),%rsp
  0x000000011c05eb18: movq   $0x0,-0x10(%rbp)
  0x000000011c05eb20: mov    0x488(%r15),%rcx
  0x000000011c05eb27: mov    0x80(%rcx),%eax
  0x000000011c05eb2d: movl   $0xb,0x78(%rcx)
  0x000000011c05eb34: movl   $0x0,0x80(%rcx)
  0x000000011c05eb3e: movl   $0xb,0x78(%rcx)
  0x000000011c05eb45: movabs $0x0,%r10
  0x000000011c05eb4f: mov    %r10,0x80(%rcx)
  0x000000011c05eb56: mov    0x488(%r15),%rcx
  0x000000011c05eb5d: movl   $0x0,0x74(%rcx)
  0x000000011c05eb64: mov    0x3dd(%r15),%bl
  0x000000011c05eb6b: movb   $0x0,0x3dd(%r15)
  0x000000011c05eb73: mov    -0x18(%rbp),%rcx
  0x000000011c05eb77: mov    0x20(%rcx),%ecx
  0x000000011c05eb7a: test   $0x20,%ecx
  0x000000011c05eb80: je     0x000000011c05ec93
  0x000000011c05eb86: test   $0xff,%bl
  0x000000011c05eb89: jne    0x000000011c05eda6
  0x000000011c05eb8f: push   %rax
  0x000000011c05eb90: lea    -0x58(%rbp),%rsi
  0x000000011c05eb94: mov    0x8(%rsi),%rax
  0x000000011c05eb98: test   %rax,%rax
  0x000000011c05eb9b: jne    0x000000011c05ebad
  0x000000011c05eba1: mov    (%rsp),%eax
  0x000000011c05eba4: add    $0x8,%rsp
  0x000000011c05eba8: jmpq   0x000000011c05ec93
  0x000000011c05ebad: mov    %r13,-0x40(%rbp)
  0x000000011c05ebb1: lea    (%rsi),%rax
  0x000000011c05ebb4: mov    0x8(%rsi),%rcx
  0x000000011c05ebb8: movq   $0x0,0x8(%rsi)
  0x000000011c05ebc0: mov    (%rcx),%rdx
  0x000000011c05ebc3: and    $0x7,%rdx
  0x000000011c05ebc7: cmp    $0x5,%rdx
  0x000000011c05ebcb: je     0x000000011c05ec88
  0x000000011c05ebd1: mov    (%rax),%rdx
  0x000000011c05ebd4: test   %rdx,%rdx
  0x000000011c05ebd7: je     0x000000011c05ec88
  0x000000011c05ebdd: lock cmpxchg %rdx,(%rcx)
  0x000000011c05ebe2: je     0x000000011c05ec88
  0x000000011c05ebe8: mov    %rcx,0x8(%rsi)
  0x000000011c05ebec: callq  0x000000011c05ebf6
  0x000000011c05ebf1: jmpq   0x000000011c05ec88
  0x000000011c05ebf6: lea    0x8(%rsp),%rax
  0x000000011c05ebfb: mov    %r13,-0x40(%rbp)
  0x000000011c05ebff: mov    %r15,%rdi
  0x000000011c05ec02: vzeroupper 
  0x000000011c05ec05: mov    %rbp,0x330(%r15)
  0x000000011c05ec0c: mov    %rax,0x320(%r15)
  0x000000011c05ec13: test   $0xf,%esp
  0x000000011c05ec19: je     0x000000011c05ec31
  0x000000011c05ec1f: sub    $0x8,%rsp
  0x000000011c05ec23: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05ec28: add    $0x8,%rsp
  0x000000011c05ec2c: jmpq   0x000000011c05ec36
  0x000000011c05ec31: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05ec36: movabs $0x0,%r10
  0x000000011c05ec40: mov    %r10,0x320(%r15)
  0x000000011c05ec47: movabs $0x0,%r10
  0x000000011c05ec51: mov    %r10,0x330(%r15)
  0x000000011c05ec58: movabs $0x0,%r10
  0x000000011c05ec62: mov    %r10,0x328(%r15)
  0x000000011c05ec69: vzeroupper 
  0x000000011c05ec6c: cmpq   $0x0,0x8(%r15)
  0x000000011c05ec74: je     0x000000011c05ec7f
  0x000000011c05ec7a: jmpq   0x000000011c054780
  0x000000011c05ec7f: mov    -0x40(%rbp),%r13
  0x000000011c05ec83: mov    -0x38(%rbp),%r14
  0x000000011c05ec87: retq   
  0x000000011c05ec88: mov    -0x40(%rbp),%r13
  0x000000011c05ec8c: mov    (%rsp),%eax
  0x000000011c05ec8f: add    $0x8,%rsp
  0x000000011c05ec93: mov    -0x48(%rbp),%rsi
  0x000000011c05ec97: lea    -0x48(%rbp),%rbx
  0x000000011c05ec9b: jmpq   0x000000011c05eda1
  0x000000011c05eca0: push   %rax
  0x000000011c05eca1: mov    %rsi,%rsi
  0x000000011c05eca4: mov    %r13,-0x40(%rbp)
  0x000000011c05eca8: lea    (%rsi),%rax
  0x000000011c05ecab: mov    0x8(%rsi),%rcx
  0x000000011c05ecaf: movq   $0x0,0x8(%rsi)
  0x000000011c05ecb7: mov    (%rcx),%rdx
  0x000000011c05ecba: and    $0x7,%rdx
  0x000000011c05ecbe: cmp    $0x5,%rdx
  0x000000011c05ecc2: je     0x000000011c05ed7f
  0x000000011c05ecc8: mov    (%rax),%rdx
  0x000000011c05eccb: test   %rdx,%rdx
  0x000000011c05ecce: je     0x000000011c05ed7f
  0x000000011c05ecd4: lock cmpxchg %rdx,(%rcx)
  0x000000011c05ecd9: je     0x000000011c05ed7f
  0x000000011c05ecdf: mov    %rcx,0x8(%rsi)
  0x000000011c05ece3: callq  0x000000011c05eced
  0x000000011c05ece8: jmpq   0x000000011c05ed7f
  0x000000011c05eced: lea    0x8(%rsp),%rax
  0x000000011c05ecf2: mov    %r13,-0x40(%rbp)
  0x000000011c05ecf6: mov    %r15,%rdi
  0x000000011c05ecf9: vzeroupper 
  0x000000011c05ecfc: mov    %rbp,0x330(%r15)
  0x000000011c05ed03: mov    %rax,0x320(%r15)
  0x000000011c05ed0a: test   $0xf,%esp
  0x000000011c05ed10: je     0x000000011c05ed28
  0x000000011c05ed16: sub    $0x8,%rsp
  0x000000011c05ed1a: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05ed1f: add    $0x8,%rsp
  0x000000011c05ed23: jmpq   0x000000011c05ed2d
  0x000000011c05ed28: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05ed2d: movabs $0x0,%r10
  0x000000011c05ed37: mov    %r10,0x320(%r15)
  0x000000011c05ed3e: movabs $0x0,%r10
  0x000000011c05ed48: mov    %r10,0x330(%r15)
  0x000000011c05ed4f: movabs $0x0,%r10
  0x000000011c05ed59: mov    %r10,0x328(%r15)
  0x000000011c05ed60: vzeroupper 
  0x000000011c05ed63: cmpq   $0x0,0x8(%r15)
  0x000000011c05ed6b: je     0x000000011c05ed76
  0x000000011c05ed71: jmpq   0x000000011c054780
  0x000000011c05ed76: mov    -0x40(%rbp),%r13
  0x000000011c05ed7a: mov    -0x38(%rbp),%r14
  0x000000011c05ed7e: retq   
  0x000000011c05ed7f: mov    -0x40(%rbp),%r13
  0x000000011c05ed83: mov    (%rsp),%eax
  0x000000011c05ed86: add    $0x8,%rsp
  0x000000011c05ed8a: jmpq   0x000000011c05ec93
  0x000000011c05ed8f: cmpq   $0x0,0x8(%rsi)
  0x000000011c05ed97: jne    0x000000011c05eca0
  0x000000011c05ed9d: add    $0x10,%rsi
  0x000000011c05eda1: cmp    %rbx,%rsi
  0x000000011c05eda4: jne    0x000000011c05ed8f
  0x000000011c05eda6: cmpb   $0x0,-0xb6a4cd3(%rip)        # 0x00000001109ba0da = DTraceMethodProbes
  0x000000011c05edad: je     0x000000011c05ede5
  0x000000011c05edb3: push   %rax
  0x000000011c05edb4: mov    -0x18(%rbp),%rsi
  0x000000011c05edb8: mov    %r15,%rdi
  0x000000011c05edbb: test   $0xf,%esp
  0x000000011c05edc1: je     0x000000011c05edd9
  0x000000011c05edc7: sub    $0x8,%rsp
  0x000000011c05edcb: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c05edd0: add    $0x8,%rsp
  0x000000011c05edd4: jmpq   0x000000011c05edde
  0x000000011c05edd9: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c05edde: mov    (%rsp),%eax
  0x000000011c05ede1: add    $0x8,%rsp
  0x000000011c05ede5: mov    -0x8(%rbp),%rbx
  0x000000011c05ede9: cmpl   $0x3,0x408(%r15)
  0x000000011c05edf4: je     0x000000011c05eedd
  0x000000011c05edfa: cmp    0x418(%r15),%rbx
  0x000000011c05ee01: jle    0x000000011c05eedd
  0x000000011c05ee07: mov    %r15,%rdi
  0x000000011c05ee0a: test   $0xf,%esp
  0x000000011c05ee10: je     0x000000011c05ee28
  0x000000011c05ee16: sub    $0x8,%rsp
  0x000000011c05ee1a: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c05ee1f: add    $0x8,%rsp
  0x000000011c05ee23: jmpq   0x000000011c05ee2d
  0x000000011c05ee28: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c05ee2d: callq  0x000000011c05ee37
  0x000000011c05ee32: jmpq   0x000000011c05eec9
  0x000000011c05ee37: lea    0x8(%rsp),%rax
  0x000000011c05ee3c: mov    %r13,-0x40(%rbp)
  0x000000011c05ee40: mov    %r15,%rdi
  0x000000011c05ee43: vzeroupper 
  0x000000011c05ee46: mov    %rbp,0x330(%r15)
  0x000000011c05ee4d: mov    %rax,0x320(%r15)
  0x000000011c05ee54: test   $0xf,%esp
  0x000000011c05ee5a: je     0x000000011c05ee72
  0x000000011c05ee60: sub    $0x8,%rsp
  0x000000011c05ee64: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c05ee69: add    $0x8,%rsp
  0x000000011c05ee6d: jmpq   0x000000011c05ee77
  0x000000011c05ee72: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c05ee77: movabs $0x0,%r10
  0x000000011c05ee81: mov    %r10,0x320(%r15)
  0x000000011c05ee88: movabs $0x0,%r10
  0x000000011c05ee92: mov    %r10,0x330(%r15)
  0x000000011c05ee99: movabs $0x0,%r10
  0x000000011c05eea3: mov    %r10,0x328(%r15)
  0x000000011c05eeaa: vzeroupper 
  0x000000011c05eead: cmpq   $0x0,0x8(%r15)
  0x000000011c05eeb5: je     0x000000011c05eec0
  0x000000011c05eebb: jmpq   0x000000011c054780
  0x000000011c05eec0: mov    -0x40(%rbp),%r13
  0x000000011c05eec4: mov    -0x38(%rbp),%r14
  0x000000011c05eec8: retq   
  0x000000011c05eec9: movabs $0x1107f3493,%rdi
  0x000000011c05eed3: and    $0xfffffffffffffff0,%rsp
  0x000000011c05eed7: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c05eedc: hlt    
  0x000000011c05eedd: leaveq 
  0x000000011c05eede: pop    %rsi
  0x000000011c05eedf: mov    %rbx,%rsp
  0x000000011c05eee2: jmpq   *%rsi
  0x000000011c05eee4: mov    -0x40(%rbp),%r13
  0x000000011c05eee8: mov    -0x38(%rbp),%r14
  0x000000011c05eeec: mov    -0x48(%rbp),%rsp
  0x000000011c05eef0: movq   $0x0,-0x10(%rbp)
  0x000000011c05eef8: mov    0x488(%r15),%rcx
  0x000000011c05eeff: mov    0x80(%rcx),%rax
  0x000000011c05ef06: movl   $0xb,0x78(%rcx)
  0x000000011c05ef0d: movl   $0x0,0x80(%rcx)
  0x000000011c05ef17: movl   $0xb,0x78(%rcx)
  0x000000011c05ef1e: movabs $0x0,%r10
  0x000000011c05ef28: mov    %r10,0x80(%rcx)
  0x000000011c05ef2f: mov    0x488(%r15),%rcx
  0x000000011c05ef36: movl   $0x0,0x74(%rcx)
  0x000000011c05ef3d: mov    0x3dd(%r15),%bl
  0x000000011c05ef44: movb   $0x0,0x3dd(%r15)
  0x000000011c05ef4c: mov    -0x18(%rbp),%rcx
  0x000000011c05ef50: mov    0x20(%rcx),%ecx
  0x000000011c05ef53: test   $0x20,%ecx
  0x000000011c05ef59: je     0x000000011c05f084
  0x000000011c05ef5f: test   $0xff,%bl
  0x000000011c05ef62: jne    0x000000011c05f1ae
  0x000000011c05ef68: sub    $0x10,%rsp
  0x000000011c05ef6c: mov    %rax,(%rsp)
  0x000000011c05ef70: movabs $0x0,%r10
  0x000000011c05ef7a: mov    %r10,0x8(%rsp)
  0x000000011c05ef7f: lea    -0x58(%rbp),%rsi
  0x000000011c05ef83: mov    0x8(%rsi),%rax
  0x000000011c05ef87: test   %rax,%rax
  0x000000011c05ef8a: jne    0x000000011c05ef9d
  0x000000011c05ef90: mov    (%rsp),%rax
  0x000000011c05ef94: add    $0x10,%rsp
  0x000000011c05ef98: jmpq   0x000000011c05f084
  0x000000011c05ef9d: mov    %r13,-0x40(%rbp)
  0x000000011c05efa1: lea    (%rsi),%rax
  0x000000011c05efa4: mov    0x8(%rsi),%rcx
  0x000000011c05efa8: movq   $0x0,0x8(%rsi)
  0x000000011c05efb0: mov    (%rcx),%rdx
  0x000000011c05efb3: and    $0x7,%rdx
  0x000000011c05efb7: cmp    $0x5,%rdx
  0x000000011c05efbb: je     0x000000011c05f078
  0x000000011c05efc1: mov    (%rax),%rdx
  0x000000011c05efc4: test   %rdx,%rdx
  0x000000011c05efc7: je     0x000000011c05f078
  0x000000011c05efcd: lock cmpxchg %rdx,(%rcx)
  0x000000011c05efd2: je     0x000000011c05f078
  0x000000011c05efd8: mov    %rcx,0x8(%rsi)
  0x000000011c05efdc: callq  0x000000011c05efe6
  0x000000011c05efe1: jmpq   0x000000011c05f078
  0x000000011c05efe6: lea    0x8(%rsp),%rax
  0x000000011c05efeb: mov    %r13,-0x40(%rbp)
  0x000000011c05efef: mov    %r15,%rdi
  0x000000011c05eff2: vzeroupper 
  0x000000011c05eff5: mov    %rbp,0x330(%r15)
  0x000000011c05effc: mov    %rax,0x320(%r15)
  0x000000011c05f003: test   $0xf,%esp
  0x000000011c05f009: je     0x000000011c05f021
  0x000000011c05f00f: sub    $0x8,%rsp
  0x000000011c05f013: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05f018: add    $0x8,%rsp
  0x000000011c05f01c: jmpq   0x000000011c05f026
  0x000000011c05f021: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05f026: movabs $0x0,%r10
  0x000000011c05f030: mov    %r10,0x320(%r15)
  0x000000011c05f037: movabs $0x0,%r10
  0x000000011c05f041: mov    %r10,0x330(%r15)
  0x000000011c05f048: movabs $0x0,%r10
  0x000000011c05f052: mov    %r10,0x328(%r15)
  0x000000011c05f059: vzeroupper 
  0x000000011c05f05c: cmpq   $0x0,0x8(%r15)
  0x000000011c05f064: je     0x000000011c05f06f
  0x000000011c05f06a: jmpq   0x000000011c054780
  0x000000011c05f06f: mov    -0x40(%rbp),%r13
  0x000000011c05f073: mov    -0x38(%rbp),%r14
  0x000000011c05f077: retq   
  0x000000011c05f078: mov    -0x40(%rbp),%r13
  0x000000011c05f07c: mov    (%rsp),%rax
  0x000000011c05f080: add    $0x10,%rsp
  0x000000011c05f084: mov    -0x48(%rbp),%rsi
  0x000000011c05f088: lea    -0x48(%rbp),%rbx
  0x000000011c05f08c: jmpq   0x000000011c05f1a9
  0x000000011c05f091: sub    $0x10,%rsp
  0x000000011c05f095: mov    %rax,(%rsp)
  0x000000011c05f099: movabs $0x0,%r10
  0x000000011c05f0a3: mov    %r10,0x8(%rsp)
  0x000000011c05f0a8: mov    %rsi,%rsi
  0x000000011c05f0ab: mov    %r13,-0x40(%rbp)
  0x000000011c05f0af: lea    (%rsi),%rax
  0x000000011c05f0b2: mov    0x8(%rsi),%rcx
  0x000000011c05f0b6: movq   $0x0,0x8(%rsi)
  0x000000011c05f0be: mov    (%rcx),%rdx
  0x000000011c05f0c1: and    $0x7,%rdx
  0x000000011c05f0c5: cmp    $0x5,%rdx
  0x000000011c05f0c9: je     0x000000011c05f186
  0x000000011c05f0cf: mov    (%rax),%rdx
  0x000000011c05f0d2: test   %rdx,%rdx
  0x000000011c05f0d5: je     0x000000011c05f186
  0x000000011c05f0db: lock cmpxchg %rdx,(%rcx)
  0x000000011c05f0e0: je     0x000000011c05f186
  0x000000011c05f0e6: mov    %rcx,0x8(%rsi)
  0x000000011c05f0ea: callq  0x000000011c05f0f4
  0x000000011c05f0ef: jmpq   0x000000011c05f186
  0x000000011c05f0f4: lea    0x8(%rsp),%rax
  0x000000011c05f0f9: mov    %r13,-0x40(%rbp)
  0x000000011c05f0fd: mov    %r15,%rdi
  0x000000011c05f100: vzeroupper 
  0x000000011c05f103: mov    %rbp,0x330(%r15)
  0x000000011c05f10a: mov    %rax,0x320(%r15)
  0x000000011c05f111: test   $0xf,%esp
  0x000000011c05f117: je     0x000000011c05f12f
  0x000000011c05f11d: sub    $0x8,%rsp
  0x000000011c05f121: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05f126: add    $0x8,%rsp
  0x000000011c05f12a: jmpq   0x000000011c05f134
  0x000000011c05f12f: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05f134: movabs $0x0,%r10
  0x000000011c05f13e: mov    %r10,0x320(%r15)
  0x000000011c05f145: movabs $0x0,%r10
  0x000000011c05f14f: mov    %r10,0x330(%r15)
  0x000000011c05f156: movabs $0x0,%r10
  0x000000011c05f160: mov    %r10,0x328(%r15)
  0x000000011c05f167: vzeroupper 
  0x000000011c05f16a: cmpq   $0x0,0x8(%r15)
  0x000000011c05f172: je     0x000000011c05f17d
  0x000000011c05f178: jmpq   0x000000011c054780
  0x000000011c05f17d: mov    -0x40(%rbp),%r13
  0x000000011c05f181: mov    -0x38(%rbp),%r14
  0x000000011c05f185: retq   
  0x000000011c05f186: mov    -0x40(%rbp),%r13
  0x000000011c05f18a: mov    (%rsp),%rax
  0x000000011c05f18e: add    $0x10,%rsp
  0x000000011c05f192: jmpq   0x000000011c05f084
  0x000000011c05f197: cmpq   $0x0,0x8(%rsi)
  0x000000011c05f19f: jne    0x000000011c05f091
  0x000000011c05f1a5: add    $0x10,%rsi
  0x000000011c05f1a9: cmp    %rbx,%rsi
  0x000000011c05f1ac: jne    0x000000011c05f197
  0x000000011c05f1ae: cmpb   $0x0,-0xb6a50db(%rip)        # 0x00000001109ba0da = DTraceMethodProbes
  0x000000011c05f1b5: je     0x000000011c05f204
  0x000000011c05f1bb: sub    $0x10,%rsp
  0x000000011c05f1bf: mov    %rax,(%rsp)
  0x000000011c05f1c3: movabs $0x0,%r10
  0x000000011c05f1cd: mov    %r10,0x8(%rsp)
  0x000000011c05f1d2: mov    -0x18(%rbp),%rsi
  0x000000011c05f1d6: mov    %r15,%rdi
  0x000000011c05f1d9: test   $0xf,%esp
  0x000000011c05f1df: je     0x000000011c05f1f7
  0x000000011c05f1e5: sub    $0x8,%rsp
  0x000000011c05f1e9: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c05f1ee: add    $0x8,%rsp
  0x000000011c05f1f2: jmpq   0x000000011c05f1fc
  0x000000011c05f1f7: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c05f1fc: mov    (%rsp),%rax
  0x000000011c05f200: add    $0x10,%rsp
  0x000000011c05f204: mov    -0x8(%rbp),%rbx
  0x000000011c05f208: cmpl   $0x3,0x408(%r15)
  0x000000011c05f213: je     0x000000011c05f2fc
  0x000000011c05f219: cmp    0x418(%r15),%rbx
  0x000000011c05f220: jle    0x000000011c05f2fc
  0x000000011c05f226: mov    %r15,%rdi
  0x000000011c05f229: test   $0xf,%esp
  0x000000011c05f22f: je     0x000000011c05f247
  0x000000011c05f235: sub    $0x8,%rsp
  0x000000011c05f239: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c05f23e: add    $0x8,%rsp
  0x000000011c05f242: jmpq   0x000000011c05f24c
  0x000000011c05f247: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c05f24c: callq  0x000000011c05f256
  0x000000011c05f251: jmpq   0x000000011c05f2e8
  0x000000011c05f256: lea    0x8(%rsp),%rax
  0x000000011c05f25b: mov    %r13,-0x40(%rbp)
  0x000000011c05f25f: mov    %r15,%rdi
  0x000000011c05f262: vzeroupper 
  0x000000011c05f265: mov    %rbp,0x330(%r15)
  0x000000011c05f26c: mov    %rax,0x320(%r15)
  0x000000011c05f273: test   $0xf,%esp
  0x000000011c05f279: je     0x000000011c05f291
  0x000000011c05f27f: sub    $0x8,%rsp
  0x000000011c05f283: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c05f288: add    $0x8,%rsp
  0x000000011c05f28c: jmpq   0x000000011c05f296
  0x000000011c05f291: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c05f296: movabs $0x0,%r10
  0x000000011c05f2a0: mov    %r10,0x320(%r15)
  0x000000011c05f2a7: movabs $0x0,%r10
  0x000000011c05f2b1: mov    %r10,0x330(%r15)
  0x000000011c05f2b8: movabs $0x0,%r10
  0x000000011c05f2c2: mov    %r10,0x328(%r15)
  0x000000011c05f2c9: vzeroupper 
  0x000000011c05f2cc: cmpq   $0x0,0x8(%r15)
  0x000000011c05f2d4: je     0x000000011c05f2df
  0x000000011c05f2da: jmpq   0x000000011c054780
  0x000000011c05f2df: mov    -0x40(%rbp),%r13
  0x000000011c05f2e3: mov    -0x38(%rbp),%r14
  0x000000011c05f2e7: retq   
  0x000000011c05f2e8: movabs $0x1107f3493,%rdi
  0x000000011c05f2f2: and    $0xfffffffffffffff0,%rsp
  0x000000011c05f2f6: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c05f2fb: hlt    
  0x000000011c05f2fc: leaveq 
  0x000000011c05f2fd: pop    %rsi
  0x000000011c05f2fe: mov    %rbx,%rsp
  0x000000011c05f301: jmpq   *%rsi
  0x000000011c05f303: mov    -0x40(%rbp),%r13
  0x000000011c05f307: mov    -0x38(%rbp),%r14
  0x000000011c05f30b: mov    -0x48(%rbp),%rsp
  0x000000011c05f30f: movq   $0x0,-0x10(%rbp)
  0x000000011c05f317: mov    0x488(%r15),%rcx
  0x000000011c05f31e: vmovss 0x80(%rcx),%xmm0
  0x000000011c05f326: movl   $0xb,0x78(%rcx)
  0x000000011c05f32d: movl   $0x0,0x80(%rcx)
  0x000000011c05f337: movl   $0xb,0x78(%rcx)
  0x000000011c05f33e: movabs $0x0,%r10
  0x000000011c05f348: mov    %r10,0x80(%rcx)
  0x000000011c05f34f: mov    0x488(%r15),%rcx
  0x000000011c05f356: movl   $0x0,0x74(%rcx)
  0x000000011c05f35d: mov    0x3dd(%r15),%bl
  0x000000011c05f364: movb   $0x0,0x3dd(%r15)
  0x000000011c05f36c: mov    -0x18(%rbp),%rcx
  0x000000011c05f370: mov    0x20(%rcx),%ecx
  0x000000011c05f373: test   $0x20,%ecx
  0x000000011c05f379: je     0x000000011c05f498
  0x000000011c05f37f: test   $0xff,%bl
  0x000000011c05f382: jne    0x000000011c05f5b5
  0x000000011c05f388: sub    $0x8,%rsp
  0x000000011c05f38c: vmovss %xmm0,(%rsp)
  0x000000011c05f391: lea    -0x58(%rbp),%rsi
  0x000000011c05f395: mov    0x8(%rsi),%rax
  0x000000011c05f399: test   %rax,%rax
  0x000000011c05f39c: jne    0x000000011c05f3b0
  0x000000011c05f3a2: vmovss (%rsp),%xmm0
  0x000000011c05f3a7: add    $0x8,%rsp
  0x000000011c05f3ab: jmpq   0x000000011c05f498
  0x000000011c05f3b0: mov    %r13,-0x40(%rbp)
  0x000000011c05f3b4: lea    (%rsi),%rax
  0x000000011c05f3b7: mov    0x8(%rsi),%rcx
  0x000000011c05f3bb: movq   $0x0,0x8(%rsi)
  0x000000011c05f3c3: mov    (%rcx),%rdx
  0x000000011c05f3c6: and    $0x7,%rdx
  0x000000011c05f3ca: cmp    $0x5,%rdx
  0x000000011c05f3ce: je     0x000000011c05f48b
  0x000000011c05f3d4: mov    (%rax),%rdx
  0x000000011c05f3d7: test   %rdx,%rdx
  0x000000011c05f3da: je     0x000000011c05f48b
  0x000000011c05f3e0: lock cmpxchg %rdx,(%rcx)
  0x000000011c05f3e5: je     0x000000011c05f48b
  0x000000011c05f3eb: mov    %rcx,0x8(%rsi)
  0x000000011c05f3ef: callq  0x000000011c05f3f9
  0x000000011c05f3f4: jmpq   0x000000011c05f48b
  0x000000011c05f3f9: lea    0x8(%rsp),%rax
  0x000000011c05f3fe: mov    %r13,-0x40(%rbp)
  0x000000011c05f402: mov    %r15,%rdi
  0x000000011c05f405: vzeroupper 
  0x000000011c05f408: mov    %rbp,0x330(%r15)
  0x000000011c05f40f: mov    %rax,0x320(%r15)
  0x000000011c05f416: test   $0xf,%esp
  0x000000011c05f41c: je     0x000000011c05f434
  0x000000011c05f422: sub    $0x8,%rsp
  0x000000011c05f426: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05f42b: add    $0x8,%rsp
  0x000000011c05f42f: jmpq   0x000000011c05f439
  0x000000011c05f434: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05f439: movabs $0x0,%r10
  0x000000011c05f443: mov    %r10,0x320(%r15)
  0x000000011c05f44a: movabs $0x0,%r10
  0x000000011c05f454: mov    %r10,0x330(%r15)
  0x000000011c05f45b: movabs $0x0,%r10
  0x000000011c05f465: mov    %r10,0x328(%r15)
  0x000000011c05f46c: vzeroupper 
  0x000000011c05f46f: cmpq   $0x0,0x8(%r15)
  0x000000011c05f477: je     0x000000011c05f482
  0x000000011c05f47d: jmpq   0x000000011c054780
  0x000000011c05f482: mov    -0x40(%rbp),%r13
  0x000000011c05f486: mov    -0x38(%rbp),%r14
  0x000000011c05f48a: retq   
  0x000000011c05f48b: mov    -0x40(%rbp),%r13
  0x000000011c05f48f: vmovss (%rsp),%xmm0
  0x000000011c05f494: add    $0x8,%rsp
  0x000000011c05f498: mov    -0x48(%rbp),%rsi
  0x000000011c05f49c: lea    -0x48(%rbp),%rbx
  0x000000011c05f4a0: jmpq   0x000000011c05f5b0
  0x000000011c05f4a5: sub    $0x8,%rsp
  0x000000011c05f4a9: vmovss %xmm0,(%rsp)
  0x000000011c05f4ae: mov    %rsi,%rsi
  0x000000011c05f4b1: mov    %r13,-0x40(%rbp)
  0x000000011c05f4b5: lea    (%rsi),%rax
  0x000000011c05f4b8: mov    0x8(%rsi),%rcx
  0x000000011c05f4bc: movq   $0x0,0x8(%rsi)
  0x000000011c05f4c4: mov    (%rcx),%rdx
  0x000000011c05f4c7: and    $0x7,%rdx
  0x000000011c05f4cb: cmp    $0x5,%rdx
  0x000000011c05f4cf: je     0x000000011c05f58c
  0x000000011c05f4d5: mov    (%rax),%rdx
  0x000000011c05f4d8: test   %rdx,%rdx
  0x000000011c05f4db: je     0x000000011c05f58c
  0x000000011c05f4e1: lock cmpxchg %rdx,(%rcx)
  0x000000011c05f4e6: je     0x000000011c05f58c
  0x000000011c05f4ec: mov    %rcx,0x8(%rsi)
  0x000000011c05f4f0: callq  0x000000011c05f4fa
  0x000000011c05f4f5: jmpq   0x000000011c05f58c
  0x000000011c05f4fa: lea    0x8(%rsp),%rax
  0x000000011c05f4ff: mov    %r13,-0x40(%rbp)
  0x000000011c05f503: mov    %r15,%rdi
  0x000000011c05f506: vzeroupper 
  0x000000011c05f509: mov    %rbp,0x330(%r15)
  0x000000011c05f510: mov    %rax,0x320(%r15)
  0x000000011c05f517: test   $0xf,%esp
  0x000000011c05f51d: je     0x000000011c05f535
  0x000000011c05f523: sub    $0x8,%rsp
  0x000000011c05f527: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05f52c: add    $0x8,%rsp
  0x000000011c05f530: jmpq   0x000000011c05f53a
  0x000000011c05f535: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05f53a: movabs $0x0,%r10
  0x000000011c05f544: mov    %r10,0x320(%r15)
  0x000000011c05f54b: movabs $0x0,%r10
  0x000000011c05f555: mov    %r10,0x330(%r15)
  0x000000011c05f55c: movabs $0x0,%r10
  0x000000011c05f566: mov    %r10,0x328(%r15)
  0x000000011c05f56d: vzeroupper 
  0x000000011c05f570: cmpq   $0x0,0x8(%r15)
  0x000000011c05f578: je     0x000000011c05f583
  0x000000011c05f57e: jmpq   0x000000011c054780
  0x000000011c05f583: mov    -0x40(%rbp),%r13
  0x000000011c05f587: mov    -0x38(%rbp),%r14
  0x000000011c05f58b: retq   
  0x000000011c05f58c: mov    -0x40(%rbp),%r13
  0x000000011c05f590: vmovss (%rsp),%xmm0
  0x000000011c05f595: add    $0x8,%rsp
  0x000000011c05f599: jmpq   0x000000011c05f498
  0x000000011c05f59e: cmpq   $0x0,0x8(%rsi)
  0x000000011c05f5a6: jne    0x000000011c05f4a5
  0x000000011c05f5ac: add    $0x10,%rsi
  0x000000011c05f5b0: cmp    %rbx,%rsi
  0x000000011c05f5b3: jne    0x000000011c05f59e
  0x000000011c05f5b5: cmpb   $0x0,-0xb6a54e2(%rip)        # 0x00000001109ba0da = DTraceMethodProbes
  0x000000011c05f5bc: je     0x000000011c05f5fe
  0x000000011c05f5c2: sub    $0x8,%rsp
  0x000000011c05f5c6: vmovss %xmm0,(%rsp)
  0x000000011c05f5cb: mov    -0x18(%rbp),%rsi
  0x000000011c05f5cf: mov    %r15,%rdi
  0x000000011c05f5d2: test   $0xf,%esp
  0x000000011c05f5d8: je     0x000000011c05f5f0
  0x000000011c05f5de: sub    $0x8,%rsp
  0x000000011c05f5e2: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c05f5e7: add    $0x8,%rsp
  0x000000011c05f5eb: jmpq   0x000000011c05f5f5
  0x000000011c05f5f0: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c05f5f5: vmovss (%rsp),%xmm0
  0x000000011c05f5fa: add    $0x8,%rsp
  0x000000011c05f5fe: mov    -0x8(%rbp),%rbx
  0x000000011c05f602: cmpl   $0x3,0x408(%r15)
  0x000000011c05f60d: je     0x000000011c05f6f6
  0x000000011c05f613: cmp    0x418(%r15),%rbx
  0x000000011c05f61a: jle    0x000000011c05f6f6
  0x000000011c05f620: mov    %r15,%rdi
  0x000000011c05f623: test   $0xf,%esp
  0x000000011c05f629: je     0x000000011c05f641
  0x000000011c05f62f: sub    $0x8,%rsp
  0x000000011c05f633: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c05f638: add    $0x8,%rsp
  0x000000011c05f63c: jmpq   0x000000011c05f646
  0x000000011c05f641: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c05f646: callq  0x000000011c05f650
  0x000000011c05f64b: jmpq   0x000000011c05f6e2
  0x000000011c05f650: lea    0x8(%rsp),%rax
  0x000000011c05f655: mov    %r13,-0x40(%rbp)
  0x000000011c05f659: mov    %r15,%rdi
  0x000000011c05f65c: vzeroupper 
  0x000000011c05f65f: mov    %rbp,0x330(%r15)
  0x000000011c05f666: mov    %rax,0x320(%r15)
  0x000000011c05f66d: test   $0xf,%esp
  0x000000011c05f673: je     0x000000011c05f68b
  0x000000011c05f679: sub    $0x8,%rsp
  0x000000011c05f67d: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c05f682: add    $0x8,%rsp
  0x000000011c05f686: jmpq   0x000000011c05f690
  0x000000011c05f68b: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c05f690: movabs $0x0,%r10
  0x000000011c05f69a: mov    %r10,0x320(%r15)
  0x000000011c05f6a1: movabs $0x0,%r10
  0x000000011c05f6ab: mov    %r10,0x330(%r15)
  0x000000011c05f6b2: movabs $0x0,%r10
  0x000000011c05f6bc: mov    %r10,0x328(%r15)
  0x000000011c05f6c3: vzeroupper 
  0x000000011c05f6c6: cmpq   $0x0,0x8(%r15)
  0x000000011c05f6ce: je     0x000000011c05f6d9
  0x000000011c05f6d4: jmpq   0x000000011c054780
  0x000000011c05f6d9: mov    -0x40(%rbp),%r13
  0x000000011c05f6dd: mov    -0x38(%rbp),%r14
  0x000000011c05f6e1: retq   
  0x000000011c05f6e2: movabs $0x1107f3493,%rdi
  0x000000011c05f6ec: and    $0xfffffffffffffff0,%rsp
  0x000000011c05f6f0: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c05f6f5: hlt    
  0x000000011c05f6f6: leaveq 
  0x000000011c05f6f7: pop    %rsi
  0x000000011c05f6f8: mov    %rbx,%rsp
  0x000000011c05f6fb: jmpq   *%rsi
  0x000000011c05f6fd: mov    -0x40(%rbp),%r13
  0x000000011c05f701: mov    -0x38(%rbp),%r14
  0x000000011c05f705: mov    -0x48(%rbp),%rsp
  0x000000011c05f709: movq   $0x0,-0x10(%rbp)
  0x000000011c05f711: mov    0x488(%r15),%rcx
  0x000000011c05f718: vmovsd 0x80(%rcx),%xmm0
  0x000000011c05f720: movl   $0xb,0x78(%rcx)
  0x000000011c05f727: movl   $0x0,0x80(%rcx)
  0x000000011c05f731: movl   $0xb,0x78(%rcx)
  0x000000011c05f738: movabs $0x0,%r10
  0x000000011c05f742: mov    %r10,0x80(%rcx)
  0x000000011c05f749: mov    0x488(%r15),%rcx
  0x000000011c05f750: movl   $0x0,0x74(%rcx)
  0x000000011c05f757: mov    0x3dd(%r15),%bl
  0x000000011c05f75e: movb   $0x0,0x3dd(%r15)
  0x000000011c05f766: mov    -0x18(%rbp),%rcx
  0x000000011c05f76a: mov    0x20(%rcx),%ecx
  0x000000011c05f76d: test   $0x20,%ecx
  0x000000011c05f773: je     0x000000011c05f892
  0x000000011c05f779: test   $0xff,%bl
  0x000000011c05f77c: jne    0x000000011c05f9af
  0x000000011c05f782: sub    $0x10,%rsp
  0x000000011c05f786: vmovsd %xmm0,(%rsp)
  0x000000011c05f78b: lea    -0x58(%rbp),%rsi
  0x000000011c05f78f: mov    0x8(%rsi),%rax
  0x000000011c05f793: test   %rax,%rax
  0x000000011c05f796: jne    0x000000011c05f7aa
  0x000000011c05f79c: vmovsd (%rsp),%xmm0
  0x000000011c05f7a1: add    $0x10,%rsp
  0x000000011c05f7a5: jmpq   0x000000011c05f892
  0x000000011c05f7aa: mov    %r13,-0x40(%rbp)
  0x000000011c05f7ae: lea    (%rsi),%rax
  0x000000011c05f7b1: mov    0x8(%rsi),%rcx
  0x000000011c05f7b5: movq   $0x0,0x8(%rsi)
  0x000000011c05f7bd: mov    (%rcx),%rdx
  0x000000011c05f7c0: and    $0x7,%rdx
  0x000000011c05f7c4: cmp    $0x5,%rdx
  0x000000011c05f7c8: je     0x000000011c05f885
  0x000000011c05f7ce: mov    (%rax),%rdx
  0x000000011c05f7d1: test   %rdx,%rdx
  0x000000011c05f7d4: je     0x000000011c05f885
  0x000000011c05f7da: lock cmpxchg %rdx,(%rcx)
  0x000000011c05f7df: je     0x000000011c05f885
  0x000000011c05f7e5: mov    %rcx,0x8(%rsi)
  0x000000011c05f7e9: callq  0x000000011c05f7f3
  0x000000011c05f7ee: jmpq   0x000000011c05f885
  0x000000011c05f7f3: lea    0x8(%rsp),%rax
  0x000000011c05f7f8: mov    %r13,-0x40(%rbp)
  0x000000011c05f7fc: mov    %r15,%rdi
  0x000000011c05f7ff: vzeroupper 
  0x000000011c05f802: mov    %rbp,0x330(%r15)
  0x000000011c05f809: mov    %rax,0x320(%r15)
  0x000000011c05f810: test   $0xf,%esp
  0x000000011c05f816: je     0x000000011c05f82e
  0x000000011c05f81c: sub    $0x8,%rsp
  0x000000011c05f820: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05f825: add    $0x8,%rsp
  0x000000011c05f829: jmpq   0x000000011c05f833
  0x000000011c05f82e: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05f833: movabs $0x0,%r10
  0x000000011c05f83d: mov    %r10,0x320(%r15)
  0x000000011c05f844: movabs $0x0,%r10
  0x000000011c05f84e: mov    %r10,0x330(%r15)
  0x000000011c05f855: movabs $0x0,%r10
  0x000000011c05f85f: mov    %r10,0x328(%r15)
  0x000000011c05f866: vzeroupper 
  0x000000011c05f869: cmpq   $0x0,0x8(%r15)
  0x000000011c05f871: je     0x000000011c05f87c
  0x000000011c05f877: jmpq   0x000000011c054780
  0x000000011c05f87c: mov    -0x40(%rbp),%r13
  0x000000011c05f880: mov    -0x38(%rbp),%r14
  0x000000011c05f884: retq   
  0x000000011c05f885: mov    -0x40(%rbp),%r13
  0x000000011c05f889: vmovsd (%rsp),%xmm0
  0x000000011c05f88e: add    $0x10,%rsp
  0x000000011c05f892: mov    -0x48(%rbp),%rsi
  0x000000011c05f896: lea    -0x48(%rbp),%rbx
  0x000000011c05f89a: jmpq   0x000000011c05f9aa
  0x000000011c05f89f: sub    $0x10,%rsp
  0x000000011c05f8a3: vmovsd %xmm0,(%rsp)
  0x000000011c05f8a8: mov    %rsi,%rsi
  0x000000011c05f8ab: mov    %r13,-0x40(%rbp)
  0x000000011c05f8af: lea    (%rsi),%rax
  0x000000011c05f8b2: mov    0x8(%rsi),%rcx
  0x000000011c05f8b6: movq   $0x0,0x8(%rsi)
  0x000000011c05f8be: mov    (%rcx),%rdx
  0x000000011c05f8c1: and    $0x7,%rdx
  0x000000011c05f8c5: cmp    $0x5,%rdx
  0x000000011c05f8c9: je     0x000000011c05f986
  0x000000011c05f8cf: mov    (%rax),%rdx
  0x000000011c05f8d2: test   %rdx,%rdx
  0x000000011c05f8d5: je     0x000000011c05f986
  0x000000011c05f8db: lock cmpxchg %rdx,(%rcx)
  0x000000011c05f8e0: je     0x000000011c05f986
  0x000000011c05f8e6: mov    %rcx,0x8(%rsi)
  0x000000011c05f8ea: callq  0x000000011c05f8f4
  0x000000011c05f8ef: jmpq   0x000000011c05f986
  0x000000011c05f8f4: lea    0x8(%rsp),%rax
  0x000000011c05f8f9: mov    %r13,-0x40(%rbp)
  0x000000011c05f8fd: mov    %r15,%rdi
  0x000000011c05f900: vzeroupper 
  0x000000011c05f903: mov    %rbp,0x330(%r15)
  0x000000011c05f90a: mov    %rax,0x320(%r15)
  0x000000011c05f911: test   $0xf,%esp
  0x000000011c05f917: je     0x000000011c05f92f
  0x000000011c05f91d: sub    $0x8,%rsp
  0x000000011c05f921: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05f926: add    $0x8,%rsp
  0x000000011c05f92a: jmpq   0x000000011c05f934
  0x000000011c05f92f: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05f934: movabs $0x0,%r10
  0x000000011c05f93e: mov    %r10,0x320(%r15)
  0x000000011c05f945: movabs $0x0,%r10
  0x000000011c05f94f: mov    %r10,0x330(%r15)
  0x000000011c05f956: movabs $0x0,%r10
  0x000000011c05f960: mov    %r10,0x328(%r15)
  0x000000011c05f967: vzeroupper 
  0x000000011c05f96a: cmpq   $0x0,0x8(%r15)
  0x000000011c05f972: je     0x000000011c05f97d
  0x000000011c05f978: jmpq   0x000000011c054780
  0x000000011c05f97d: mov    -0x40(%rbp),%r13
  0x000000011c05f981: mov    -0x38(%rbp),%r14
  0x000000011c05f985: retq   
  0x000000011c05f986: mov    -0x40(%rbp),%r13
  0x000000011c05f98a: vmovsd (%rsp),%xmm0
  0x000000011c05f98f: add    $0x10,%rsp
  0x000000011c05f993: jmpq   0x000000011c05f892
  0x000000011c05f998: cmpq   $0x0,0x8(%rsi)
  0x000000011c05f9a0: jne    0x000000011c05f89f
  0x000000011c05f9a6: add    $0x10,%rsi
  0x000000011c05f9aa: cmp    %rbx,%rsi
  0x000000011c05f9ad: jne    0x000000011c05f998
  0x000000011c05f9af: cmpb   $0x0,-0xb6a58dc(%rip)        # 0x00000001109ba0da = DTraceMethodProbes
  0x000000011c05f9b6: je     0x000000011c05f9f8
  0x000000011c05f9bc: sub    $0x10,%rsp
  0x000000011c05f9c0: vmovsd %xmm0,(%rsp)
  0x000000011c05f9c5: mov    -0x18(%rbp),%rsi
  0x000000011c05f9c9: mov    %r15,%rdi
  0x000000011c05f9cc: test   $0xf,%esp
  0x000000011c05f9d2: je     0x000000011c05f9ea
  0x000000011c05f9d8: sub    $0x8,%rsp
  0x000000011c05f9dc: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c05f9e1: add    $0x8,%rsp
  0x000000011c05f9e5: jmpq   0x000000011c05f9ef
  0x000000011c05f9ea: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c05f9ef: vmovsd (%rsp),%xmm0
  0x000000011c05f9f4: add    $0x10,%rsp
  0x000000011c05f9f8: mov    -0x8(%rbp),%rbx
  0x000000011c05f9fc: cmpl   $0x3,0x408(%r15)
  0x000000011c05fa07: je     0x000000011c05faf0
  0x000000011c05fa0d: cmp    0x418(%r15),%rbx
  0x000000011c05fa14: jle    0x000000011c05faf0
  0x000000011c05fa1a: mov    %r15,%rdi
  0x000000011c05fa1d: test   $0xf,%esp
  0x000000011c05fa23: je     0x000000011c05fa3b
  0x000000011c05fa29: sub    $0x8,%rsp
  0x000000011c05fa2d: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c05fa32: add    $0x8,%rsp
  0x000000011c05fa36: jmpq   0x000000011c05fa40
  0x000000011c05fa3b: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c05fa40: callq  0x000000011c05fa4a
  0x000000011c05fa45: jmpq   0x000000011c05fadc
  0x000000011c05fa4a: lea    0x8(%rsp),%rax
  0x000000011c05fa4f: mov    %r13,-0x40(%rbp)
  0x000000011c05fa53: mov    %r15,%rdi
  0x000000011c05fa56: vzeroupper 
  0x000000011c05fa59: mov    %rbp,0x330(%r15)
  0x000000011c05fa60: mov    %rax,0x320(%r15)
  0x000000011c05fa67: test   $0xf,%esp
  0x000000011c05fa6d: je     0x000000011c05fa85
  0x000000011c05fa73: sub    $0x8,%rsp
  0x000000011c05fa77: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c05fa7c: add    $0x8,%rsp
  0x000000011c05fa80: jmpq   0x000000011c05fa8a
  0x000000011c05fa85: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c05fa8a: movabs $0x0,%r10
  0x000000011c05fa94: mov    %r10,0x320(%r15)
  0x000000011c05fa9b: movabs $0x0,%r10
  0x000000011c05faa5: mov    %r10,0x330(%r15)
  0x000000011c05faac: movabs $0x0,%r10
  0x000000011c05fab6: mov    %r10,0x328(%r15)
  0x000000011c05fabd: vzeroupper 
  0x000000011c05fac0: cmpq   $0x0,0x8(%r15)
  0x000000011c05fac8: je     0x000000011c05fad3
  0x000000011c05face: jmpq   0x000000011c054780
  0x000000011c05fad3: mov    -0x40(%rbp),%r13
  0x000000011c05fad7: mov    -0x38(%rbp),%r14
  0x000000011c05fadb: retq   
  0x000000011c05fadc: movabs $0x1107f3493,%rdi
  0x000000011c05fae6: and    $0xfffffffffffffff0,%rsp
  0x000000011c05faea: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c05faef: hlt    
  0x000000011c05faf0: leaveq 
  0x000000011c05faf1: pop    %rsi
  0x000000011c05faf2: mov    %rbx,%rsp
  0x000000011c05faf5: jmpq   *%rsi
  0x000000011c05faf7: mov    -0x40(%rbp),%r13
  0x000000011c05fafb: mov    -0x38(%rbp),%r14
  0x000000011c05faff: mov    -0x48(%rbp),%rsp
  0x000000011c05fb03: movq   $0x0,-0x10(%rbp)
  0x000000011c05fb0b: mov    0x488(%r15),%rcx
  0x000000011c05fb12: movl   $0xb,0x78(%rcx)
  0x000000011c05fb19: movl   $0x0,0x80(%rcx)
  0x000000011c05fb23: movl   $0xb,0x78(%rcx)
  0x000000011c05fb2a: movabs $0x0,%r10
  0x000000011c05fb34: mov    %r10,0x80(%rcx)
  0x000000011c05fb3b: mov    0x488(%r15),%rcx
  0x000000011c05fb42: movl   $0x0,0x74(%rcx)
  0x000000011c05fb49: mov    0x3dd(%r15),%bl
  0x000000011c05fb50: movb   $0x0,0x3dd(%r15)
  0x000000011c05fb58: mov    -0x18(%rbp),%rcx
  0x000000011c05fb5c: mov    0x20(%rcx),%ecx
  0x000000011c05fb5f: test   $0x20,%ecx
  0x000000011c05fb65: je     0x000000011c05fc69
  0x000000011c05fb6b: test   $0xff,%bl
  0x000000011c05fb6e: jne    0x000000011c05fd74
  0x000000011c05fb74: lea    -0x58(%rbp),%rsi
  0x000000011c05fb78: mov    0x8(%rsi),%rax
  0x000000011c05fb7c: test   %rax,%rax
  0x000000011c05fb7f: jne    0x000000011c05fb8a
  0x000000011c05fb85: jmpq   0x000000011c05fc69
  0x000000011c05fb8a: mov    %r13,-0x40(%rbp)
  0x000000011c05fb8e: lea    (%rsi),%rax
  0x000000011c05fb91: mov    0x8(%rsi),%rcx
  0x000000011c05fb95: movq   $0x0,0x8(%rsi)
  0x000000011c05fb9d: mov    (%rcx),%rdx
  0x000000011c05fba0: and    $0x7,%rdx
  0x000000011c05fba4: cmp    $0x5,%rdx
  0x000000011c05fba8: je     0x000000011c05fc65
  0x000000011c05fbae: mov    (%rax),%rdx
  0x000000011c05fbb1: test   %rdx,%rdx
  0x000000011c05fbb4: je     0x000000011c05fc65
  0x000000011c05fbba: lock cmpxchg %rdx,(%rcx)
  0x000000011c05fbbf: je     0x000000011c05fc65
  0x000000011c05fbc5: mov    %rcx,0x8(%rsi)
  0x000000011c05fbc9: callq  0x000000011c05fbd3
  0x000000011c05fbce: jmpq   0x000000011c05fc65
  0x000000011c05fbd3: lea    0x8(%rsp),%rax
  0x000000011c05fbd8: mov    %r13,-0x40(%rbp)
  0x000000011c05fbdc: mov    %r15,%rdi
  0x000000011c05fbdf: vzeroupper 
  0x000000011c05fbe2: mov    %rbp,0x330(%r15)
  0x000000011c05fbe9: mov    %rax,0x320(%r15)
  0x000000011c05fbf0: test   $0xf,%esp
  0x000000011c05fbf6: je     0x000000011c05fc0e
  0x000000011c05fbfc: sub    $0x8,%rsp
  0x000000011c05fc00: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05fc05: add    $0x8,%rsp
  0x000000011c05fc09: jmpq   0x000000011c05fc13
  0x000000011c05fc0e: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05fc13: movabs $0x0,%r10
  0x000000011c05fc1d: mov    %r10,0x320(%r15)
  0x000000011c05fc24: movabs $0x0,%r10
  0x000000011c05fc2e: mov    %r10,0x330(%r15)
  0x000000011c05fc35: movabs $0x0,%r10
  0x000000011c05fc3f: mov    %r10,0x328(%r15)
  0x000000011c05fc46: vzeroupper 
  0x000000011c05fc49: cmpq   $0x0,0x8(%r15)
  0x000000011c05fc51: je     0x000000011c05fc5c
  0x000000011c05fc57: jmpq   0x000000011c054780
  0x000000011c05fc5c: mov    -0x40(%rbp),%r13
  0x000000011c05fc60: mov    -0x38(%rbp),%r14
  0x000000011c05fc64: retq   
  0x000000011c05fc65: mov    -0x40(%rbp),%r13
  0x000000011c05fc69: mov    -0x48(%rbp),%rsi
  0x000000011c05fc6d: lea    -0x48(%rbp),%rbx
  0x000000011c05fc71: jmpq   0x000000011c05fd6f
  0x000000011c05fc76: mov    %rsi,%rsi
  0x000000011c05fc79: mov    %r13,-0x40(%rbp)
  0x000000011c05fc7d: lea    (%rsi),%rax
  0x000000011c05fc80: mov    0x8(%rsi),%rcx
  0x000000011c05fc84: movq   $0x0,0x8(%rsi)
  0x000000011c05fc8c: mov    (%rcx),%rdx
  0x000000011c05fc8f: and    $0x7,%rdx
  0x000000011c05fc93: cmp    $0x5,%rdx
  0x000000011c05fc97: je     0x000000011c05fd54
  0x000000011c05fc9d: mov    (%rax),%rdx
  0x000000011c05fca0: test   %rdx,%rdx
  0x000000011c05fca3: je     0x000000011c05fd54
  0x000000011c05fca9: lock cmpxchg %rdx,(%rcx)
  0x000000011c05fcae: je     0x000000011c05fd54
  0x000000011c05fcb4: mov    %rcx,0x8(%rsi)
  0x000000011c05fcb8: callq  0x000000011c05fcc2
  0x000000011c05fcbd: jmpq   0x000000011c05fd54
  0x000000011c05fcc2: lea    0x8(%rsp),%rax
  0x000000011c05fcc7: mov    %r13,-0x40(%rbp)
  0x000000011c05fccb: mov    %r15,%rdi
  0x000000011c05fcce: vzeroupper 
  0x000000011c05fcd1: mov    %rbp,0x330(%r15)
  0x000000011c05fcd8: mov    %rax,0x320(%r15)
  0x000000011c05fcdf: test   $0xf,%esp
  0x000000011c05fce5: je     0x000000011c05fcfd
  0x000000011c05fceb: sub    $0x8,%rsp
  0x000000011c05fcef: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05fcf4: add    $0x8,%rsp
  0x000000011c05fcf8: jmpq   0x000000011c05fd02
  0x000000011c05fcfd: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c05fd02: movabs $0x0,%r10
  0x000000011c05fd0c: mov    %r10,0x320(%r15)
  0x000000011c05fd13: movabs $0x0,%r10
  0x000000011c05fd1d: mov    %r10,0x330(%r15)
  0x000000011c05fd24: movabs $0x0,%r10
  0x000000011c05fd2e: mov    %r10,0x328(%r15)
  0x000000011c05fd35: vzeroupper 
  0x000000011c05fd38: cmpq   $0x0,0x8(%r15)
  0x000000011c05fd40: je     0x000000011c05fd4b
  0x000000011c05fd46: jmpq   0x000000011c054780
  0x000000011c05fd4b: mov    -0x40(%rbp),%r13
  0x000000011c05fd4f: mov    -0x38(%rbp),%r14
  0x000000011c05fd53: retq   
  0x000000011c05fd54: mov    -0x40(%rbp),%r13
  0x000000011c05fd58: jmpq   0x000000011c05fc69
  0x000000011c05fd5d: cmpq   $0x0,0x8(%rsi)
  0x000000011c05fd65: jne    0x000000011c05fc76
  0x000000011c05fd6b: add    $0x10,%rsi
  0x000000011c05fd6f: cmp    %rbx,%rsi
  0x000000011c05fd72: jne    0x000000011c05fd5d
  0x000000011c05fd74: cmpb   $0x0,-0xb6a5ca1(%rip)        # 0x00000001109ba0da = DTraceMethodProbes
  0x000000011c05fd7b: je     0x000000011c05fdab
  0x000000011c05fd81: mov    -0x18(%rbp),%rsi
  0x000000011c05fd85: mov    %r15,%rdi
  0x000000011c05fd88: test   $0xf,%esp
  0x000000011c05fd8e: je     0x000000011c05fda6
  0x000000011c05fd94: sub    $0x8,%rsp
  0x000000011c05fd98: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c05fd9d: add    $0x8,%rsp
  0x000000011c05fda1: jmpq   0x000000011c05fdab
  0x000000011c05fda6: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c05fdab: mov    -0x8(%rbp),%rbx
  0x000000011c05fdaf: cmpl   $0x3,0x408(%r15)
  0x000000011c05fdba: je     0x000000011c05fea3
  0x000000011c05fdc0: cmp    0x418(%r15),%rbx
  0x000000011c05fdc7: jle    0x000000011c05fea3
  0x000000011c05fdcd: mov    %r15,%rdi
  0x000000011c05fdd0: test   $0xf,%esp
  0x000000011c05fdd6: je     0x000000011c05fdee
  0x000000011c05fddc: sub    $0x8,%rsp
  0x000000011c05fde0: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c05fde5: add    $0x8,%rsp
  0x000000011c05fde9: jmpq   0x000000011c05fdf3
  0x000000011c05fdee: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c05fdf3: callq  0x000000011c05fdfd
  0x000000011c05fdf8: jmpq   0x000000011c05fe8f
  0x000000011c05fdfd: lea    0x8(%rsp),%rax
  0x000000011c05fe02: mov    %r13,-0x40(%rbp)
  0x000000011c05fe06: mov    %r15,%rdi
  0x000000011c05fe09: vzeroupper 
  0x000000011c05fe0c: mov    %rbp,0x330(%r15)
  0x000000011c05fe13: mov    %rax,0x320(%r15)
  0x000000011c05fe1a: test   $0xf,%esp
  0x000000011c05fe20: je     0x000000011c05fe38
  0x000000011c05fe26: sub    $0x8,%rsp
  0x000000011c05fe2a: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c05fe2f: add    $0x8,%rsp
  0x000000011c05fe33: jmpq   0x000000011c05fe3d
  0x000000011c05fe38: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c05fe3d: movabs $0x0,%r10
  0x000000011c05fe47: mov    %r10,0x320(%r15)
  0x000000011c05fe4e: movabs $0x0,%r10
  0x000000011c05fe58: mov    %r10,0x330(%r15)
  0x000000011c05fe5f: movabs $0x0,%r10
  0x000000011c05fe69: mov    %r10,0x328(%r15)
  0x000000011c05fe70: vzeroupper 
  0x000000011c05fe73: cmpq   $0x0,0x8(%r15)
  0x000000011c05fe7b: je     0x000000011c05fe86
  0x000000011c05fe81: jmpq   0x000000011c054780
  0x000000011c05fe86: mov    -0x40(%rbp),%r13
  0x000000011c05fe8a: mov    -0x38(%rbp),%r14
  0x000000011c05fe8e: retq   
  0x000000011c05fe8f: movabs $0x1107f3493,%rdi
  0x000000011c05fe99: and    $0xfffffffffffffff0,%rsp
  0x000000011c05fe9d: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c05fea2: hlt    
  0x000000011c05fea3: leaveq 
  0x000000011c05fea4: pop    %rsi
  0x000000011c05fea5: mov    %rbx,%rsp
  0x000000011c05fea8: jmpq   *%rsi
  0x000000011c05feaa: nopw   0x0(%rax,%rax,1)
  0x000000011c05feb0: add    %al,(%rax)
  0x000000011c05feb2: add    %al,(%rax)
  0x000000011c05feb4: add    %al,(%rax)
  0x000000011c05feb6: add    %al,(%rax)
  0x000000011c05feb8: add    %al,(%rax)
  0x000000011c05feba: add    %al,(%rax)
  0x000000011c05febc: add    %al,(%rax)
  0x000000011c05febe: add    %al,(%rax)

----------------------------------------------------------------------
result handlers for native calls  [0x000000011c05fee0, 0x000000011c05ff00]  32 bytes

  0x000000011c05fee0: and    $0xff,%eax
  0x000000011c05fee6: setne  %al
  0x000000011c05fee9: retq   
  0x000000011c05feea: movzwl %ax,%eax
  0x000000011c05feed: retq   
  0x000000011c05feee: movsbl %al,%eax
  0x000000011c05fef1: retq   
  0x000000011c05fef2: movswl %ax,%eax
  0x000000011c05fef5: retq   
  0x000000011c05fef6: retq   
  0x000000011c05fef7: retq   
  0x000000011c05fef8: retq   
  0x000000011c05fef9: retq   
  0x000000011c05fefa: retq   
  0x000000011c05fefb: mov    0x10(%rbp),%rax
  0x000000011c05feff: retq   

----------------------------------------------------------------------
safepoint entry points  [0x000000011c05ff20, 0x000000011c060640]  1824 bytes

  0x000000011c05ff20: push   %rax
  0x000000011c05ff21: callq  0x000000011c05ff2b
  0x000000011c05ff26: jmpq   0x000000011c05ffbd
  0x000000011c05ff2b: lea    0x8(%rsp),%rax
  0x000000011c05ff30: mov    %r13,-0x40(%rbp)
  0x000000011c05ff34: mov    %r15,%rdi
  0x000000011c05ff37: vzeroupper 
  0x000000011c05ff3a: mov    %rbp,0x330(%r15)
  0x000000011c05ff41: mov    %rax,0x320(%r15)
  0x000000011c05ff48: test   $0xf,%esp
  0x000000011c05ff4e: je     0x000000011c05ff66
  0x000000011c05ff54: sub    $0x8,%rsp
  0x000000011c05ff58: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c05ff5d: add    $0x8,%rsp
  0x000000011c05ff61: jmpq   0x000000011c05ff6b
  0x000000011c05ff66: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c05ff6b: movabs $0x0,%r10
  0x000000011c05ff75: mov    %r10,0x320(%r15)
  0x000000011c05ff7c: movabs $0x0,%r10
  0x000000011c05ff86: mov    %r10,0x330(%r15)
  0x000000011c05ff8d: movabs $0x0,%r10
  0x000000011c05ff97: mov    %r10,0x328(%r15)
  0x000000011c05ff9e: vzeroupper 
  0x000000011c05ffa1: cmpq   $0x0,0x8(%r15)
  0x000000011c05ffa9: je     0x000000011c05ffb4
  0x000000011c05ffaf: jmpq   0x000000011c054780
  0x000000011c05ffb4: mov    -0x40(%rbp),%r13
  0x000000011c05ffb8: mov    -0x38(%rbp),%r14
  0x000000011c05ffbc: retq   
  0x000000011c05ffbd: movzbl 0x0(%r13),%ebx
  0x000000011c05ffc2: movabs $0x1109d2a20,%r10
  0x000000011c05ffcc: jmpq   *(%r10,%rbx,8)
  0x000000011c05ffd0: push   %rax
  0x000000011c05ffd1: callq  0x000000011c05ffdb
  0x000000011c05ffd6: jmpq   0x000000011c06006d
  0x000000011c05ffdb: lea    0x8(%rsp),%rax
  0x000000011c05ffe0: mov    %r13,-0x40(%rbp)
  0x000000011c05ffe4: mov    %r15,%rdi
  0x000000011c05ffe7: vzeroupper 
  0x000000011c05ffea: mov    %rbp,0x330(%r15)
  0x000000011c05fff1: mov    %rax,0x320(%r15)
  0x000000011c05fff8: test   $0xf,%esp
  0x000000011c05fffe: je     0x000000011c060016
  0x000000011c060004: sub    $0x8,%rsp
  0x000000011c060008: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c06000d: add    $0x8,%rsp
  0x000000011c060011: jmpq   0x000000011c06001b
  0x000000011c060016: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c06001b: movabs $0x0,%r10
  0x000000011c060025: mov    %r10,0x320(%r15)
  0x000000011c06002c: movabs $0x0,%r10
  0x000000011c060036: mov    %r10,0x330(%r15)
  0x000000011c06003d: movabs $0x0,%r10
  0x000000011c060047: mov    %r10,0x328(%r15)
  0x000000011c06004e: vzeroupper 
  0x000000011c060051: cmpq   $0x0,0x8(%r15)
  0x000000011c060059: je     0x000000011c060064
  0x000000011c06005f: jmpq   0x000000011c054780
  0x000000011c060064: mov    -0x40(%rbp),%r13
  0x000000011c060068: mov    -0x38(%rbp),%r14
  0x000000011c06006c: retq   
  0x000000011c06006d: movzbl 0x0(%r13),%ebx
  0x000000011c060072: movabs $0x1109d2a20,%r10
  0x000000011c06007c: jmpq   *(%r10,%rbx,8)
  0x000000011c060080: push   %rax
  0x000000011c060081: callq  0x000000011c06008b
  0x000000011c060086: jmpq   0x000000011c06011d
  0x000000011c06008b: lea    0x8(%rsp),%rax
  0x000000011c060090: mov    %r13,-0x40(%rbp)
  0x000000011c060094: mov    %r15,%rdi
  0x000000011c060097: vzeroupper 
  0x000000011c06009a: mov    %rbp,0x330(%r15)
  0x000000011c0600a1: mov    %rax,0x320(%r15)
  0x000000011c0600a8: test   $0xf,%esp
  0x000000011c0600ae: je     0x000000011c0600c6
  0x000000011c0600b4: sub    $0x8,%rsp
  0x000000011c0600b8: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c0600bd: add    $0x8,%rsp
  0x000000011c0600c1: jmpq   0x000000011c0600cb
  0x000000011c0600c6: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c0600cb: movabs $0x0,%r10
  0x000000011c0600d5: mov    %r10,0x320(%r15)
  0x000000011c0600dc: movabs $0x0,%r10
  0x000000011c0600e6: mov    %r10,0x330(%r15)
  0x000000011c0600ed: movabs $0x0,%r10
  0x000000011c0600f7: mov    %r10,0x328(%r15)
  0x000000011c0600fe: vzeroupper 
  0x000000011c060101: cmpq   $0x0,0x8(%r15)
  0x000000011c060109: je     0x000000011c060114
  0x000000011c06010f: jmpq   0x000000011c054780
  0x000000011c060114: mov    -0x40(%rbp),%r13
  0x000000011c060118: mov    -0x38(%rbp),%r14
  0x000000011c06011c: retq   
  0x000000011c06011d: movzbl 0x0(%r13),%ebx
  0x000000011c060122: movabs $0x1109d2a20,%r10
  0x000000011c06012c: jmpq   *(%r10,%rbx,8)
  0x000000011c060130: push   %rax
  0x000000011c060131: callq  0x000000011c06013b
  0x000000011c060136: jmpq   0x000000011c0601cd
  0x000000011c06013b: lea    0x8(%rsp),%rax
  0x000000011c060140: mov    %r13,-0x40(%rbp)
  0x000000011c060144: mov    %r15,%rdi
  0x000000011c060147: vzeroupper 
  0x000000011c06014a: mov    %rbp,0x330(%r15)
  0x000000011c060151: mov    %rax,0x320(%r15)
  0x000000011c060158: test   $0xf,%esp
  0x000000011c06015e: je     0x000000011c060176
  0x000000011c060164: sub    $0x8,%rsp
  0x000000011c060168: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c06016d: add    $0x8,%rsp
  0x000000011c060171: jmpq   0x000000011c06017b
  0x000000011c060176: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c06017b: movabs $0x0,%r10
  0x000000011c060185: mov    %r10,0x320(%r15)
  0x000000011c06018c: movabs $0x0,%r10
  0x000000011c060196: mov    %r10,0x330(%r15)
  0x000000011c06019d: movabs $0x0,%r10
  0x000000011c0601a7: mov    %r10,0x328(%r15)
  0x000000011c0601ae: vzeroupper 
  0x000000011c0601b1: cmpq   $0x0,0x8(%r15)
  0x000000011c0601b9: je     0x000000011c0601c4
  0x000000011c0601bf: jmpq   0x000000011c054780
  0x000000011c0601c4: mov    -0x40(%rbp),%r13
  0x000000011c0601c8: mov    -0x38(%rbp),%r14
  0x000000011c0601cc: retq   
  0x000000011c0601cd: movzbl 0x0(%r13),%ebx
  0x000000011c0601d2: movabs $0x1109d2a20,%r10
  0x000000011c0601dc: jmpq   *(%r10,%rbx,8)
  0x000000011c0601e0: push   %rax
  0x000000011c0601e1: callq  0x000000011c0601eb
  0x000000011c0601e6: jmpq   0x000000011c06027d
  0x000000011c0601eb: lea    0x8(%rsp),%rax
  0x000000011c0601f0: mov    %r13,-0x40(%rbp)
  0x000000011c0601f4: mov    %r15,%rdi
  0x000000011c0601f7: vzeroupper 
  0x000000011c0601fa: mov    %rbp,0x330(%r15)
  0x000000011c060201: mov    %rax,0x320(%r15)
  0x000000011c060208: test   $0xf,%esp
  0x000000011c06020e: je     0x000000011c060226
  0x000000011c060214: sub    $0x8,%rsp
  0x000000011c060218: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c06021d: add    $0x8,%rsp
  0x000000011c060221: jmpq   0x000000011c06022b
  0x000000011c060226: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c06022b: movabs $0x0,%r10
  0x000000011c060235: mov    %r10,0x320(%r15)
  0x000000011c06023c: movabs $0x0,%r10
  0x000000011c060246: mov    %r10,0x330(%r15)
  0x000000011c06024d: movabs $0x0,%r10
  0x000000011c060257: mov    %r10,0x328(%r15)
  0x000000011c06025e: vzeroupper 
  0x000000011c060261: cmpq   $0x0,0x8(%r15)
  0x000000011c060269: je     0x000000011c060274
  0x000000011c06026f: jmpq   0x000000011c054780
  0x000000011c060274: mov    -0x40(%rbp),%r13
  0x000000011c060278: mov    -0x38(%rbp),%r14
  0x000000011c06027c: retq   
  0x000000011c06027d: movzbl 0x0(%r13),%ebx
  0x000000011c060282: movabs $0x1109d2a20,%r10
  0x000000011c06028c: jmpq   *(%r10,%rbx,8)
  0x000000011c060290: push   %rax
  0x000000011c060291: callq  0x000000011c06029b
  0x000000011c060296: jmpq   0x000000011c06032d
  0x000000011c06029b: lea    0x8(%rsp),%rax
  0x000000011c0602a0: mov    %r13,-0x40(%rbp)
  0x000000011c0602a4: mov    %r15,%rdi
  0x000000011c0602a7: vzeroupper 
  0x000000011c0602aa: mov    %rbp,0x330(%r15)
  0x000000011c0602b1: mov    %rax,0x320(%r15)
  0x000000011c0602b8: test   $0xf,%esp
  0x000000011c0602be: je     0x000000011c0602d6
  0x000000011c0602c4: sub    $0x8,%rsp
  0x000000011c0602c8: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c0602cd: add    $0x8,%rsp
  0x000000011c0602d1: jmpq   0x000000011c0602db
  0x000000011c0602d6: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c0602db: movabs $0x0,%r10
  0x000000011c0602e5: mov    %r10,0x320(%r15)
  0x000000011c0602ec: movabs $0x0,%r10
  0x000000011c0602f6: mov    %r10,0x330(%r15)
  0x000000011c0602fd: movabs $0x0,%r10
  0x000000011c060307: mov    %r10,0x328(%r15)
  0x000000011c06030e: vzeroupper 
  0x000000011c060311: cmpq   $0x0,0x8(%r15)
  0x000000011c060319: je     0x000000011c060324
  0x000000011c06031f: jmpq   0x000000011c054780
  0x000000011c060324: mov    -0x40(%rbp),%r13
  0x000000011c060328: mov    -0x38(%rbp),%r14
  0x000000011c06032c: retq   
  0x000000011c06032d: movzbl 0x0(%r13),%ebx
  0x000000011c060332: movabs $0x1109d2a20,%r10
  0x000000011c06033c: jmpq   *(%r10,%rbx,8)
  0x000000011c060340: sub    $0x10,%rsp
  0x000000011c060344: mov    %rax,(%rsp)
  0x000000011c060348: movabs $0x0,%r10
  0x000000011c060352: mov    %r10,0x8(%rsp)
  0x000000011c060357: callq  0x000000011c060361
  0x000000011c06035c: jmpq   0x000000011c0603f3
  0x000000011c060361: lea    0x8(%rsp),%rax
  0x000000011c060366: mov    %r13,-0x40(%rbp)
  0x000000011c06036a: mov    %r15,%rdi
  0x000000011c06036d: vzeroupper 
  0x000000011c060370: mov    %rbp,0x330(%r15)
  0x000000011c060377: mov    %rax,0x320(%r15)
  0x000000011c06037e: test   $0xf,%esp
  0x000000011c060384: je     0x000000011c06039c
  0x000000011c06038a: sub    $0x8,%rsp
  0x000000011c06038e: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c060393: add    $0x8,%rsp
  0x000000011c060397: jmpq   0x000000011c0603a1
  0x000000011c06039c: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c0603a1: movabs $0x0,%r10
  0x000000011c0603ab: mov    %r10,0x320(%r15)
  0x000000011c0603b2: movabs $0x0,%r10
  0x000000011c0603bc: mov    %r10,0x330(%r15)
  0x000000011c0603c3: movabs $0x0,%r10
  0x000000011c0603cd: mov    %r10,0x328(%r15)
  0x000000011c0603d4: vzeroupper 
  0x000000011c0603d7: cmpq   $0x0,0x8(%r15)
  0x000000011c0603df: je     0x000000011c0603ea
  0x000000011c0603e5: jmpq   0x000000011c054780
  0x000000011c0603ea: mov    -0x40(%rbp),%r13
  0x000000011c0603ee: mov    -0x38(%rbp),%r14
  0x000000011c0603f2: retq   
  0x000000011c0603f3: movzbl 0x0(%r13),%ebx
  0x000000011c0603f8: movabs $0x1109d2a20,%r10
  0x000000011c060402: jmpq   *(%r10,%rbx,8)
  0x000000011c060406: sub    $0x8,%rsp
  0x000000011c06040a: vmovss %xmm0,(%rsp)
  0x000000011c06040f: callq  0x000000011c060419
  0x000000011c060414: jmpq   0x000000011c0604ab
  0x000000011c060419: lea    0x8(%rsp),%rax
  0x000000011c06041e: mov    %r13,-0x40(%rbp)
  0x000000011c060422: mov    %r15,%rdi
  0x000000011c060425: vzeroupper 
  0x000000011c060428: mov    %rbp,0x330(%r15)
  0x000000011c06042f: mov    %rax,0x320(%r15)
  0x000000011c060436: test   $0xf,%esp
  0x000000011c06043c: je     0x000000011c060454
  0x000000011c060442: sub    $0x8,%rsp
  0x000000011c060446: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c06044b: add    $0x8,%rsp
  0x000000011c06044f: jmpq   0x000000011c060459
  0x000000011c060454: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c060459: movabs $0x0,%r10
  0x000000011c060463: mov    %r10,0x320(%r15)
  0x000000011c06046a: movabs $0x0,%r10
  0x000000011c060474: mov    %r10,0x330(%r15)
  0x000000011c06047b: movabs $0x0,%r10
  0x000000011c060485: mov    %r10,0x328(%r15)
  0x000000011c06048c: vzeroupper 
  0x000000011c06048f: cmpq   $0x0,0x8(%r15)
  0x000000011c060497: je     0x000000011c0604a2
  0x000000011c06049d: jmpq   0x000000011c054780
  0x000000011c0604a2: mov    -0x40(%rbp),%r13
  0x000000011c0604a6: mov    -0x38(%rbp),%r14
  0x000000011c0604aa: retq   
  0x000000011c0604ab: movzbl 0x0(%r13),%ebx
  0x000000011c0604b0: movabs $0x1109d2a20,%r10
  0x000000011c0604ba: jmpq   *(%r10,%rbx,8)
  0x000000011c0604be: sub    $0x10,%rsp
  0x000000011c0604c2: vmovsd %xmm0,(%rsp)
  0x000000011c0604c7: callq  0x000000011c0604d1
  0x000000011c0604cc: jmpq   0x000000011c060563
  0x000000011c0604d1: lea    0x8(%rsp),%rax
  0x000000011c0604d6: mov    %r13,-0x40(%rbp)
  0x000000011c0604da: mov    %r15,%rdi
  0x000000011c0604dd: vzeroupper 
  0x000000011c0604e0: mov    %rbp,0x330(%r15)
  0x000000011c0604e7: mov    %rax,0x320(%r15)
  0x000000011c0604ee: test   $0xf,%esp
  0x000000011c0604f4: je     0x000000011c06050c
  0x000000011c0604fa: sub    $0x8,%rsp
  0x000000011c0604fe: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c060503: add    $0x8,%rsp
  0x000000011c060507: jmpq   0x000000011c060511
  0x000000011c06050c: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c060511: movabs $0x0,%r10
  0x000000011c06051b: mov    %r10,0x320(%r15)
  0x000000011c060522: movabs $0x0,%r10
  0x000000011c06052c: mov    %r10,0x330(%r15)
  0x000000011c060533: movabs $0x0,%r10
  0x000000011c06053d: mov    %r10,0x328(%r15)
  0x000000011c060544: vzeroupper 
  0x000000011c060547: cmpq   $0x0,0x8(%r15)
  0x000000011c06054f: je     0x000000011c06055a
  0x000000011c060555: jmpq   0x000000011c054780
  0x000000011c06055a: mov    -0x40(%rbp),%r13
  0x000000011c06055e: mov    -0x38(%rbp),%r14
  0x000000011c060562: retq   
  0x000000011c060563: movzbl 0x0(%r13),%ebx
  0x000000011c060568: movabs $0x1109d2a20,%r10
  0x000000011c060572: jmpq   *(%r10,%rbx,8)
  0x000000011c060576: callq  0x000000011c060580
  0x000000011c06057b: jmpq   0x000000011c060612
  0x000000011c060580: lea    0x8(%rsp),%rax
  0x000000011c060585: mov    %r13,-0x40(%rbp)
  0x000000011c060589: mov    %r15,%rdi
  0x000000011c06058c: vzeroupper 
  0x000000011c06058f: mov    %rbp,0x330(%r15)
  0x000000011c060596: mov    %rax,0x320(%r15)
  0x000000011c06059d: test   $0xf,%esp
  0x000000011c0605a3: je     0x000000011c0605bb
  0x000000011c0605a9: sub    $0x8,%rsp
  0x000000011c0605ad: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c0605b2: add    $0x8,%rsp
  0x000000011c0605b6: jmpq   0x000000011c0605c0
  0x000000011c0605bb: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c0605c0: movabs $0x0,%r10
  0x000000011c0605ca: mov    %r10,0x320(%r15)
  0x000000011c0605d1: movabs $0x0,%r10
  0x000000011c0605db: mov    %r10,0x330(%r15)
  0x000000011c0605e2: movabs $0x0,%r10
  0x000000011c0605ec: mov    %r10,0x328(%r15)
  0x000000011c0605f3: vzeroupper 
  0x000000011c0605f6: cmpq   $0x0,0x8(%r15)
  0x000000011c0605fe: je     0x000000011c060609
  0x000000011c060604: jmpq   0x000000011c054780
  0x000000011c060609: mov    -0x40(%rbp),%r13
  0x000000011c06060d: mov    -0x38(%rbp),%r14
  0x000000011c060611: retq   
  0x000000011c060612: movzbl 0x0(%r13),%ebx
  0x000000011c060617: movabs $0x1109d2a20,%r10
  0x000000011c060621: jmpq   *(%r10,%rbx,8)
  0x000000011c060625: data16 xchg %ax,%ax
  0x000000011c060628: add    %al,(%rax)
  0x000000011c06062a: add    %al,(%rax)
  0x000000011c06062c: add    %al,(%rax)
  0x000000011c06062e: add    %al,(%rax)
  0x000000011c060630: add    %al,(%rax)
  0x000000011c060632: add    %al,(%rax)
  0x000000011c060634: add    %al,(%rax)
  0x000000011c060636: add    %al,(%rax)
  0x000000011c060638: add    %al,(%rax)
  0x000000011c06063a: add    %al,(%rax)
  0x000000011c06063c: add    %al,(%rax)
  0x000000011c06063e: add    %al,(%rax)

----------------------------------------------------------------------
exception handling  [0x000000011c060660, 0x000000011c061520]  3776 bytes

  0x000000011c060660: movq   $0x0,-0x10(%rbp)
  0x000000011c060668: mov    -0x40(%rbp),%r13
  0x000000011c06066c: mov    -0x38(%rbp),%r14
  0x000000011c060670: xor    %r12,%r12
  0x000000011c060673: mov    %rax,%rsi
  0x000000011c060676: mov    -0x48(%rbp),%rsp
  0x000000011c06067a: movq   $0x0,-0x10(%rbp)
  0x000000011c060682: callq  0x000000011c06068c
  0x000000011c060687: jmpq   0x000000011c060736
  0x000000011c06068c: lea    0x8(%rsp),%rax
  0x000000011c060691: mov    %r13,-0x40(%rbp)
  0x000000011c060695: mov    %r15,%rdi
  0x000000011c060698: vzeroupper 
  0x000000011c06069b: mov    %rbp,0x330(%r15)
  0x000000011c0606a2: mov    %rax,0x320(%r15)
  0x000000011c0606a9: test   $0xf,%esp
  0x000000011c0606af: je     0x000000011c0606c7
  0x000000011c0606b5: sub    $0x8,%rsp
  0x000000011c0606b9: callq  0x00000001103aae28 = InterpreterRuntime::exception_handler_for_exception(JavaThread*, oopDesc*)
  0x000000011c0606be: add    $0x8,%rsp
  0x000000011c0606c2: jmpq   0x000000011c0606cc
  0x000000011c0606c7: callq  0x00000001103aae28 = InterpreterRuntime::exception_handler_for_exception(JavaThread*, oopDesc*)
  0x000000011c0606cc: movabs $0x0,%r10
  0x000000011c0606d6: mov    %r10,0x320(%r15)
  0x000000011c0606dd: movabs $0x0,%r10
  0x000000011c0606e7: mov    %r10,0x330(%r15)
  0x000000011c0606ee: movabs $0x0,%r10
  0x000000011c0606f8: mov    %r10,0x328(%r15)
  0x000000011c0606ff: vzeroupper 
  0x000000011c060702: cmpq   $0x0,0x8(%r15)
  0x000000011c06070a: je     0x000000011c060715
  0x000000011c060710: jmpq   0x000000011c054780
  0x000000011c060715: mov    0x380(%r15),%rdx
  0x000000011c06071c: movabs $0x0,%r10
  0x000000011c060726: mov    %r10,0x380(%r15)
  0x000000011c06072d: mov    -0x40(%rbp),%r13
  0x000000011c060731: mov    -0x38(%rbp),%r14
  0x000000011c060735: retq   
  0x000000011c060736: push   %rdx
  0x000000011c060737: jmpq   *%rax
  0x000000011c060739: mov    -0x48(%rbp),%rsp
  0x000000011c06073d: movq   $0x0,-0x10(%rbp)
  0x000000011c060745: mov    0x44c(%r15),%edx
  0x000000011c06074c: or     $0x2,%edx
  0x000000011c06074f: mov    %edx,0x44c(%r15)
  0x000000011c060756: mov    0x8(%rbp),%rsi
  0x000000011c06075a: mov    %rsi,%rdi
  0x000000011c06075d: test   $0xf,%esp
  0x000000011c060763: je     0x000000011c06077b
  0x000000011c060769: sub    $0x8,%rsp
  0x000000011c06076d: callq  0x00000001103ad868 = InterpreterRuntime::interpreter_contains(unsigned char*)
  0x000000011c060772: add    $0x8,%rsp
  0x000000011c060776: jmpq   0x000000011c060780
  0x000000011c06077b: callq  0x00000001103ad868 = InterpreterRuntime::interpreter_contains(unsigned char*)
  0x000000011c060780: test   %eax,%eax
  0x000000011c060782: jne    0x000000011c060b3a
  0x000000011c060788: mov    -0x18(%rbp),%rax
  0x000000011c06078c: mov    0x8(%rax),%rax
  0x000000011c060790: movzwl 0x34(%rax),%eax
  0x000000011c060794: shl    $0x3,%eax
  0x000000011c060797: mov    -0x38(%rbp),%r14
  0x000000011c06079b: sub    %rax,%r14
  0x000000011c06079e: add    $0x8,%r14
  0x000000011c0607a2: mov    %r14,%rdx
  0x000000011c0607a5: mov    %rax,%rsi
  0x000000011c0607a8: mov    %r15,%rdi
  0x000000011c0607ab: test   $0xf,%esp
  0x000000011c0607b1: je     0x000000011c0607c9
  0x000000011c0607b7: sub    $0x8,%rsp
  0x000000011c0607bb: callq  0x000000011028311a = Deoptimization::popframe_preserve_args(JavaThread*, int, void*)
  0x000000011c0607c0: add    $0x8,%rsp
  0x000000011c0607c4: jmpq   0x000000011c0607ce
  0x000000011c0607c9: callq  0x000000011028311a = Deoptimization::popframe_preserve_args(JavaThread*, int, void*)
  0x000000011c0607ce: mov    0x3dd(%r15),%bl
  0x000000011c0607d5: movb   $0x0,0x3dd(%r15)
  0x000000011c0607dd: mov    -0x18(%rbp),%rcx
  0x000000011c0607e1: mov    0x20(%rcx),%ecx
  0x000000011c0607e4: test   $0x20,%ecx
  0x000000011c0607ea: je     0x000000011c0608ee
  0x000000011c0607f0: test   $0xff,%bl
  0x000000011c0607f3: jne    0x000000011c0609f9
  0x000000011c0607f9: lea    -0x58(%rbp),%rsi
  0x000000011c0607fd: mov    0x8(%rsi),%rax
  0x000000011c060801: test   %rax,%rax
  0x000000011c060804: jne    0x000000011c06080f
  0x000000011c06080a: jmpq   0x000000011c0608ee
  0x000000011c06080f: mov    %r13,-0x40(%rbp)
  0x000000011c060813: lea    (%rsi),%rax
  0x000000011c060816: mov    0x8(%rsi),%rcx
  0x000000011c06081a: movq   $0x0,0x8(%rsi)
  0x000000011c060822: mov    (%rcx),%rdx
  0x000000011c060825: and    $0x7,%rdx
  0x000000011c060829: cmp    $0x5,%rdx
  0x000000011c06082d: je     0x000000011c0608ea
  0x000000011c060833: mov    (%rax),%rdx
  0x000000011c060836: test   %rdx,%rdx
  0x000000011c060839: je     0x000000011c0608ea
  0x000000011c06083f: lock cmpxchg %rdx,(%rcx)
  0x000000011c060844: je     0x000000011c0608ea
  0x000000011c06084a: mov    %rcx,0x8(%rsi)
  0x000000011c06084e: callq  0x000000011c060858
  0x000000011c060853: jmpq   0x000000011c0608ea
  0x000000011c060858: lea    0x8(%rsp),%rax
  0x000000011c06085d: mov    %r13,-0x40(%rbp)
  0x000000011c060861: mov    %r15,%rdi
  0x000000011c060864: vzeroupper 
  0x000000011c060867: mov    %rbp,0x330(%r15)
  0x000000011c06086e: mov    %rax,0x320(%r15)
  0x000000011c060875: test   $0xf,%esp
  0x000000011c06087b: je     0x000000011c060893
  0x000000011c060881: sub    $0x8,%rsp
  0x000000011c060885: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c06088a: add    $0x8,%rsp
  0x000000011c06088e: jmpq   0x000000011c060898
  0x000000011c060893: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c060898: movabs $0x0,%r10
  0x000000011c0608a2: mov    %r10,0x320(%r15)
  0x000000011c0608a9: movabs $0x0,%r10
  0x000000011c0608b3: mov    %r10,0x330(%r15)
  0x000000011c0608ba: movabs $0x0,%r10
  0x000000011c0608c4: mov    %r10,0x328(%r15)
  0x000000011c0608cb: vzeroupper 
  0x000000011c0608ce: cmpq   $0x0,0x8(%r15)
  0x000000011c0608d6: je     0x000000011c0608e1
  0x000000011c0608dc: jmpq   0x000000011c054780
  0x000000011c0608e1: mov    -0x40(%rbp),%r13
  0x000000011c0608e5: mov    -0x38(%rbp),%r14
  0x000000011c0608e9: retq   
  0x000000011c0608ea: mov    -0x40(%rbp),%r13
  0x000000011c0608ee: mov    -0x48(%rbp),%rsi
  0x000000011c0608f2: lea    -0x48(%rbp),%rbx
  0x000000011c0608f6: jmpq   0x000000011c0609f4
  0x000000011c0608fb: mov    %rsi,%rsi
  0x000000011c0608fe: mov    %r13,-0x40(%rbp)
  0x000000011c060902: lea    (%rsi),%rax
  0x000000011c060905: mov    0x8(%rsi),%rcx
  0x000000011c060909: movq   $0x0,0x8(%rsi)
  0x000000011c060911: mov    (%rcx),%rdx
  0x000000011c060914: and    $0x7,%rdx
  0x000000011c060918: cmp    $0x5,%rdx
  0x000000011c06091c: je     0x000000011c0609d9
  0x000000011c060922: mov    (%rax),%rdx
  0x000000011c060925: test   %rdx,%rdx
  0x000000011c060928: je     0x000000011c0609d9
  0x000000011c06092e: lock cmpxchg %rdx,(%rcx)
  0x000000011c060933: je     0x000000011c0609d9
  0x000000011c060939: mov    %rcx,0x8(%rsi)
  0x000000011c06093d: callq  0x000000011c060947
  0x000000011c060942: jmpq   0x000000011c0609d9
  0x000000011c060947: lea    0x8(%rsp),%rax
  0x000000011c06094c: mov    %r13,-0x40(%rbp)
  0x000000011c060950: mov    %r15,%rdi
  0x000000011c060953: vzeroupper 
  0x000000011c060956: mov    %rbp,0x330(%r15)
  0x000000011c06095d: mov    %rax,0x320(%r15)
  0x000000011c060964: test   $0xf,%esp
  0x000000011c06096a: je     0x000000011c060982
  0x000000011c060970: sub    $0x8,%rsp
  0x000000011c060974: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c060979: add    $0x8,%rsp
  0x000000011c06097d: jmpq   0x000000011c060987
  0x000000011c060982: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c060987: movabs $0x0,%r10
  0x000000011c060991: mov    %r10,0x320(%r15)
  0x000000011c060998: movabs $0x0,%r10
  0x000000011c0609a2: mov    %r10,0x330(%r15)
  0x000000011c0609a9: movabs $0x0,%r10
  0x000000011c0609b3: mov    %r10,0x328(%r15)
  0x000000011c0609ba: vzeroupper 
  0x000000011c0609bd: cmpq   $0x0,0x8(%r15)
  0x000000011c0609c5: je     0x000000011c0609d0
  0x000000011c0609cb: jmpq   0x000000011c054780
  0x000000011c0609d0: mov    -0x40(%rbp),%r13
  0x000000011c0609d4: mov    -0x38(%rbp),%r14
  0x000000011c0609d8: retq   
  0x000000011c0609d9: mov    -0x40(%rbp),%r13
  0x000000011c0609dd: jmpq   0x000000011c0608ee
  0x000000011c0609e2: cmpq   $0x0,0x8(%rsi)
  0x000000011c0609ea: jne    0x000000011c0608fb
  0x000000011c0609f0: add    $0x10,%rsi
  0x000000011c0609f4: cmp    %rbx,%rsi
  0x000000011c0609f7: jne    0x000000011c0609e2
  0x000000011c0609f9: cmpb   $0x0,-0xb6a6926(%rip)        # 0x00000001109ba0da = DTraceMethodProbes
  0x000000011c060a00: je     0x000000011c060a30
  0x000000011c060a06: mov    -0x18(%rbp),%rsi
  0x000000011c060a0a: mov    %r15,%rdi
  0x000000011c060a0d: test   $0xf,%esp
  0x000000011c060a13: je     0x000000011c060a2b
  0x000000011c060a19: sub    $0x8,%rsp
  0x000000011c060a1d: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c060a22: add    $0x8,%rsp
  0x000000011c060a26: jmpq   0x000000011c060a30
  0x000000011c060a2b: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c060a30: mov    -0x8(%rbp),%rbx
  0x000000011c060a34: cmpl   $0x3,0x408(%r15)
  0x000000011c060a3f: je     0x000000011c060b28
  0x000000011c060a45: cmp    0x418(%r15),%rbx
  0x000000011c060a4c: jle    0x000000011c060b28
  0x000000011c060a52: mov    %r15,%rdi
  0x000000011c060a55: test   $0xf,%esp
  0x000000011c060a5b: je     0x000000011c060a73
  0x000000011c060a61: sub    $0x8,%rsp
  0x000000011c060a65: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c060a6a: add    $0x8,%rsp
  0x000000011c060a6e: jmpq   0x000000011c060a78
  0x000000011c060a73: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c060a78: callq  0x000000011c060a82
  0x000000011c060a7d: jmpq   0x000000011c060b14
  0x000000011c060a82: lea    0x8(%rsp),%rax
  0x000000011c060a87: mov    %r13,-0x40(%rbp)
  0x000000011c060a8b: mov    %r15,%rdi
  0x000000011c060a8e: vzeroupper 
  0x000000011c060a91: mov    %rbp,0x330(%r15)
  0x000000011c060a98: mov    %rax,0x320(%r15)
  0x000000011c060a9f: test   $0xf,%esp
  0x000000011c060aa5: je     0x000000011c060abd
  0x000000011c060aab: sub    $0x8,%rsp
  0x000000011c060aaf: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c060ab4: add    $0x8,%rsp
  0x000000011c060ab8: jmpq   0x000000011c060ac2
  0x000000011c060abd: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c060ac2: movabs $0x0,%r10
  0x000000011c060acc: mov    %r10,0x320(%r15)
  0x000000011c060ad3: movabs $0x0,%r10
  0x000000011c060add: mov    %r10,0x330(%r15)
  0x000000011c060ae4: movabs $0x0,%r10
  0x000000011c060aee: mov    %r10,0x328(%r15)
  0x000000011c060af5: vzeroupper 
  0x000000011c060af8: cmpq   $0x0,0x8(%r15)
  0x000000011c060b00: je     0x000000011c060b0b
  0x000000011c060b06: jmpq   0x000000011c054780
  0x000000011c060b0b: mov    -0x40(%rbp),%r13
  0x000000011c060b0f: mov    -0x38(%rbp),%r14
  0x000000011c060b13: retq   
  0x000000011c060b14: movabs $0x1107f3493,%rdi
  0x000000011c060b1e: and    $0xfffffffffffffff0,%rsp
  0x000000011c060b22: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c060b27: hlt    
  0x000000011c060b28: leaveq 
  0x000000011c060b29: pop    %rdx
  0x000000011c060b2a: mov    %rbx,%rsp
  0x000000011c060b2d: movl   $0x4,0x44c(%r15)
  0x000000011c060b38: jmpq   *%rdx
  0x000000011c060b3a: mov    0x3dd(%r15),%bl
  0x000000011c060b41: movb   $0x0,0x3dd(%r15)
  0x000000011c060b49: mov    -0x18(%rbp),%rcx
  0x000000011c060b4d: mov    0x20(%rcx),%ecx
  0x000000011c060b50: test   $0x20,%ecx
  0x000000011c060b56: je     0x000000011c060c5a
  0x000000011c060b5c: test   $0xff,%bl
  0x000000011c060b5f: jne    0x000000011c060d65
  0x000000011c060b65: lea    -0x58(%rbp),%rsi
  0x000000011c060b69: mov    0x8(%rsi),%rax
  0x000000011c060b6d: test   %rax,%rax
  0x000000011c060b70: jne    0x000000011c060b7b
  0x000000011c060b76: jmpq   0x000000011c060c5a
  0x000000011c060b7b: mov    %r13,-0x40(%rbp)
  0x000000011c060b7f: lea    (%rsi),%rax
  0x000000011c060b82: mov    0x8(%rsi),%rcx
  0x000000011c060b86: movq   $0x0,0x8(%rsi)
  0x000000011c060b8e: mov    (%rcx),%rdx
  0x000000011c060b91: and    $0x7,%rdx
  0x000000011c060b95: cmp    $0x5,%rdx
  0x000000011c060b99: je     0x000000011c060c56
  0x000000011c060b9f: mov    (%rax),%rdx
  0x000000011c060ba2: test   %rdx,%rdx
  0x000000011c060ba5: je     0x000000011c060c56
  0x000000011c060bab: lock cmpxchg %rdx,(%rcx)
  0x000000011c060bb0: je     0x000000011c060c56
  0x000000011c060bb6: mov    %rcx,0x8(%rsi)
  0x000000011c060bba: callq  0x000000011c060bc4
  0x000000011c060bbf: jmpq   0x000000011c060c56
  0x000000011c060bc4: lea    0x8(%rsp),%rax
  0x000000011c060bc9: mov    %r13,-0x40(%rbp)
  0x000000011c060bcd: mov    %r15,%rdi
  0x000000011c060bd0: vzeroupper 
  0x000000011c060bd3: mov    %rbp,0x330(%r15)
  0x000000011c060bda: mov    %rax,0x320(%r15)
  0x000000011c060be1: test   $0xf,%esp
  0x000000011c060be7: je     0x000000011c060bff
  0x000000011c060bed: sub    $0x8,%rsp
  0x000000011c060bf1: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c060bf6: add    $0x8,%rsp
  0x000000011c060bfa: jmpq   0x000000011c060c04
  0x000000011c060bff: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c060c04: movabs $0x0,%r10
  0x000000011c060c0e: mov    %r10,0x320(%r15)
  0x000000011c060c15: movabs $0x0,%r10
  0x000000011c060c1f: mov    %r10,0x330(%r15)
  0x000000011c060c26: movabs $0x0,%r10
  0x000000011c060c30: mov    %r10,0x328(%r15)
  0x000000011c060c37: vzeroupper 
  0x000000011c060c3a: cmpq   $0x0,0x8(%r15)
  0x000000011c060c42: je     0x000000011c060c4d
  0x000000011c060c48: jmpq   0x000000011c054780
  0x000000011c060c4d: mov    -0x40(%rbp),%r13
  0x000000011c060c51: mov    -0x38(%rbp),%r14
  0x000000011c060c55: retq   
  0x000000011c060c56: mov    -0x40(%rbp),%r13
  0x000000011c060c5a: mov    -0x48(%rbp),%rsi
  0x000000011c060c5e: lea    -0x48(%rbp),%rbx
  0x000000011c060c62: jmpq   0x000000011c060d60
  0x000000011c060c67: mov    %rsi,%rsi
  0x000000011c060c6a: mov    %r13,-0x40(%rbp)
  0x000000011c060c6e: lea    (%rsi),%rax
  0x000000011c060c71: mov    0x8(%rsi),%rcx
  0x000000011c060c75: movq   $0x0,0x8(%rsi)
  0x000000011c060c7d: mov    (%rcx),%rdx
  0x000000011c060c80: and    $0x7,%rdx
  0x000000011c060c84: cmp    $0x5,%rdx
  0x000000011c060c88: je     0x000000011c060d45
  0x000000011c060c8e: mov    (%rax),%rdx
  0x000000011c060c91: test   %rdx,%rdx
  0x000000011c060c94: je     0x000000011c060d45
  0x000000011c060c9a: lock cmpxchg %rdx,(%rcx)
  0x000000011c060c9f: je     0x000000011c060d45
  0x000000011c060ca5: mov    %rcx,0x8(%rsi)
  0x000000011c060ca9: callq  0x000000011c060cb3
  0x000000011c060cae: jmpq   0x000000011c060d45
  0x000000011c060cb3: lea    0x8(%rsp),%rax
  0x000000011c060cb8: mov    %r13,-0x40(%rbp)
  0x000000011c060cbc: mov    %r15,%rdi
  0x000000011c060cbf: vzeroupper 
  0x000000011c060cc2: mov    %rbp,0x330(%r15)
  0x000000011c060cc9: mov    %rax,0x320(%r15)
  0x000000011c060cd0: test   $0xf,%esp
  0x000000011c060cd6: je     0x000000011c060cee
  0x000000011c060cdc: sub    $0x8,%rsp
  0x000000011c060ce0: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c060ce5: add    $0x8,%rsp
  0x000000011c060ce9: jmpq   0x000000011c060cf3
  0x000000011c060cee: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c060cf3: movabs $0x0,%r10
  0x000000011c060cfd: mov    %r10,0x320(%r15)
  0x000000011c060d04: movabs $0x0,%r10
  0x000000011c060d0e: mov    %r10,0x330(%r15)
  0x000000011c060d15: movabs $0x0,%r10
  0x000000011c060d1f: mov    %r10,0x328(%r15)
  0x000000011c060d26: vzeroupper 
  0x000000011c060d29: cmpq   $0x0,0x8(%r15)
  0x000000011c060d31: je     0x000000011c060d3c
  0x000000011c060d37: jmpq   0x000000011c054780
  0x000000011c060d3c: mov    -0x40(%rbp),%r13
  0x000000011c060d40: mov    -0x38(%rbp),%r14
  0x000000011c060d44: retq   
  0x000000011c060d45: mov    -0x40(%rbp),%r13
  0x000000011c060d49: jmpq   0x000000011c060c5a
  0x000000011c060d4e: cmpq   $0x0,0x8(%rsi)
  0x000000011c060d56: jne    0x000000011c060c67
  0x000000011c060d5c: add    $0x10,%rsi
  0x000000011c060d60: cmp    %rbx,%rsi
  0x000000011c060d63: jne    0x000000011c060d4e
  0x000000011c060d65: cmpb   $0x0,-0xb6a6c92(%rip)        # 0x00000001109ba0da = DTraceMethodProbes
  0x000000011c060d6c: je     0x000000011c060d9c
  0x000000011c060d72: mov    -0x18(%rbp),%rsi
  0x000000011c060d76: mov    %r15,%rdi
  0x000000011c060d79: test   $0xf,%esp
  0x000000011c060d7f: je     0x000000011c060d97
  0x000000011c060d85: sub    $0x8,%rsp
  0x000000011c060d89: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c060d8e: add    $0x8,%rsp
  0x000000011c060d92: jmpq   0x000000011c060d9c
  0x000000011c060d97: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c060d9c: mov    -0x8(%rbp),%rbx
  0x000000011c060da0: cmpl   $0x3,0x408(%r15)
  0x000000011c060dab: je     0x000000011c060e94
  0x000000011c060db1: cmp    0x418(%r15),%rbx
  0x000000011c060db8: jle    0x000000011c060e94
  0x000000011c060dbe: mov    %r15,%rdi
  0x000000011c060dc1: test   $0xf,%esp
  0x000000011c060dc7: je     0x000000011c060ddf
  0x000000011c060dcd: sub    $0x8,%rsp
  0x000000011c060dd1: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c060dd6: add    $0x8,%rsp
  0x000000011c060dda: jmpq   0x000000011c060de4
  0x000000011c060ddf: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c060de4: callq  0x000000011c060dee
  0x000000011c060de9: jmpq   0x000000011c060e80
  0x000000011c060dee: lea    0x8(%rsp),%rax
  0x000000011c060df3: mov    %r13,-0x40(%rbp)
  0x000000011c060df7: mov    %r15,%rdi
  0x000000011c060dfa: vzeroupper 
  0x000000011c060dfd: mov    %rbp,0x330(%r15)
  0x000000011c060e04: mov    %rax,0x320(%r15)
  0x000000011c060e0b: test   $0xf,%esp
  0x000000011c060e11: je     0x000000011c060e29
  0x000000011c060e17: sub    $0x8,%rsp
  0x000000011c060e1b: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c060e20: add    $0x8,%rsp
  0x000000011c060e24: jmpq   0x000000011c060e2e
  0x000000011c060e29: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c060e2e: movabs $0x0,%r10
  0x000000011c060e38: mov    %r10,0x320(%r15)
  0x000000011c060e3f: movabs $0x0,%r10
  0x000000011c060e49: mov    %r10,0x330(%r15)
  0x000000011c060e50: movabs $0x0,%r10
  0x000000011c060e5a: mov    %r10,0x328(%r15)
  0x000000011c060e61: vzeroupper 
  0x000000011c060e64: cmpq   $0x0,0x8(%r15)
  0x000000011c060e6c: je     0x000000011c060e77
  0x000000011c060e72: jmpq   0x000000011c054780
  0x000000011c060e77: mov    -0x40(%rbp),%r13
  0x000000011c060e7b: mov    -0x38(%rbp),%r14
  0x000000011c060e7f: retq   
  0x000000011c060e80: movabs $0x1107f3493,%rdi
  0x000000011c060e8a: and    $0xfffffffffffffff0,%rsp
  0x000000011c060e8e: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c060e93: hlt    
  0x000000011c060e94: leaveq 
  0x000000011c060e95: pop    %rdx
  0x000000011c060e96: mov    %rbx,%rsp
  0x000000011c060e99: mov    %rsp,%rsi
  0x000000011c060e9c: mov    -0x10(%rbp),%rdx
  0x000000011c060ea0: vzeroupper 
  0x000000011c060ea3: mov    %rbp,0x330(%r15)
  0x000000011c060eaa: movabs $0x11c060ea0,%r10
  0x000000011c060eb4: mov    %r10,0x328(%r15)
  0x000000011c060ebb: mov    %rsp,0x320(%r15)
  0x000000011c060ec2: mov    %r15,%rdi
  0x000000011c060ec5: test   $0xf,%esp
  0x000000011c060ecb: je     0x000000011c060ee3
  0x000000011c060ed1: sub    $0x8,%rsp
  0x000000011c060ed5: callq  0x00000001103adfa0 = InterpreterRuntime::popframe_move_outgoing_args(JavaThread*, void*, void*)
  0x000000011c060eda: add    $0x8,%rsp
  0x000000011c060ede: jmpq   0x000000011c060ee8
  0x000000011c060ee3: callq  0x00000001103adfa0 = InterpreterRuntime::popframe_move_outgoing_args(JavaThread*, void*, void*)
  0x000000011c060ee8: movabs $0x0,%r10
  0x000000011c060ef2: mov    %r10,0x320(%r15)
  0x000000011c060ef9: movabs $0x0,%r10
  0x000000011c060f03: mov    %r10,0x330(%r15)
  0x000000011c060f0a: movabs $0x0,%r10
  0x000000011c060f14: mov    %r10,0x328(%r15)
  0x000000011c060f1b: vzeroupper 
  0x000000011c060f1e: mov    -0x10(%rbp),%rsp
  0x000000011c060f22: movq   $0x0,-0x10(%rbp)
  0x000000011c060f2a: mov    -0x40(%rbp),%r13
  0x000000011c060f2e: mov    -0x38(%rbp),%r14
  0x000000011c060f32: movl   $0x0,0x44c(%r15)
  0x000000011c060f3d: cmpb   $0xb8,0x0(%r13)
  0x000000011c060f42: jne    0x000000011c061015
  0x000000011c060f48: mov    -0x18(%rbp),%rdx
  0x000000011c060f4c: mov    (%r14),%rax
  0x000000011c060f4f: callq  0x000000011c060f59
  0x000000011c060f54: jmpq   0x000000011c061009
  0x000000011c060f59: mov    %r13,%rcx
  0x000000011c060f5c: mov    %rax,%rsi
  0x000000011c060f5f: lea    0x8(%rsp),%rax
  0x000000011c060f64: mov    %r13,-0x40(%rbp)
  0x000000011c060f68: mov    %r15,%rdi
  0x000000011c060f6b: vzeroupper 
  0x000000011c060f6e: mov    %rbp,0x330(%r15)
  0x000000011c060f75: mov    %rax,0x320(%r15)
  0x000000011c060f7c: test   $0xf,%esp
  0x000000011c060f82: je     0x000000011c060f9a
  0x000000011c060f88: sub    $0x8,%rsp
  0x000000011c060f8c: callq  0x00000001103ae17c = InterpreterRuntime::member_name_arg_or_null(JavaThread*, unsigned char*, Method*, unsigned char*)
  0x000000011c060f91: add    $0x8,%rsp
  0x000000011c060f95: jmpq   0x000000011c060f9f
  0x000000011c060f9a: callq  0x00000001103ae17c = InterpreterRuntime::member_name_arg_or_null(JavaThread*, unsigned char*, Method*, unsigned char*)
  0x000000011c060f9f: movabs $0x0,%r10
  0x000000011c060fa9: mov    %r10,0x320(%r15)
  0x000000011c060fb0: movabs $0x0,%r10
  0x000000011c060fba: mov    %r10,0x330(%r15)
  0x000000011c060fc1: movabs $0x0,%r10
  0x000000011c060fcb: mov    %r10,0x328(%r15)
  0x000000011c060fd2: vzeroupper 
  0x000000011c060fd5: cmpq   $0x0,0x8(%r15)
  0x000000011c060fdd: je     0x000000011c060fe8
  0x000000011c060fe3: jmpq   0x000000011c054780
  0x000000011c060fe8: mov    0x380(%r15),%rax
  0x000000011c060fef: movabs $0x0,%r10
  0x000000011c060ff9: mov    %r10,0x380(%r15)
  0x000000011c061000: mov    -0x40(%rbp),%r13
  0x000000011c061004: mov    -0x38(%rbp),%r14
  0x000000011c061008: retq   
  0x000000011c061009: test   %rax,%rax
  0x000000011c06100c: je     0x000000011c061015
  0x000000011c061012: mov    %rax,(%rbx)
  0x000000011c061015: movzbl 0x0(%r13),%ebx
  0x000000011c06101a: movabs $0x1109d7a20,%r10
  0x000000011c061024: jmpq   *(%r10,%rbx,8)
  0x000000011c061028: pop    %rax
  0x000000011c061029: mov    %rax,0x380(%r15)
  0x000000011c061030: mov    0x3dd(%r15),%bl
  0x000000011c061037: movb   $0x0,0x3dd(%r15)
  0x000000011c06103f: mov    -0x18(%rbp),%rcx
  0x000000011c061043: mov    0x20(%rcx),%ecx
  0x000000011c061046: test   $0x20,%ecx
  0x000000011c06104c: je     0x000000011c0611ec
  0x000000011c061052: test   $0xff,%bl
  0x000000011c061055: jne    0x000000011c061393
  0x000000011c06105b: lea    -0x58(%rbp),%rsi
  0x000000011c06105f: mov    0x8(%rsi),%rax
  0x000000011c061063: test   %rax,%rax
  0x000000011c061066: jne    0x000000011c06110d
  0x000000011c06106c: callq  0x000000011c061076
  0x000000011c061071: jmpq   0x000000011c061108
  0x000000011c061076: lea    0x8(%rsp),%rax
  0x000000011c06107b: mov    %r13,-0x40(%rbp)
  0x000000011c06107f: mov    %r15,%rdi
  0x000000011c061082: vzeroupper 
  0x000000011c061085: mov    %rbp,0x330(%r15)
  0x000000011c06108c: mov    %rax,0x320(%r15)
  0x000000011c061093: test   $0xf,%esp
  0x000000011c061099: je     0x000000011c0610b1
  0x000000011c06109f: sub    $0x8,%rsp
  0x000000011c0610a3: callq  0x00000001103abe0a = InterpreterRuntime::new_illegal_monitor_state_exception(JavaThread*)
  0x000000011c0610a8: add    $0x8,%rsp
  0x000000011c0610ac: jmpq   0x000000011c0610b6
  0x000000011c0610b1: callq  0x00000001103abe0a = InterpreterRuntime::new_illegal_monitor_state_exception(JavaThread*)
  0x000000011c0610b6: movabs $0x0,%r10
  0x000000011c0610c0: mov    %r10,0x320(%r15)
  0x000000011c0610c7: movabs $0x0,%r10
  0x000000011c0610d1: mov    %r10,0x330(%r15)
  0x000000011c0610d8: movabs $0x0,%r10
  0x000000011c0610e2: mov    %r10,0x328(%r15)
  0x000000011c0610e9: vzeroupper 
  0x000000011c0610ec: cmpq   $0x0,0x8(%r15)
  0x000000011c0610f4: je     0x000000011c0610ff
  0x000000011c0610fa: jmpq   0x000000011c054780
  0x000000011c0610ff: mov    -0x40(%rbp),%r13
  0x000000011c061103: mov    -0x38(%rbp),%r14
  0x000000011c061107: retq   
  0x000000011c061108: jmpq   0x000000011c0611ec
  0x000000011c06110d: mov    %r13,-0x40(%rbp)
  0x000000011c061111: lea    (%rsi),%rax
  0x000000011c061114: mov    0x8(%rsi),%rcx
  0x000000011c061118: movq   $0x0,0x8(%rsi)
  0x000000011c061120: mov    (%rcx),%rdx
  0x000000011c061123: and    $0x7,%rdx
  0x000000011c061127: cmp    $0x5,%rdx
  0x000000011c06112b: je     0x000000011c0611e8
  0x000000011c061131: mov    (%rax),%rdx
  0x000000011c061134: test   %rdx,%rdx
  0x000000011c061137: je     0x000000011c0611e8
  0x000000011c06113d: lock cmpxchg %rdx,(%rcx)
  0x000000011c061142: je     0x000000011c0611e8
  0x000000011c061148: mov    %rcx,0x8(%rsi)
  0x000000011c06114c: callq  0x000000011c061156
  0x000000011c061151: jmpq   0x000000011c0611e8
  0x000000011c061156: lea    0x8(%rsp),%rax
  0x000000011c06115b: mov    %r13,-0x40(%rbp)
  0x000000011c06115f: mov    %r15,%rdi
  0x000000011c061162: vzeroupper 
  0x000000011c061165: mov    %rbp,0x330(%r15)
  0x000000011c06116c: mov    %rax,0x320(%r15)
  0x000000011c061173: test   $0xf,%esp
  0x000000011c061179: je     0x000000011c061191
  0x000000011c06117f: sub    $0x8,%rsp
  0x000000011c061183: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c061188: add    $0x8,%rsp
  0x000000011c06118c: jmpq   0x000000011c061196
  0x000000011c061191: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c061196: movabs $0x0,%r10
  0x000000011c0611a0: mov    %r10,0x320(%r15)
  0x000000011c0611a7: movabs $0x0,%r10
  0x000000011c0611b1: mov    %r10,0x330(%r15)
  0x000000011c0611b8: movabs $0x0,%r10
  0x000000011c0611c2: mov    %r10,0x328(%r15)
  0x000000011c0611c9: vzeroupper 
  0x000000011c0611cc: cmpq   $0x0,0x8(%r15)
  0x000000011c0611d4: je     0x000000011c0611df
  0x000000011c0611da: jmpq   0x000000011c054780
  0x000000011c0611df: mov    -0x40(%rbp),%r13
  0x000000011c0611e3: mov    -0x38(%rbp),%r14
  0x000000011c0611e7: retq   
  0x000000011c0611e8: mov    -0x40(%rbp),%r13
  0x000000011c0611ec: mov    -0x48(%rbp),%rsi
  0x000000011c0611f0: lea    -0x48(%rbp),%rbx
  0x000000011c0611f4: jmpq   0x000000011c06138e
  0x000000011c0611f9: mov    %rsi,%rsi
  0x000000011c0611fc: mov    %r13,-0x40(%rbp)
  0x000000011c061200: lea    (%rsi),%rax
  0x000000011c061203: mov    0x8(%rsi),%rcx
  0x000000011c061207: movq   $0x0,0x8(%rsi)
  0x000000011c06120f: mov    (%rcx),%rdx
  0x000000011c061212: and    $0x7,%rdx
  0x000000011c061216: cmp    $0x5,%rdx
  0x000000011c06121a: je     0x000000011c0612d7
  0x000000011c061220: mov    (%rax),%rdx
  0x000000011c061223: test   %rdx,%rdx
  0x000000011c061226: je     0x000000011c0612d7
  0x000000011c06122c: lock cmpxchg %rdx,(%rcx)
  0x000000011c061231: je     0x000000011c0612d7
  0x000000011c061237: mov    %rcx,0x8(%rsi)
  0x000000011c06123b: callq  0x000000011c061245
  0x000000011c061240: jmpq   0x000000011c0612d7
  0x000000011c061245: lea    0x8(%rsp),%rax
  0x000000011c06124a: mov    %r13,-0x40(%rbp)
  0x000000011c06124e: mov    %r15,%rdi
  0x000000011c061251: vzeroupper 
  0x000000011c061254: mov    %rbp,0x330(%r15)
  0x000000011c06125b: mov    %rax,0x320(%r15)
  0x000000011c061262: test   $0xf,%esp
  0x000000011c061268: je     0x000000011c061280
  0x000000011c06126e: sub    $0x8,%rsp
  0x000000011c061272: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c061277: add    $0x8,%rsp
  0x000000011c06127b: jmpq   0x000000011c061285
  0x000000011c061280: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c061285: movabs $0x0,%r10
  0x000000011c06128f: mov    %r10,0x320(%r15)
  0x000000011c061296: movabs $0x0,%r10
  0x000000011c0612a0: mov    %r10,0x330(%r15)
  0x000000011c0612a7: movabs $0x0,%r10
  0x000000011c0612b1: mov    %r10,0x328(%r15)
  0x000000011c0612b8: vzeroupper 
  0x000000011c0612bb: cmpq   $0x0,0x8(%r15)
  0x000000011c0612c3: je     0x000000011c0612ce
  0x000000011c0612c9: jmpq   0x000000011c054780
  0x000000011c0612ce: mov    -0x40(%rbp),%r13
  0x000000011c0612d2: mov    -0x38(%rbp),%r14
  0x000000011c0612d6: retq   
  0x000000011c0612d7: mov    -0x40(%rbp),%r13
  0x000000011c0612db: callq  0x000000011c0612e5
  0x000000011c0612e0: jmpq   0x000000011c061377
  0x000000011c0612e5: lea    0x8(%rsp),%rax
  0x000000011c0612ea: mov    %r13,-0x40(%rbp)
  0x000000011c0612ee: mov    %r15,%rdi
  0x000000011c0612f1: vzeroupper 
  0x000000011c0612f4: mov    %rbp,0x330(%r15)
  0x000000011c0612fb: mov    %rax,0x320(%r15)
  0x000000011c061302: test   $0xf,%esp
  0x000000011c061308: je     0x000000011c061320
  0x000000011c06130e: sub    $0x8,%rsp
  0x000000011c061312: callq  0x00000001103abe0a = InterpreterRuntime::new_illegal_monitor_state_exception(JavaThread*)
  0x000000011c061317: add    $0x8,%rsp
  0x000000011c06131b: jmpq   0x000000011c061325
  0x000000011c061320: callq  0x00000001103abe0a = InterpreterRuntime::new_illegal_monitor_state_exception(JavaThread*)
  0x000000011c061325: movabs $0x0,%r10
  0x000000011c06132f: mov    %r10,0x320(%r15)
  0x000000011c061336: movabs $0x0,%r10
  0x000000011c061340: mov    %r10,0x330(%r15)
  0x000000011c061347: movabs $0x0,%r10
  0x000000011c061351: mov    %r10,0x328(%r15)
  0x000000011c061358: vzeroupper 
  0x000000011c06135b: cmpq   $0x0,0x8(%r15)
  0x000000011c061363: je     0x000000011c06136e
  0x000000011c061369: jmpq   0x000000011c054780
  0x000000011c06136e: mov    -0x40(%rbp),%r13
  0x000000011c061372: mov    -0x38(%rbp),%r14
  0x000000011c061376: retq   
  0x000000011c061377: jmpq   0x000000011c0611ec
  0x000000011c06137c: cmpq   $0x0,0x8(%rsi)
  0x000000011c061384: jne    0x000000011c0611f9
  0x000000011c06138a: add    $0x10,%rsi
  0x000000011c06138e: cmp    %rbx,%rsi
  0x000000011c061391: jne    0x000000011c06137c
  0x000000011c061393: cmpb   $0x0,-0xb6a72c0(%rip)        # 0x00000001109ba0da = DTraceMethodProbes
  0x000000011c06139a: je     0x000000011c0613ca
  0x000000011c0613a0: mov    -0x18(%rbp),%rsi
  0x000000011c0613a4: mov    %r15,%rdi
  0x000000011c0613a7: test   $0xf,%esp
  0x000000011c0613ad: je     0x000000011c0613c5
  0x000000011c0613b3: sub    $0x8,%rsp
  0x000000011c0613b7: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c0613bc: add    $0x8,%rsp
  0x000000011c0613c0: jmpq   0x000000011c0613ca
  0x000000011c0613c5: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c0613ca: mov    -0x8(%rbp),%rbx
  0x000000011c0613ce: cmpl   $0x3,0x408(%r15)
  0x000000011c0613d9: je     0x000000011c0614c2
  0x000000011c0613df: cmp    0x418(%r15),%rbx
  0x000000011c0613e6: jle    0x000000011c0614c2
  0x000000011c0613ec: mov    %r15,%rdi
  0x000000011c0613ef: test   $0xf,%esp
  0x000000011c0613f5: je     0x000000011c06140d
  0x000000011c0613fb: sub    $0x8,%rsp
  0x000000011c0613ff: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c061404: add    $0x8,%rsp
  0x000000011c061408: jmpq   0x000000011c061412
  0x000000011c06140d: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c061412: callq  0x000000011c06141c
  0x000000011c061417: jmpq   0x000000011c0614ae
  0x000000011c06141c: lea    0x8(%rsp),%rax
  0x000000011c061421: mov    %r13,-0x40(%rbp)
  0x000000011c061425: mov    %r15,%rdi
  0x000000011c061428: vzeroupper 
  0x000000011c06142b: mov    %rbp,0x330(%r15)
  0x000000011c061432: mov    %rax,0x320(%r15)
  0x000000011c061439: test   $0xf,%esp
  0x000000011c06143f: je     0x000000011c061457
  0x000000011c061445: sub    $0x8,%rsp
  0x000000011c061449: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c06144e: add    $0x8,%rsp
  0x000000011c061452: jmpq   0x000000011c06145c
  0x000000011c061457: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c06145c: movabs $0x0,%r10
  0x000000011c061466: mov    %r10,0x320(%r15)
  0x000000011c06146d: movabs $0x0,%r10
  0x000000011c061477: mov    %r10,0x330(%r15)
  0x000000011c06147e: movabs $0x0,%r10
  0x000000011c061488: mov    %r10,0x328(%r15)
  0x000000011c06148f: vzeroupper 
  0x000000011c061492: cmpq   $0x0,0x8(%r15)
  0x000000011c06149a: je     0x000000011c0614a5
  0x000000011c0614a0: jmpq   0x000000011c054780
  0x000000011c0614a5: mov    -0x40(%rbp),%r13
  0x000000011c0614a9: mov    -0x38(%rbp),%r14
  0x000000011c0614ad: retq   
  0x000000011c0614ae: movabs $0x1107f3493,%rdi
  0x000000011c0614b8: and    $0xfffffffffffffff0,%rsp
  0x000000011c0614bc: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c0614c1: hlt    
  0x000000011c0614c2: leaveq 
  0x000000011c0614c3: pop    %rdx
  0x000000011c0614c4: mov    %rbx,%rsp
  0x000000011c0614c7: mov    0x380(%r15),%rax
  0x000000011c0614ce: movabs $0x0,%r10
  0x000000011c0614d8: mov    %r10,0x380(%r15)
  0x000000011c0614df: push   %rax
  0x000000011c0614e0: push   %rdx
  0x000000011c0614e1: mov    %rdx,%rsi
  0x000000011c0614e4: mov    %r15,%rdi
  0x000000011c0614e7: test   $0xf,%esp
  0x000000011c0614ed: je     0x000000011c061505
  0x000000011c0614f3: sub    $0x8,%rsp
  0x000000011c0614f7: callq  0x0000000110696672 = SharedRuntime::exception_handler_for_return_address(JavaThread*, unsigned char*)
  0x000000011c0614fc: add    $0x8,%rsp
  0x000000011c061500: jmpq   0x000000011c06150a
  0x000000011c061505: callq  0x0000000110696672 = SharedRuntime::exception_handler_for_return_address(JavaThread*, unsigned char*)
  0x000000011c06150a: mov    %rax,%rbx
  0x000000011c06150d: pop    %rdx
  0x000000011c06150e: pop    %rax
  0x000000011c06150f: jmpq   *%rbx
  0x000000011c061511: nopl   0x0(%rax)
  0x000000011c061518: add    %al,(%rax)
  0x000000011c06151a: add    %al,(%rax)
  0x000000011c06151c: add    %al,(%rax)
  0x000000011c06151e: add    %al,(%rax)

----------------------------------------------------------------------
throw exception entrypoints  [0x000000011c061540, 0x000000011c0619e0]  1184 bytes

  0x000000011c061540: mov    -0x48(%rbp),%rsp
  0x000000011c061544: movq   $0x0,-0x10(%rbp)
  0x000000011c06154c: callq  0x000000011c061556
  0x000000011c061551: jmpq   0x000000011c0615eb
  0x000000011c061556: mov    %rbx,%rdx
  0x000000011c061559: lea    0x8(%rsp),%rax
  0x000000011c06155e: mov    %r13,-0x40(%rbp)
  0x000000011c061562: mov    %r15,%rdi
  0x000000011c061565: vzeroupper 
  0x000000011c061568: mov    %rbp,0x330(%r15)
  0x000000011c06156f: mov    %rax,0x320(%r15)
  0x000000011c061576: test   $0xf,%esp
  0x000000011c06157c: je     0x000000011c061594
  0x000000011c061582: sub    $0x8,%rsp
  0x000000011c061586: callq  0x00000001103aabec = InterpreterRuntime::throw_ArrayIndexOutOfBoundsException(JavaThread*, arrayOopDesc*, int)
  0x000000011c06158b: add    $0x8,%rsp
  0x000000011c06158f: jmpq   0x000000011c061599
  0x000000011c061594: callq  0x00000001103aabec = InterpreterRuntime::throw_ArrayIndexOutOfBoundsException(JavaThread*, arrayOopDesc*, int)
  0x000000011c061599: movabs $0x0,%r10
  0x000000011c0615a3: mov    %r10,0x320(%r15)
  0x000000011c0615aa: movabs $0x0,%r10
  0x000000011c0615b4: mov    %r10,0x330(%r15)
  0x000000011c0615bb: movabs $0x0,%r10
  0x000000011c0615c5: mov    %r10,0x328(%r15)
  0x000000011c0615cc: vzeroupper 
  0x000000011c0615cf: cmpq   $0x0,0x8(%r15)
  0x000000011c0615d7: je     0x000000011c0615e2
  0x000000011c0615dd: jmpq   0x000000011c054780
  0x000000011c0615e2: mov    -0x40(%rbp),%r13
  0x000000011c0615e6: mov    -0x38(%rbp),%r14
  0x000000011c0615ea: retq   
  0x000000011c0615eb: pop    %rdx
  0x000000011c0615ec: mov    -0x48(%rbp),%rsp
  0x000000011c0615f0: movq   $0x0,-0x10(%rbp)
  0x000000011c0615f8: movabs $0x110851506,%rsi
  0x000000011c061602: callq  0x000000011c06160c
  0x000000011c061607: jmpq   0x000000011c0616b6
  0x000000011c06160c: lea    0x8(%rsp),%rax
  0x000000011c061611: mov    %r13,-0x40(%rbp)
  0x000000011c061615: mov    %r15,%rdi
  0x000000011c061618: vzeroupper 
  0x000000011c06161b: mov    %rbp,0x330(%r15)
  0x000000011c061622: mov    %rax,0x320(%r15)
  0x000000011c061629: test   $0xf,%esp
  0x000000011c06162f: je     0x000000011c061647
  0x000000011c061635: sub    $0x8,%rsp
  0x000000011c061639: callq  0x00000001103aaaba = InterpreterRuntime::create_klass_exception(JavaThread*, char*, oopDesc*)
  0x000000011c06163e: add    $0x8,%rsp
  0x000000011c061642: jmpq   0x000000011c06164c
  0x000000011c061647: callq  0x00000001103aaaba = InterpreterRuntime::create_klass_exception(JavaThread*, char*, oopDesc*)
  0x000000011c06164c: movabs $0x0,%r10
  0x000000011c061656: mov    %r10,0x320(%r15)
  0x000000011c06165d: movabs $0x0,%r10
  0x000000011c061667: mov    %r10,0x330(%r15)
  0x000000011c06166e: movabs $0x0,%r10
  0x000000011c061678: mov    %r10,0x328(%r15)
  0x000000011c06167f: vzeroupper 
  0x000000011c061682: cmpq   $0x0,0x8(%r15)
  0x000000011c06168a: je     0x000000011c061695
  0x000000011c061690: jmpq   0x000000011c054780
  0x000000011c061695: mov    0x380(%r15),%rax
  0x000000011c06169c: movabs $0x0,%r10
  0x000000011c0616a6: mov    %r10,0x380(%r15)
  0x000000011c0616ad: mov    -0x40(%rbp),%r13
  0x000000011c0616b1: mov    -0x38(%rbp),%r14
  0x000000011c0616b5: retq   
  0x000000011c0616b6: jmpq   0x000000011c060673
  0x000000011c0616bb: mov    -0x48(%rbp),%rsp
  0x000000011c0616bf: movq   $0x0,-0x10(%rbp)
  0x000000011c0616c7: movabs $0x110851524,%rsi
  0x000000011c0616d1: movabs $0x1107f413f,%rdx
  0x000000011c0616db: callq  0x000000011c0616e5
  0x000000011c0616e0: jmpq   0x000000011c06178f
  0x000000011c0616e5: lea    0x8(%rsp),%rax
  0x000000011c0616ea: mov    %r13,-0x40(%rbp)
  0x000000011c0616ee: mov    %r15,%rdi
  0x000000011c0616f1: vzeroupper 
  0x000000011c0616f4: mov    %rbp,0x330(%r15)
  0x000000011c0616fb: mov    %rax,0x320(%r15)
  0x000000011c061702: test   $0xf,%esp
  0x000000011c061708: je     0x000000011c061720
  0x000000011c06170e: sub    $0x8,%rsp
  0x000000011c061712: callq  0x00000001103aa9b4 = InterpreterRuntime::create_exception(JavaThread*, char*, char*)
  0x000000011c061717: add    $0x8,%rsp
  0x000000011c06171b: jmpq   0x000000011c061725
  0x000000011c061720: callq  0x00000001103aa9b4 = InterpreterRuntime::create_exception(JavaThread*, char*, char*)
  0x000000011c061725: movabs $0x0,%r10
  0x000000011c06172f: mov    %r10,0x320(%r15)
  0x000000011c061736: movabs $0x0,%r10
  0x000000011c061740: mov    %r10,0x330(%r15)
  0x000000011c061747: movabs $0x0,%r10
  0x000000011c061751: mov    %r10,0x328(%r15)
  0x000000011c061758: vzeroupper 
  0x000000011c06175b: cmpq   $0x0,0x8(%r15)
  0x000000011c061763: je     0x000000011c06176e
  0x000000011c061769: jmpq   0x000000011c054780
  0x000000011c06176e: mov    0x380(%r15),%rax
  0x000000011c061775: movabs $0x0,%r10
  0x000000011c06177f: mov    %r10,0x380(%r15)
  0x000000011c061786: mov    -0x40(%rbp),%r13
  0x000000011c06178a: mov    -0x38(%rbp),%r14
  0x000000011c06178e: retq   
  0x000000011c06178f: jmpq   0x000000011c060673
  0x000000011c061794: pop    %rsi
  0x000000011c061795: mov    -0x48(%rbp),%rsp
  0x000000011c061799: movq   $0x0,-0x10(%rbp)
  0x000000011c0617a1: callq  0x000000011c0617ab
  0x000000011c0617a6: jmpq   0x000000011c06183d
  0x000000011c0617ab: lea    0x8(%rsp),%rax
  0x000000011c0617b0: mov    %r13,-0x40(%rbp)
  0x000000011c0617b4: mov    %r15,%rdi
  0x000000011c0617b7: vzeroupper 
  0x000000011c0617ba: mov    %rbp,0x330(%r15)
  0x000000011c0617c1: mov    %rax,0x320(%r15)
  0x000000011c0617c8: test   $0xf,%esp
  0x000000011c0617ce: je     0x000000011c0617e6
  0x000000011c0617d4: sub    $0x8,%rsp
  0x000000011c0617d8: callq  0x00000001103aad28 = InterpreterRuntime::throw_ClassCastException(JavaThread*, oopDesc*)
  0x000000011c0617dd: add    $0x8,%rsp
  0x000000011c0617e1: jmpq   0x000000011c0617eb
  0x000000011c0617e6: callq  0x00000001103aad28 = InterpreterRuntime::throw_ClassCastException(JavaThread*, oopDesc*)
  0x000000011c0617eb: movabs $0x0,%r10
  0x000000011c0617f5: mov    %r10,0x320(%r15)
  0x000000011c0617fc: movabs $0x0,%r10
  0x000000011c061806: mov    %r10,0x330(%r15)
  0x000000011c06180d: movabs $0x0,%r10
  0x000000011c061817: mov    %r10,0x328(%r15)
  0x000000011c06181e: vzeroupper 
  0x000000011c061821: cmpq   $0x0,0x8(%r15)
  0x000000011c061829: je     0x000000011c061834
  0x000000011c06182f: jmpq   0x000000011c054780
  0x000000011c061834: mov    -0x40(%rbp),%r13
  0x000000011c061838: mov    -0x38(%rbp),%r14
  0x000000011c06183c: retq   
  0x000000011c06183d: mov    -0x48(%rbp),%rsp
  0x000000011c061841: movq   $0x0,-0x10(%rbp)
  0x000000011c061849: movabs $0x110851542,%rsi
  0x000000011c061853: movabs $0x0,%rdx
  0x000000011c06185d: callq  0x000000011c061867
  0x000000011c061862: jmpq   0x000000011c061911
  0x000000011c061867: lea    0x8(%rsp),%rax
  0x000000011c06186c: mov    %r13,-0x40(%rbp)
  0x000000011c061870: mov    %r15,%rdi
  0x000000011c061873: vzeroupper 
  0x000000011c061876: mov    %rbp,0x330(%r15)
  0x000000011c06187d: mov    %rax,0x320(%r15)
  0x000000011c061884: test   $0xf,%esp
  0x000000011c06188a: je     0x000000011c0618a2
  0x000000011c061890: sub    $0x8,%rsp
  0x000000011c061894: callq  0x00000001103aa9b4 = InterpreterRuntime::create_exception(JavaThread*, char*, char*)
  0x000000011c061899: add    $0x8,%rsp
  0x000000011c06189d: jmpq   0x000000011c0618a7
  0x000000011c0618a2: callq  0x00000001103aa9b4 = InterpreterRuntime::create_exception(JavaThread*, char*, char*)
  0x000000011c0618a7: movabs $0x0,%r10
  0x000000011c0618b1: mov    %r10,0x320(%r15)
  0x000000011c0618b8: movabs $0x0,%r10
  0x000000011c0618c2: mov    %r10,0x330(%r15)
  0x000000011c0618c9: movabs $0x0,%r10
  0x000000011c0618d3: mov    %r10,0x328(%r15)
  0x000000011c0618da: vzeroupper 
  0x000000011c0618dd: cmpq   $0x0,0x8(%r15)
  0x000000011c0618e5: je     0x000000011c0618f0
  0x000000011c0618eb: jmpq   0x000000011c054780
  0x000000011c0618f0: mov    0x380(%r15),%rax
  0x000000011c0618f7: movabs $0x0,%r10
  0x000000011c061901: mov    %r10,0x380(%r15)
  0x000000011c061908: mov    -0x40(%rbp),%r13
  0x000000011c06190c: mov    -0x38(%rbp),%r14
  0x000000011c061910: retq   
  0x000000011c061911: jmpq   0x000000011c060673
  0x000000011c061916: mov    -0x40(%rbp),%r13
  0x000000011c06191a: mov    -0x48(%rbp),%rsp
  0x000000011c06191e: movq   $0x0,-0x10(%rbp)
  0x000000011c061926: callq  0x000000011c061930
  0x000000011c06192b: jmpq   0x000000011c0619c2
  0x000000011c061930: lea    0x8(%rsp),%rax
  0x000000011c061935: mov    %r13,-0x40(%rbp)
  0x000000011c061939: mov    %r15,%rdi
  0x000000011c06193c: vzeroupper 
  0x000000011c06193f: mov    %rbp,0x330(%r15)
  0x000000011c061946: mov    %rax,0x320(%r15)
  0x000000011c06194d: test   $0xf,%esp
  0x000000011c061953: je     0x000000011c06196b
  0x000000011c061959: sub    $0x8,%rsp
  0x000000011c06195d: callq  0x00000001103aa7ae = InterpreterRuntime::throw_StackOverflowError(JavaThread*)
  0x000000011c061962: add    $0x8,%rsp
  0x000000011c061966: jmpq   0x000000011c061970
  0x000000011c06196b: callq  0x00000001103aa7ae = InterpreterRuntime::throw_StackOverflowError(JavaThread*)
  0x000000011c061970: movabs $0x0,%r10
  0x000000011c06197a: mov    %r10,0x320(%r15)
  0x000000011c061981: movabs $0x0,%r10
  0x000000011c06198b: mov    %r10,0x330(%r15)
  0x000000011c061992: movabs $0x0,%r10
  0x000000011c06199c: mov    %r10,0x328(%r15)
  0x000000011c0619a3: vzeroupper 
  0x000000011c0619a6: cmpq   $0x0,0x8(%r15)
  0x000000011c0619ae: je     0x000000011c0619b9
  0x000000011c0619b4: jmpq   0x000000011c054780
  0x000000011c0619b9: mov    -0x40(%rbp),%r13
  0x000000011c0619bd: mov    -0x38(%rbp),%r14
  0x000000011c0619c1: retq   
  0x000000011c0619c2: nopw   0x0(%rax,%rax,1)
  0x000000011c0619c8: add    %al,(%rax)
  0x000000011c0619ca: add    %al,(%rax)
  0x000000011c0619cc: add    %al,(%rax)
  0x000000011c0619ce: add    %al,(%rax)
  0x000000011c0619d0: add    %al,(%rax)
  0x000000011c0619d2: add    %al,(%rax)
  0x000000011c0619d4: add    %al,(%rax)
  0x000000011c0619d6: add    %al,(%rax)
  0x000000011c0619d8: add    %al,(%rax)
  0x000000011c0619da: add    %al,(%rax)
  0x000000011c0619dc: add    %al,(%rax)
  0x000000011c0619de: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = zerolocals)  [0x000000011c061a00, 0x000000011c061ba0]  416 bytes

  0x000000011c061a00: mov    0x8(%rbx),%rdx
  0x000000011c061a04: movzwl 0x34(%rdx),%ecx
  0x000000011c061a08: movzwl 0x32(%rdx),%edx
  0x000000011c061a0c: sub    %ecx,%edx
  0x000000011c061a0e: cmp    $0x1f5,%edx
  0x000000011c061a14: jbe    0x000000011c061a3f
  0x000000011c061a1a: mov    %rdx,%rax
  0x000000011c061a1d: shl    $0x3,%rax
  0x000000011c061a21: add    $0x58,%rax
  0x000000011c061a25: add    0x410(%r15),%rax
  0x000000011c061a2c: cmp    %rax,%rsp
  0x000000011c061a2f: ja     0x000000011c061a3f
  0x000000011c061a35: pop    %rax
  0x000000011c061a36: mov    %r13,%rsp
  0x000000011c061a39: push   %rax
  0x000000011c061a3a: jmpq   0x000000011c05c100
  0x000000011c061a3f: pop    %rax
  0x000000011c061a40: lea    -0x8(%rsp,%rcx,8),%r14
  0x000000011c061a45: test   %edx,%edx
  0x000000011c061a47: jle    0x000000011c061a56
  0x000000011c061a4d: pushq  $0x0
  0x000000011c061a52: dec    %edx
  0x000000011c061a54: jg     0x000000011c061a4d
  0x000000011c061a56: push   %rax
  0x000000011c061a57: push   %rbp
  0x000000011c061a58: mov    %rsp,%rbp
  0x000000011c061a5b: push   %r13
  0x000000011c061a5d: pushq  $0x0
  0x000000011c061a62: mov    0x8(%rbx),%r13
  0x000000011c061a66: lea    0x38(%r13),%r13
  0x000000011c061a6a: push   %rbx
  0x000000011c061a6b: mov    0x8(%rbx),%rdx
  0x000000011c061a6f: mov    0x8(%rdx),%rdx
  0x000000011c061a73: mov    0x18(%rdx),%rdx
  0x000000011c061a77: mov    0x70(%rdx),%rdx
  0x000000011c061a7b: mov    (%rdx),%rdx
  0x000000011c061a7e: push   %rdx
  0x000000011c061a7f: pushq  $0x0
  0x000000011c061a84: mov    0x8(%rbx),%rdx
  0x000000011c061a88: mov    0x8(%rdx),%rdx
  0x000000011c061a8c: mov    0x10(%rdx),%rdx
  0x000000011c061a90: push   %rdx
  0x000000011c061a91: push   %r14
  0x000000011c061a93: push   %r13
  0x000000011c061a95: pushq  $0x0
  0x000000011c061a9a: mov    %rsp,(%rsp)
  0x000000011c061a9e: movb   $0x1,0x3dd(%r15)
  0x000000011c061aa6: mov    %eax,-0x1000(%rsp)
  0x000000011c061aad: mov    %eax,-0x2000(%rsp)
  0x000000011c061ab4: mov    %eax,-0x3000(%rsp)
  0x000000011c061abb: mov    %eax,-0x4000(%rsp)
  0x000000011c061ac2: mov    %eax,-0x5000(%rsp)
  0x000000011c061ac9: mov    %eax,-0x6000(%rsp)
  0x000000011c061ad0: mov    %eax,-0x7000(%rsp)
  0x000000011c061ad7: mov    %eax,-0x8000(%rsp)
  0x000000011c061ade: mov    %eax,-0x9000(%rsp)
  0x000000011c061ae5: mov    %eax,-0xa000(%rsp)
  0x000000011c061aec: mov    %eax,-0xb000(%rsp)
  0x000000011c061af3: mov    %eax,-0xc000(%rsp)
  0x000000011c061afa: mov    %eax,-0xd000(%rsp)
  0x000000011c061b01: mov    %eax,-0xe000(%rsp)
  0x000000011c061b08: mov    %eax,-0xf000(%rsp)
  0x000000011c061b0f: mov    %eax,-0x10000(%rsp)
  0x000000011c061b16: mov    %eax,-0x11000(%rsp)
  0x000000011c061b1d: mov    %eax,-0x12000(%rsp)
  0x000000011c061b24: mov    %eax,-0x13000(%rsp)
  0x000000011c061b2b: mov    %eax,-0x14000(%rsp)
  0x000000011c061b32: movb   $0x0,0x3dd(%r15)
  0x000000011c061b3a: cmpb   $0x0,-0xb6a7a67(%rip)        # 0x00000001109ba0da = DTraceMethodProbes
  0x000000011c061b41: je     0x000000011c061b71
  0x000000011c061b47: mov    -0x18(%rbp),%rsi
  0x000000011c061b4b: mov    %r15,%rdi
  0x000000011c061b4e: test   $0xf,%esp
  0x000000011c061b54: je     0x000000011c061b6c
  0x000000011c061b5a: sub    $0x8,%rsp
  0x000000011c061b5e: callq  0x000000011069793e = SharedRuntime::dtrace_method_entry(JavaThread*, Method*)
  0x000000011c061b63: add    $0x8,%rsp
  0x000000011c061b67: jmpq   0x000000011c061b71
  0x000000011c061b6c: callq  0x000000011069793e = SharedRuntime::dtrace_method_entry(JavaThread*, Method*)
  0x000000011c061b71: movzbl 0x0(%r13),%ebx
  0x000000011c061b76: movabs $0x1109d7a20,%r10
  0x000000011c061b80: jmpq   *(%r10,%rbx,8)
  0x000000011c061b84: nopl   0x0(%rax)
  0x000000011c061b88: add    %al,(%rax)
  0x000000011c061b8a: add    %al,(%rax)
  0x000000011c061b8c: add    %al,(%rax)
  0x000000011c061b8e: add    %al,(%rax)
  0x000000011c061b90: add    %al,(%rax)
  0x000000011c061b92: add    %al,(%rax)
  0x000000011c061b94: add    %al,(%rax)
  0x000000011c061b96: add    %al,(%rax)
  0x000000011c061b98: add    %al,(%rax)
  0x000000011c061b9a: add    %al,(%rax)
  0x000000011c061b9c: add    %al,(%rax)
  0x000000011c061b9e: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = zerolocals_synchronized)  [0x000000011c061bc0, 0x000000011c061f00]  832 bytes

  0x000000011c061bc0: mov    0x8(%rbx),%rdx
  0x000000011c061bc4: movzwl 0x34(%rdx),%ecx
  0x000000011c061bc8: movzwl 0x32(%rdx),%edx
  0x000000011c061bcc: sub    %ecx,%edx
  0x000000011c061bce: cmp    $0x1f5,%edx
  0x000000011c061bd4: jbe    0x000000011c061bff
  0x000000011c061bda: mov    %rdx,%rax
  0x000000011c061bdd: shl    $0x3,%rax
  0x000000011c061be1: add    $0x58,%rax
  0x000000011c061be5: add    0x410(%r15),%rax
  0x000000011c061bec: cmp    %rax,%rsp
  0x000000011c061bef: ja     0x000000011c061bff
  0x000000011c061bf5: pop    %rax
  0x000000011c061bf6: mov    %r13,%rsp
  0x000000011c061bf9: push   %rax
  0x000000011c061bfa: jmpq   0x000000011c05c100
  0x000000011c061bff: pop    %rax
  0x000000011c061c00: lea    -0x8(%rsp,%rcx,8),%r14
  0x000000011c061c05: test   %edx,%edx
  0x000000011c061c07: jle    0x000000011c061c16
  0x000000011c061c0d: pushq  $0x0
  0x000000011c061c12: dec    %edx
  0x000000011c061c14: jg     0x000000011c061c0d
  0x000000011c061c16: push   %rax
  0x000000011c061c17: push   %rbp
  0x000000011c061c18: mov    %rsp,%rbp
  0x000000011c061c1b: push   %r13
  0x000000011c061c1d: pushq  $0x0
  0x000000011c061c22: mov    0x8(%rbx),%r13
  0x000000011c061c26: lea    0x38(%r13),%r13
  0x000000011c061c2a: push   %rbx
  0x000000011c061c2b: mov    0x8(%rbx),%rdx
  0x000000011c061c2f: mov    0x8(%rdx),%rdx
  0x000000011c061c33: mov    0x18(%rdx),%rdx
  0x000000011c061c37: mov    0x70(%rdx),%rdx
  0x000000011c061c3b: mov    (%rdx),%rdx
  0x000000011c061c3e: push   %rdx
  0x000000011c061c3f: pushq  $0x0
  0x000000011c061c44: mov    0x8(%rbx),%rdx
  0x000000011c061c48: mov    0x8(%rdx),%rdx
  0x000000011c061c4c: mov    0x10(%rdx),%rdx
  0x000000011c061c50: push   %rdx
  0x000000011c061c51: push   %r14
  0x000000011c061c53: push   %r13
  0x000000011c061c55: pushq  $0x0
  0x000000011c061c5a: mov    %rsp,(%rsp)
  0x000000011c061c5e: movb   $0x1,0x3dd(%r15)
  0x000000011c061c66: mov    %eax,-0x1000(%rsp)
  0x000000011c061c6d: mov    %eax,-0x2000(%rsp)
  0x000000011c061c74: mov    %eax,-0x3000(%rsp)
  0x000000011c061c7b: mov    %eax,-0x4000(%rsp)
  0x000000011c061c82: mov    %eax,-0x5000(%rsp)
  0x000000011c061c89: mov    %eax,-0x6000(%rsp)
  0x000000011c061c90: mov    %eax,-0x7000(%rsp)
  0x000000011c061c97: mov    %eax,-0x8000(%rsp)
  0x000000011c061c9e: mov    %eax,-0x9000(%rsp)
  0x000000011c061ca5: mov    %eax,-0xa000(%rsp)
  0x000000011c061cac: mov    %eax,-0xb000(%rsp)
  0x000000011c061cb3: mov    %eax,-0xc000(%rsp)
  0x000000011c061cba: mov    %eax,-0xd000(%rsp)
  0x000000011c061cc1: mov    %eax,-0xe000(%rsp)
  0x000000011c061cc8: mov    %eax,-0xf000(%rsp)
  0x000000011c061ccf: mov    %eax,-0x10000(%rsp)
  0x000000011c061cd6: mov    %eax,-0x11000(%rsp)
  0x000000011c061cdd: mov    %eax,-0x12000(%rsp)
  0x000000011c061ce4: mov    %eax,-0x13000(%rsp)
  0x000000011c061ceb: mov    %eax,-0x14000(%rsp)
  0x000000011c061cf2: movb   $0x0,0x3dd(%r15)
  0x000000011c061cfa: mov    0x20(%rbx),%eax
  0x000000011c061cfd: test   $0x8,%eax
  0x000000011c061d02: mov    (%r14),%rax
  0x000000011c061d05: je     0x000000011c061d1e
  0x000000011c061d0b: mov    0x8(%rbx),%rax
  0x000000011c061d0f: mov    0x8(%rax),%rax
  0x000000011c061d13: mov    0x18(%rax),%rax
  0x000000011c061d17: mov    0x70(%rax),%rax
  0x000000011c061d1b: mov    (%rax),%rax
  0x000000011c061d1e: sub    $0x10,%rsp
  0x000000011c061d22: mov    %rsp,-0x48(%rbp)
  0x000000011c061d26: mov    %rax,0x8(%rsp)
  0x000000011c061d2b: mov    %rsp,%rsi
  0x000000011c061d2e: mov    0x8(%rsi),%rcx
  0x000000011c061d32: mov    (%rcx),%rax
  0x000000011c061d35: mov    %rax,%rbx
  0x000000011c061d38: and    $0x7,%rbx
  0x000000011c061d3c: cmp    $0x5,%rbx
  0x000000011c061d40: jne    0x000000011c061deb
  0x000000011c061d46: mov    0x8(%rcx),%ebx
  0x000000011c061d49: movabs $0x800000000,%r12
  0x000000011c061d53: add    %r12,%rbx
  0x000000011c061d56: xor    %r12,%r12
  0x000000011c061d59: mov    0xb8(%rbx),%rbx
  0x000000011c061d60: or     %r15,%rbx
  0x000000011c061d63: xor    %rax,%rbx
  0x000000011c061d66: and    $0xffffffffffffff87,%rbx
  0x000000011c061d6a: je     0x000000011c061eb0
  0x000000011c061d70: test   $0x7,%rbx
  0x000000011c061d77: jne    0x000000011c061dcc
  0x000000011c061d79: test   $0x300,%rbx
  0x000000011c061d80: jne    0x000000011c061d9f
  0x000000011c061d82: and    $0x37f,%rax
  0x000000011c061d89: mov    %rax,%rbx
  0x000000011c061d8c: or     %r15,%rbx
  0x000000011c061d8f: lock cmpxchg %rbx,(%rcx)
  0x000000011c061d94: jne    0x000000011c061e14
  0x000000011c061d9a: jmpq   0x000000011c061eb0
  0x000000011c061d9f: mov    0x8(%rcx),%ebx
  0x000000011c061da2: movabs $0x800000000,%r12
  0x000000011c061dac: add    %r12,%rbx
  0x000000011c061daf: xor    %r12,%r12
  0x000000011c061db2: mov    0xb8(%rbx),%rbx
  0x000000011c061db9: or     %r15,%rbx
  0x000000011c061dbc: lock cmpxchg %rbx,(%rcx)
  0x000000011c061dc1: jne    0x000000011c061e14
  0x000000011c061dc7: jmpq   0x000000011c061eb0
  0x000000011c061dcc: mov    0x8(%rcx),%ebx
  0x000000011c061dcf: movabs $0x800000000,%r12
  0x000000011c061dd9: add    %r12,%rbx
  0x000000011c061ddc: xor    %r12,%r12
  0x000000011c061ddf: mov    0xb8(%rbx),%rbx
  0x000000011c061de6: lock cmpxchg %rbx,(%rcx)
  0x000000011c061deb: mov    $0x1,%eax
  0x000000011c061df0: or     (%rcx),%rax
  0x000000011c061df3: mov    %rax,(%rsi)
  0x000000011c061df6: lock cmpxchg %rsi,(%rcx)
  0x000000011c061dfb: je     0x000000011c061eb0
  0x000000011c061e01: sub    %rsp,%rax
  0x000000011c061e04: and    $0xfffffffffffff007,%rax
  0x000000011c061e0b: mov    %rax,(%rsi)
  0x000000011c061e0e: je     0x000000011c061eb0
  0x000000011c061e14: callq  0x000000011c061e1e
  0x000000011c061e19: jmpq   0x000000011c061eb0
  0x000000011c061e1e: lea    0x8(%rsp),%rax
  0x000000011c061e23: mov    %r13,-0x40(%rbp)
  0x000000011c061e27: mov    %r15,%rdi
  0x000000011c061e2a: vzeroupper 
  0x000000011c061e2d: mov    %rbp,0x330(%r15)
  0x000000011c061e34: mov    %rax,0x320(%r15)
  0x000000011c061e3b: test   $0xf,%esp
  0x000000011c061e41: je     0x000000011c061e59
  0x000000011c061e47: sub    $0x8,%rsp
  0x000000011c061e4b: callq  0x00000001103abba4 = InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*)
  0x000000011c061e50: add    $0x8,%rsp
  0x000000011c061e54: jmpq   0x000000011c061e5e
  0x000000011c061e59: callq  0x00000001103abba4 = InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*)
  0x000000011c061e5e: movabs $0x0,%r10
  0x000000011c061e68: mov    %r10,0x320(%r15)
  0x000000011c061e6f: movabs $0x0,%r10
  0x000000011c061e79: mov    %r10,0x330(%r15)
  0x000000011c061e80: movabs $0x0,%r10
  0x000000011c061e8a: mov    %r10,0x328(%r15)
  0x000000011c061e91: vzeroupper 
  0x000000011c061e94: cmpq   $0x0,0x8(%r15)
  0x000000011c061e9c: je     0x000000011c061ea7
  0x000000011c061ea2: jmpq   0x000000011c054780
  0x000000011c061ea7: mov    -0x40(%rbp),%r13
  0x000000011c061eab: mov    -0x38(%rbp),%r14
  0x000000011c061eaf: retq   
  0x000000011c061eb0: cmpb   $0x0,-0xb6a7ddd(%rip)        # 0x00000001109ba0da = DTraceMethodProbes
  0x000000011c061eb7: je     0x000000011c061ee7
  0x000000011c061ebd: mov    -0x18(%rbp),%rsi
  0x000000011c061ec1: mov    %r15,%rdi
  0x000000011c061ec4: test   $0xf,%esp
  0x000000011c061eca: je     0x000000011c061ee2
  0x000000011c061ed0: sub    $0x8,%rsp
  0x000000011c061ed4: callq  0x000000011069793e = SharedRuntime::dtrace_method_entry(JavaThread*, Method*)
  0x000000011c061ed9: add    $0x8,%rsp
  0x000000011c061edd: jmpq   0x000000011c061ee7
  0x000000011c061ee2: callq  0x000000011069793e = SharedRuntime::dtrace_method_entry(JavaThread*, Method*)
  0x000000011c061ee7: movzbl 0x0(%r13),%ebx
  0x000000011c061eec: movabs $0x1109d7a20,%r10
  0x000000011c061ef6: jmpq   *(%r10,%rbx,8)
  0x000000011c061efa: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
method entry point (kind = abstract)  [0x000000011c061f20, 0x000000011c062000]  224 bytes

  0x000000011c061f20: mov    -0x48(%rbp),%rsp
  0x000000011c061f24: movq   $0x0,-0x10(%rbp)
  0x000000011c061f2c: mov    -0x40(%rbp),%r13
  0x000000011c061f30: mov    -0x38(%rbp),%r14
  0x000000011c061f34: callq  0x000000011c061f3e
  0x000000011c061f39: jmpq   0x000000011c061fd3
  0x000000011c061f3e: mov    %rbx,%rsi
  0x000000011c061f41: lea    0x8(%rsp),%rax
  0x000000011c061f46: mov    %r13,-0x40(%rbp)
  0x000000011c061f4a: mov    %r15,%rdi
  0x000000011c061f4d: vzeroupper 
  0x000000011c061f50: mov    %rbp,0x330(%r15)
  0x000000011c061f57: mov    %rax,0x320(%r15)
  0x000000011c061f5e: test   $0xf,%esp
  0x000000011c061f64: je     0x000000011c061f7c
  0x000000011c061f6a: sub    $0x8,%rsp
  0x000000011c061f6e: callq  0x00000001103ab418 = InterpreterRuntime::throw_AbstractMethodErrorWithMethod(JavaThread*, Method*)
  0x000000011c061f73: add    $0x8,%rsp
  0x000000011c061f77: jmpq   0x000000011c061f81
  0x000000011c061f7c: callq  0x00000001103ab418 = InterpreterRuntime::throw_AbstractMethodErrorWithMethod(JavaThread*, Method*)
  0x000000011c061f81: movabs $0x0,%r10
  0x000000011c061f8b: mov    %r10,0x320(%r15)
  0x000000011c061f92: movabs $0x0,%r10
  0x000000011c061f9c: mov    %r10,0x330(%r15)
  0x000000011c061fa3: movabs $0x0,%r10
  0x000000011c061fad: mov    %r10,0x328(%r15)
  0x000000011c061fb4: vzeroupper 
  0x000000011c061fb7: cmpq   $0x0,0x8(%r15)
  0x000000011c061fbf: je     0x000000011c061fca
  0x000000011c061fc5: jmpq   0x000000011c054780
  0x000000011c061fca: mov    -0x40(%rbp),%r13
  0x000000011c061fce: mov    -0x38(%rbp),%r14
  0x000000011c061fd2: retq   
  0x000000011c061fd3: movabs $0x1107f3493,%rdi
  0x000000011c061fdd: and    $0xfffffffffffffff0,%rsp
  0x000000011c061fe1: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c061fe6: hlt    
  0x000000011c061fe7: nop
  0x000000011c061fe8: add    %al,(%rax)
  0x000000011c061fea: add    %al,(%rax)
  0x000000011c061fec: add    %al,(%rax)
  0x000000011c061fee: add    %al,(%rax)
  0x000000011c061ff0: add    %al,(%rax)
  0x000000011c061ff2: add    %al,(%rax)
  0x000000011c061ff4: add    %al,(%rax)
  0x000000011c061ff6: add    %al,(%rax)
  0x000000011c061ff8: add    %al,(%rax)
  0x000000011c061ffa: add    %al,(%rax)
  0x000000011c061ffc: add    %al,(%rax)
  0x000000011c061ffe: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_lang_math_sin)  [0x000000011c062020, 0x000000011c062040]  32 bytes

  0x000000011c062020: vmovsd 0x8(%rsp),%xmm0
  0x000000011c062026: callq  0x000000011c056765
  0x000000011c06202b: pop    %rax
  0x000000011c06202c: mov    %r13,%rsp
  0x000000011c06202f: jmpq   *%rax
  0x000000011c062031: nopl   0x0(%rax)
  0x000000011c062038: add    %al,(%rax)
  0x000000011c06203a: add    %al,(%rax)
  0x000000011c06203c: add    %al,(%rax)
  0x000000011c06203e: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_lang_math_cos)  [0x000000011c062060, 0x000000011c062080]  32 bytes

  0x000000011c062060: vmovsd 0x8(%rsp),%xmm0
  0x000000011c062066: callq  0x000000011c056dfc
  0x000000011c06206b: pop    %rax
  0x000000011c06206c: mov    %r13,%rsp
  0x000000011c06206f: jmpq   *%rax
  0x000000011c062071: nopl   0x0(%rax)
  0x000000011c062078: add    %al,(%rax)
  0x000000011c06207a: add    %al,(%rax)
  0x000000011c06207c: add    %al,(%rax)
  0x000000011c06207e: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_lang_math_tan)  [0x000000011c0620a0, 0x000000011c0620c0]  32 bytes

  0x000000011c0620a0: vmovsd 0x8(%rsp),%xmm0
  0x000000011c0620a6: callq  0x000000011c057475
  0x000000011c0620ab: pop    %rax
  0x000000011c0620ac: mov    %r13,%rsp
  0x000000011c0620af: jmpq   *%rax
  0x000000011c0620b1: nopl   0x0(%rax)
  0x000000011c0620b8: add    %al,(%rax)
  0x000000011c0620ba: add    %al,(%rax)
  0x000000011c0620bc: add    %al,(%rax)
  0x000000011c0620be: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_lang_math_abs)  [0x000000011c0620e0, 0x000000011c062100]  32 bytes

  0x000000011c0620e0: fldl   0x8(%rsp)
  0x000000011c0620e4: fabs   
  0x000000011c0620e6: sub    $0x10,%rsp
  0x000000011c0620ea: fstpl  (%rsp)
  0x000000011c0620ed: vmovsd (%rsp),%xmm0
  0x000000011c0620f2: add    $0x10,%rsp
  0x000000011c0620f6: pop    %rax
  0x000000011c0620f7: mov    %r13,%rsp
  0x000000011c0620fa: jmpq   *%rax
  0x000000011c0620fc: nopl   0x0(%rax)

----------------------------------------------------------------------
method entry point (kind = java_lang_math_sqrt)  [0x000000011c062120, 0x000000011c062140]  32 bytes

  0x000000011c062120: vsqrtsd 0x8(%rsp),%xmm0,%xmm0
  0x000000011c062126: pop    %rax
  0x000000011c062127: mov    %r13,%rsp
  0x000000011c06212a: jmpq   *%rax
  0x000000011c06212c: nopl   0x0(%rax)
  0x000000011c062130: add    %al,(%rax)
  0x000000011c062132: add    %al,(%rax)
  0x000000011c062134: add    %al,(%rax)
  0x000000011c062136: add    %al,(%rax)
  0x000000011c062138: add    %al,(%rax)
  0x000000011c06213a: add    %al,(%rax)
  0x000000011c06213c: add    %al,(%rax)
  0x000000011c06213e: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_lang_math_log)  [0x000000011c062160, 0x000000011c062180]  32 bytes

  0x000000011c062160: vmovsd 0x8(%rsp),%xmm0
  0x000000011c062166: callq  0x000000011c055126
  0x000000011c06216b: pop    %rax
  0x000000011c06216c: mov    %r13,%rsp
  0x000000011c06216f: jmpq   *%rax
  0x000000011c062171: nopl   0x0(%rax)
  0x000000011c062178: add    %al,(%rax)
  0x000000011c06217a: add    %al,(%rax)
  0x000000011c06217c: add    %al,(%rax)
  0x000000011c06217e: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_lang_math_log10)  [0x000000011c0621a0, 0x000000011c0621c0]  32 bytes

  0x000000011c0621a0: vmovsd 0x8(%rsp),%xmm0
  0x000000011c0621a6: callq  0x000000011c0553a2
  0x000000011c0621ab: pop    %rax
  0x000000011c0621ac: mov    %r13,%rsp
  0x000000011c0621af: jmpq   *%rax
  0x000000011c0621b1: nopl   0x0(%rax)
  0x000000011c0621b8: add    %al,(%rax)
  0x000000011c0621ba: add    %al,(%rax)
  0x000000011c0621bc: add    %al,(%rax)
  0x000000011c0621be: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_lang_math_exp)  [0x000000011c0621e0, 0x000000011c062200]  32 bytes

  0x000000011c0621e0: vmovsd 0x8(%rsp),%xmm0
  0x000000011c0621e6: callq  0x000000011c054df9
  0x000000011c0621eb: pop    %rax
  0x000000011c0621ec: mov    %r13,%rsp
  0x000000011c0621ef: jmpq   *%rax
  0x000000011c0621f1: nopl   0x0(%rax)
  0x000000011c0621f8: add    %al,(%rax)
  0x000000011c0621fa: add    %al,(%rax)
  0x000000011c0621fc: add    %al,(%rax)
  0x000000011c0621fe: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_lang_math_pow)  [0x000000011c062220, 0x000000011c062240]  32 bytes

  0x000000011c062220: vmovsd 0x8(%rsp),%xmm1
  0x000000011c062226: vmovsd 0x18(%rsp),%xmm0
  0x000000011c06222c: callq  0x000000011c055651
  0x000000011c062231: pop    %rax
  0x000000011c062232: mov    %r13,%rsp
  0x000000011c062235: jmpq   *%rax
  0x000000011c062237: nop
  0x000000011c062238: add    %al,(%rax)
  0x000000011c06223a: add    %al,(%rax)
  0x000000011c06223c: add    %al,(%rax)
  0x000000011c06223e: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_lang_math_fmaF)  [0x000000011c062260, 0x000000011c062280]  32 bytes

  0x000000011c062260: vmovss 0x8(%rsp),%xmm0
  0x000000011c062266: vmovss 0x10(%rsp),%xmm1
  0x000000011c06226c: vmovss 0x18(%rsp),%xmm2
  0x000000011c062272: vfmadd231ss %xmm2,%xmm1,%xmm0
  0x000000011c062277: pop    %rax
  0x000000011c062278: mov    %r13,%rsp
  0x000000011c06227b: jmpq   *%rax
  0x000000011c06227d: data16 xchg %ax,%ax

----------------------------------------------------------------------
method entry point (kind = java_lang_math_fmaD)  [0x000000011c0622a0, 0x000000011c0622c0]  32 bytes

  0x000000011c0622a0: vmovsd 0x8(%rsp),%xmm0
  0x000000011c0622a6: vmovsd 0x18(%rsp),%xmm1
  0x000000011c0622ac: vmovsd 0x28(%rsp),%xmm2
  0x000000011c0622b2: vfmadd231sd %xmm2,%xmm1,%xmm0
  0x000000011c0622b7: pop    %rax
  0x000000011c0622b8: mov    %r13,%rsp
  0x000000011c0622bb: jmpq   *%rax
  0x000000011c0622bd: data16 xchg %ax,%ax

----------------------------------------------------------------------
method entry point (kind = java_lang_ref_reference_get)  [0x000000011c0622e0, 0x000000011c062380]  160 bytes

  0x000000011c0622e0: mov    0x8(%rsp),%rax
  0x000000011c0622e5: test   %rax,%rax
  0x000000011c0622e8: je     0x000000011c06235e
  0x000000011c0622ee: mov    0xc(%rax),%eax
  0x000000011c0622f1: shl    $0x3,%rax
  0x000000011c0622f5: cmpb   $0x0,0x30(%r15)
  0x000000011c0622fa: je     0x000000011c062357
  0x000000011c062300: cmp    $0x0,%rax
  0x000000011c062304: je     0x000000011c062357
  0x000000011c06230a: mov    0x38(%r15),%rbx
  0x000000011c06230e: cmp    $0x0,%rbx
  0x000000011c062312: je     0x000000011c06232c
  0x000000011c062318: sub    $0x8,%rbx
  0x000000011c06231c: mov    %rbx,0x38(%r15)
  0x000000011c062320: add    0x48(%r15),%rbx
  0x000000011c062324: mov    %rax,(%rbx)
  0x000000011c062327: jmpq   0x000000011c062357
  0x000000011c06232c: push   %rax
  0x000000011c06232d: mov    %r15,%rsi
  0x000000011c062330: mov    %rax,%rdi
  0x000000011c062333: test   $0xf,%esp
  0x000000011c062339: je     0x000000011c062351
  0x000000011c06233f: sub    $0x8,%rsp
  0x000000011c062343: callq  0x000000011030185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x000000011c062348: add    $0x8,%rsp
  0x000000011c06234c: jmpq   0x000000011c062356
  0x000000011c062351: callq  0x000000011030185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x000000011c062356: pop    %rax
  0x000000011c062357: pop    %rdi
  0x000000011c062358: mov    %r13,%rsp
  0x000000011c06235b: jmpq   *%rdi
  0x000000011c06235d: retq   
  0x000000011c06235e: jmpq   0x000000011c061a00
  0x000000011c062363: nopl   0x0(%rax,%rax,1)
  0x000000011c062368: add    %al,(%rax)
  0x000000011c06236a: add    %al,(%rax)
  0x000000011c06236c: add    %al,(%rax)
  0x000000011c06236e: add    %al,(%rax)
  0x000000011c062370: add    %al,(%rax)
  0x000000011c062372: add    %al,(%rax)
  0x000000011c062374: add    %al,(%rax)
  0x000000011c062376: add    %al,(%rax)
  0x000000011c062378: add    %al,(%rax)
  0x000000011c06237a: add    %al,(%rax)
  0x000000011c06237c: add    %al,(%rax)
  0x000000011c06237e: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = native)  [0x000000011c0623a0, 0x000000011c062b80]  2016 bytes

  0x000000011c0623a0: mov    0x8(%rbx),%rcx
  0x000000011c0623a4: movzwl 0x34(%rcx),%ecx
  0x000000011c0623a8: pop    %rax
  0x000000011c0623a9: lea    -0x8(%rsp,%rcx,8),%r14
  0x000000011c0623ae: pushq  $0x0
  0x000000011c0623b3: pushq  $0x0
  0x000000011c0623b8: push   %rax
  0x000000011c0623b9: push   %rbp
  0x000000011c0623ba: mov    %rsp,%rbp
  0x000000011c0623bd: push   %r13
  0x000000011c0623bf: pushq  $0x0
  0x000000011c0623c4: mov    0x8(%rbx),%r13
  0x000000011c0623c8: lea    0x38(%r13),%r13
  0x000000011c0623cc: push   %rbx
  0x000000011c0623cd: mov    0x8(%rbx),%rdx
  0x000000011c0623d1: mov    0x8(%rdx),%rdx
  0x000000011c0623d5: mov    0x18(%rdx),%rdx
  0x000000011c0623d9: mov    0x70(%rdx),%rdx
  0x000000011c0623dd: mov    (%rdx),%rdx
  0x000000011c0623e0: push   %rdx
  0x000000011c0623e1: pushq  $0x0
  0x000000011c0623e6: mov    0x8(%rbx),%rdx
  0x000000011c0623ea: mov    0x8(%rdx),%rdx
  0x000000011c0623ee: mov    0x10(%rdx),%rdx
  0x000000011c0623f2: push   %rdx
  0x000000011c0623f3: push   %r14
  0x000000011c0623f5: pushq  $0x0
  0x000000011c0623fa: pushq  $0x0
  0x000000011c0623ff: mov    %rsp,(%rsp)
  0x000000011c062403: movb   $0x1,0x3dd(%r15)
  0x000000011c06240b: mov    %eax,-0x14000(%rsp)
  0x000000011c062412: movb   $0x0,0x3dd(%r15)
  0x000000011c06241a: cmpb   $0x0,-0xb6a8347(%rip)        # 0x00000001109ba0da = DTraceMethodProbes
  0x000000011c062421: je     0x000000011c062451
  0x000000011c062427: mov    -0x18(%rbp),%rsi
  0x000000011c06242b: mov    %r15,%rdi
  0x000000011c06242e: test   $0xf,%esp
  0x000000011c062434: je     0x000000011c06244c
  0x000000011c06243a: sub    $0x8,%rsp
  0x000000011c06243e: callq  0x000000011069793e = SharedRuntime::dtrace_method_entry(JavaThread*, Method*)
  0x000000011c062443: add    $0x8,%rsp
  0x000000011c062447: jmpq   0x000000011c062451
  0x000000011c06244c: callq  0x000000011069793e = SharedRuntime::dtrace_method_entry(JavaThread*, Method*)
  0x000000011c062451: mov    -0x18(%rbp),%rbx
  0x000000011c062455: mov    0x8(%rbx),%r11
  0x000000011c062459: movzwl 0x34(%r11),%r11d
  0x000000011c06245e: shl    $0x3,%r11d
  0x000000011c062462: sub    %r11,%rsp
  0x000000011c062465: sub    $0x0,%rsp
  0x000000011c062469: and    $0xfffffffffffffff0,%rsp
  0x000000011c06246d: mov    0x60(%rbx),%r11
  0x000000011c062471: test   %r11,%r11
  0x000000011c062474: jne    0x000000011c062521
  0x000000011c06247a: callq  0x000000011c062484
  0x000000011c06247f: jmpq   0x000000011c062519
  0x000000011c062484: mov    %rbx,%rsi
  0x000000011c062487: lea    0x8(%rsp),%rax
  0x000000011c06248c: mov    %r13,-0x40(%rbp)
  0x000000011c062490: mov    %r15,%rdi
  0x000000011c062493: vzeroupper 
  0x000000011c062496: mov    %rbp,0x330(%r15)
  0x000000011c06249d: mov    %rax,0x320(%r15)
  0x000000011c0624a4: test   $0xf,%esp
  0x000000011c0624aa: je     0x000000011c0624c2
  0x000000011c0624b0: sub    $0x8,%rsp
  0x000000011c0624b4: callq  0x00000001103aded2 = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0x000000011c0624b9: add    $0x8,%rsp
  0x000000011c0624bd: jmpq   0x000000011c0624c7
  0x000000011c0624c2: callq  0x00000001103aded2 = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0x000000011c0624c7: movabs $0x0,%r10
  0x000000011c0624d1: mov    %r10,0x320(%r15)
  0x000000011c0624d8: movabs $0x0,%r10
  0x000000011c0624e2: mov    %r10,0x330(%r15)
  0x000000011c0624e9: movabs $0x0,%r10
  0x000000011c0624f3: mov    %r10,0x328(%r15)
  0x000000011c0624fa: vzeroupper 
  0x000000011c0624fd: cmpq   $0x0,0x8(%r15)
  0x000000011c062505: je     0x000000011c062510
  0x000000011c06250b: jmpq   0x000000011c054780
  0x000000011c062510: mov    -0x40(%rbp),%r13
  0x000000011c062514: mov    -0x38(%rbp),%r14
  0x000000011c062518: retq   
  0x000000011c062519: mov    -0x18(%rbp),%rbx
  0x000000011c06251d: mov    0x60(%rbx),%r11
  0x000000011c062521: callq  *%r11
  0x000000011c062524: mov    -0x18(%rbp),%rbx
  0x000000011c062528: mov    %rax,0x18(%rbp)
  0x000000011c06252c: mov    0x20(%rbx),%r11d
  0x000000011c062530: test   $0x8,%r11d
  0x000000011c062537: je     0x000000011c062558
  0x000000011c06253d: mov    0x8(%rbx),%r11
  0x000000011c062541: mov    0x8(%r11),%r11
  0x000000011c062545: mov    0x18(%r11),%r11
  0x000000011c062549: mov    0x70(%r11),%r11
  0x000000011c06254d: mov    (%r11),%r11
  0x000000011c062550: mov    %r11,0x10(%rbp)
  0x000000011c062554: lea    0x10(%rbp),%rsi
  0x000000011c062558: mov    0x58(%rbx),%rax
  0x000000011c06255c: movabs $0x1106975ed,%r10
  0x000000011c062566: cmp    %r10,%rax
  0x000000011c062569: jne    0x000000011c062616
  0x000000011c06256f: callq  0x000000011c062579
  0x000000011c062574: jmpq   0x000000011c06260e
  0x000000011c062579: mov    %rbx,%rsi
  0x000000011c06257c: lea    0x8(%rsp),%rax
  0x000000011c062581: mov    %r13,-0x40(%rbp)
  0x000000011c062585: mov    %r15,%rdi
  0x000000011c062588: vzeroupper 
  0x000000011c06258b: mov    %rbp,0x330(%r15)
  0x000000011c062592: mov    %rax,0x320(%r15)
  0x000000011c062599: test   $0xf,%esp
  0x000000011c06259f: je     0x000000011c0625b7
  0x000000011c0625a5: sub    $0x8,%rsp
  0x000000011c0625a9: callq  0x00000001103aded2 = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0x000000011c0625ae: add    $0x8,%rsp
  0x000000011c0625b2: jmpq   0x000000011c0625bc
  0x000000011c0625b7: callq  0x00000001103aded2 = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0x000000011c0625bc: movabs $0x0,%r10
  0x000000011c0625c6: mov    %r10,0x320(%r15)
  0x000000011c0625cd: movabs $0x0,%r10
  0x000000011c0625d7: mov    %r10,0x330(%r15)
  0x000000011c0625de: movabs $0x0,%r10
  0x000000011c0625e8: mov    %r10,0x328(%r15)
  0x000000011c0625ef: vzeroupper 
  0x000000011c0625f2: cmpq   $0x0,0x8(%r15)
  0x000000011c0625fa: je     0x000000011c062605
  0x000000011c062600: jmpq   0x000000011c054780
  0x000000011c062605: mov    -0x40(%rbp),%r13
  0x000000011c062609: mov    -0x38(%rbp),%r14
  0x000000011c06260d: retq   
  0x000000011c06260e: mov    -0x18(%rbp),%rbx
  0x000000011c062612: mov    0x58(%rbx),%rax
  0x000000011c062616: lea    0x340(%r15),%rdi
  0x000000011c06261d: vzeroupper 
  0x000000011c062620: mov    %rbp,0x330(%r15)
  0x000000011c062627: movabs $0x11c06261d,%r10
  0x000000011c062631: mov    %r10,0x328(%r15)
  0x000000011c062638: mov    %rsp,0x320(%r15)
  0x000000011c06263f: movl   $0x4,0x3b8(%r15)
  0x000000011c06264a: callq  *%rax
  0x000000011c06264c: vzeroupper 
  0x000000011c06264f: sub    $0x10,%rsp
  0x000000011c062653: vmovsd %xmm0,(%rsp)
  0x000000011c062658: sub    $0x10,%rsp
  0x000000011c06265c: mov    %rax,(%rsp)
  0x000000011c062660: movabs $0x0,%r10
  0x000000011c06266a: mov    %r10,0x8(%rsp)
  0x000000011c06266f: movl   $0x5,0x3b8(%r15)
  0x000000011c06267a: lock addl $0x0,-0x40(%rsp)
  0x000000011c062680: testb  $0x8,0x108(%r15)
  0x000000011c062688: jne    0x000000011c06269f
  0x000000011c06268e: cmpl   $0x0,0xd8(%r15)
  0x000000011c062699: je     0x000000011c0626b8
  0x000000011c06269f: mov    %r15,%rdi
  0x000000011c0626a2: mov    %rsp,%r12
  0x000000011c0626a5: sub    $0x0,%rsp
  0x000000011c0626a9: and    $0xfffffffffffffff0,%rsp
  0x000000011c0626ad: callq  0x0000000110771148 = JavaThread::check_special_condition_for_native_trans(JavaThread*)
  0x000000011c0626b2: mov    %r12,%rsp
  0x000000011c0626b5: xor    %r12,%r12
  0x000000011c0626b8: movl   $0x8,0x3b8(%r15)
  0x000000011c0626c3: movabs $0x0,%r10
  0x000000011c0626cd: mov    %r10,0x320(%r15)
  0x000000011c0626d4: movabs $0x0,%r10
  0x000000011c0626de: mov    %r10,0x330(%r15)
  0x000000011c0626e5: movabs $0x0,%r10
  0x000000011c0626ef: mov    %r10,0x328(%r15)
  0x000000011c0626f6: vzeroupper 
  0x000000011c0626f9: mov    0xe0(%r15),%r11
  0x000000011c062700: movl   $0x0,0x100(%r11)
  0x000000011c06270b: movabs $0x11c05fefb,%r11
  0x000000011c062715: cmp    0x18(%rbp),%r11
  0x000000011c062719: jne    0x000000011c0627c5
  0x000000011c06271f: mov    (%rsp),%rax
  0x000000011c062723: add    $0x10,%rsp
  0x000000011c062727: test   %rax,%rax
  0x000000011c06272a: je     0x000000011c0627aa
  0x000000011c062730: test   $0x1,%rax
  0x000000011c062736: je     0x000000011c0627a7
  0x000000011c06273c: mov    -0x1(%rax),%rax
  0x000000011c062740: cmpb   $0x0,0x30(%r15)
  0x000000011c062745: je     0x000000011c0627a2
  0x000000011c06274b: cmp    $0x0,%rax
  0x000000011c06274f: je     0x000000011c0627a2
  0x000000011c062755: mov    0x38(%r15),%r11
  0x000000011c062759: cmp    $0x0,%r11
  0x000000011c06275d: je     0x000000011c062777
  0x000000011c062763: sub    $0x8,%r11
  0x000000011c062767: mov    %r11,0x38(%r15)
  0x000000011c06276b: add    0x48(%r15),%r11
  0x000000011c06276f: mov    %rax,(%r11)
  0x000000011c062772: jmpq   0x000000011c0627a2
  0x000000011c062777: push   %rax
  0x000000011c062778: mov    %r15,%rsi
  0x000000011c06277b: mov    %rax,%rdi
  0x000000011c06277e: test   $0xf,%esp
  0x000000011c062784: je     0x000000011c06279c
  0x000000011c06278a: sub    $0x8,%rsp
  0x000000011c06278e: callq  0x000000011030185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x000000011c062793: add    $0x8,%rsp
  0x000000011c062797: jmpq   0x000000011c0627a1
  0x000000011c06279c: callq  0x000000011030185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x000000011c0627a1: pop    %rax
  0x000000011c0627a2: jmpq   0x000000011c0627aa
  0x000000011c0627a7: mov    (%rax),%rax
  0x000000011c0627aa: mov    %rax,0x10(%rbp)
  0x000000011c0627ae: sub    $0x10,%rsp
  0x000000011c0627b2: mov    %rax,(%rsp)
  0x000000011c0627b6: movabs $0x0,%r10
  0x000000011c0627c0: mov    %r10,0x8(%rsp)
  0x000000011c0627c5: cmpl   $0x2,0x408(%r15)
  0x000000011c0627d0: jne    0x000000011c062893
  0x000000011c0627d6: mov    %rsp,-0x28(%rsp)
  0x000000011c0627db: sub    $0x80,%rsp
  0x000000011c0627e2: mov    %rax,0x78(%rsp)
  0x000000011c0627e7: mov    %rcx,0x70(%rsp)
  0x000000011c0627ec: mov    %rdx,0x68(%rsp)
  0x000000011c0627f1: mov    %rbx,0x60(%rsp)
  0x000000011c0627f6: mov    %rbp,0x50(%rsp)
  0x000000011c0627fb: mov    %rsi,0x48(%rsp)
  0x000000011c062800: mov    %rdi,0x40(%rsp)
  0x000000011c062805: mov    %r8,0x38(%rsp)
  0x000000011c06280a: mov    %r9,0x30(%rsp)
  0x000000011c06280f: mov    %r10,0x28(%rsp)
  0x000000011c062814: mov    %r11,0x20(%rsp)
  0x000000011c062819: mov    %r12,0x18(%rsp)
  0x000000011c06281e: mov    %r13,0x10(%rsp)
  0x000000011c062823: mov    %r14,0x8(%rsp)
  0x000000011c062828: mov    %r15,(%rsp)
  0x000000011c06282c: mov    %rsp,%r12
  0x000000011c06282f: sub    $0x0,%rsp
  0x000000011c062833: and    $0xfffffffffffffff0,%rsp
  0x000000011c062837: callq  0x0000000110699586 = SharedRuntime::reguard_yellow_pages()
  0x000000011c06283c: mov    %r12,%rsp
  0x000000011c06283f: mov    (%rsp),%r15
  0x000000011c062843: mov    0x8(%rsp),%r14
  0x000000011c062848: mov    0x10(%rsp),%r13
  0x000000011c06284d: mov    0x18(%rsp),%r12
  0x000000011c062852: mov    0x20(%rsp),%r11
  0x000000011c062857: mov    0x28(%rsp),%r10
  0x000000011c06285c: mov    0x30(%rsp),%r9
  0x000000011c062861: mov    0x38(%rsp),%r8
  0x000000011c062866: mov    0x40(%rsp),%rdi
  0x000000011c06286b: mov    0x48(%rsp),%rsi
  0x000000011c062870: mov    0x50(%rsp),%rbp
  0x000000011c062875: mov    0x60(%rsp),%rbx
  0x000000011c06287a: mov    0x68(%rsp),%rdx
  0x000000011c06287f: mov    0x70(%rsp),%rcx
  0x000000011c062884: mov    0x78(%rsp),%rax
  0x000000011c062889: add    $0x80,%rsp
  0x000000011c062890: xor    %r12,%r12
  0x000000011c062893: mov    -0x18(%rbp),%rbx
  0x000000011c062897: mov    0x8(%rbx),%r13
  0x000000011c06289b: lea    0x38(%r13),%r13
  0x000000011c06289f: cmpq   $0x0,0x8(%r15)
  0x000000011c0628a7: je     0x000000011c06295d
  0x000000011c0628ad: callq  0x000000011c0628b7
  0x000000011c0628b2: jmpq   0x000000011c062949
  0x000000011c0628b7: lea    0x8(%rsp),%rax
  0x000000011c0628bc: mov    %r13,-0x40(%rbp)
  0x000000011c0628c0: mov    %r15,%rdi
  0x000000011c0628c3: vzeroupper 
  0x000000011c0628c6: mov    %rbp,0x330(%r15)
  0x000000011c0628cd: mov    %rax,0x320(%r15)
  0x000000011c0628d4: test   $0xf,%esp
  0x000000011c0628da: je     0x000000011c0628f2
  0x000000011c0628e0: sub    $0x8,%rsp
  0x000000011c0628e4: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c0628e9: add    $0x8,%rsp
  0x000000011c0628ed: jmpq   0x000000011c0628f7
  0x000000011c0628f2: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c0628f7: movabs $0x0,%r10
  0x000000011c062901: mov    %r10,0x320(%r15)
  0x000000011c062908: movabs $0x0,%r10
  0x000000011c062912: mov    %r10,0x330(%r15)
  0x000000011c062919: movabs $0x0,%r10
  0x000000011c062923: mov    %r10,0x328(%r15)
  0x000000011c06292a: vzeroupper 
  0x000000011c06292d: cmpq   $0x0,0x8(%r15)
  0x000000011c062935: je     0x000000011c062940
  0x000000011c06293b: jmpq   0x000000011c054780
  0x000000011c062940: mov    -0x40(%rbp),%r13
  0x000000011c062944: mov    -0x38(%rbp),%r14
  0x000000011c062948: retq   
  0x000000011c062949: movabs $0x1107f3493,%rdi
  0x000000011c062953: and    $0xfffffffffffffff0,%rsp
  0x000000011c062957: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c06295c: hlt    
  0x000000011c06295d: mov    0x20(%rbx),%r11d
  0x000000011c062961: test   $0x20,%r11d
  0x000000011c062968: je     0x000000011c062b0e
  0x000000011c06296e: lea    -0x58(%rbp),%rsi
  0x000000011c062972: mov    0x8(%rsi),%r11
  0x000000011c062976: test   %r11,%r11
  0x000000011c062979: jne    0x000000011c062a2f
  0x000000011c06297f: callq  0x000000011c062989
  0x000000011c062984: jmpq   0x000000011c062a1b
  0x000000011c062989: lea    0x8(%rsp),%rax
  0x000000011c06298e: mov    %r13,-0x40(%rbp)
  0x000000011c062992: mov    %r15,%rdi
  0x000000011c062995: vzeroupper 
  0x000000011c062998: mov    %rbp,0x330(%r15)
  0x000000011c06299f: mov    %rax,0x320(%r15)
  0x000000011c0629a6: test   $0xf,%esp
  0x000000011c0629ac: je     0x000000011c0629c4
  0x000000011c0629b2: sub    $0x8,%rsp
  0x000000011c0629b6: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c0629bb: add    $0x8,%rsp
  0x000000011c0629bf: jmpq   0x000000011c0629c9
  0x000000011c0629c4: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c0629c9: movabs $0x0,%r10
  0x000000011c0629d3: mov    %r10,0x320(%r15)
  0x000000011c0629da: movabs $0x0,%r10
  0x000000011c0629e4: mov    %r10,0x330(%r15)
  0x000000011c0629eb: movabs $0x0,%r10
  0x000000011c0629f5: mov    %r10,0x328(%r15)
  0x000000011c0629fc: vzeroupper 
  0x000000011c0629ff: cmpq   $0x0,0x8(%r15)
  0x000000011c062a07: je     0x000000011c062a12
  0x000000011c062a0d: jmpq   0x000000011c054780
  0x000000011c062a12: mov    -0x40(%rbp),%r13
  0x000000011c062a16: mov    -0x38(%rbp),%r14
  0x000000011c062a1a: retq   
  0x000000011c062a1b: movabs $0x1107f3493,%rdi
  0x000000011c062a25: and    $0xfffffffffffffff0,%rsp
  0x000000011c062a29: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c062a2e: hlt    
  0x000000011c062a2f: mov    %r13,-0x40(%rbp)
  0x000000011c062a33: lea    (%rsi),%rax
  0x000000011c062a36: mov    0x8(%rsi),%rcx
  0x000000011c062a3a: movq   $0x0,0x8(%rsi)
  0x000000011c062a42: mov    (%rcx),%rdx
  0x000000011c062a45: and    $0x7,%rdx
  0x000000011c062a49: cmp    $0x5,%rdx
  0x000000011c062a4d: je     0x000000011c062b0a
  0x000000011c062a53: mov    (%rax),%rdx
  0x000000011c062a56: test   %rdx,%rdx
  0x000000011c062a59: je     0x000000011c062b0a
  0x000000011c062a5f: lock cmpxchg %rdx,(%rcx)
  0x000000011c062a64: je     0x000000011c062b0a
  0x000000011c062a6a: mov    %rcx,0x8(%rsi)
  0x000000011c062a6e: callq  0x000000011c062a78
  0x000000011c062a73: jmpq   0x000000011c062b0a
  0x000000011c062a78: lea    0x8(%rsp),%rax
  0x000000011c062a7d: mov    %r13,-0x40(%rbp)
  0x000000011c062a81: mov    %r15,%rdi
  0x000000011c062a84: vzeroupper 
  0x000000011c062a87: mov    %rbp,0x330(%r15)
  0x000000011c062a8e: mov    %rax,0x320(%r15)
  0x000000011c062a95: test   $0xf,%esp
  0x000000011c062a9b: je     0x000000011c062ab3
  0x000000011c062aa1: sub    $0x8,%rsp
  0x000000011c062aa5: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c062aaa: add    $0x8,%rsp
  0x000000011c062aae: jmpq   0x000000011c062ab8
  0x000000011c062ab3: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c062ab8: movabs $0x0,%r10
  0x000000011c062ac2: mov    %r10,0x320(%r15)
  0x000000011c062ac9: movabs $0x0,%r10
  0x000000011c062ad3: mov    %r10,0x330(%r15)
  0x000000011c062ada: movabs $0x0,%r10
  0x000000011c062ae4: mov    %r10,0x328(%r15)
  0x000000011c062aeb: vzeroupper 
  0x000000011c062aee: cmpq   $0x0,0x8(%r15)
  0x000000011c062af6: je     0x000000011c062b01
  0x000000011c062afc: jmpq   0x000000011c054780
  0x000000011c062b01: mov    -0x40(%rbp),%r13
  0x000000011c062b05: mov    -0x38(%rbp),%r14
  0x000000011c062b09: retq   
  0x000000011c062b0a: mov    -0x40(%rbp),%r13
  0x000000011c062b0e: cmpb   $0x0,-0xb6a8a3b(%rip)        # 0x00000001109ba0da = DTraceMethodProbes
  0x000000011c062b15: je     0x000000011c062b45
  0x000000011c062b1b: mov    -0x18(%rbp),%rsi
  0x000000011c062b1f: mov    %r15,%rdi
  0x000000011c062b22: test   $0xf,%esp
  0x000000011c062b28: je     0x000000011c062b40
  0x000000011c062b2e: sub    $0x8,%rsp
  0x000000011c062b32: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c062b37: add    $0x8,%rsp
  0x000000011c062b3b: jmpq   0x000000011c062b45
  0x000000011c062b40: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c062b45: mov    (%rsp),%rax
  0x000000011c062b49: add    $0x10,%rsp
  0x000000011c062b4d: vmovsd (%rsp),%xmm0
  0x000000011c062b52: add    $0x10,%rsp
  0x000000011c062b56: mov    0x18(%rbp),%r11
  0x000000011c062b5a: callq  *%r11
  0x000000011c062b5d: mov    -0x8(%rbp),%r11
  0x000000011c062b61: leaveq 
  0x000000011c062b62: pop    %rdi
  0x000000011c062b63: mov    %r11,%rsp
  0x000000011c062b66: jmpq   *%rdi
  0x000000011c062b68: add    %al,(%rax)
  0x000000011c062b6a: add    %al,(%rax)
  0x000000011c062b6c: add    %al,(%rax)
  0x000000011c062b6e: add    %al,(%rax)
  0x000000011c062b70: add    %al,(%rax)
  0x000000011c062b72: add    %al,(%rax)
  0x000000011c062b74: add    %al,(%rax)
  0x000000011c062b76: add    %al,(%rax)
  0x000000011c062b78: add    %al,(%rax)
  0x000000011c062b7a: add    %al,(%rax)
  0x000000011c062b7c: add    %al,(%rax)
  0x000000011c062b7e: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = native_synchronized)  [0x000000011c062ba0, 0x000000011c063520]  2432 bytes

  0x000000011c062ba0: mov    0x8(%rbx),%rcx
  0x000000011c062ba4: movzwl 0x34(%rcx),%ecx
  0x000000011c062ba8: pop    %rax
  0x000000011c062ba9: lea    -0x8(%rsp,%rcx,8),%r14
  0x000000011c062bae: pushq  $0x0
  0x000000011c062bb3: pushq  $0x0
  0x000000011c062bb8: push   %rax
  0x000000011c062bb9: push   %rbp
  0x000000011c062bba: mov    %rsp,%rbp
  0x000000011c062bbd: push   %r13
  0x000000011c062bbf: pushq  $0x0
  0x000000011c062bc4: mov    0x8(%rbx),%r13
  0x000000011c062bc8: lea    0x38(%r13),%r13
  0x000000011c062bcc: push   %rbx
  0x000000011c062bcd: mov    0x8(%rbx),%rdx
  0x000000011c062bd1: mov    0x8(%rdx),%rdx
  0x000000011c062bd5: mov    0x18(%rdx),%rdx
  0x000000011c062bd9: mov    0x70(%rdx),%rdx
  0x000000011c062bdd: mov    (%rdx),%rdx
  0x000000011c062be0: push   %rdx
  0x000000011c062be1: pushq  $0x0
  0x000000011c062be6: mov    0x8(%rbx),%rdx
  0x000000011c062bea: mov    0x8(%rdx),%rdx
  0x000000011c062bee: mov    0x10(%rdx),%rdx
  0x000000011c062bf2: push   %rdx
  0x000000011c062bf3: push   %r14
  0x000000011c062bf5: pushq  $0x0
  0x000000011c062bfa: pushq  $0x0
  0x000000011c062bff: mov    %rsp,(%rsp)
  0x000000011c062c03: movb   $0x1,0x3dd(%r15)
  0x000000011c062c0b: mov    %eax,-0x14000(%rsp)
  0x000000011c062c12: movb   $0x0,0x3dd(%r15)
  0x000000011c062c1a: mov    0x20(%rbx),%eax
  0x000000011c062c1d: test   $0x8,%eax
  0x000000011c062c22: mov    (%r14),%rax
  0x000000011c062c25: je     0x000000011c062c3e
  0x000000011c062c2b: mov    0x8(%rbx),%rax
  0x000000011c062c2f: mov    0x8(%rax),%rax
  0x000000011c062c33: mov    0x18(%rax),%rax
  0x000000011c062c37: mov    0x70(%rax),%rax
  0x000000011c062c3b: mov    (%rax),%rax
  0x000000011c062c3e: sub    $0x10,%rsp
  0x000000011c062c42: mov    %rsp,-0x48(%rbp)
  0x000000011c062c46: mov    %rax,0x8(%rsp)
  0x000000011c062c4b: mov    %rsp,%rsi
  0x000000011c062c4e: mov    0x8(%rsi),%rcx
  0x000000011c062c52: mov    (%rcx),%rax
  0x000000011c062c55: mov    %rax,%rbx
  0x000000011c062c58: and    $0x7,%rbx
  0x000000011c062c5c: cmp    $0x5,%rbx
  0x000000011c062c60: jne    0x000000011c062d0b
  0x000000011c062c66: mov    0x8(%rcx),%ebx
  0x000000011c062c69: movabs $0x800000000,%r12
  0x000000011c062c73: add    %r12,%rbx
  0x000000011c062c76: xor    %r12,%r12
  0x000000011c062c79: mov    0xb8(%rbx),%rbx
  0x000000011c062c80: or     %r15,%rbx
  0x000000011c062c83: xor    %rax,%rbx
  0x000000011c062c86: and    $0xffffffffffffff87,%rbx
  0x000000011c062c8a: je     0x000000011c062dd0
  0x000000011c062c90: test   $0x7,%rbx
  0x000000011c062c97: jne    0x000000011c062cec
  0x000000011c062c99: test   $0x300,%rbx
  0x000000011c062ca0: jne    0x000000011c062cbf
  0x000000011c062ca2: and    $0x37f,%rax
  0x000000011c062ca9: mov    %rax,%rbx
  0x000000011c062cac: or     %r15,%rbx
  0x000000011c062caf: lock cmpxchg %rbx,(%rcx)
  0x000000011c062cb4: jne    0x000000011c062d34
  0x000000011c062cba: jmpq   0x000000011c062dd0
  0x000000011c062cbf: mov    0x8(%rcx),%ebx
  0x000000011c062cc2: movabs $0x800000000,%r12
  0x000000011c062ccc: add    %r12,%rbx
  0x000000011c062ccf: xor    %r12,%r12
  0x000000011c062cd2: mov    0xb8(%rbx),%rbx
  0x000000011c062cd9: or     %r15,%rbx
  0x000000011c062cdc: lock cmpxchg %rbx,(%rcx)
  0x000000011c062ce1: jne    0x000000011c062d34
  0x000000011c062ce7: jmpq   0x000000011c062dd0
  0x000000011c062cec: mov    0x8(%rcx),%ebx
  0x000000011c062cef: movabs $0x800000000,%r12
  0x000000011c062cf9: add    %r12,%rbx
  0x000000011c062cfc: xor    %r12,%r12
  0x000000011c062cff: mov    0xb8(%rbx),%rbx
  0x000000011c062d06: lock cmpxchg %rbx,(%rcx)
  0x000000011c062d0b: mov    $0x1,%eax
  0x000000011c062d10: or     (%rcx),%rax
  0x000000011c062d13: mov    %rax,(%rsi)
  0x000000011c062d16: lock cmpxchg %rsi,(%rcx)
  0x000000011c062d1b: je     0x000000011c062dd0
  0x000000011c062d21: sub    %rsp,%rax
  0x000000011c062d24: and    $0xfffffffffffff007,%rax
  0x000000011c062d2b: mov    %rax,(%rsi)
  0x000000011c062d2e: je     0x000000011c062dd0
  0x000000011c062d34: callq  0x000000011c062d3e
  0x000000011c062d39: jmpq   0x000000011c062dd0
  0x000000011c062d3e: lea    0x8(%rsp),%rax
  0x000000011c062d43: mov    %r13,-0x40(%rbp)
  0x000000011c062d47: mov    %r15,%rdi
  0x000000011c062d4a: vzeroupper 
  0x000000011c062d4d: mov    %rbp,0x330(%r15)
  0x000000011c062d54: mov    %rax,0x320(%r15)
  0x000000011c062d5b: test   $0xf,%esp
  0x000000011c062d61: je     0x000000011c062d79
  0x000000011c062d67: sub    $0x8,%rsp
  0x000000011c062d6b: callq  0x00000001103abba4 = InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*)
  0x000000011c062d70: add    $0x8,%rsp
  0x000000011c062d74: jmpq   0x000000011c062d7e
  0x000000011c062d79: callq  0x00000001103abba4 = InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*)
  0x000000011c062d7e: movabs $0x0,%r10
  0x000000011c062d88: mov    %r10,0x320(%r15)
  0x000000011c062d8f: movabs $0x0,%r10
  0x000000011c062d99: mov    %r10,0x330(%r15)
  0x000000011c062da0: movabs $0x0,%r10
  0x000000011c062daa: mov    %r10,0x328(%r15)
  0x000000011c062db1: vzeroupper 
  0x000000011c062db4: cmpq   $0x0,0x8(%r15)
  0x000000011c062dbc: je     0x000000011c062dc7
  0x000000011c062dc2: jmpq   0x000000011c054780
  0x000000011c062dc7: mov    -0x40(%rbp),%r13
  0x000000011c062dcb: mov    -0x38(%rbp),%r14
  0x000000011c062dcf: retq   
  0x000000011c062dd0: cmpb   $0x0,-0xb6a8cfd(%rip)        # 0x00000001109ba0da = DTraceMethodProbes
  0x000000011c062dd7: je     0x000000011c062e07
  0x000000011c062ddd: mov    -0x18(%rbp),%rsi
  0x000000011c062de1: mov    %r15,%rdi
  0x000000011c062de4: test   $0xf,%esp
  0x000000011c062dea: je     0x000000011c062e02
  0x000000011c062df0: sub    $0x8,%rsp
  0x000000011c062df4: callq  0x000000011069793e = SharedRuntime::dtrace_method_entry(JavaThread*, Method*)
  0x000000011c062df9: add    $0x8,%rsp
  0x000000011c062dfd: jmpq   0x000000011c062e07
  0x000000011c062e02: callq  0x000000011069793e = SharedRuntime::dtrace_method_entry(JavaThread*, Method*)
  0x000000011c062e07: mov    -0x18(%rbp),%rbx
  0x000000011c062e0b: mov    0x8(%rbx),%r11
  0x000000011c062e0f: movzwl 0x34(%r11),%r11d
  0x000000011c062e14: shl    $0x3,%r11d
  0x000000011c062e18: sub    %r11,%rsp
  0x000000011c062e1b: sub    $0x0,%rsp
  0x000000011c062e1f: and    $0xfffffffffffffff0,%rsp
  0x000000011c062e23: mov    0x60(%rbx),%r11
  0x000000011c062e27: test   %r11,%r11
  0x000000011c062e2a: jne    0x000000011c062ed7
  0x000000011c062e30: callq  0x000000011c062e3a
  0x000000011c062e35: jmpq   0x000000011c062ecf
  0x000000011c062e3a: mov    %rbx,%rsi
  0x000000011c062e3d: lea    0x8(%rsp),%rax
  0x000000011c062e42: mov    %r13,-0x40(%rbp)
  0x000000011c062e46: mov    %r15,%rdi
  0x000000011c062e49: vzeroupper 
  0x000000011c062e4c: mov    %rbp,0x330(%r15)
  0x000000011c062e53: mov    %rax,0x320(%r15)
  0x000000011c062e5a: test   $0xf,%esp
  0x000000011c062e60: je     0x000000011c062e78
  0x000000011c062e66: sub    $0x8,%rsp
  0x000000011c062e6a: callq  0x00000001103aded2 = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0x000000011c062e6f: add    $0x8,%rsp
  0x000000011c062e73: jmpq   0x000000011c062e7d
  0x000000011c062e78: callq  0x00000001103aded2 = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0x000000011c062e7d: movabs $0x0,%r10
  0x000000011c062e87: mov    %r10,0x320(%r15)
  0x000000011c062e8e: movabs $0x0,%r10
  0x000000011c062e98: mov    %r10,0x330(%r15)
  0x000000011c062e9f: movabs $0x0,%r10
  0x000000011c062ea9: mov    %r10,0x328(%r15)
  0x000000011c062eb0: vzeroupper 
  0x000000011c062eb3: cmpq   $0x0,0x8(%r15)
  0x000000011c062ebb: je     0x000000011c062ec6
  0x000000011c062ec1: jmpq   0x000000011c054780
  0x000000011c062ec6: mov    -0x40(%rbp),%r13
  0x000000011c062eca: mov    -0x38(%rbp),%r14
  0x000000011c062ece: retq   
  0x000000011c062ecf: mov    -0x18(%rbp),%rbx
  0x000000011c062ed3: mov    0x60(%rbx),%r11
  0x000000011c062ed7: callq  *%r11
  0x000000011c062eda: mov    -0x18(%rbp),%rbx
  0x000000011c062ede: mov    %rax,0x18(%rbp)
  0x000000011c062ee2: mov    0x20(%rbx),%r11d
  0x000000011c062ee6: test   $0x8,%r11d
  0x000000011c062eed: je     0x000000011c062f0e
  0x000000011c062ef3: mov    0x8(%rbx),%r11
  0x000000011c062ef7: mov    0x8(%r11),%r11
  0x000000011c062efb: mov    0x18(%r11),%r11
  0x000000011c062eff: mov    0x70(%r11),%r11
  0x000000011c062f03: mov    (%r11),%r11
  0x000000011c062f06: mov    %r11,0x10(%rbp)
  0x000000011c062f0a: lea    0x10(%rbp),%rsi
  0x000000011c062f0e: mov    0x58(%rbx),%rax
  0x000000011c062f12: movabs $0x1106975ed,%r10
  0x000000011c062f1c: cmp    %r10,%rax
  0x000000011c062f1f: jne    0x000000011c062fcc
  0x000000011c062f25: callq  0x000000011c062f2f
  0x000000011c062f2a: jmpq   0x000000011c062fc4
  0x000000011c062f2f: mov    %rbx,%rsi
  0x000000011c062f32: lea    0x8(%rsp),%rax
  0x000000011c062f37: mov    %r13,-0x40(%rbp)
  0x000000011c062f3b: mov    %r15,%rdi
  0x000000011c062f3e: vzeroupper 
  0x000000011c062f41: mov    %rbp,0x330(%r15)
  0x000000011c062f48: mov    %rax,0x320(%r15)
  0x000000011c062f4f: test   $0xf,%esp
  0x000000011c062f55: je     0x000000011c062f6d
  0x000000011c062f5b: sub    $0x8,%rsp
  0x000000011c062f5f: callq  0x00000001103aded2 = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0x000000011c062f64: add    $0x8,%rsp
  0x000000011c062f68: jmpq   0x000000011c062f72
  0x000000011c062f6d: callq  0x00000001103aded2 = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0x000000011c062f72: movabs $0x0,%r10
  0x000000011c062f7c: mov    %r10,0x320(%r15)
  0x000000011c062f83: movabs $0x0,%r10
  0x000000011c062f8d: mov    %r10,0x330(%r15)
  0x000000011c062f94: movabs $0x0,%r10
  0x000000011c062f9e: mov    %r10,0x328(%r15)
  0x000000011c062fa5: vzeroupper 
  0x000000011c062fa8: cmpq   $0x0,0x8(%r15)
  0x000000011c062fb0: je     0x000000011c062fbb
  0x000000011c062fb6: jmpq   0x000000011c054780
  0x000000011c062fbb: mov    -0x40(%rbp),%r13
  0x000000011c062fbf: mov    -0x38(%rbp),%r14
  0x000000011c062fc3: retq   
  0x000000011c062fc4: mov    -0x18(%rbp),%rbx
  0x000000011c062fc8: mov    0x58(%rbx),%rax
  0x000000011c062fcc: lea    0x340(%r15),%rdi
  0x000000011c062fd3: vzeroupper 
  0x000000011c062fd6: mov    %rbp,0x330(%r15)
  0x000000011c062fdd: movabs $0x11c062fd3,%r10
  0x000000011c062fe7: mov    %r10,0x328(%r15)
  0x000000011c062fee: mov    %rsp,0x320(%r15)
  0x000000011c062ff5: movl   $0x4,0x3b8(%r15)
  0x000000011c063000: callq  *%rax
  0x000000011c063002: vzeroupper 
  0x000000011c063005: sub    $0x10,%rsp
  0x000000011c063009: vmovsd %xmm0,(%rsp)
  0x000000011c06300e: sub    $0x10,%rsp
  0x000000011c063012: mov    %rax,(%rsp)
  0x000000011c063016: movabs $0x0,%r10
  0x000000011c063020: mov    %r10,0x8(%rsp)
  0x000000011c063025: movl   $0x5,0x3b8(%r15)
  0x000000011c063030: lock addl $0x0,-0x40(%rsp)
  0x000000011c063036: testb  $0x8,0x108(%r15)
  0x000000011c06303e: jne    0x000000011c063055
  0x000000011c063044: cmpl   $0x0,0xd8(%r15)
  0x000000011c06304f: je     0x000000011c06306e
  0x000000011c063055: mov    %r15,%rdi
  0x000000011c063058: mov    %rsp,%r12
  0x000000011c06305b: sub    $0x0,%rsp
  0x000000011c06305f: and    $0xfffffffffffffff0,%rsp
  0x000000011c063063: callq  0x0000000110771148 = JavaThread::check_special_condition_for_native_trans(JavaThread*)
  0x000000011c063068: mov    %r12,%rsp
  0x000000011c06306b: xor    %r12,%r12
  0x000000011c06306e: movl   $0x8,0x3b8(%r15)
  0x000000011c063079: movabs $0x0,%r10
  0x000000011c063083: mov    %r10,0x320(%r15)
  0x000000011c06308a: movabs $0x0,%r10
  0x000000011c063094: mov    %r10,0x330(%r15)
  0x000000011c06309b: movabs $0x0,%r10
  0x000000011c0630a5: mov    %r10,0x328(%r15)
  0x000000011c0630ac: vzeroupper 
  0x000000011c0630af: mov    0xe0(%r15),%r11
  0x000000011c0630b6: movl   $0x0,0x100(%r11)
  0x000000011c0630c1: movabs $0x11c05fefb,%r11
  0x000000011c0630cb: cmp    0x18(%rbp),%r11
  0x000000011c0630cf: jne    0x000000011c06317b
  0x000000011c0630d5: mov    (%rsp),%rax
  0x000000011c0630d9: add    $0x10,%rsp
  0x000000011c0630dd: test   %rax,%rax
  0x000000011c0630e0: je     0x000000011c063160
  0x000000011c0630e6: test   $0x1,%rax
  0x000000011c0630ec: je     0x000000011c06315d
  0x000000011c0630f2: mov    -0x1(%rax),%rax
  0x000000011c0630f6: cmpb   $0x0,0x30(%r15)
  0x000000011c0630fb: je     0x000000011c063158
  0x000000011c063101: cmp    $0x0,%rax
  0x000000011c063105: je     0x000000011c063158
  0x000000011c06310b: mov    0x38(%r15),%r11
  0x000000011c06310f: cmp    $0x0,%r11
  0x000000011c063113: je     0x000000011c06312d
  0x000000011c063119: sub    $0x8,%r11
  0x000000011c06311d: mov    %r11,0x38(%r15)
  0x000000011c063121: add    0x48(%r15),%r11
  0x000000011c063125: mov    %rax,(%r11)
  0x000000011c063128: jmpq   0x000000011c063158
  0x000000011c06312d: push   %rax
  0x000000011c06312e: mov    %r15,%rsi
  0x000000011c063131: mov    %rax,%rdi
  0x000000011c063134: test   $0xf,%esp
  0x000000011c06313a: je     0x000000011c063152
  0x000000011c063140: sub    $0x8,%rsp
  0x000000011c063144: callq  0x000000011030185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x000000011c063149: add    $0x8,%rsp
  0x000000011c06314d: jmpq   0x000000011c063157
  0x000000011c063152: callq  0x000000011030185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x000000011c063157: pop    %rax
  0x000000011c063158: jmpq   0x000000011c063160
  0x000000011c06315d: mov    (%rax),%rax
  0x000000011c063160: mov    %rax,0x10(%rbp)
  0x000000011c063164: sub    $0x10,%rsp
  0x000000011c063168: mov    %rax,(%rsp)
  0x000000011c06316c: movabs $0x0,%r10
  0x000000011c063176: mov    %r10,0x8(%rsp)
  0x000000011c06317b: cmpl   $0x2,0x408(%r15)
  0x000000011c063186: jne    0x000000011c063249
  0x000000011c06318c: mov    %rsp,-0x28(%rsp)
  0x000000011c063191: sub    $0x80,%rsp
  0x000000011c063198: mov    %rax,0x78(%rsp)
  0x000000011c06319d: mov    %rcx,0x70(%rsp)
  0x000000011c0631a2: mov    %rdx,0x68(%rsp)
  0x000000011c0631a7: mov    %rbx,0x60(%rsp)
  0x000000011c0631ac: mov    %rbp,0x50(%rsp)
  0x000000011c0631b1: mov    %rsi,0x48(%rsp)
  0x000000011c0631b6: mov    %rdi,0x40(%rsp)
  0x000000011c0631bb: mov    %r8,0x38(%rsp)
  0x000000011c0631c0: mov    %r9,0x30(%rsp)
  0x000000011c0631c5: mov    %r10,0x28(%rsp)
  0x000000011c0631ca: mov    %r11,0x20(%rsp)
  0x000000011c0631cf: mov    %r12,0x18(%rsp)
  0x000000011c0631d4: mov    %r13,0x10(%rsp)
  0x000000011c0631d9: mov    %r14,0x8(%rsp)
  0x000000011c0631de: mov    %r15,(%rsp)
  0x000000011c0631e2: mov    %rsp,%r12
  0x000000011c0631e5: sub    $0x0,%rsp
  0x000000011c0631e9: and    $0xfffffffffffffff0,%rsp
  0x000000011c0631ed: callq  0x0000000110699586 = SharedRuntime::reguard_yellow_pages()
  0x000000011c0631f2: mov    %r12,%rsp
  0x000000011c0631f5: mov    (%rsp),%r15
  0x000000011c0631f9: mov    0x8(%rsp),%r14
  0x000000011c0631fe: mov    0x10(%rsp),%r13
  0x000000011c063203: mov    0x18(%rsp),%r12
  0x000000011c063208: mov    0x20(%rsp),%r11
  0x000000011c06320d: mov    0x28(%rsp),%r10
  0x000000011c063212: mov    0x30(%rsp),%r9
  0x000000011c063217: mov    0x38(%rsp),%r8
  0x000000011c06321c: mov    0x40(%rsp),%rdi
  0x000000011c063221: mov    0x48(%rsp),%rsi
  0x000000011c063226: mov    0x50(%rsp),%rbp
  0x000000011c06322b: mov    0x60(%rsp),%rbx
  0x000000011c063230: mov    0x68(%rsp),%rdx
  0x000000011c063235: mov    0x70(%rsp),%rcx
  0x000000011c06323a: mov    0x78(%rsp),%rax
  0x000000011c06323f: add    $0x80,%rsp
  0x000000011c063246: xor    %r12,%r12
  0x000000011c063249: mov    -0x18(%rbp),%rbx
  0x000000011c06324d: mov    0x8(%rbx),%r13
  0x000000011c063251: lea    0x38(%r13),%r13
  0x000000011c063255: cmpq   $0x0,0x8(%r15)
  0x000000011c06325d: je     0x000000011c063313
  0x000000011c063263: callq  0x000000011c06326d
  0x000000011c063268: jmpq   0x000000011c0632ff
  0x000000011c06326d: lea    0x8(%rsp),%rax
  0x000000011c063272: mov    %r13,-0x40(%rbp)
  0x000000011c063276: mov    %r15,%rdi
  0x000000011c063279: vzeroupper 
  0x000000011c06327c: mov    %rbp,0x330(%r15)
  0x000000011c063283: mov    %rax,0x320(%r15)
  0x000000011c06328a: test   $0xf,%esp
  0x000000011c063290: je     0x000000011c0632a8
  0x000000011c063296: sub    $0x8,%rsp
  0x000000011c06329a: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c06329f: add    $0x8,%rsp
  0x000000011c0632a3: jmpq   0x000000011c0632ad
  0x000000011c0632a8: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c0632ad: movabs $0x0,%r10
  0x000000011c0632b7: mov    %r10,0x320(%r15)
  0x000000011c0632be: movabs $0x0,%r10
  0x000000011c0632c8: mov    %r10,0x330(%r15)
  0x000000011c0632cf: movabs $0x0,%r10
  0x000000011c0632d9: mov    %r10,0x328(%r15)
  0x000000011c0632e0: vzeroupper 
  0x000000011c0632e3: cmpq   $0x0,0x8(%r15)
  0x000000011c0632eb: je     0x000000011c0632f6
  0x000000011c0632f1: jmpq   0x000000011c054780
  0x000000011c0632f6: mov    -0x40(%rbp),%r13
  0x000000011c0632fa: mov    -0x38(%rbp),%r14
  0x000000011c0632fe: retq   
  0x000000011c0632ff: movabs $0x1107f3493,%rdi
  0x000000011c063309: and    $0xfffffffffffffff0,%rsp
  0x000000011c06330d: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c063312: hlt    
  0x000000011c063313: mov    0x20(%rbx),%r11d
  0x000000011c063317: test   $0x20,%r11d
  0x000000011c06331e: je     0x000000011c0634c4
  0x000000011c063324: lea    -0x58(%rbp),%rsi
  0x000000011c063328: mov    0x8(%rsi),%r11
  0x000000011c06332c: test   %r11,%r11
  0x000000011c06332f: jne    0x000000011c0633e5
  0x000000011c063335: callq  0x000000011c06333f
  0x000000011c06333a: jmpq   0x000000011c0633d1
  0x000000011c06333f: lea    0x8(%rsp),%rax
  0x000000011c063344: mov    %r13,-0x40(%rbp)
  0x000000011c063348: mov    %r15,%rdi
  0x000000011c06334b: vzeroupper 
  0x000000011c06334e: mov    %rbp,0x330(%r15)
  0x000000011c063355: mov    %rax,0x320(%r15)
  0x000000011c06335c: test   $0xf,%esp
  0x000000011c063362: je     0x000000011c06337a
  0x000000011c063368: sub    $0x8,%rsp
  0x000000011c06336c: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c063371: add    $0x8,%rsp
  0x000000011c063375: jmpq   0x000000011c06337f
  0x000000011c06337a: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c06337f: movabs $0x0,%r10
  0x000000011c063389: mov    %r10,0x320(%r15)
  0x000000011c063390: movabs $0x0,%r10
  0x000000011c06339a: mov    %r10,0x330(%r15)
  0x000000011c0633a1: movabs $0x0,%r10
  0x000000011c0633ab: mov    %r10,0x328(%r15)
  0x000000011c0633b2: vzeroupper 
  0x000000011c0633b5: cmpq   $0x0,0x8(%r15)
  0x000000011c0633bd: je     0x000000011c0633c8
  0x000000011c0633c3: jmpq   0x000000011c054780
  0x000000011c0633c8: mov    -0x40(%rbp),%r13
  0x000000011c0633cc: mov    -0x38(%rbp),%r14
  0x000000011c0633d0: retq   
  0x000000011c0633d1: movabs $0x1107f3493,%rdi
  0x000000011c0633db: and    $0xfffffffffffffff0,%rsp
  0x000000011c0633df: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c0633e4: hlt    
  0x000000011c0633e5: mov    %r13,-0x40(%rbp)
  0x000000011c0633e9: lea    (%rsi),%rax
  0x000000011c0633ec: mov    0x8(%rsi),%rcx
  0x000000011c0633f0: movq   $0x0,0x8(%rsi)
  0x000000011c0633f8: mov    (%rcx),%rdx
  0x000000011c0633fb: and    $0x7,%rdx
  0x000000011c0633ff: cmp    $0x5,%rdx
  0x000000011c063403: je     0x000000011c0634c0
  0x000000011c063409: mov    (%rax),%rdx
  0x000000011c06340c: test   %rdx,%rdx
  0x000000011c06340f: je     0x000000011c0634c0
  0x000000011c063415: lock cmpxchg %rdx,(%rcx)
  0x000000011c06341a: je     0x000000011c0634c0
  0x000000011c063420: mov    %rcx,0x8(%rsi)
  0x000000011c063424: callq  0x000000011c06342e
  0x000000011c063429: jmpq   0x000000011c0634c0
  0x000000011c06342e: lea    0x8(%rsp),%rax
  0x000000011c063433: mov    %r13,-0x40(%rbp)
  0x000000011c063437: mov    %r15,%rdi
  0x000000011c06343a: vzeroupper 
  0x000000011c06343d: mov    %rbp,0x330(%r15)
  0x000000011c063444: mov    %rax,0x320(%r15)
  0x000000011c06344b: test   $0xf,%esp
  0x000000011c063451: je     0x000000011c063469
  0x000000011c063457: sub    $0x8,%rsp
  0x000000011c06345b: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c063460: add    $0x8,%rsp
  0x000000011c063464: jmpq   0x000000011c06346e
  0x000000011c063469: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c06346e: movabs $0x0,%r10
  0x000000011c063478: mov    %r10,0x320(%r15)
  0x000000011c06347f: movabs $0x0,%r10
  0x000000011c063489: mov    %r10,0x330(%r15)
  0x000000011c063490: movabs $0x0,%r10
  0x000000011c06349a: mov    %r10,0x328(%r15)
  0x000000011c0634a1: vzeroupper 
  0x000000011c0634a4: cmpq   $0x0,0x8(%r15)
  0x000000011c0634ac: je     0x000000011c0634b7
  0x000000011c0634b2: jmpq   0x000000011c054780
  0x000000011c0634b7: mov    -0x40(%rbp),%r13
  0x000000011c0634bb: mov    -0x38(%rbp),%r14
  0x000000011c0634bf: retq   
  0x000000011c0634c0: mov    -0x40(%rbp),%r13
  0x000000011c0634c4: cmpb   $0x0,-0xb6a93f1(%rip)        # 0x00000001109ba0da = DTraceMethodProbes
  0x000000011c0634cb: je     0x000000011c0634fb
  0x000000011c0634d1: mov    -0x18(%rbp),%rsi
  0x000000011c0634d5: mov    %r15,%rdi
  0x000000011c0634d8: test   $0xf,%esp
  0x000000011c0634de: je     0x000000011c0634f6
  0x000000011c0634e4: sub    $0x8,%rsp
  0x000000011c0634e8: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c0634ed: add    $0x8,%rsp
  0x000000011c0634f1: jmpq   0x000000011c0634fb
  0x000000011c0634f6: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c0634fb: mov    (%rsp),%rax
  0x000000011c0634ff: add    $0x10,%rsp
  0x000000011c063503: vmovsd (%rsp),%xmm0
  0x000000011c063508: add    $0x10,%rsp
  0x000000011c06350c: mov    0x18(%rbp),%r11
  0x000000011c063510: callq  *%r11
  0x000000011c063513: mov    -0x8(%rbp),%r11
  0x000000011c063517: leaveq 
  0x000000011c063518: pop    %rdi
  0x000000011c063519: mov    %r11,%rsp
  0x000000011c06351c: jmpq   *%rdi
  0x000000011c06351e: xchg   %ax,%ax

----------------------------------------------------------------------
method entry point (kind = java_util_zip_CRC32_update)  [0x000000011c063540, 0x000000011c063580]  64 bytes

  0x000000011c063540: testb  $0x8,0x108(%r15)
  0x000000011c063548: jne    0x000000011c063578
  0x000000011c06354e: mov    0x8(%rsp),%edi
  0x000000011c063552: mov    0x10(%rsp),%eax
  0x000000011c063556: movabs $0x110995a30,%rsi
  0x000000011c063560: not    %eax
  0x000000011c063562: xor    %eax,%edi
  0x000000011c063564: and    $0xff,%edi
  0x000000011c06356a: shr    $0x8,%eax
  0x000000011c06356d: xor    (%rsi,%rdi,4),%eax
  0x000000011c063570: not    %eax
  0x000000011c063572: pop    %rdi
  0x000000011c063573: mov    %r13,%rsp
  0x000000011c063576: jmpq   *%rdi
  0x000000011c063578: jmpq   0x000000011c0623a0
  0x000000011c06357d: data16 xchg %ax,%ax

----------------------------------------------------------------------
method entry point (kind = java_util_zip_CRC32_updateBytes)  [0x000000011c0635a0, 0x000000011c063600]  96 bytes

  0x000000011c0635a0: testb  $0x8,0x108(%r15)
  0x000000011c0635a8: jne    0x000000011c0635f0
  0x000000011c0635ae: mov    0x18(%rsp),%rsi
  0x000000011c0635b3: add    $0x10,%rsi
  0x000000011c0635b7: movslq 0x10(%rsp),%rdx
  0x000000011c0635bc: add    %rdx,%rsi
  0x000000011c0635bf: mov    0x20(%rsp),%edi
  0x000000011c0635c3: mov    0x8(%rsp),%edx
  0x000000011c0635c7: test   $0xf,%esp
  0x000000011c0635cd: je     0x000000011c0635e5
  0x000000011c0635d3: sub    $0x8,%rsp
  0x000000011c0635d7: callq  0x000000011c054940
  0x000000011c0635dc: add    $0x8,%rsp
  0x000000011c0635e0: jmpq   0x000000011c0635ea
  0x000000011c0635e5: callq  0x000000011c054940
  0x000000011c0635ea: pop    %rdi
  0x000000011c0635eb: mov    %r13,%rsp
  0x000000011c0635ee: jmpq   *%rdi
  0x000000011c0635f0: jmpq   0x000000011c0623a0
  0x000000011c0635f5: data16 xchg %ax,%ax
  0x000000011c0635f8: add    %al,(%rax)
  0x000000011c0635fa: add    %al,(%rax)
  0x000000011c0635fc: add    %al,(%rax)
  0x000000011c0635fe: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_util_zip_CRC32_updateByteBuffer)  [0x000000011c063620, 0x000000011c063680]  96 bytes

  0x000000011c063620: testb  $0x8,0x108(%r15)
  0x000000011c063628: jne    0x000000011c06366c
  0x000000011c06362e: mov    0x18(%rsp),%rsi
  0x000000011c063633: movslq 0x10(%rsp),%rdx
  0x000000011c063638: add    %rdx,%rsi
  0x000000011c06363b: mov    0x28(%rsp),%edi
  0x000000011c06363f: mov    0x8(%rsp),%edx
  0x000000011c063643: test   $0xf,%esp
  0x000000011c063649: je     0x000000011c063661
  0x000000011c06364f: sub    $0x8,%rsp
  0x000000011c063653: callq  0x000000011c054940
  0x000000011c063658: add    $0x8,%rsp
  0x000000011c06365c: jmpq   0x000000011c063666
  0x000000011c063661: callq  0x000000011c054940
  0x000000011c063666: pop    %rdi
  0x000000011c063667: mov    %r13,%rsp
  0x000000011c06366a: jmpq   *%rdi
  0x000000011c06366c: jmpq   0x000000011c0623a0
  0x000000011c063671: nopl   0x0(%rax)
  0x000000011c063678: add    %al,(%rax)
  0x000000011c06367a: add    %al,(%rax)
  0x000000011c06367c: add    %al,(%rax)
  0x000000011c06367e: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_util_zip_CRC32C_updateBytes)  [0x000000011c0636a0, 0x000000011c063700]  96 bytes

  0x000000011c0636a0: mov    0x18(%rsp),%rsi
  0x000000011c0636a5: add    $0x10,%rsi
  0x000000011c0636a9: movslq 0x10(%rsp),%rcx
  0x000000011c0636ae: add    %rcx,%rsi
  0x000000011c0636b1: mov    0x20(%rsp),%edi
  0x000000011c0636b5: mov    0x8(%rsp),%edx
  0x000000011c0636b9: sub    %ecx,%edx
  0x000000011c0636bb: test   $0xf,%esp
  0x000000011c0636c1: je     0x000000011c0636d9
  0x000000011c0636c7: sub    $0x8,%rsp
  0x000000011c0636cb: callq  0x000000011c054ba0
  0x000000011c0636d0: add    $0x8,%rsp
  0x000000011c0636d4: jmpq   0x000000011c0636de
  0x000000011c0636d9: callq  0x000000011c054ba0
  0x000000011c0636de: pop    %rdi
  0x000000011c0636df: mov    %r13,%rsp
  0x000000011c0636e2: jmpq   *%rdi
  0x000000011c0636e4: nopl   0x0(%rax)
  0x000000011c0636e8: add    %al,(%rax)
  0x000000011c0636ea: add    %al,(%rax)
  0x000000011c0636ec: add    %al,(%rax)
  0x000000011c0636ee: add    %al,(%rax)
  0x000000011c0636f0: add    %al,(%rax)
  0x000000011c0636f2: add    %al,(%rax)
  0x000000011c0636f4: add    %al,(%rax)
  0x000000011c0636f6: add    %al,(%rax)
  0x000000011c0636f8: add    %al,(%rax)
  0x000000011c0636fa: add    %al,(%rax)
  0x000000011c0636fc: add    %al,(%rax)
  0x000000011c0636fe: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_util_zip_CRC32C_updateDirectByteBuffer)  [0x000000011c063720, 0x000000011c063760]  64 bytes

  0x000000011c063720: mov    0x18(%rsp),%rsi
  0x000000011c063725: movslq 0x10(%rsp),%rcx
  0x000000011c06372a: add    %rcx,%rsi
  0x000000011c06372d: mov    0x28(%rsp),%edi
  0x000000011c063731: mov    0x8(%rsp),%edx
  0x000000011c063735: sub    %ecx,%edx
  0x000000011c063737: test   $0xf,%esp
  0x000000011c06373d: je     0x000000011c063755
  0x000000011c063743: sub    $0x8,%rsp
  0x000000011c063747: callq  0x000000011c054ba0
  0x000000011c06374c: add    $0x8,%rsp
  0x000000011c063750: jmpq   0x000000011c06375a
  0x000000011c063755: callq  0x000000011c054ba0
  0x000000011c06375a: pop    %rdi
  0x000000011c06375b: mov    %r13,%rsp
  0x000000011c06375e: jmpq   *%rdi

----------------------------------------------------------------------
nop  0 nop  [0x000000011c063780, 0x000000011c0637e0]  96 bytes

  0x000000011c063780: push   %rax
  0x000000011c063781: jmpq   0x000000011c0637bf
  0x000000011c063786: sub    $0x8,%rsp
  0x000000011c06378a: vmovss %xmm0,(%rsp)
  0x000000011c06378f: jmpq   0x000000011c0637bf
  0x000000011c063794: sub    $0x10,%rsp
  0x000000011c063798: vmovsd %xmm0,(%rsp)
  0x000000011c06379d: jmpq   0x000000011c0637bf
  0x000000011c0637a2: sub    $0x10,%rsp
  0x000000011c0637a6: mov    %rax,(%rsp)
  0x000000011c0637aa: movabs $0x0,%r10
  0x000000011c0637b4: mov    %r10,0x8(%rsp)
  0x000000011c0637b9: jmpq   0x000000011c0637bf
  0x000000011c0637be: push   %rax
  0x000000011c0637bf: movzbl 0x1(%r13),%ebx
  0x000000011c0637c4: inc    %r13
  0x000000011c0637c7: movabs $0x1109d7a20,%r10
  0x000000011c0637d1: jmpq   *(%r10,%rbx,8)
  0x000000011c0637d5: data16 xchg %ax,%ax
  0x000000011c0637d8: add    %al,(%rax)
  0x000000011c0637da: add    %al,(%rax)
  0x000000011c0637dc: add    %al,(%rax)
  0x000000011c0637de: add    %al,(%rax)

----------------------------------------------------------------------
aconst_null  1 aconst_null  [0x000000011c063800, 0x000000011c063860]  96 bytes

  0x000000011c063800: push   %rax
  0x000000011c063801: jmpq   0x000000011c06383f
  0x000000011c063806: sub    $0x8,%rsp
  0x000000011c06380a: vmovss %xmm0,(%rsp)
  0x000000011c06380f: jmpq   0x000000011c06383f
  0x000000011c063814: sub    $0x10,%rsp
  0x000000011c063818: vmovsd %xmm0,(%rsp)
  0x000000011c06381d: jmpq   0x000000011c06383f
  0x000000011c063822: sub    $0x10,%rsp
  0x000000011c063826: mov    %rax,(%rsp)
  0x000000011c06382a: movabs $0x0,%r10
  0x000000011c063834: mov    %r10,0x8(%rsp)
  0x000000011c063839: jmpq   0x000000011c06383f
  0x000000011c06383e: push   %rax
  0x000000011c06383f: xor    %eax,%eax
  0x000000011c063841: movzbl 0x1(%r13),%ebx
  0x000000011c063846: inc    %r13
  0x000000011c063849: movabs $0x1109d7220,%r10
  0x000000011c063853: jmpq   *(%r10,%rbx,8)
  0x000000011c063857: nop
  0x000000011c063858: add    %al,(%rax)
  0x000000011c06385a: add    %al,(%rax)
  0x000000011c06385c: add    %al,(%rax)
  0x000000011c06385e: add    %al,(%rax)

----------------------------------------------------------------------
iconst_m1  2 iconst_m1  [0x000000011c063880, 0x000000011c0638e0]  96 bytes

  0x000000011c063880: push   %rax
  0x000000011c063881: jmpq   0x000000011c0638bf
  0x000000011c063886: sub    $0x8,%rsp
  0x000000011c06388a: vmovss %xmm0,(%rsp)
  0x000000011c06388f: jmpq   0x000000011c0638bf
  0x000000011c063894: sub    $0x10,%rsp
  0x000000011c063898: vmovsd %xmm0,(%rsp)
  0x000000011c06389d: jmpq   0x000000011c0638bf
  0x000000011c0638a2: sub    $0x10,%rsp
  0x000000011c0638a6: mov    %rax,(%rsp)
  0x000000011c0638aa: movabs $0x0,%r10
  0x000000011c0638b4: mov    %r10,0x8(%rsp)
  0x000000011c0638b9: jmpq   0x000000011c0638bf
  0x000000011c0638be: push   %rax
  0x000000011c0638bf: mov    $0xffffffff,%eax
  0x000000011c0638c4: movzbl 0x1(%r13),%ebx
  0x000000011c0638c9: inc    %r13
  0x000000011c0638cc: movabs $0x1109d5220,%r10
  0x000000011c0638d6: jmpq   *(%r10,%rbx,8)
  0x000000011c0638da: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
iconst_0  3 iconst_0  [0x000000011c063900, 0x000000011c063960]  96 bytes

  0x000000011c063900: push   %rax
  0x000000011c063901: jmpq   0x000000011c06393f
  0x000000011c063906: sub    $0x8,%rsp
  0x000000011c06390a: vmovss %xmm0,(%rsp)
  0x000000011c06390f: jmpq   0x000000011c06393f
  0x000000011c063914: sub    $0x10,%rsp
  0x000000011c063918: vmovsd %xmm0,(%rsp)
  0x000000011c06391d: jmpq   0x000000011c06393f
  0x000000011c063922: sub    $0x10,%rsp
  0x000000011c063926: mov    %rax,(%rsp)
  0x000000011c06392a: movabs $0x0,%r10
  0x000000011c063934: mov    %r10,0x8(%rsp)
  0x000000011c063939: jmpq   0x000000011c06393f
  0x000000011c06393e: push   %rax
  0x000000011c06393f: xor    %eax,%eax
  0x000000011c063941: movzbl 0x1(%r13),%ebx
  0x000000011c063946: inc    %r13
  0x000000011c063949: movabs $0x1109d5220,%r10
  0x000000011c063953: jmpq   *(%r10,%rbx,8)
  0x000000011c063957: nop
  0x000000011c063958: add    %al,(%rax)
  0x000000011c06395a: add    %al,(%rax)
  0x000000011c06395c: add    %al,(%rax)
  0x000000011c06395e: add    %al,(%rax)

----------------------------------------------------------------------
iconst_1  4 iconst_1  [0x000000011c063980, 0x000000011c0639e0]  96 bytes

  0x000000011c063980: push   %rax
  0x000000011c063981: jmpq   0x000000011c0639bf
  0x000000011c063986: sub    $0x8,%rsp
  0x000000011c06398a: vmovss %xmm0,(%rsp)
  0x000000011c06398f: jmpq   0x000000011c0639bf
  0x000000011c063994: sub    $0x10,%rsp
  0x000000011c063998: vmovsd %xmm0,(%rsp)
  0x000000011c06399d: jmpq   0x000000011c0639bf
  0x000000011c0639a2: sub    $0x10,%rsp
  0x000000011c0639a6: mov    %rax,(%rsp)
  0x000000011c0639aa: movabs $0x0,%r10
  0x000000011c0639b4: mov    %r10,0x8(%rsp)
  0x000000011c0639b9: jmpq   0x000000011c0639bf
  0x000000011c0639be: push   %rax
  0x000000011c0639bf: mov    $0x1,%eax
  0x000000011c0639c4: movzbl 0x1(%r13),%ebx
  0x000000011c0639c9: inc    %r13
  0x000000011c0639cc: movabs $0x1109d5220,%r10
  0x000000011c0639d6: jmpq   *(%r10,%rbx,8)
  0x000000011c0639da: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
iconst_2  5 iconst_2  [0x000000011c063a00, 0x000000011c063a60]  96 bytes

  0x000000011c063a00: push   %rax
  0x000000011c063a01: jmpq   0x000000011c063a3f
  0x000000011c063a06: sub    $0x8,%rsp
  0x000000011c063a0a: vmovss %xmm0,(%rsp)
  0x000000011c063a0f: jmpq   0x000000011c063a3f
  0x000000011c063a14: sub    $0x10,%rsp
  0x000000011c063a18: vmovsd %xmm0,(%rsp)
  0x000000011c063a1d: jmpq   0x000000011c063a3f
  0x000000011c063a22: sub    $0x10,%rsp
  0x000000011c063a26: mov    %rax,(%rsp)
  0x000000011c063a2a: movabs $0x0,%r10
  0x000000011c063a34: mov    %r10,0x8(%rsp)
  0x000000011c063a39: jmpq   0x000000011c063a3f
  0x000000011c063a3e: push   %rax
  0x000000011c063a3f: mov    $0x2,%eax
  0x000000011c063a44: movzbl 0x1(%r13),%ebx
  0x000000011c063a49: inc    %r13
  0x000000011c063a4c: movabs $0x1109d5220,%r10
  0x000000011c063a56: jmpq   *(%r10,%rbx,8)
  0x000000011c063a5a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
iconst_3  6 iconst_3  [0x000000011c063a80, 0x000000011c063ae0]  96 bytes

  0x000000011c063a80: push   %rax
  0x000000011c063a81: jmpq   0x000000011c063abf
  0x000000011c063a86: sub    $0x8,%rsp
  0x000000011c063a8a: vmovss %xmm0,(%rsp)
  0x000000011c063a8f: jmpq   0x000000011c063abf
  0x000000011c063a94: sub    $0x10,%rsp
  0x000000011c063a98: vmovsd %xmm0,(%rsp)
  0x000000011c063a9d: jmpq   0x000000011c063abf
  0x000000011c063aa2: sub    $0x10,%rsp
  0x000000011c063aa6: mov    %rax,(%rsp)
  0x000000011c063aaa: movabs $0x0,%r10
  0x000000011c063ab4: mov    %r10,0x8(%rsp)
  0x000000011c063ab9: jmpq   0x000000011c063abf
  0x000000011c063abe: push   %rax
  0x000000011c063abf: mov    $0x3,%eax
  0x000000011c063ac4: movzbl 0x1(%r13),%ebx
  0x000000011c063ac9: inc    %r13
  0x000000011c063acc: movabs $0x1109d5220,%r10
  0x000000011c063ad6: jmpq   *(%r10,%rbx,8)
  0x000000011c063ada: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
iconst_4  7 iconst_4  [0x000000011c063b00, 0x000000011c063b60]  96 bytes

  0x000000011c063b00: push   %rax
  0x000000011c063b01: jmpq   0x000000011c063b3f
  0x000000011c063b06: sub    $0x8,%rsp
  0x000000011c063b0a: vmovss %xmm0,(%rsp)
  0x000000011c063b0f: jmpq   0x000000011c063b3f
  0x000000011c063b14: sub    $0x10,%rsp
  0x000000011c063b18: vmovsd %xmm0,(%rsp)
  0x000000011c063b1d: jmpq   0x000000011c063b3f
  0x000000011c063b22: sub    $0x10,%rsp
  0x000000011c063b26: mov    %rax,(%rsp)
  0x000000011c063b2a: movabs $0x0,%r10
  0x000000011c063b34: mov    %r10,0x8(%rsp)
  0x000000011c063b39: jmpq   0x000000011c063b3f
  0x000000011c063b3e: push   %rax
  0x000000011c063b3f: mov    $0x4,%eax
  0x000000011c063b44: movzbl 0x1(%r13),%ebx
  0x000000011c063b49: inc    %r13
  0x000000011c063b4c: movabs $0x1109d5220,%r10
  0x000000011c063b56: jmpq   *(%r10,%rbx,8)
  0x000000011c063b5a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
iconst_5  8 iconst_5  [0x000000011c063b80, 0x000000011c063be0]  96 bytes

  0x000000011c063b80: push   %rax
  0x000000011c063b81: jmpq   0x000000011c063bbf
  0x000000011c063b86: sub    $0x8,%rsp
  0x000000011c063b8a: vmovss %xmm0,(%rsp)
  0x000000011c063b8f: jmpq   0x000000011c063bbf
  0x000000011c063b94: sub    $0x10,%rsp
  0x000000011c063b98: vmovsd %xmm0,(%rsp)
  0x000000011c063b9d: jmpq   0x000000011c063bbf
  0x000000011c063ba2: sub    $0x10,%rsp
  0x000000011c063ba6: mov    %rax,(%rsp)
  0x000000011c063baa: movabs $0x0,%r10
  0x000000011c063bb4: mov    %r10,0x8(%rsp)
  0x000000011c063bb9: jmpq   0x000000011c063bbf
  0x000000011c063bbe: push   %rax
  0x000000011c063bbf: mov    $0x5,%eax
  0x000000011c063bc4: movzbl 0x1(%r13),%ebx
  0x000000011c063bc9: inc    %r13
  0x000000011c063bcc: movabs $0x1109d5220,%r10
  0x000000011c063bd6: jmpq   *(%r10,%rbx,8)
  0x000000011c063bda: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
lconst_0  9 lconst_0  [0x000000011c063c00, 0x000000011c063c60]  96 bytes

  0x000000011c063c00: push   %rax
  0x000000011c063c01: jmpq   0x000000011c063c3f
  0x000000011c063c06: sub    $0x8,%rsp
  0x000000011c063c0a: vmovss %xmm0,(%rsp)
  0x000000011c063c0f: jmpq   0x000000011c063c3f
  0x000000011c063c14: sub    $0x10,%rsp
  0x000000011c063c18: vmovsd %xmm0,(%rsp)
  0x000000011c063c1d: jmpq   0x000000011c063c3f
  0x000000011c063c22: sub    $0x10,%rsp
  0x000000011c063c26: mov    %rax,(%rsp)
  0x000000011c063c2a: movabs $0x0,%r10
  0x000000011c063c34: mov    %r10,0x8(%rsp)
  0x000000011c063c39: jmpq   0x000000011c063c3f
  0x000000011c063c3e: push   %rax
  0x000000011c063c3f: xor    %eax,%eax
  0x000000011c063c41: movzbl 0x1(%r13),%ebx
  0x000000011c063c46: inc    %r13
  0x000000011c063c49: movabs $0x1109d5a20,%r10
  0x000000011c063c53: jmpq   *(%r10,%rbx,8)
  0x000000011c063c57: nop
  0x000000011c063c58: add    %al,(%rax)
  0x000000011c063c5a: add    %al,(%rax)
  0x000000011c063c5c: add    %al,(%rax)
  0x000000011c063c5e: add    %al,(%rax)

----------------------------------------------------------------------
lconst_1  10 lconst_1  [0x000000011c063c80, 0x000000011c063ce0]  96 bytes

  0x000000011c063c80: push   %rax
  0x000000011c063c81: jmpq   0x000000011c063cbf
  0x000000011c063c86: sub    $0x8,%rsp
  0x000000011c063c8a: vmovss %xmm0,(%rsp)
  0x000000011c063c8f: jmpq   0x000000011c063cbf
  0x000000011c063c94: sub    $0x10,%rsp
  0x000000011c063c98: vmovsd %xmm0,(%rsp)
  0x000000011c063c9d: jmpq   0x000000011c063cbf
  0x000000011c063ca2: sub    $0x10,%rsp
  0x000000011c063ca6: mov    %rax,(%rsp)
  0x000000011c063caa: movabs $0x0,%r10
  0x000000011c063cb4: mov    %r10,0x8(%rsp)
  0x000000011c063cb9: jmpq   0x000000011c063cbf
  0x000000011c063cbe: push   %rax
  0x000000011c063cbf: mov    $0x1,%eax
  0x000000011c063cc4: movzbl 0x1(%r13),%ebx
  0x000000011c063cc9: inc    %r13
  0x000000011c063ccc: movabs $0x1109d5a20,%r10
  0x000000011c063cd6: jmpq   *(%r10,%rbx,8)
  0x000000011c063cda: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
fconst_0  11 fconst_0  [0x000000011c063d00, 0x000000011c063d60]  96 bytes

  0x000000011c063d00: push   %rax
  0x000000011c063d01: jmpq   0x000000011c063d3f
  0x000000011c063d06: sub    $0x8,%rsp
  0x000000011c063d0a: vmovss %xmm0,(%rsp)
  0x000000011c063d0f: jmpq   0x000000011c063d3f
  0x000000011c063d14: sub    $0x10,%rsp
  0x000000011c063d18: vmovsd %xmm0,(%rsp)
  0x000000011c063d1d: jmpq   0x000000011c063d3f
  0x000000011c063d22: sub    $0x10,%rsp
  0x000000011c063d26: mov    %rax,(%rsp)
  0x000000011c063d2a: movabs $0x0,%r10
  0x000000011c063d34: mov    %r10,0x8(%rsp)
  0x000000011c063d39: jmpq   0x000000011c063d3f
  0x000000011c063d3e: push   %rax
  0x000000011c063d3f: vxorps %xmm0,%xmm0,%xmm0
  0x000000011c063d43: movzbl 0x1(%r13),%ebx
  0x000000011c063d48: inc    %r13
  0x000000011c063d4b: movabs $0x1109d6220,%r10
  0x000000011c063d55: jmpq   *(%r10,%rbx,8)
  0x000000011c063d59: nopl   0x0(%rax)

----------------------------------------------------------------------
fconst_1  12 fconst_1  [0x000000011c063d80, 0x000000011c063de0]  96 bytes

  0x000000011c063d80: push   %rax
  0x000000011c063d81: jmpq   0x000000011c063dbf
  0x000000011c063d86: sub    $0x8,%rsp
  0x000000011c063d8a: vmovss %xmm0,(%rsp)
  0x000000011c063d8f: jmpq   0x000000011c063dbf
  0x000000011c063d94: sub    $0x10,%rsp
  0x000000011c063d98: vmovsd %xmm0,(%rsp)
  0x000000011c063d9d: jmpq   0x000000011c063dbf
  0x000000011c063da2: sub    $0x10,%rsp
  0x000000011c063da6: mov    %rax,(%rsp)
  0x000000011c063daa: movabs $0x0,%r10
  0x000000011c063db4: mov    %r10,0x8(%rsp)
  0x000000011c063db9: jmpq   0x000000011c063dbf
  0x000000011c063dbe: push   %rax
  0x000000011c063dbf: vmovss -0xb6cd8cf(%rip),%xmm0        # 0x00000001109964f8 = TemplateTable::fconst(int)::one
  0x000000011c063dc7: movzbl 0x1(%r13),%ebx
  0x000000011c063dcc: inc    %r13
  0x000000011c063dcf: movabs $0x1109d6220,%r10
  0x000000011c063dd9: jmpq   *(%r10,%rbx,8)
  0x000000011c063ddd: data16 xchg %ax,%ax

----------------------------------------------------------------------
fconst_2  13 fconst_2  [0x000000011c063e00, 0x000000011c063e60]  96 bytes

  0x000000011c063e00: push   %rax
  0x000000011c063e01: jmpq   0x000000011c063e3f
  0x000000011c063e06: sub    $0x8,%rsp
  0x000000011c063e0a: vmovss %xmm0,(%rsp)
  0x000000011c063e0f: jmpq   0x000000011c063e3f
  0x000000011c063e14: sub    $0x10,%rsp
  0x000000011c063e18: vmovsd %xmm0,(%rsp)
  0x000000011c063e1d: jmpq   0x000000011c063e3f
  0x000000011c063e22: sub    $0x10,%rsp
  0x000000011c063e26: mov    %rax,(%rsp)
  0x000000011c063e2a: movabs $0x0,%r10
  0x000000011c063e34: mov    %r10,0x8(%rsp)
  0x000000011c063e39: jmpq   0x000000011c063e3f
  0x000000011c063e3e: push   %rax
  0x000000011c063e3f: vmovss -0xb6cd94b(%rip),%xmm0        # 0x00000001109964fc = TemplateTable::fconst(int)::two
  0x000000011c063e47: movzbl 0x1(%r13),%ebx
  0x000000011c063e4c: inc    %r13
  0x000000011c063e4f: movabs $0x1109d6220,%r10
  0x000000011c063e59: jmpq   *(%r10,%rbx,8)
  0x000000011c063e5d: data16 xchg %ax,%ax

----------------------------------------------------------------------
dconst_0  14 dconst_0  [0x000000011c063e80, 0x000000011c063ee0]  96 bytes

  0x000000011c063e80: push   %rax
  0x000000011c063e81: jmpq   0x000000011c063ebf
  0x000000011c063e86: sub    $0x8,%rsp
  0x000000011c063e8a: vmovss %xmm0,(%rsp)
  0x000000011c063e8f: jmpq   0x000000011c063ebf
  0x000000011c063e94: sub    $0x10,%rsp
  0x000000011c063e98: vmovsd %xmm0,(%rsp)
  0x000000011c063e9d: jmpq   0x000000011c063ebf
  0x000000011c063ea2: sub    $0x10,%rsp
  0x000000011c063ea6: mov    %rax,(%rsp)
  0x000000011c063eaa: movabs $0x0,%r10
  0x000000011c063eb4: mov    %r10,0x8(%rsp)
  0x000000011c063eb9: jmpq   0x000000011c063ebf
  0x000000011c063ebe: push   %rax
  0x000000011c063ebf: vxorpd %xmm0,%xmm0,%xmm0
  0x000000011c063ec3: movzbl 0x1(%r13),%ebx
  0x000000011c063ec8: inc    %r13
  0x000000011c063ecb: movabs $0x1109d6a20,%r10
  0x000000011c063ed5: jmpq   *(%r10,%rbx,8)
  0x000000011c063ed9: nopl   0x0(%rax)

----------------------------------------------------------------------
dconst_1  15 dconst_1  [0x000000011c063f00, 0x000000011c063f60]  96 bytes

  0x000000011c063f00: push   %rax
  0x000000011c063f01: jmpq   0x000000011c063f3f
  0x000000011c063f06: sub    $0x8,%rsp
  0x000000011c063f0a: vmovss %xmm0,(%rsp)
  0x000000011c063f0f: jmpq   0x000000011c063f3f
  0x000000011c063f14: sub    $0x10,%rsp
  0x000000011c063f18: vmovsd %xmm0,(%rsp)
  0x000000011c063f1d: jmpq   0x000000011c063f3f
  0x000000011c063f22: sub    $0x10,%rsp
  0x000000011c063f26: mov    %rax,(%rsp)
  0x000000011c063f2a: movabs $0x0,%r10
  0x000000011c063f34: mov    %r10,0x8(%rsp)
  0x000000011c063f39: jmpq   0x000000011c063f3f
  0x000000011c063f3e: push   %rax
  0x000000011c063f3f: vmovsd -0xb6cda47(%rip),%xmm0        # 0x0000000110996500 = TemplateTable::dconst(int)::one
  0x000000011c063f47: movzbl 0x1(%r13),%ebx
  0x000000011c063f4c: inc    %r13
  0x000000011c063f4f: movabs $0x1109d6a20,%r10
  0x000000011c063f59: jmpq   *(%r10,%rbx,8)
  0x000000011c063f5d: data16 xchg %ax,%ax

----------------------------------------------------------------------
bipush  16 bipush  [0x000000011c063f80, 0x000000011c063fe0]  96 bytes

  0x000000011c063f80: push   %rax
  0x000000011c063f81: jmpq   0x000000011c063fbf
  0x000000011c063f86: sub    $0x8,%rsp
  0x000000011c063f8a: vmovss %xmm0,(%rsp)
  0x000000011c063f8f: jmpq   0x000000011c063fbf
  0x000000011c063f94: sub    $0x10,%rsp
  0x000000011c063f98: vmovsd %xmm0,(%rsp)
  0x000000011c063f9d: jmpq   0x000000011c063fbf
  0x000000011c063fa2: sub    $0x10,%rsp
  0x000000011c063fa6: mov    %rax,(%rsp)
  0x000000011c063faa: movabs $0x0,%r10
  0x000000011c063fb4: mov    %r10,0x8(%rsp)
  0x000000011c063fb9: jmpq   0x000000011c063fbf
  0x000000011c063fbe: push   %rax
  0x000000011c063fbf: movsbl 0x1(%r13),%eax
  0x000000011c063fc4: movzbl 0x2(%r13),%ebx
  0x000000011c063fc9: add    $0x2,%r13
  0x000000011c063fcd: movabs $0x1109d5220,%r10
  0x000000011c063fd7: jmpq   *(%r10,%rbx,8)
  0x000000011c063fdb: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
sipush  17 sipush  [0x000000011c064000, 0x000000011c064060]  96 bytes

  0x000000011c064000: push   %rax
  0x000000011c064001: jmpq   0x000000011c06403f
  0x000000011c064006: sub    $0x8,%rsp
  0x000000011c06400a: vmovss %xmm0,(%rsp)
  0x000000011c06400f: jmpq   0x000000011c06403f
  0x000000011c064014: sub    $0x10,%rsp
  0x000000011c064018: vmovsd %xmm0,(%rsp)
  0x000000011c06401d: jmpq   0x000000011c06403f
  0x000000011c064022: sub    $0x10,%rsp
  0x000000011c064026: mov    %rax,(%rsp)
  0x000000011c06402a: movabs $0x0,%r10
  0x000000011c064034: mov    %r10,0x8(%rsp)
  0x000000011c064039: jmpq   0x000000011c06403f
  0x000000011c06403e: push   %rax
  0x000000011c06403f: movzwl 0x1(%r13),%eax
  0x000000011c064044: bswap  %eax
  0x000000011c064046: sar    $0x10,%eax
  0x000000011c064049: movzbl 0x3(%r13),%ebx
  0x000000011c06404e: add    $0x3,%r13
  0x000000011c064052: movabs $0x1109d5220,%r10
  0x000000011c06405c: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
ldc  18 ldc  [0x000000011c064080, 0x000000011c064360]  736 bytes

  0x000000011c064080: push   %rax
  0x000000011c064081: jmpq   0x000000011c0640bf
  0x000000011c064086: sub    $0x8,%rsp
  0x000000011c06408a: vmovss %xmm0,(%rsp)
  0x000000011c06408f: jmpq   0x000000011c0640bf
  0x000000011c064094: sub    $0x10,%rsp
  0x000000011c064098: vmovsd %xmm0,(%rsp)
  0x000000011c06409d: jmpq   0x000000011c0640bf
  0x000000011c0640a2: sub    $0x10,%rsp
  0x000000011c0640a6: mov    %rax,(%rsp)
  0x000000011c0640aa: movabs $0x0,%r10
  0x000000011c0640b4: mov    %r10,0x8(%rsp)
  0x000000011c0640b9: jmpq   0x000000011c0640bf
  0x000000011c0640be: push   %rax
  0x000000011c0640bf: movzbl 0x1(%r13),%ebx
  0x000000011c0640c4: mov    -0x18(%rbp),%rcx
  0x000000011c0640c8: mov    0x8(%rcx),%rcx
  0x000000011c0640cc: mov    0x8(%rcx),%rcx
  0x000000011c0640d0: mov    0x8(%rcx),%rax
  0x000000011c0640d4: movzbl 0x4(%rax,%rbx,1),%edx
  0x000000011c0640d9: cmp    $0x64,%edx
  0x000000011c0640dc: je     0x000000011c0640ec
  0x000000011c0640de: cmp    $0x67,%edx
  0x000000011c0640e1: je     0x000000011c0640ec
  0x000000011c0640e3: cmp    $0x7,%edx
  0x000000011c0640e6: jne    0x000000011c0641ab
  0x000000011c0640ec: mov    $0x0,%esi
  0x000000011c0640f1: callq  0x000000011c0640fb
  0x000000011c0640f6: jmpq   0x000000011c0641a5
  0x000000011c0640fb: lea    0x8(%rsp),%rax
  0x000000011c064100: mov    %r13,-0x40(%rbp)
  0x000000011c064104: mov    %r15,%rdi
  0x000000011c064107: vzeroupper 
  0x000000011c06410a: mov    %rbp,0x330(%r15)
  0x000000011c064111: mov    %rax,0x320(%r15)
  0x000000011c064118: test   $0xf,%esp
  0x000000011c06411e: je     0x000000011c064136
  0x000000011c064124: sub    $0x8,%rsp
  0x000000011c064128: callq  0x00000001103a9c8e = InterpreterRuntime::ldc(JavaThread*, bool)
  0x000000011c06412d: add    $0x8,%rsp
  0x000000011c064131: jmpq   0x000000011c06413b
  0x000000011c064136: callq  0x00000001103a9c8e = InterpreterRuntime::ldc(JavaThread*, bool)
  0x000000011c06413b: movabs $0x0,%r10
  0x000000011c064145: mov    %r10,0x320(%r15)
  0x000000011c06414c: movabs $0x0,%r10
  0x000000011c064156: mov    %r10,0x330(%r15)
  0x000000011c06415d: movabs $0x0,%r10
  0x000000011c064167: mov    %r10,0x328(%r15)
  0x000000011c06416e: vzeroupper 
  0x000000011c064171: cmpq   $0x0,0x8(%r15)
  0x000000011c064179: je     0x000000011c064184
  0x000000011c06417f: jmpq   0x000000011c054780
  0x000000011c064184: mov    0x380(%r15),%rax
  0x000000011c06418b: movabs $0x0,%r10
  0x000000011c064195: mov    %r10,0x380(%r15)
  0x000000011c06419c: mov    -0x40(%rbp),%r13
  0x000000011c0641a0: mov    -0x38(%rbp),%r14
  0x000000011c0641a4: retq   
  0x000000011c0641a5: push   %rax
  0x000000011c0641a6: jmpq   0x000000011c064340
  0x000000011c0641ab: cmp    $0x4,%edx
  0x000000011c0641ae: jne    0x000000011c0641c4
  0x000000011c0641b0: vmovss 0x40(%rcx,%rbx,8),%xmm0
  0x000000011c0641b6: sub    $0x8,%rsp
  0x000000011c0641ba: vmovss %xmm0,(%rsp)
  0x000000011c0641bf: jmpq   0x000000011c064340
  0x000000011c0641c4: cmp    $0x3,%edx
  0x000000011c0641c7: jne    0x000000011c0641d3
  0x000000011c0641c9: mov    0x40(%rcx,%rbx,8),%eax
  0x000000011c0641cd: push   %rax
  0x000000011c0641ce: jmpq   0x000000011c064340
  0x000000011c0641d3: mov    $0x12,%esi
  0x000000011c0641d8: callq  0x000000011c0641e2
  0x000000011c0641dd: jmpq   0x000000011c06428c
  0x000000011c0641e2: lea    0x8(%rsp),%rax
  0x000000011c0641e7: mov    %r13,-0x40(%rbp)
  0x000000011c0641eb: mov    %r15,%rdi
  0x000000011c0641ee: vzeroupper 
  0x000000011c0641f1: mov    %rbp,0x330(%r15)
  0x000000011c0641f8: mov    %rax,0x320(%r15)
  0x000000011c0641ff: test   $0xf,%esp
  0x000000011c064205: je     0x000000011c06421d
  0x000000011c06420b: sub    $0x8,%rsp
  0x000000011c06420f: callq  0x00000001103a9de6 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0x000000011c064214: add    $0x8,%rsp
  0x000000011c064218: jmpq   0x000000011c064222
  0x000000011c06421d: callq  0x00000001103a9de6 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0x000000011c064222: movabs $0x0,%r10
  0x000000011c06422c: mov    %r10,0x320(%r15)
  0x000000011c064233: movabs $0x0,%r10
  0x000000011c06423d: mov    %r10,0x330(%r15)
  0x000000011c064244: movabs $0x0,%r10
  0x000000011c06424e: mov    %r10,0x328(%r15)
  0x000000011c064255: vzeroupper 
  0x000000011c064258: cmpq   $0x0,0x8(%r15)
  0x000000011c064260: je     0x000000011c06426b
  0x000000011c064266: jmpq   0x000000011c054780
  0x000000011c06426b: mov    0x380(%r15),%rax
  0x000000011c064272: movabs $0x0,%r10
  0x000000011c06427c: mov    %r10,0x380(%r15)
  0x000000011c064283: mov    -0x40(%rbp),%r13
  0x000000011c064287: mov    -0x38(%rbp),%r14
  0x000000011c06428b: retq   
  0x000000011c06428c: mov    0x388(%r15),%rcx
  0x000000011c064293: movabs $0x0,%r10
  0x000000011c06429d: mov    %r10,0x388(%r15)
  0x000000011c0642a4: mov    %ecx,%ebx
  0x000000011c0642a6: and    $0xffff,%ebx
  0x000000011c0642ac: shr    $0x1c,%ecx
  0x000000011c0642af: and    $0xf,%ecx
  0x000000011c0642b2: cmp    $0x4,%ecx
  0x000000011c0642b5: jne    0x000000011c0642c4
  0x000000011c0642bb: mov    (%rax,%rbx,1),%eax
  0x000000011c0642be: push   %rax
  0x000000011c0642bf: jmpq   0x000000011c064340
  0x000000011c0642c4: cmp    $0x6,%ecx
  0x000000011c0642c7: jne    0x000000011c0642e0
  0x000000011c0642cd: vmovss (%rax,%rbx,1),%xmm0
  0x000000011c0642d2: sub    $0x8,%rsp
  0x000000011c0642d6: vmovss %xmm0,(%rsp)
  0x000000011c0642db: jmpq   0x000000011c064340
  0x000000011c0642e0: cmp    $0x3,%ecx
  0x000000011c0642e3: jne    0x000000011c0642f3
  0x000000011c0642e9: movswl (%rax,%rbx,1),%eax
  0x000000011c0642ed: push   %rax
  0x000000011c0642ee: jmpq   0x000000011c064340
  0x000000011c0642f3: cmp    $0x0,%ecx
  0x000000011c0642f6: jne    0x000000011c064306
  0x000000011c0642fc: movsbl (%rax,%rbx,1),%eax
  0x000000011c064300: push   %rax
  0x000000011c064301: jmpq   0x000000011c064340
  0x000000011c064306: cmp    $0x2,%ecx
  0x000000011c064309: jne    0x000000011c064319
  0x000000011c06430f: movzwl (%rax,%rbx,1),%eax
  0x000000011c064313: push   %rax
  0x000000011c064314: jmpq   0x000000011c064340
  0x000000011c064319: cmp    $0x1,%ecx
  0x000000011c06431c: jne    0x000000011c06432c
  0x000000011c064322: movsbl (%rax,%rbx,1),%eax
  0x000000011c064326: push   %rax
  0x000000011c064327: jmpq   0x000000011c064340
  0x000000011c06432c: movabs $0x110851c44,%rdi
  0x000000011c064336: and    $0xfffffffffffffff0,%rsp
  0x000000011c06433a: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c06433f: hlt    
  0x000000011c064340: movzbl 0x2(%r13),%ebx
  0x000000011c064345: add    $0x2,%r13
  0x000000011c064349: movabs $0x1109d7a20,%r10
  0x000000011c064353: jmpq   *(%r10,%rbx,8)
  0x000000011c064357: nop
  0x000000011c064358: add    %al,(%rax)
  0x000000011c06435a: add    %al,(%rax)
  0x000000011c06435c: add    %al,(%rax)
  0x000000011c06435e: add    %al,(%rax)

----------------------------------------------------------------------
ldc_w  19 ldc_w  [0x000000011c064380, 0x000000011c064660]  736 bytes

  0x000000011c064380: push   %rax
  0x000000011c064381: jmpq   0x000000011c0643bf
  0x000000011c064386: sub    $0x8,%rsp
  0x000000011c06438a: vmovss %xmm0,(%rsp)
  0x000000011c06438f: jmpq   0x000000011c0643bf
  0x000000011c064394: sub    $0x10,%rsp
  0x000000011c064398: vmovsd %xmm0,(%rsp)
  0x000000011c06439d: jmpq   0x000000011c0643bf
  0x000000011c0643a2: sub    $0x10,%rsp
  0x000000011c0643a6: mov    %rax,(%rsp)
  0x000000011c0643aa: movabs $0x0,%r10
  0x000000011c0643b4: mov    %r10,0x8(%rsp)
  0x000000011c0643b9: jmpq   0x000000011c0643bf
  0x000000011c0643be: push   %rax
  0x000000011c0643bf: movzwl 0x1(%r13),%ebx
  0x000000011c0643c4: bswap  %ebx
  0x000000011c0643c6: shr    $0x10,%ebx
  0x000000011c0643c9: mov    -0x18(%rbp),%rcx
  0x000000011c0643cd: mov    0x8(%rcx),%rcx
  0x000000011c0643d1: mov    0x8(%rcx),%rcx
  0x000000011c0643d5: mov    0x8(%rcx),%rax
  0x000000011c0643d9: movzbl 0x4(%rax,%rbx,1),%edx
  0x000000011c0643de: cmp    $0x64,%edx
  0x000000011c0643e1: je     0x000000011c0643f1
  0x000000011c0643e3: cmp    $0x67,%edx
  0x000000011c0643e6: je     0x000000011c0643f1
  0x000000011c0643e8: cmp    $0x7,%edx
  0x000000011c0643eb: jne    0x000000011c0644b0
  0x000000011c0643f1: mov    $0x1,%esi
  0x000000011c0643f6: callq  0x000000011c064400
  0x000000011c0643fb: jmpq   0x000000011c0644aa
  0x000000011c064400: lea    0x8(%rsp),%rax
  0x000000011c064405: mov    %r13,-0x40(%rbp)
  0x000000011c064409: mov    %r15,%rdi
  0x000000011c06440c: vzeroupper 
  0x000000011c06440f: mov    %rbp,0x330(%r15)
  0x000000011c064416: mov    %rax,0x320(%r15)
  0x000000011c06441d: test   $0xf,%esp
  0x000000011c064423: je     0x000000011c06443b
  0x000000011c064429: sub    $0x8,%rsp
  0x000000011c06442d: callq  0x00000001103a9c8e = InterpreterRuntime::ldc(JavaThread*, bool)
  0x000000011c064432: add    $0x8,%rsp
  0x000000011c064436: jmpq   0x000000011c064440
  0x000000011c06443b: callq  0x00000001103a9c8e = InterpreterRuntime::ldc(JavaThread*, bool)
  0x000000011c064440: movabs $0x0,%r10
  0x000000011c06444a: mov    %r10,0x320(%r15)
  0x000000011c064451: movabs $0x0,%r10
  0x000000011c06445b: mov    %r10,0x330(%r15)
  0x000000011c064462: movabs $0x0,%r10
  0x000000011c06446c: mov    %r10,0x328(%r15)
  0x000000011c064473: vzeroupper 
  0x000000011c064476: cmpq   $0x0,0x8(%r15)
  0x000000011c06447e: je     0x000000011c064489
  0x000000011c064484: jmpq   0x000000011c054780
  0x000000011c064489: mov    0x380(%r15),%rax
  0x000000011c064490: movabs $0x0,%r10
  0x000000011c06449a: mov    %r10,0x380(%r15)
  0x000000011c0644a1: mov    -0x40(%rbp),%r13
  0x000000011c0644a5: mov    -0x38(%rbp),%r14
  0x000000011c0644a9: retq   
  0x000000011c0644aa: push   %rax
  0x000000011c0644ab: jmpq   0x000000011c064645
  0x000000011c0644b0: cmp    $0x4,%edx
  0x000000011c0644b3: jne    0x000000011c0644c9
  0x000000011c0644b5: vmovss 0x40(%rcx,%rbx,8),%xmm0
  0x000000011c0644bb: sub    $0x8,%rsp
  0x000000011c0644bf: vmovss %xmm0,(%rsp)
  0x000000011c0644c4: jmpq   0x000000011c064645
  0x000000011c0644c9: cmp    $0x3,%edx
  0x000000011c0644cc: jne    0x000000011c0644d8
  0x000000011c0644ce: mov    0x40(%rcx,%rbx,8),%eax
  0x000000011c0644d2: push   %rax
  0x000000011c0644d3: jmpq   0x000000011c064645
  0x000000011c0644d8: mov    $0x13,%esi
  0x000000011c0644dd: callq  0x000000011c0644e7
  0x000000011c0644e2: jmpq   0x000000011c064591
  0x000000011c0644e7: lea    0x8(%rsp),%rax
  0x000000011c0644ec: mov    %r13,-0x40(%rbp)
  0x000000011c0644f0: mov    %r15,%rdi
  0x000000011c0644f3: vzeroupper 
  0x000000011c0644f6: mov    %rbp,0x330(%r15)
  0x000000011c0644fd: mov    %rax,0x320(%r15)
  0x000000011c064504: test   $0xf,%esp
  0x000000011c06450a: je     0x000000011c064522
  0x000000011c064510: sub    $0x8,%rsp
  0x000000011c064514: callq  0x00000001103a9de6 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0x000000011c064519: add    $0x8,%rsp
  0x000000011c06451d: jmpq   0x000000011c064527
  0x000000011c064522: callq  0x00000001103a9de6 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0x000000011c064527: movabs $0x0,%r10
  0x000000011c064531: mov    %r10,0x320(%r15)
  0x000000011c064538: movabs $0x0,%r10
  0x000000011c064542: mov    %r10,0x330(%r15)
  0x000000011c064549: movabs $0x0,%r10
  0x000000011c064553: mov    %r10,0x328(%r15)
  0x000000011c06455a: vzeroupper 
  0x000000011c06455d: cmpq   $0x0,0x8(%r15)
  0x000000011c064565: je     0x000000011c064570
  0x000000011c06456b: jmpq   0x000000011c054780
  0x000000011c064570: mov    0x380(%r15),%rax
  0x000000011c064577: movabs $0x0,%r10
  0x000000011c064581: mov    %r10,0x380(%r15)
  0x000000011c064588: mov    -0x40(%rbp),%r13
  0x000000011c06458c: mov    -0x38(%rbp),%r14
  0x000000011c064590: retq   
  0x000000011c064591: mov    0x388(%r15),%rcx
  0x000000011c064598: movabs $0x0,%r10
  0x000000011c0645a2: mov    %r10,0x388(%r15)
  0x000000011c0645a9: mov    %ecx,%ebx
  0x000000011c0645ab: and    $0xffff,%ebx
  0x000000011c0645b1: shr    $0x1c,%ecx
  0x000000011c0645b4: and    $0xf,%ecx
  0x000000011c0645b7: cmp    $0x4,%ecx
  0x000000011c0645ba: jne    0x000000011c0645c9
  0x000000011c0645c0: mov    (%rax,%rbx,1),%eax
  0x000000011c0645c3: push   %rax
  0x000000011c0645c4: jmpq   0x000000011c064645
  0x000000011c0645c9: cmp    $0x6,%ecx
  0x000000011c0645cc: jne    0x000000011c0645e5
  0x000000011c0645d2: vmovss (%rax,%rbx,1),%xmm0
  0x000000011c0645d7: sub    $0x8,%rsp
  0x000000011c0645db: vmovss %xmm0,(%rsp)
  0x000000011c0645e0: jmpq   0x000000011c064645
  0x000000011c0645e5: cmp    $0x3,%ecx
  0x000000011c0645e8: jne    0x000000011c0645f8
  0x000000011c0645ee: movswl (%rax,%rbx,1),%eax
  0x000000011c0645f2: push   %rax
  0x000000011c0645f3: jmpq   0x000000011c064645
  0x000000011c0645f8: cmp    $0x0,%ecx
  0x000000011c0645fb: jne    0x000000011c06460b
  0x000000011c064601: movsbl (%rax,%rbx,1),%eax
  0x000000011c064605: push   %rax
  0x000000011c064606: jmpq   0x000000011c064645
  0x000000011c06460b: cmp    $0x2,%ecx
  0x000000011c06460e: jne    0x000000011c06461e
  0x000000011c064614: movzwl (%rax,%rbx,1),%eax
  0x000000011c064618: push   %rax
  0x000000011c064619: jmpq   0x000000011c064645
  0x000000011c06461e: cmp    $0x1,%ecx
  0x000000011c064621: jne    0x000000011c064631
  0x000000011c064627: movsbl (%rax,%rbx,1),%eax
  0x000000011c06462b: push   %rax
  0x000000011c06462c: jmpq   0x000000011c064645
  0x000000011c064631: movabs $0x110851c44,%rdi
  0x000000011c06463b: and    $0xfffffffffffffff0,%rsp
  0x000000011c06463f: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c064644: hlt    
  0x000000011c064645: movzbl 0x3(%r13),%ebx
  0x000000011c06464a: add    $0x3,%r13
  0x000000011c06464e: movabs $0x1109d7a20,%r10
  0x000000011c064658: jmpq   *(%r10,%rbx,8)
  0x000000011c06465c: nopl   0x0(%rax)

----------------------------------------------------------------------
ldc2_w  20 ldc2_w  [0x000000011c064680, 0x000000011c064880]  512 bytes

  0x000000011c064680: push   %rax
  0x000000011c064681: jmpq   0x000000011c0646bf
  0x000000011c064686: sub    $0x8,%rsp
  0x000000011c06468a: vmovss %xmm0,(%rsp)
  0x000000011c06468f: jmpq   0x000000011c0646bf
  0x000000011c064694: sub    $0x10,%rsp
  0x000000011c064698: vmovsd %xmm0,(%rsp)
  0x000000011c06469d: jmpq   0x000000011c0646bf
  0x000000011c0646a2: sub    $0x10,%rsp
  0x000000011c0646a6: mov    %rax,(%rsp)
  0x000000011c0646aa: movabs $0x0,%r10
  0x000000011c0646b4: mov    %r10,0x8(%rsp)
  0x000000011c0646b9: jmpq   0x000000011c0646bf
  0x000000011c0646be: push   %rax
  0x000000011c0646bf: movzwl 0x1(%r13),%ebx
  0x000000011c0646c4: bswap  %ebx
  0x000000011c0646c6: shr    $0x10,%ebx
  0x000000011c0646c9: mov    -0x18(%rbp),%rcx
  0x000000011c0646cd: mov    0x8(%rcx),%rcx
  0x000000011c0646d1: mov    0x8(%rcx),%rcx
  0x000000011c0646d5: mov    0x8(%rcx),%rax
  0x000000011c0646d9: movzbl 0x4(%rax,%rbx,1),%edx
  0x000000011c0646de: cmp    $0x6,%edx
  0x000000011c0646e1: jne    0x000000011c0646f7
  0x000000011c0646e3: vmovsd 0x40(%rcx,%rbx,8),%xmm0
  0x000000011c0646e9: sub    $0x10,%rsp
  0x000000011c0646ed: vmovsd %xmm0,(%rsp)
  0x000000011c0646f2: jmpq   0x000000011c064855
  0x000000011c0646f7: cmp    $0x5,%edx
  0x000000011c0646fa: jne    0x000000011c06471d
  0x000000011c0646fc: mov    0x40(%rcx,%rbx,8),%rax
  0x000000011c064701: sub    $0x10,%rsp
  0x000000011c064705: mov    %rax,(%rsp)
  0x000000011c064709: movabs $0x0,%r10
  0x000000011c064713: mov    %r10,0x8(%rsp)
  0x000000011c064718: jmpq   0x000000011c064855
  0x000000011c06471d: mov    $0x14,%esi
  0x000000011c064722: callq  0x000000011c06472c
  0x000000011c064727: jmpq   0x000000011c0647d6
  0x000000011c06472c: lea    0x8(%rsp),%rax
  0x000000011c064731: mov    %r13,-0x40(%rbp)
  0x000000011c064735: mov    %r15,%rdi
  0x000000011c064738: vzeroupper 
  0x000000011c06473b: mov    %rbp,0x330(%r15)
  0x000000011c064742: mov    %rax,0x320(%r15)
  0x000000011c064749: test   $0xf,%esp
  0x000000011c06474f: je     0x000000011c064767
  0x000000011c064755: sub    $0x8,%rsp
  0x000000011c064759: callq  0x00000001103a9de6 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0x000000011c06475e: add    $0x8,%rsp
  0x000000011c064762: jmpq   0x000000011c06476c
  0x000000011c064767: callq  0x00000001103a9de6 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0x000000011c06476c: movabs $0x0,%r10
  0x000000011c064776: mov    %r10,0x320(%r15)
  0x000000011c06477d: movabs $0x0,%r10
  0x000000011c064787: mov    %r10,0x330(%r15)
  0x000000011c06478e: movabs $0x0,%r10
  0x000000011c064798: mov    %r10,0x328(%r15)
  0x000000011c06479f: vzeroupper 
  0x000000011c0647a2: cmpq   $0x0,0x8(%r15)
  0x000000011c0647aa: je     0x000000011c0647b5
  0x000000011c0647b0: jmpq   0x000000011c054780
  0x000000011c0647b5: mov    0x380(%r15),%rax
  0x000000011c0647bc: movabs $0x0,%r10
  0x000000011c0647c6: mov    %r10,0x380(%r15)
  0x000000011c0647cd: mov    -0x40(%rbp),%r13
  0x000000011c0647d1: mov    -0x38(%rbp),%r14
  0x000000011c0647d5: retq   
  0x000000011c0647d6: mov    0x388(%r15),%rcx
  0x000000011c0647dd: movabs $0x0,%r10
  0x000000011c0647e7: mov    %r10,0x388(%r15)
  0x000000011c0647ee: mov    %ecx,%ebx
  0x000000011c0647f0: and    $0xffff,%ebx
  0x000000011c0647f6: shr    $0x1c,%ecx
  0x000000011c0647f9: and    $0xf,%ecx
  0x000000011c0647fc: cmp    $0x5,%ecx
  0x000000011c0647ff: jne    0x000000011c064825
  0x000000011c064805: mov    (%rax,%rbx,1),%rax
  0x000000011c064809: sub    $0x10,%rsp
  0x000000011c06480d: mov    %rax,(%rsp)
  0x000000011c064811: movabs $0x0,%r10
  0x000000011c06481b: mov    %r10,0x8(%rsp)
  0x000000011c064820: jmpq   0x000000011c064855
  0x000000011c064825: cmp    $0x7,%ecx
  0x000000011c064828: jne    0x000000011c064841
  0x000000011c06482e: vmovsd (%rax,%rbx,1),%xmm0
  0x000000011c064833: sub    $0x10,%rsp
  0x000000011c064837: vmovsd %xmm0,(%rsp)
  0x000000011c06483c: jmpq   0x000000011c064855
  0x000000011c064841: movabs $0x110851c44,%rdi
  0x000000011c06484b: and    $0xfffffffffffffff0,%rsp
  0x000000011c06484f: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c064854: hlt    
  0x000000011c064855: movzbl 0x3(%r13),%ebx
  0x000000011c06485a: add    $0x3,%r13
  0x000000011c06485e: movabs $0x1109d7a20,%r10
  0x000000011c064868: jmpq   *(%r10,%rbx,8)
  0x000000011c06486c: nopl   0x0(%rax)
  0x000000011c064870: add    %al,(%rax)
  0x000000011c064872: add    %al,(%rax)
  0x000000011c064874: add    %al,(%rax)
  0x000000011c064876: add    %al,(%rax)
  0x000000011c064878: add    %al,(%rax)
  0x000000011c06487a: add    %al,(%rax)
  0x000000011c06487c: add    %al,(%rax)
  0x000000011c06487e: add    %al,(%rax)

----------------------------------------------------------------------
iload  21 iload  [0x000000011c0648a0, 0x000000011c064960]  192 bytes

  0x000000011c0648a0: push   %rax
  0x000000011c0648a1: jmpq   0x000000011c0648df
  0x000000011c0648a6: sub    $0x8,%rsp
  0x000000011c0648aa: vmovss %xmm0,(%rsp)
  0x000000011c0648af: jmpq   0x000000011c0648df
  0x000000011c0648b4: sub    $0x10,%rsp
  0x000000011c0648b8: vmovsd %xmm0,(%rsp)
  0x000000011c0648bd: jmpq   0x000000011c0648df
  0x000000011c0648c2: sub    $0x10,%rsp
  0x000000011c0648c6: mov    %rax,(%rsp)
  0x000000011c0648ca: movabs $0x0,%r10
  0x000000011c0648d4: mov    %r10,0x8(%rsp)
  0x000000011c0648d9: jmpq   0x000000011c0648df
  0x000000011c0648de: push   %rax
  0x000000011c0648df: movzbl 0x2(%r13),%ebx
  0x000000011c0648e4: cmp    $0x15,%ebx
  0x000000011c0648e7: je     0x000000011c06490d
  0x000000011c0648ed: cmp    $0xe0,%ebx
  0x000000011c0648f3: mov    $0xe1,%ecx
  0x000000011c0648f8: je     0x000000011c064909
  0x000000011c0648fa: cmp    $0x34,%ebx
  0x000000011c0648fd: mov    $0xe2,%ecx
  0x000000011c064902: je     0x000000011c064909
  0x000000011c064904: mov    $0xe0,%ecx
  0x000000011c064909: mov    %cl,0x0(%r13)
  0x000000011c06490d: movzbl 0x1(%r13),%ebx
  0x000000011c064912: neg    %rbx
  0x000000011c064915: mov    (%r14,%rbx,8),%eax
  0x000000011c064919: movzbl 0x2(%r13),%ebx
  0x000000011c06491e: add    $0x2,%r13
  0x000000011c064922: movabs $0x1109d5220,%r10
  0x000000011c06492c: jmpq   *(%r10,%rbx,8)
  0x000000011c064930: movzwl 0x2(%r13),%ebx
  0x000000011c064935: bswap  %ebx
  0x000000011c064937: shr    $0x10,%ebx
  0x000000011c06493a: neg    %rbx
  0x000000011c06493d: mov    (%r14,%rbx,8),%eax
  0x000000011c064941: movzbl 0x4(%r13),%ebx
  0x000000011c064946: add    $0x4,%r13
  0x000000011c06494a: movabs $0x1109d5220,%r10
  0x000000011c064954: jmpq   *(%r10,%rbx,8)
  0x000000011c064958: add    %al,(%rax)
  0x000000011c06495a: add    %al,(%rax)
  0x000000011c06495c: add    %al,(%rax)
  0x000000011c06495e: add    %al,(%rax)

----------------------------------------------------------------------
lload  22 lload  [0x000000011c064980, 0x000000011c064a20]  160 bytes

  0x000000011c064980: push   %rax
  0x000000011c064981: jmpq   0x000000011c0649bf
  0x000000011c064986: sub    $0x8,%rsp
  0x000000011c06498a: vmovss %xmm0,(%rsp)
  0x000000011c06498f: jmpq   0x000000011c0649bf
  0x000000011c064994: sub    $0x10,%rsp
  0x000000011c064998: vmovsd %xmm0,(%rsp)
  0x000000011c06499d: jmpq   0x000000011c0649bf
  0x000000011c0649a2: sub    $0x10,%rsp
  0x000000011c0649a6: mov    %rax,(%rsp)
  0x000000011c0649aa: movabs $0x0,%r10
  0x000000011c0649b4: mov    %r10,0x8(%rsp)
  0x000000011c0649b9: jmpq   0x000000011c0649bf
  0x000000011c0649be: push   %rax
  0x000000011c0649bf: movzbl 0x1(%r13),%ebx
  0x000000011c0649c4: neg    %rbx
  0x000000011c0649c7: mov    -0x8(%r14,%rbx,8),%rax
  0x000000011c0649cc: movzbl 0x2(%r13),%ebx
  0x000000011c0649d1: add    $0x2,%r13
  0x000000011c0649d5: movabs $0x1109d5a20,%r10
  0x000000011c0649df: jmpq   *(%r10,%rbx,8)
  0x000000011c0649e3: movzwl 0x2(%r13),%ebx
  0x000000011c0649e8: bswap  %ebx
  0x000000011c0649ea: shr    $0x10,%ebx
  0x000000011c0649ed: neg    %rbx
  0x000000011c0649f0: mov    -0x8(%r14,%rbx,8),%rax
  0x000000011c0649f5: movzbl 0x4(%r13),%ebx
  0x000000011c0649fa: add    $0x4,%r13
  0x000000011c0649fe: movabs $0x1109d5a20,%r10
  0x000000011c064a08: jmpq   *(%r10,%rbx,8)
  0x000000011c064a0c: nopl   0x0(%rax)
  0x000000011c064a10: add    %al,(%rax)
  0x000000011c064a12: add    %al,(%rax)
  0x000000011c064a14: add    %al,(%rax)
  0x000000011c064a16: add    %al,(%rax)
  0x000000011c064a18: add    %al,(%rax)
  0x000000011c064a1a: add    %al,(%rax)
  0x000000011c064a1c: add    %al,(%rax)
  0x000000011c064a1e: add    %al,(%rax)

----------------------------------------------------------------------
fload  23 fload  [0x000000011c064a40, 0x000000011c064ae0]  160 bytes

  0x000000011c064a40: push   %rax
  0x000000011c064a41: jmpq   0x000000011c064a7f
  0x000000011c064a46: sub    $0x8,%rsp
  0x000000011c064a4a: vmovss %xmm0,(%rsp)
  0x000000011c064a4f: jmpq   0x000000011c064a7f
  0x000000011c064a54: sub    $0x10,%rsp
  0x000000011c064a58: vmovsd %xmm0,(%rsp)
  0x000000011c064a5d: jmpq   0x000000011c064a7f
  0x000000011c064a62: sub    $0x10,%rsp
  0x000000011c064a66: mov    %rax,(%rsp)
  0x000000011c064a6a: movabs $0x0,%r10
  0x000000011c064a74: mov    %r10,0x8(%rsp)
  0x000000011c064a79: jmpq   0x000000011c064a7f
  0x000000011c064a7e: push   %rax
  0x000000011c064a7f: movzbl 0x1(%r13),%ebx
  0x000000011c064a84: neg    %rbx
  0x000000011c064a87: vmovss (%r14,%rbx,8),%xmm0
  0x000000011c064a8d: movzbl 0x2(%r13),%ebx
  0x000000011c064a92: add    $0x2,%r13
  0x000000011c064a96: movabs $0x1109d6220,%r10
  0x000000011c064aa0: jmpq   *(%r10,%rbx,8)
  0x000000011c064aa4: movzwl 0x2(%r13),%ebx
  0x000000011c064aa9: bswap  %ebx
  0x000000011c064aab: shr    $0x10,%ebx
  0x000000011c064aae: neg    %rbx
  0x000000011c064ab1: vmovss (%r14,%rbx,8),%xmm0
  0x000000011c064ab7: movzbl 0x4(%r13),%ebx
  0x000000011c064abc: add    $0x4,%r13
  0x000000011c064ac0: movabs $0x1109d6220,%r10
  0x000000011c064aca: jmpq   *(%r10,%rbx,8)
  0x000000011c064ace: xchg   %ax,%ax
  0x000000011c064ad0: add    %al,(%rax)
  0x000000011c064ad2: add    %al,(%rax)
  0x000000011c064ad4: add    %al,(%rax)
  0x000000011c064ad6: add    %al,(%rax)
  0x000000011c064ad8: add    %al,(%rax)
  0x000000011c064ada: add    %al,(%rax)
  0x000000011c064adc: add    %al,(%rax)
  0x000000011c064ade: add    %al,(%rax)

----------------------------------------------------------------------
dload  24 dload  [0x000000011c064b00, 0x000000011c064ba0]  160 bytes

  0x000000011c064b00: push   %rax
  0x000000011c064b01: jmpq   0x000000011c064b3f
  0x000000011c064b06: sub    $0x8,%rsp
  0x000000011c064b0a: vmovss %xmm0,(%rsp)
  0x000000011c064b0f: jmpq   0x000000011c064b3f
  0x000000011c064b14: sub    $0x10,%rsp
  0x000000011c064b18: vmovsd %xmm0,(%rsp)
  0x000000011c064b1d: jmpq   0x000000011c064b3f
  0x000000011c064b22: sub    $0x10,%rsp
  0x000000011c064b26: mov    %rax,(%rsp)
  0x000000011c064b2a: movabs $0x0,%r10
  0x000000011c064b34: mov    %r10,0x8(%rsp)
  0x000000011c064b39: jmpq   0x000000011c064b3f
  0x000000011c064b3e: push   %rax
  0x000000011c064b3f: movzbl 0x1(%r13),%ebx
  0x000000011c064b44: neg    %rbx
  0x000000011c064b47: vmovsd -0x8(%r14,%rbx,8),%xmm0
  0x000000011c064b4e: movzbl 0x2(%r13),%ebx
  0x000000011c064b53: add    $0x2,%r13
  0x000000011c064b57: movabs $0x1109d6a20,%r10
  0x000000011c064b61: jmpq   *(%r10,%rbx,8)
  0x000000011c064b65: movzwl 0x2(%r13),%ebx
  0x000000011c064b6a: bswap  %ebx
  0x000000011c064b6c: shr    $0x10,%ebx
  0x000000011c064b6f: neg    %rbx
  0x000000011c064b72: vmovsd -0x8(%r14,%rbx,8),%xmm0
  0x000000011c064b79: movzbl 0x4(%r13),%ebx
  0x000000011c064b7e: add    $0x4,%r13
  0x000000011c064b82: movabs $0x1109d6a20,%r10
  0x000000011c064b8c: jmpq   *(%r10,%rbx,8)
  0x000000011c064b90: add    %al,(%rax)
  0x000000011c064b92: add    %al,(%rax)
  0x000000011c064b94: add    %al,(%rax)
  0x000000011c064b96: add    %al,(%rax)
  0x000000011c064b98: add    %al,(%rax)
  0x000000011c064b9a: add    %al,(%rax)
  0x000000011c064b9c: add    %al,(%rax)
  0x000000011c064b9e: add    %al,(%rax)

----------------------------------------------------------------------
aload  25 aload  [0x000000011c064bc0, 0x000000011c064c60]  160 bytes

  0x000000011c064bc0: push   %rax
  0x000000011c064bc1: jmpq   0x000000011c064bff
  0x000000011c064bc6: sub    $0x8,%rsp
  0x000000011c064bca: vmovss %xmm0,(%rsp)
  0x000000011c064bcf: jmpq   0x000000011c064bff
  0x000000011c064bd4: sub    $0x10,%rsp
  0x000000011c064bd8: vmovsd %xmm0,(%rsp)
  0x000000011c064bdd: jmpq   0x000000011c064bff
  0x000000011c064be2: sub    $0x10,%rsp
  0x000000011c064be6: mov    %rax,(%rsp)
  0x000000011c064bea: movabs $0x0,%r10
  0x000000011c064bf4: mov    %r10,0x8(%rsp)
  0x000000011c064bf9: jmpq   0x000000011c064bff
  0x000000011c064bfe: push   %rax
  0x000000011c064bff: movzbl 0x1(%r13),%ebx
  0x000000011c064c04: neg    %rbx
  0x000000011c064c07: mov    (%r14,%rbx,8),%rax
  0x000000011c064c0b: movzbl 0x2(%r13),%ebx
  0x000000011c064c10: add    $0x2,%r13
  0x000000011c064c14: movabs $0x1109d7220,%r10
  0x000000011c064c1e: jmpq   *(%r10,%rbx,8)
  0x000000011c064c22: movzwl 0x2(%r13),%ebx
  0x000000011c064c27: bswap  %ebx
  0x000000011c064c29: shr    $0x10,%ebx
  0x000000011c064c2c: neg    %rbx
  0x000000011c064c2f: mov    (%r14,%rbx,8),%rax
  0x000000011c064c33: movzbl 0x4(%r13),%ebx
  0x000000011c064c38: add    $0x4,%r13
  0x000000011c064c3c: movabs $0x1109d7220,%r10
  0x000000011c064c46: jmpq   *(%r10,%rbx,8)
  0x000000011c064c4a: nopw   0x0(%rax,%rax,1)
  0x000000011c064c50: add    %al,(%rax)
  0x000000011c064c52: add    %al,(%rax)
  0x000000011c064c54: add    %al,(%rax)
  0x000000011c064c56: add    %al,(%rax)
  0x000000011c064c58: add    %al,(%rax)
  0x000000011c064c5a: add    %al,(%rax)
  0x000000011c064c5c: add    %al,(%rax)
  0x000000011c064c5e: add    %al,(%rax)

----------------------------------------------------------------------
iload_0  26 iload_0  [0x000000011c064c80, 0x000000011c064ce0]  96 bytes

  0x000000011c064c80: push   %rax
  0x000000011c064c81: jmpq   0x000000011c064cbf
  0x000000011c064c86: sub    $0x8,%rsp
  0x000000011c064c8a: vmovss %xmm0,(%rsp)
  0x000000011c064c8f: jmpq   0x000000011c064cbf
  0x000000011c064c94: sub    $0x10,%rsp
  0x000000011c064c98: vmovsd %xmm0,(%rsp)
  0x000000011c064c9d: jmpq   0x000000011c064cbf
  0x000000011c064ca2: sub    $0x10,%rsp
  0x000000011c064ca6: mov    %rax,(%rsp)
  0x000000011c064caa: movabs $0x0,%r10
  0x000000011c064cb4: mov    %r10,0x8(%rsp)
  0x000000011c064cb9: jmpq   0x000000011c064cbf
  0x000000011c064cbe: push   %rax
  0x000000011c064cbf: mov    (%r14),%eax
  0x000000011c064cc2: movzbl 0x1(%r13),%ebx
  0x000000011c064cc7: inc    %r13
  0x000000011c064cca: movabs $0x1109d5220,%r10
  0x000000011c064cd4: jmpq   *(%r10,%rbx,8)
  0x000000011c064cd8: add    %al,(%rax)
  0x000000011c064cda: add    %al,(%rax)
  0x000000011c064cdc: add    %al,(%rax)
  0x000000011c064cde: add    %al,(%rax)

----------------------------------------------------------------------
iload_1  27 iload_1  [0x000000011c064d00, 0x000000011c064d60]  96 bytes

  0x000000011c064d00: push   %rax
  0x000000011c064d01: jmpq   0x000000011c064d3f
  0x000000011c064d06: sub    $0x8,%rsp
  0x000000011c064d0a: vmovss %xmm0,(%rsp)
  0x000000011c064d0f: jmpq   0x000000011c064d3f
  0x000000011c064d14: sub    $0x10,%rsp
  0x000000011c064d18: vmovsd %xmm0,(%rsp)
  0x000000011c064d1d: jmpq   0x000000011c064d3f
  0x000000011c064d22: sub    $0x10,%rsp
  0x000000011c064d26: mov    %rax,(%rsp)
  0x000000011c064d2a: movabs $0x0,%r10
  0x000000011c064d34: mov    %r10,0x8(%rsp)
  0x000000011c064d39: jmpq   0x000000011c064d3f
  0x000000011c064d3e: push   %rax
  0x000000011c064d3f: mov    -0x8(%r14),%eax
  0x000000011c064d43: movzbl 0x1(%r13),%ebx
  0x000000011c064d48: inc    %r13
  0x000000011c064d4b: movabs $0x1109d5220,%r10
  0x000000011c064d55: jmpq   *(%r10,%rbx,8)
  0x000000011c064d59: nopl   0x0(%rax)

----------------------------------------------------------------------
iload_2  28 iload_2  [0x000000011c064d80, 0x000000011c064de0]  96 bytes

  0x000000011c064d80: push   %rax
  0x000000011c064d81: jmpq   0x000000011c064dbf
  0x000000011c064d86: sub    $0x8,%rsp
  0x000000011c064d8a: vmovss %xmm0,(%rsp)
  0x000000011c064d8f: jmpq   0x000000011c064dbf
  0x000000011c064d94: sub    $0x10,%rsp
  0x000000011c064d98: vmovsd %xmm0,(%rsp)
  0x000000011c064d9d: jmpq   0x000000011c064dbf
  0x000000011c064da2: sub    $0x10,%rsp
  0x000000011c064da6: mov    %rax,(%rsp)
  0x000000011c064daa: movabs $0x0,%r10
  0x000000011c064db4: mov    %r10,0x8(%rsp)
  0x000000011c064db9: jmpq   0x000000011c064dbf
  0x000000011c064dbe: push   %rax
  0x000000011c064dbf: mov    -0x10(%r14),%eax
  0x000000011c064dc3: movzbl 0x1(%r13),%ebx
  0x000000011c064dc8: inc    %r13
  0x000000011c064dcb: movabs $0x1109d5220,%r10
  0x000000011c064dd5: jmpq   *(%r10,%rbx,8)
  0x000000011c064dd9: nopl   0x0(%rax)

----------------------------------------------------------------------
iload_3  29 iload_3  [0x000000011c064e00, 0x000000011c064e60]  96 bytes

  0x000000011c064e00: push   %rax
  0x000000011c064e01: jmpq   0x000000011c064e3f
  0x000000011c064e06: sub    $0x8,%rsp
  0x000000011c064e0a: vmovss %xmm0,(%rsp)
  0x000000011c064e0f: jmpq   0x000000011c064e3f
  0x000000011c064e14: sub    $0x10,%rsp
  0x000000011c064e18: vmovsd %xmm0,(%rsp)
  0x000000011c064e1d: jmpq   0x000000011c064e3f
  0x000000011c064e22: sub    $0x10,%rsp
  0x000000011c064e26: mov    %rax,(%rsp)
  0x000000011c064e2a: movabs $0x0,%r10
  0x000000011c064e34: mov    %r10,0x8(%rsp)
  0x000000011c064e39: jmpq   0x000000011c064e3f
  0x000000011c064e3e: push   %rax
  0x000000011c064e3f: mov    -0x18(%r14),%eax
  0x000000011c064e43: movzbl 0x1(%r13),%ebx
  0x000000011c064e48: inc    %r13
  0x000000011c064e4b: movabs $0x1109d5220,%r10
  0x000000011c064e55: jmpq   *(%r10,%rbx,8)
  0x000000011c064e59: nopl   0x0(%rax)

----------------------------------------------------------------------
lload_0  30 lload_0  [0x000000011c064e80, 0x000000011c064ee0]  96 bytes

  0x000000011c064e80: push   %rax
  0x000000011c064e81: jmpq   0x000000011c064ebf
  0x000000011c064e86: sub    $0x8,%rsp
  0x000000011c064e8a: vmovss %xmm0,(%rsp)
  0x000000011c064e8f: jmpq   0x000000011c064ebf
  0x000000011c064e94: sub    $0x10,%rsp
  0x000000011c064e98: vmovsd %xmm0,(%rsp)
  0x000000011c064e9d: jmpq   0x000000011c064ebf
  0x000000011c064ea2: sub    $0x10,%rsp
  0x000000011c064ea6: mov    %rax,(%rsp)
  0x000000011c064eaa: movabs $0x0,%r10
  0x000000011c064eb4: mov    %r10,0x8(%rsp)
  0x000000011c064eb9: jmpq   0x000000011c064ebf
  0x000000011c064ebe: push   %rax
  0x000000011c064ebf: mov    -0x8(%r14),%rax
  0x000000011c064ec3: movzbl 0x1(%r13),%ebx
  0x000000011c064ec8: inc    %r13
  0x000000011c064ecb: movabs $0x1109d5a20,%r10
  0x000000011c064ed5: jmpq   *(%r10,%rbx,8)
  0x000000011c064ed9: nopl   0x0(%rax)

----------------------------------------------------------------------
lload_1  31 lload_1  [0x000000011c064f00, 0x000000011c064f60]  96 bytes

  0x000000011c064f00: push   %rax
  0x000000011c064f01: jmpq   0x000000011c064f3f
  0x000000011c064f06: sub    $0x8,%rsp
  0x000000011c064f0a: vmovss %xmm0,(%rsp)
  0x000000011c064f0f: jmpq   0x000000011c064f3f
  0x000000011c064f14: sub    $0x10,%rsp
  0x000000011c064f18: vmovsd %xmm0,(%rsp)
  0x000000011c064f1d: jmpq   0x000000011c064f3f
  0x000000011c064f22: sub    $0x10,%rsp
  0x000000011c064f26: mov    %rax,(%rsp)
  0x000000011c064f2a: movabs $0x0,%r10
  0x000000011c064f34: mov    %r10,0x8(%rsp)
  0x000000011c064f39: jmpq   0x000000011c064f3f
  0x000000011c064f3e: push   %rax
  0x000000011c064f3f: mov    -0x10(%r14),%rax
  0x000000011c064f43: movzbl 0x1(%r13),%ebx
  0x000000011c064f48: inc    %r13
  0x000000011c064f4b: movabs $0x1109d5a20,%r10
  0x000000011c064f55: jmpq   *(%r10,%rbx,8)
  0x000000011c064f59: nopl   0x0(%rax)

----------------------------------------------------------------------
lload_2  32 lload_2  [0x000000011c064f80, 0x000000011c064fe0]  96 bytes

  0x000000011c064f80: push   %rax
  0x000000011c064f81: jmpq   0x000000011c064fbf
  0x000000011c064f86: sub    $0x8,%rsp
  0x000000011c064f8a: vmovss %xmm0,(%rsp)
  0x000000011c064f8f: jmpq   0x000000011c064fbf
  0x000000011c064f94: sub    $0x10,%rsp
  0x000000011c064f98: vmovsd %xmm0,(%rsp)
  0x000000011c064f9d: jmpq   0x000000011c064fbf
  0x000000011c064fa2: sub    $0x10,%rsp
  0x000000011c064fa6: mov    %rax,(%rsp)
  0x000000011c064faa: movabs $0x0,%r10
  0x000000011c064fb4: mov    %r10,0x8(%rsp)
  0x000000011c064fb9: jmpq   0x000000011c064fbf
  0x000000011c064fbe: push   %rax
  0x000000011c064fbf: mov    -0x18(%r14),%rax
  0x000000011c064fc3: movzbl 0x1(%r13),%ebx
  0x000000011c064fc8: inc    %r13
  0x000000011c064fcb: movabs $0x1109d5a20,%r10
  0x000000011c064fd5: jmpq   *(%r10,%rbx,8)
  0x000000011c064fd9: nopl   0x0(%rax)

----------------------------------------------------------------------
lload_3  33 lload_3  [0x000000011c065000, 0x000000011c065060]  96 bytes

  0x000000011c065000: push   %rax
  0x000000011c065001: jmpq   0x000000011c06503f
  0x000000011c065006: sub    $0x8,%rsp
  0x000000011c06500a: vmovss %xmm0,(%rsp)
  0x000000011c06500f: jmpq   0x000000011c06503f
  0x000000011c065014: sub    $0x10,%rsp
  0x000000011c065018: vmovsd %xmm0,(%rsp)
  0x000000011c06501d: jmpq   0x000000011c06503f
  0x000000011c065022: sub    $0x10,%rsp
  0x000000011c065026: mov    %rax,(%rsp)
  0x000000011c06502a: movabs $0x0,%r10
  0x000000011c065034: mov    %r10,0x8(%rsp)
  0x000000011c065039: jmpq   0x000000011c06503f
  0x000000011c06503e: push   %rax
  0x000000011c06503f: mov    -0x20(%r14),%rax
  0x000000011c065043: movzbl 0x1(%r13),%ebx
  0x000000011c065048: inc    %r13
  0x000000011c06504b: movabs $0x1109d5a20,%r10
  0x000000011c065055: jmpq   *(%r10,%rbx,8)
  0x000000011c065059: nopl   0x0(%rax)

----------------------------------------------------------------------
fload_0  34 fload_0  [0x000000011c065080, 0x000000011c0650e0]  96 bytes

  0x000000011c065080: push   %rax
  0x000000011c065081: jmpq   0x000000011c0650bf
  0x000000011c065086: sub    $0x8,%rsp
  0x000000011c06508a: vmovss %xmm0,(%rsp)
  0x000000011c06508f: jmpq   0x000000011c0650bf
  0x000000011c065094: sub    $0x10,%rsp
  0x000000011c065098: vmovsd %xmm0,(%rsp)
  0x000000011c06509d: jmpq   0x000000011c0650bf
  0x000000011c0650a2: sub    $0x10,%rsp
  0x000000011c0650a6: mov    %rax,(%rsp)
  0x000000011c0650aa: movabs $0x0,%r10
  0x000000011c0650b4: mov    %r10,0x8(%rsp)
  0x000000011c0650b9: jmpq   0x000000011c0650bf
  0x000000011c0650be: push   %rax
  0x000000011c0650bf: vmovss (%r14),%xmm0
  0x000000011c0650c4: movzbl 0x1(%r13),%ebx
  0x000000011c0650c9: inc    %r13
  0x000000011c0650cc: movabs $0x1109d6220,%r10
  0x000000011c0650d6: jmpq   *(%r10,%rbx,8)
  0x000000011c0650da: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
fload_1  35 fload_1  [0x000000011c065100, 0x000000011c065160]  96 bytes

  0x000000011c065100: push   %rax
  0x000000011c065101: jmpq   0x000000011c06513f
  0x000000011c065106: sub    $0x8,%rsp
  0x000000011c06510a: vmovss %xmm0,(%rsp)
  0x000000011c06510f: jmpq   0x000000011c06513f
  0x000000011c065114: sub    $0x10,%rsp
  0x000000011c065118: vmovsd %xmm0,(%rsp)
  0x000000011c06511d: jmpq   0x000000011c06513f
  0x000000011c065122: sub    $0x10,%rsp
  0x000000011c065126: mov    %rax,(%rsp)
  0x000000011c06512a: movabs $0x0,%r10
  0x000000011c065134: mov    %r10,0x8(%rsp)
  0x000000011c065139: jmpq   0x000000011c06513f
  0x000000011c06513e: push   %rax
  0x000000011c06513f: vmovss -0x8(%r14),%xmm0
  0x000000011c065145: movzbl 0x1(%r13),%ebx
  0x000000011c06514a: inc    %r13
  0x000000011c06514d: movabs $0x1109d6220,%r10
  0x000000011c065157: jmpq   *(%r10,%rbx,8)
  0x000000011c06515b: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
fload_2  36 fload_2  [0x000000011c065180, 0x000000011c0651e0]  96 bytes

  0x000000011c065180: push   %rax
  0x000000011c065181: jmpq   0x000000011c0651bf
  0x000000011c065186: sub    $0x8,%rsp
  0x000000011c06518a: vmovss %xmm0,(%rsp)
  0x000000011c06518f: jmpq   0x000000011c0651bf
  0x000000011c065194: sub    $0x10,%rsp
  0x000000011c065198: vmovsd %xmm0,(%rsp)
  0x000000011c06519d: jmpq   0x000000011c0651bf
  0x000000011c0651a2: sub    $0x10,%rsp
  0x000000011c0651a6: mov    %rax,(%rsp)
  0x000000011c0651aa: movabs $0x0,%r10
  0x000000011c0651b4: mov    %r10,0x8(%rsp)
  0x000000011c0651b9: jmpq   0x000000011c0651bf
  0x000000011c0651be: push   %rax
  0x000000011c0651bf: vmovss -0x10(%r14),%xmm0
  0x000000011c0651c5: movzbl 0x1(%r13),%ebx
  0x000000011c0651ca: inc    %r13
  0x000000011c0651cd: movabs $0x1109d6220,%r10
  0x000000011c0651d7: jmpq   *(%r10,%rbx,8)
  0x000000011c0651db: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
fload_3  37 fload_3  [0x000000011c065200, 0x000000011c065260]  96 bytes

  0x000000011c065200: push   %rax
  0x000000011c065201: jmpq   0x000000011c06523f
  0x000000011c065206: sub    $0x8,%rsp
  0x000000011c06520a: vmovss %xmm0,(%rsp)
  0x000000011c06520f: jmpq   0x000000011c06523f
  0x000000011c065214: sub    $0x10,%rsp
  0x000000011c065218: vmovsd %xmm0,(%rsp)
  0x000000011c06521d: jmpq   0x000000011c06523f
  0x000000011c065222: sub    $0x10,%rsp
  0x000000011c065226: mov    %rax,(%rsp)
  0x000000011c06522a: movabs $0x0,%r10
  0x000000011c065234: mov    %r10,0x8(%rsp)
  0x000000011c065239: jmpq   0x000000011c06523f
  0x000000011c06523e: push   %rax
  0x000000011c06523f: vmovss -0x18(%r14),%xmm0
  0x000000011c065245: movzbl 0x1(%r13),%ebx
  0x000000011c06524a: inc    %r13
  0x000000011c06524d: movabs $0x1109d6220,%r10
  0x000000011c065257: jmpq   *(%r10,%rbx,8)
  0x000000011c06525b: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
dload_0  38 dload_0  [0x000000011c065280, 0x000000011c0652e0]  96 bytes

  0x000000011c065280: push   %rax
  0x000000011c065281: jmpq   0x000000011c0652bf
  0x000000011c065286: sub    $0x8,%rsp
  0x000000011c06528a: vmovss %xmm0,(%rsp)
  0x000000011c06528f: jmpq   0x000000011c0652bf
  0x000000011c065294: sub    $0x10,%rsp
  0x000000011c065298: vmovsd %xmm0,(%rsp)
  0x000000011c06529d: jmpq   0x000000011c0652bf
  0x000000011c0652a2: sub    $0x10,%rsp
  0x000000011c0652a6: mov    %rax,(%rsp)
  0x000000011c0652aa: movabs $0x0,%r10
  0x000000011c0652b4: mov    %r10,0x8(%rsp)
  0x000000011c0652b9: jmpq   0x000000011c0652bf
  0x000000011c0652be: push   %rax
  0x000000011c0652bf: vmovsd -0x8(%r14),%xmm0
  0x000000011c0652c5: movzbl 0x1(%r13),%ebx
  0x000000011c0652ca: inc    %r13
  0x000000011c0652cd: movabs $0x1109d6a20,%r10
  0x000000011c0652d7: jmpq   *(%r10,%rbx,8)
  0x000000011c0652db: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
dload_1  39 dload_1  [0x000000011c065300, 0x000000011c065360]  96 bytes

  0x000000011c065300: push   %rax
  0x000000011c065301: jmpq   0x000000011c06533f
  0x000000011c065306: sub    $0x8,%rsp
  0x000000011c06530a: vmovss %xmm0,(%rsp)
  0x000000011c06530f: jmpq   0x000000011c06533f
  0x000000011c065314: sub    $0x10,%rsp
  0x000000011c065318: vmovsd %xmm0,(%rsp)
  0x000000011c06531d: jmpq   0x000000011c06533f
  0x000000011c065322: sub    $0x10,%rsp
  0x000000011c065326: mov    %rax,(%rsp)
  0x000000011c06532a: movabs $0x0,%r10
  0x000000011c065334: mov    %r10,0x8(%rsp)
  0x000000011c065339: jmpq   0x000000011c06533f
  0x000000011c06533e: push   %rax
  0x000000011c06533f: vmovsd -0x10(%r14),%xmm0
  0x000000011c065345: movzbl 0x1(%r13),%ebx
  0x000000011c06534a: inc    %r13
  0x000000011c06534d: movabs $0x1109d6a20,%r10
  0x000000011c065357: jmpq   *(%r10,%rbx,8)
  0x000000011c06535b: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
dload_2  40 dload_2  [0x000000011c065380, 0x000000011c0653e0]  96 bytes

  0x000000011c065380: push   %rax
  0x000000011c065381: jmpq   0x000000011c0653bf
  0x000000011c065386: sub    $0x8,%rsp
  0x000000011c06538a: vmovss %xmm0,(%rsp)
  0x000000011c06538f: jmpq   0x000000011c0653bf
  0x000000011c065394: sub    $0x10,%rsp
  0x000000011c065398: vmovsd %xmm0,(%rsp)
  0x000000011c06539d: jmpq   0x000000011c0653bf
  0x000000011c0653a2: sub    $0x10,%rsp
  0x000000011c0653a6: mov    %rax,(%rsp)
  0x000000011c0653aa: movabs $0x0,%r10
  0x000000011c0653b4: mov    %r10,0x8(%rsp)
  0x000000011c0653b9: jmpq   0x000000011c0653bf
  0x000000011c0653be: push   %rax
  0x000000011c0653bf: vmovsd -0x18(%r14),%xmm0
  0x000000011c0653c5: movzbl 0x1(%r13),%ebx
  0x000000011c0653ca: inc    %r13
  0x000000011c0653cd: movabs $0x1109d6a20,%r10
  0x000000011c0653d7: jmpq   *(%r10,%rbx,8)
  0x000000011c0653db: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
dload_3  41 dload_3  [0x000000011c065400, 0x000000011c065460]  96 bytes

  0x000000011c065400: push   %rax
  0x000000011c065401: jmpq   0x000000011c06543f
  0x000000011c065406: sub    $0x8,%rsp
  0x000000011c06540a: vmovss %xmm0,(%rsp)
  0x000000011c06540f: jmpq   0x000000011c06543f
  0x000000011c065414: sub    $0x10,%rsp
  0x000000011c065418: vmovsd %xmm0,(%rsp)
  0x000000011c06541d: jmpq   0x000000011c06543f
  0x000000011c065422: sub    $0x10,%rsp
  0x000000011c065426: mov    %rax,(%rsp)
  0x000000011c06542a: movabs $0x0,%r10
  0x000000011c065434: mov    %r10,0x8(%rsp)
  0x000000011c065439: jmpq   0x000000011c06543f
  0x000000011c06543e: push   %rax
  0x000000011c06543f: vmovsd -0x20(%r14),%xmm0
  0x000000011c065445: movzbl 0x1(%r13),%ebx
  0x000000011c06544a: inc    %r13
  0x000000011c06544d: movabs $0x1109d6a20,%r10
  0x000000011c065457: jmpq   *(%r10,%rbx,8)
  0x000000011c06545b: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
aload_0  42 aload_0  [0x000000011c065480, 0x000000011c065520]  160 bytes

  0x000000011c065480: push   %rax
  0x000000011c065481: jmpq   0x000000011c0654bf
  0x000000011c065486: sub    $0x8,%rsp
  0x000000011c06548a: vmovss %xmm0,(%rsp)
  0x000000011c06548f: jmpq   0x000000011c0654bf
  0x000000011c065494: sub    $0x10,%rsp
  0x000000011c065498: vmovsd %xmm0,(%rsp)
  0x000000011c06549d: jmpq   0x000000011c0654bf
  0x000000011c0654a2: sub    $0x10,%rsp
  0x000000011c0654a6: mov    %rax,(%rsp)
  0x000000011c0654aa: movabs $0x0,%r10
  0x000000011c0654b4: mov    %r10,0x8(%rsp)
  0x000000011c0654b9: jmpq   0x000000011c0654bf
  0x000000011c0654be: push   %rax
  0x000000011c0654bf: movzbl 0x1(%r13),%ebx
  0x000000011c0654c4: cmp    $0xb4,%ebx
  0x000000011c0654ca: je     0x000000011c065500
  0x000000011c0654d0: cmp    $0xd0,%ebx
  0x000000011c0654d6: mov    $0xdd,%ecx
  0x000000011c0654db: je     0x000000011c0654fc
  0x000000011c0654dd: cmp    $0xcb,%ebx
  0x000000011c0654e3: mov    $0xde,%ecx
  0x000000011c0654e8: je     0x000000011c0654fc
  0x000000011c0654ea: cmp    $0xcf,%ebx
  0x000000011c0654f0: mov    $0xdf,%ecx
  0x000000011c0654f5: je     0x000000011c0654fc
  0x000000011c0654f7: mov    $0xdc,%ecx
  0x000000011c0654fc: mov    %cl,0x0(%r13)
  0x000000011c065500: mov    (%r14),%rax
  0x000000011c065503: movzbl 0x1(%r13),%ebx
  0x000000011c065508: inc    %r13
  0x000000011c06550b: movabs $0x1109d7220,%r10
  0x000000011c065515: jmpq   *(%r10,%rbx,8)
  0x000000011c065519: nopl   0x0(%rax)

----------------------------------------------------------------------
aload_1  43 aload_1  [0x000000011c065540, 0x000000011c0655a0]  96 bytes

  0x000000011c065540: push   %rax
  0x000000011c065541: jmpq   0x000000011c06557f
  0x000000011c065546: sub    $0x8,%rsp
  0x000000011c06554a: vmovss %xmm0,(%rsp)
  0x000000011c06554f: jmpq   0x000000011c06557f
  0x000000011c065554: sub    $0x10,%rsp
  0x000000011c065558: vmovsd %xmm0,(%rsp)
  0x000000011c06555d: jmpq   0x000000011c06557f
  0x000000011c065562: sub    $0x10,%rsp
  0x000000011c065566: mov    %rax,(%rsp)
  0x000000011c06556a: movabs $0x0,%r10
  0x000000011c065574: mov    %r10,0x8(%rsp)
  0x000000011c065579: jmpq   0x000000011c06557f
  0x000000011c06557e: push   %rax
  0x000000011c06557f: mov    -0x8(%r14),%rax
  0x000000011c065583: movzbl 0x1(%r13),%ebx
  0x000000011c065588: inc    %r13
  0x000000011c06558b: movabs $0x1109d7220,%r10
  0x000000011c065595: jmpq   *(%r10,%rbx,8)
  0x000000011c065599: nopl   0x0(%rax)

----------------------------------------------------------------------
aload_2  44 aload_2  [0x000000011c0655c0, 0x000000011c065620]  96 bytes

  0x000000011c0655c0: push   %rax
  0x000000011c0655c1: jmpq   0x000000011c0655ff
  0x000000011c0655c6: sub    $0x8,%rsp
  0x000000011c0655ca: vmovss %xmm0,(%rsp)
  0x000000011c0655cf: jmpq   0x000000011c0655ff
  0x000000011c0655d4: sub    $0x10,%rsp
  0x000000011c0655d8: vmovsd %xmm0,(%rsp)
  0x000000011c0655dd: jmpq   0x000000011c0655ff
  0x000000011c0655e2: sub    $0x10,%rsp
  0x000000011c0655e6: mov    %rax,(%rsp)
  0x000000011c0655ea: movabs $0x0,%r10
  0x000000011c0655f4: mov    %r10,0x8(%rsp)
  0x000000011c0655f9: jmpq   0x000000011c0655ff
  0x000000011c0655fe: push   %rax
  0x000000011c0655ff: mov    -0x10(%r14),%rax
  0x000000011c065603: movzbl 0x1(%r13),%ebx
  0x000000011c065608: inc    %r13
  0x000000011c06560b: movabs $0x1109d7220,%r10
  0x000000011c065615: jmpq   *(%r10,%rbx,8)
  0x000000011c065619: nopl   0x0(%rax)

----------------------------------------------------------------------
aload_3  45 aload_3  [0x000000011c065640, 0x000000011c0656a0]  96 bytes

  0x000000011c065640: push   %rax
  0x000000011c065641: jmpq   0x000000011c06567f
  0x000000011c065646: sub    $0x8,%rsp
  0x000000011c06564a: vmovss %xmm0,(%rsp)
  0x000000011c06564f: jmpq   0x000000011c06567f
  0x000000011c065654: sub    $0x10,%rsp
  0x000000011c065658: vmovsd %xmm0,(%rsp)
  0x000000011c06565d: jmpq   0x000000011c06567f
  0x000000011c065662: sub    $0x10,%rsp
  0x000000011c065666: mov    %rax,(%rsp)
  0x000000011c06566a: movabs $0x0,%r10
  0x000000011c065674: mov    %r10,0x8(%rsp)
  0x000000011c065679: jmpq   0x000000011c06567f
  0x000000011c06567e: push   %rax
  0x000000011c06567f: mov    -0x18(%r14),%rax
  0x000000011c065683: movzbl 0x1(%r13),%ebx
  0x000000011c065688: inc    %r13
  0x000000011c06568b: movabs $0x1109d7220,%r10
  0x000000011c065695: jmpq   *(%r10,%rbx,8)
  0x000000011c065699: nopl   0x0(%rax)

----------------------------------------------------------------------
iaload  46 iaload  [0x000000011c0656c0, 0x000000011c065700]  64 bytes

  0x000000011c0656c0: mov    (%rsp),%eax
  0x000000011c0656c3: add    $0x8,%rsp
  0x000000011c0656c7: pop    %rdx
  0x000000011c0656c8: movslq %eax,%rax
  0x000000011c0656cb: cmp    0xc(%rdx),%eax
  0x000000011c0656ce: mov    %eax,%ebx
  0x000000011c0656d0: jb     0x000000011c0656da
  0x000000011c0656d2: mov    %rdx,%rsi
  0x000000011c0656d5: jmpq   0x000000011c061540
  0x000000011c0656da: mov    0x10(%rdx,%rax,4),%eax
  0x000000011c0656de: movzbl 0x1(%r13),%ebx
  0x000000011c0656e3: inc    %r13
  0x000000011c0656e6: movabs $0x1109d5220,%r10
  0x000000011c0656f0: jmpq   *(%r10,%rbx,8)
  0x000000011c0656f4: nopl   0x0(%rax)
  0x000000011c0656f8: add    %al,(%rax)
  0x000000011c0656fa: add    %al,(%rax)
  0x000000011c0656fc: add    %al,(%rax)
  0x000000011c0656fe: add    %al,(%rax)

----------------------------------------------------------------------
laload  47 laload  [0x000000011c065720, 0x000000011c065760]  64 bytes

  0x000000011c065720: mov    (%rsp),%eax
  0x000000011c065723: add    $0x8,%rsp
  0x000000011c065727: pop    %rdx
  0x000000011c065728: movslq %eax,%rax
  0x000000011c06572b: cmp    0xc(%rdx),%eax
  0x000000011c06572e: mov    %eax,%ebx
  0x000000011c065730: jb     0x000000011c06573a
  0x000000011c065732: mov    %rdx,%rsi
  0x000000011c065735: jmpq   0x000000011c061540
  0x000000011c06573a: mov    0x10(%rdx,%rbx,8),%rax
  0x000000011c06573f: movzbl 0x1(%r13),%ebx
  0x000000011c065744: inc    %r13
  0x000000011c065747: movabs $0x1109d5a20,%r10
  0x000000011c065751: jmpq   *(%r10,%rbx,8)
  0x000000011c065755: data16 xchg %ax,%ax
  0x000000011c065758: add    %al,(%rax)
  0x000000011c06575a: add    %al,(%rax)
  0x000000011c06575c: add    %al,(%rax)
  0x000000011c06575e: add    %al,(%rax)

----------------------------------------------------------------------
faload  48 faload  [0x000000011c065780, 0x000000011c0657c0]  64 bytes

  0x000000011c065780: mov    (%rsp),%eax
  0x000000011c065783: add    $0x8,%rsp
  0x000000011c065787: pop    %rdx
  0x000000011c065788: movslq %eax,%rax
  0x000000011c06578b: cmp    0xc(%rdx),%eax
  0x000000011c06578e: mov    %eax,%ebx
  0x000000011c065790: jb     0x000000011c06579a
  0x000000011c065792: mov    %rdx,%rsi
  0x000000011c065795: jmpq   0x000000011c061540
  0x000000011c06579a: vmovss 0x10(%rdx,%rax,4),%xmm0
  0x000000011c0657a0: movzbl 0x1(%r13),%ebx
  0x000000011c0657a5: inc    %r13
  0x000000011c0657a8: movabs $0x1109d6220,%r10
  0x000000011c0657b2: jmpq   *(%r10,%rbx,8)
  0x000000011c0657b6: xchg   %ax,%ax
  0x000000011c0657b8: add    %al,(%rax)
  0x000000011c0657ba: add    %al,(%rax)
  0x000000011c0657bc: add    %al,(%rax)
  0x000000011c0657be: add    %al,(%rax)

----------------------------------------------------------------------
daload  49 daload  [0x000000011c0657e0, 0x000000011c065820]  64 bytes

  0x000000011c0657e0: mov    (%rsp),%eax
  0x000000011c0657e3: add    $0x8,%rsp
  0x000000011c0657e7: pop    %rdx
  0x000000011c0657e8: movslq %eax,%rax
  0x000000011c0657eb: cmp    0xc(%rdx),%eax
  0x000000011c0657ee: mov    %eax,%ebx
  0x000000011c0657f0: jb     0x000000011c0657fa
  0x000000011c0657f2: mov    %rdx,%rsi
  0x000000011c0657f5: jmpq   0x000000011c061540
  0x000000011c0657fa: vmovsd 0x10(%rdx,%rax,8),%xmm0
  0x000000011c065800: movzbl 0x1(%r13),%ebx
  0x000000011c065805: inc    %r13
  0x000000011c065808: movabs $0x1109d6a20,%r10
  0x000000011c065812: jmpq   *(%r10,%rbx,8)
  0x000000011c065816: xchg   %ax,%ax
  0x000000011c065818: add    %al,(%rax)
  0x000000011c06581a: add    %al,(%rax)
  0x000000011c06581c: add    %al,(%rax)
  0x000000011c06581e: add    %al,(%rax)

----------------------------------------------------------------------
aaload  50 aaload  [0x000000011c065840, 0x000000011c065880]  64 bytes

  0x000000011c065840: mov    (%rsp),%eax
  0x000000011c065843: add    $0x8,%rsp
  0x000000011c065847: pop    %rdx
  0x000000011c065848: movslq %eax,%rax
  0x000000011c06584b: cmp    0xc(%rdx),%eax
  0x000000011c06584e: mov    %eax,%ebx
  0x000000011c065850: jb     0x000000011c06585a
  0x000000011c065852: mov    %rdx,%rsi
  0x000000011c065855: jmpq   0x000000011c061540
  0x000000011c06585a: mov    0x10(%rdx,%rax,4),%eax
  0x000000011c06585e: shl    $0x3,%rax
  0x000000011c065862: movzbl 0x1(%r13),%ebx
  0x000000011c065867: inc    %r13
  0x000000011c06586a: movabs $0x1109d7220,%r10
  0x000000011c065874: jmpq   *(%r10,%rbx,8)
  0x000000011c065878: add    %al,(%rax)
  0x000000011c06587a: add    %al,(%rax)
  0x000000011c06587c: add    %al,(%rax)
  0x000000011c06587e: add    %al,(%rax)

----------------------------------------------------------------------
baload  51 baload  [0x000000011c0658a0, 0x000000011c0658e0]  64 bytes

  0x000000011c0658a0: mov    (%rsp),%eax
  0x000000011c0658a3: add    $0x8,%rsp
  0x000000011c0658a7: pop    %rdx
  0x000000011c0658a8: movslq %eax,%rax
  0x000000011c0658ab: cmp    0xc(%rdx),%eax
  0x000000011c0658ae: mov    %eax,%ebx
  0x000000011c0658b0: jb     0x000000011c0658ba
  0x000000011c0658b2: mov    %rdx,%rsi
  0x000000011c0658b5: jmpq   0x000000011c061540
  0x000000011c0658ba: movsbl 0x10(%rdx,%rax,1),%eax
  0x000000011c0658bf: movzbl 0x1(%r13),%ebx
  0x000000011c0658c4: inc    %r13
  0x000000011c0658c7: movabs $0x1109d5220,%r10
  0x000000011c0658d1: jmpq   *(%r10,%rbx,8)
  0x000000011c0658d5: data16 xchg %ax,%ax
  0x000000011c0658d8: add    %al,(%rax)
  0x000000011c0658da: add    %al,(%rax)
  0x000000011c0658dc: add    %al,(%rax)
  0x000000011c0658de: add    %al,(%rax)

----------------------------------------------------------------------
caload  52 caload  [0x000000011c065900, 0x000000011c065940]  64 bytes

  0x000000011c065900: mov    (%rsp),%eax
  0x000000011c065903: add    $0x8,%rsp
  0x000000011c065907: pop    %rdx
  0x000000011c065908: movslq %eax,%rax
  0x000000011c06590b: cmp    0xc(%rdx),%eax
  0x000000011c06590e: mov    %eax,%ebx
  0x000000011c065910: jb     0x000000011c06591a
  0x000000011c065912: mov    %rdx,%rsi
  0x000000011c065915: jmpq   0x000000011c061540
  0x000000011c06591a: movzwl 0x10(%rdx,%rax,2),%eax
  0x000000011c06591f: movzbl 0x1(%r13),%ebx
  0x000000011c065924: inc    %r13
  0x000000011c065927: movabs $0x1109d5220,%r10
  0x000000011c065931: jmpq   *(%r10,%rbx,8)
  0x000000011c065935: data16 xchg %ax,%ax
  0x000000011c065938: add    %al,(%rax)
  0x000000011c06593a: add    %al,(%rax)
  0x000000011c06593c: add    %al,(%rax)
  0x000000011c06593e: add    %al,(%rax)

----------------------------------------------------------------------
saload  53 saload  [0x000000011c065960, 0x000000011c0659a0]  64 bytes

  0x000000011c065960: mov    (%rsp),%eax
  0x000000011c065963: add    $0x8,%rsp
  0x000000011c065967: pop    %rdx
  0x000000011c065968: movslq %eax,%rax
  0x000000011c06596b: cmp    0xc(%rdx),%eax
  0x000000011c06596e: mov    %eax,%ebx
  0x000000011c065970: jb     0x000000011c06597a
  0x000000011c065972: mov    %rdx,%rsi
  0x000000011c065975: jmpq   0x000000011c061540
  0x000000011c06597a: movswl 0x10(%rdx,%rax,2),%eax
  0x000000011c06597f: movzbl 0x1(%r13),%ebx
  0x000000011c065984: inc    %r13
  0x000000011c065987: movabs $0x1109d5220,%r10
  0x000000011c065991: jmpq   *(%r10,%rbx,8)
  0x000000011c065995: data16 xchg %ax,%ax
  0x000000011c065998: add    %al,(%rax)
  0x000000011c06599a: add    %al,(%rax)
  0x000000011c06599c: add    %al,(%rax)
  0x000000011c06599e: add    %al,(%rax)

----------------------------------------------------------------------
istore  54 istore  [0x000000011c0659c0, 0x000000011c065a20]  96 bytes

  0x000000011c0659c0: mov    (%rsp),%eax
  0x000000011c0659c3: add    $0x8,%rsp
  0x000000011c0659c7: movzbl 0x1(%r13),%ebx
  0x000000011c0659cc: neg    %rbx
  0x000000011c0659cf: mov    %eax,(%r14,%rbx,8)
  0x000000011c0659d3: movzbl 0x2(%r13),%ebx
  0x000000011c0659d8: add    $0x2,%r13
  0x000000011c0659dc: movabs $0x1109d7a20,%r10
  0x000000011c0659e6: jmpq   *(%r10,%rbx,8)
  0x000000011c0659ea: mov    (%rsp),%eax
  0x000000011c0659ed: add    $0x8,%rsp
  0x000000011c0659f1: movzwl 0x2(%r13),%ebx
  0x000000011c0659f6: bswap  %ebx
  0x000000011c0659f8: shr    $0x10,%ebx
  0x000000011c0659fb: neg    %rbx
  0x000000011c0659fe: mov    %eax,(%r14,%rbx,8)
  0x000000011c065a02: movzbl 0x4(%r13),%ebx
  0x000000011c065a07: add    $0x4,%r13
  0x000000011c065a0b: movabs $0x1109d7a20,%r10
  0x000000011c065a15: jmpq   *(%r10,%rbx,8)
  0x000000011c065a19: nopl   0x0(%rax)

----------------------------------------------------------------------
lstore  55 lstore  [0x000000011c065a40, 0x000000011c065aa0]  96 bytes

  0x000000011c065a40: mov    (%rsp),%rax
  0x000000011c065a44: add    $0x10,%rsp
  0x000000011c065a48: movzbl 0x1(%r13),%ebx
  0x000000011c065a4d: neg    %rbx
  0x000000011c065a50: mov    %rax,-0x8(%r14,%rbx,8)
  0x000000011c065a55: movzbl 0x2(%r13),%ebx
  0x000000011c065a5a: add    $0x2,%r13
  0x000000011c065a5e: movabs $0x1109d7a20,%r10
  0x000000011c065a68: jmpq   *(%r10,%rbx,8)
  0x000000011c065a6c: mov    (%rsp),%rax
  0x000000011c065a70: add    $0x10,%rsp
  0x000000011c065a74: movzwl 0x2(%r13),%ebx
  0x000000011c065a79: bswap  %ebx
  0x000000011c065a7b: shr    $0x10,%ebx
  0x000000011c065a7e: neg    %rbx
  0x000000011c065a81: mov    %rax,-0x8(%r14,%rbx,8)
  0x000000011c065a86: movzbl 0x4(%r13),%ebx
  0x000000011c065a8b: add    $0x4,%r13
  0x000000011c065a8f: movabs $0x1109d7a20,%r10
  0x000000011c065a99: jmpq   *(%r10,%rbx,8)
  0x000000011c065a9d: data16 xchg %ax,%ax

----------------------------------------------------------------------
fstore  56 fstore  [0x000000011c065ac0, 0x000000011c065b40]  128 bytes

  0x000000011c065ac0: vmovss (%rsp),%xmm0
  0x000000011c065ac5: add    $0x8,%rsp
  0x000000011c065ac9: movzbl 0x1(%r13),%ebx
  0x000000011c065ace: neg    %rbx
  0x000000011c065ad1: vmovss %xmm0,(%r14,%rbx,8)
  0x000000011c065ad7: movzbl 0x2(%r13),%ebx
  0x000000011c065adc: add    $0x2,%r13
  0x000000011c065ae0: movabs $0x1109d7a20,%r10
  0x000000011c065aea: jmpq   *(%r10,%rbx,8)
  0x000000011c065aee: vmovss (%rsp),%xmm0
  0x000000011c065af3: add    $0x8,%rsp
  0x000000011c065af7: movzwl 0x2(%r13),%ebx
  0x000000011c065afc: bswap  %ebx
  0x000000011c065afe: shr    $0x10,%ebx
  0x000000011c065b01: neg    %rbx
  0x000000011c065b04: vmovss %xmm0,(%r14,%rbx,8)
  0x000000011c065b0a: movzbl 0x4(%r13),%ebx
  0x000000011c065b0f: add    $0x4,%r13
  0x000000011c065b13: movabs $0x1109d7a20,%r10
  0x000000011c065b1d: jmpq   *(%r10,%rbx,8)
  0x000000011c065b21: nopl   0x0(%rax)
  0x000000011c065b28: add    %al,(%rax)
  0x000000011c065b2a: add    %al,(%rax)
  0x000000011c065b2c: add    %al,(%rax)
  0x000000011c065b2e: add    %al,(%rax)
  0x000000011c065b30: add    %al,(%rax)
  0x000000011c065b32: add    %al,(%rax)
  0x000000011c065b34: add    %al,(%rax)
  0x000000011c065b36: add    %al,(%rax)
  0x000000011c065b38: add    %al,(%rax)
  0x000000011c065b3a: add    %al,(%rax)
  0x000000011c065b3c: add    %al,(%rax)
  0x000000011c065b3e: add    %al,(%rax)

----------------------------------------------------------------------
dstore  57 dstore  [0x000000011c065b60, 0x000000011c065be0]  128 bytes

  0x000000011c065b60: vmovsd (%rsp),%xmm0
  0x000000011c065b65: add    $0x10,%rsp
  0x000000011c065b69: movzbl 0x1(%r13),%ebx
  0x000000011c065b6e: neg    %rbx
  0x000000011c065b71: vmovsd %xmm0,-0x8(%r14,%rbx,8)
  0x000000011c065b78: movzbl 0x2(%r13),%ebx
  0x000000011c065b7d: add    $0x2,%r13
  0x000000011c065b81: movabs $0x1109d7a20,%r10
  0x000000011c065b8b: jmpq   *(%r10,%rbx,8)
  0x000000011c065b8f: vmovsd (%rsp),%xmm0
  0x000000011c065b94: add    $0x10,%rsp
  0x000000011c065b98: movzwl 0x2(%r13),%ebx
  0x000000011c065b9d: bswap  %ebx
  0x000000011c065b9f: shr    $0x10,%ebx
  0x000000011c065ba2: neg    %rbx
  0x000000011c065ba5: vmovsd %xmm0,-0x8(%r14,%rbx,8)
  0x000000011c065bac: movzbl 0x4(%r13),%ebx
  0x000000011c065bb1: add    $0x4,%r13
  0x000000011c065bb5: movabs $0x1109d7a20,%r10
  0x000000011c065bbf: jmpq   *(%r10,%rbx,8)
  0x000000011c065bc3: nopl   0x0(%rax,%rax,1)
  0x000000011c065bc8: add    %al,(%rax)
  0x000000011c065bca: add    %al,(%rax)
  0x000000011c065bcc: add    %al,(%rax)
  0x000000011c065bce: add    %al,(%rax)
  0x000000011c065bd0: add    %al,(%rax)
  0x000000011c065bd2: add    %al,(%rax)
  0x000000011c065bd4: add    %al,(%rax)
  0x000000011c065bd6: add    %al,(%rax)
  0x000000011c065bd8: add    %al,(%rax)
  0x000000011c065bda: add    %al,(%rax)
  0x000000011c065bdc: add    %al,(%rax)
  0x000000011c065bde: add    %al,(%rax)

----------------------------------------------------------------------
astore  58 astore  [0x000000011c065c00, 0x000000011c065ca0]  160 bytes

  0x000000011c065c00: push   %rax
  0x000000011c065c01: jmpq   0x000000011c065c3f
  0x000000011c065c06: sub    $0x8,%rsp
  0x000000011c065c0a: vmovss %xmm0,(%rsp)
  0x000000011c065c0f: jmpq   0x000000011c065c3f
  0x000000011c065c14: sub    $0x10,%rsp
  0x000000011c065c18: vmovsd %xmm0,(%rsp)
  0x000000011c065c1d: jmpq   0x000000011c065c3f
  0x000000011c065c22: sub    $0x10,%rsp
  0x000000011c065c26: mov    %rax,(%rsp)
  0x000000011c065c2a: movabs $0x0,%r10
  0x000000011c065c34: mov    %r10,0x8(%rsp)
  0x000000011c065c39: jmpq   0x000000011c065c3f
  0x000000011c065c3e: push   %rax
  0x000000011c065c3f: pop    %rax
  0x000000011c065c40: movzbl 0x1(%r13),%ebx
  0x000000011c065c45: neg    %rbx
  0x000000011c065c48: mov    %rax,(%r14,%rbx,8)
  0x000000011c065c4c: movzbl 0x2(%r13),%ebx
  0x000000011c065c51: add    $0x2,%r13
  0x000000011c065c55: movabs $0x1109d7a20,%r10
  0x000000011c065c5f: jmpq   *(%r10,%rbx,8)
  0x000000011c065c63: pop    %rax
  0x000000011c065c64: movzwl 0x2(%r13),%ebx
  0x000000011c065c69: bswap  %ebx
  0x000000011c065c6b: shr    $0x10,%ebx
  0x000000011c065c6e: neg    %rbx
  0x000000011c065c71: mov    %rax,(%r14,%rbx,8)
  0x000000011c065c75: movzbl 0x4(%r13),%ebx
  0x000000011c065c7a: add    $0x4,%r13
  0x000000011c065c7e: movabs $0x1109d7a20,%r10
  0x000000011c065c88: jmpq   *(%r10,%rbx,8)
  0x000000011c065c8c: nopl   0x0(%rax)
  0x000000011c065c90: add    %al,(%rax)
  0x000000011c065c92: add    %al,(%rax)
  0x000000011c065c94: add    %al,(%rax)
  0x000000011c065c96: add    %al,(%rax)
  0x000000011c065c98: add    %al,(%rax)
  0x000000011c065c9a: add    %al,(%rax)
  0x000000011c065c9c: add    %al,(%rax)
  0x000000011c065c9e: add    %al,(%rax)

----------------------------------------------------------------------
istore_0  59 istore_0  [0x000000011c065cc0, 0x000000011c065ce0]  32 bytes

  0x000000011c065cc0: mov    (%rsp),%eax
  0x000000011c065cc3: add    $0x8,%rsp
  0x000000011c065cc7: mov    %eax,(%r14)
  0x000000011c065cca: movzbl 0x1(%r13),%ebx
  0x000000011c065ccf: inc    %r13
  0x000000011c065cd2: movabs $0x1109d7a20,%r10
  0x000000011c065cdc: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
istore_1  60 istore_1  [0x000000011c065d00, 0x000000011c065d40]  64 bytes

  0x000000011c065d00: mov    (%rsp),%eax
  0x000000011c065d03: add    $0x8,%rsp
  0x000000011c065d07: mov    %eax,-0x8(%r14)
  0x000000011c065d0b: movzbl 0x1(%r13),%ebx
  0x000000011c065d10: inc    %r13
  0x000000011c065d13: movabs $0x1109d7a20,%r10
  0x000000011c065d1d: jmpq   *(%r10,%rbx,8)
  0x000000011c065d21: nopl   0x0(%rax)
  0x000000011c065d28: add    %al,(%rax)
  0x000000011c065d2a: add    %al,(%rax)
  0x000000011c065d2c: add    %al,(%rax)
  0x000000011c065d2e: add    %al,(%rax)
  0x000000011c065d30: add    %al,(%rax)
  0x000000011c065d32: add    %al,(%rax)
  0x000000011c065d34: add    %al,(%rax)
  0x000000011c065d36: add    %al,(%rax)
  0x000000011c065d38: add    %al,(%rax)
  0x000000011c065d3a: add    %al,(%rax)
  0x000000011c065d3c: add    %al,(%rax)
  0x000000011c065d3e: add    %al,(%rax)

----------------------------------------------------------------------
istore_2  61 istore_2  [0x000000011c065d60, 0x000000011c065da0]  64 bytes

  0x000000011c065d60: mov    (%rsp),%eax
  0x000000011c065d63: add    $0x8,%rsp
  0x000000011c065d67: mov    %eax,-0x10(%r14)
  0x000000011c065d6b: movzbl 0x1(%r13),%ebx
  0x000000011c065d70: inc    %r13
  0x000000011c065d73: movabs $0x1109d7a20,%r10
  0x000000011c065d7d: jmpq   *(%r10,%rbx,8)
  0x000000011c065d81: nopl   0x0(%rax)
  0x000000011c065d88: add    %al,(%rax)
  0x000000011c065d8a: add    %al,(%rax)
  0x000000011c065d8c: add    %al,(%rax)
  0x000000011c065d8e: add    %al,(%rax)
  0x000000011c065d90: add    %al,(%rax)
  0x000000011c065d92: add    %al,(%rax)
  0x000000011c065d94: add    %al,(%rax)
  0x000000011c065d96: add    %al,(%rax)
  0x000000011c065d98: add    %al,(%rax)
  0x000000011c065d9a: add    %al,(%rax)
  0x000000011c065d9c: add    %al,(%rax)
  0x000000011c065d9e: add    %al,(%rax)

----------------------------------------------------------------------
istore_3  62 istore_3  [0x000000011c065dc0, 0x000000011c065e00]  64 bytes

  0x000000011c065dc0: mov    (%rsp),%eax
  0x000000011c065dc3: add    $0x8,%rsp
  0x000000011c065dc7: mov    %eax,-0x18(%r14)
  0x000000011c065dcb: movzbl 0x1(%r13),%ebx
  0x000000011c065dd0: inc    %r13
  0x000000011c065dd3: movabs $0x1109d7a20,%r10
  0x000000011c065ddd: jmpq   *(%r10,%rbx,8)
  0x000000011c065de1: nopl   0x0(%rax)
  0x000000011c065de8: add    %al,(%rax)
  0x000000011c065dea: add    %al,(%rax)
  0x000000011c065dec: add    %al,(%rax)
  0x000000011c065dee: add    %al,(%rax)
  0x000000011c065df0: add    %al,(%rax)
  0x000000011c065df2: add    %al,(%rax)
  0x000000011c065df4: add    %al,(%rax)
  0x000000011c065df6: add    %al,(%rax)
  0x000000011c065df8: add    %al,(%rax)
  0x000000011c065dfa: add    %al,(%rax)
  0x000000011c065dfc: add    %al,(%rax)
  0x000000011c065dfe: add    %al,(%rax)

----------------------------------------------------------------------
lstore_0  63 lstore_0  [0x000000011c065e20, 0x000000011c065e60]  64 bytes

  0x000000011c065e20: mov    (%rsp),%rax
  0x000000011c065e24: add    $0x10,%rsp
  0x000000011c065e28: mov    %rax,-0x8(%r14)
  0x000000011c065e2c: movzbl 0x1(%r13),%ebx
  0x000000011c065e31: inc    %r13
  0x000000011c065e34: movabs $0x1109d7a20,%r10
  0x000000011c065e3e: jmpq   *(%r10,%rbx,8)
  0x000000011c065e42: nopw   0x0(%rax,%rax,1)
  0x000000011c065e48: add    %al,(%rax)
  0x000000011c065e4a: add    %al,(%rax)
  0x000000011c065e4c: add    %al,(%rax)
  0x000000011c065e4e: add    %al,(%rax)
  0x000000011c065e50: add    %al,(%rax)
  0x000000011c065e52: add    %al,(%rax)
  0x000000011c065e54: add    %al,(%rax)
  0x000000011c065e56: add    %al,(%rax)
  0x000000011c065e58: add    %al,(%rax)
  0x000000011c065e5a: add    %al,(%rax)
  0x000000011c065e5c: add    %al,(%rax)
  0x000000011c065e5e: add    %al,(%rax)

----------------------------------------------------------------------
lstore_1  64 lstore_1  [0x000000011c065e80, 0x000000011c065ec0]  64 bytes

  0x000000011c065e80: mov    (%rsp),%rax
  0x000000011c065e84: add    $0x10,%rsp
  0x000000011c065e88: mov    %rax,-0x10(%r14)
  0x000000011c065e8c: movzbl 0x1(%r13),%ebx
  0x000000011c065e91: inc    %r13
  0x000000011c065e94: movabs $0x1109d7a20,%r10
  0x000000011c065e9e: jmpq   *(%r10,%rbx,8)
  0x000000011c065ea2: nopw   0x0(%rax,%rax,1)
  0x000000011c065ea8: add    %al,(%rax)
  0x000000011c065eaa: add    %al,(%rax)
  0x000000011c065eac: add    %al,(%rax)
  0x000000011c065eae: add    %al,(%rax)
  0x000000011c065eb0: add    %al,(%rax)
  0x000000011c065eb2: add    %al,(%rax)
  0x000000011c065eb4: add    %al,(%rax)
  0x000000011c065eb6: add    %al,(%rax)
  0x000000011c065eb8: add    %al,(%rax)
  0x000000011c065eba: add    %al,(%rax)
  0x000000011c065ebc: add    %al,(%rax)
  0x000000011c065ebe: add    %al,(%rax)

----------------------------------------------------------------------
lstore_2  65 lstore_2  [0x000000011c065ee0, 0x000000011c065f20]  64 bytes

  0x000000011c065ee0: mov    (%rsp),%rax
  0x000000011c065ee4: add    $0x10,%rsp
  0x000000011c065ee8: mov    %rax,-0x18(%r14)
  0x000000011c065eec: movzbl 0x1(%r13),%ebx
  0x000000011c065ef1: inc    %r13
  0x000000011c065ef4: movabs $0x1109d7a20,%r10
  0x000000011c065efe: jmpq   *(%r10,%rbx,8)
  0x000000011c065f02: nopw   0x0(%rax,%rax,1)
  0x000000011c065f08: add    %al,(%rax)
  0x000000011c065f0a: add    %al,(%rax)
  0x000000011c065f0c: add    %al,(%rax)
  0x000000011c065f0e: add    %al,(%rax)
  0x000000011c065f10: add    %al,(%rax)
  0x000000011c065f12: add    %al,(%rax)
  0x000000011c065f14: add    %al,(%rax)
  0x000000011c065f16: add    %al,(%rax)
  0x000000011c065f18: add    %al,(%rax)
  0x000000011c065f1a: add    %al,(%rax)
  0x000000011c065f1c: add    %al,(%rax)
  0x000000011c065f1e: add    %al,(%rax)

----------------------------------------------------------------------
lstore_3  66 lstore_3  [0x000000011c065f40, 0x000000011c065f80]  64 bytes

  0x000000011c065f40: mov    (%rsp),%rax
  0x000000011c065f44: add    $0x10,%rsp
  0x000000011c065f48: mov    %rax,-0x20(%r14)
  0x000000011c065f4c: movzbl 0x1(%r13),%ebx
  0x000000011c065f51: inc    %r13
  0x000000011c065f54: movabs $0x1109d7a20,%r10
  0x000000011c065f5e: jmpq   *(%r10,%rbx,8)
  0x000000011c065f62: nopw   0x0(%rax,%rax,1)
  0x000000011c065f68: add    %al,(%rax)
  0x000000011c065f6a: add    %al,(%rax)
  0x000000011c065f6c: add    %al,(%rax)
  0x000000011c065f6e: add    %al,(%rax)
  0x000000011c065f70: add    %al,(%rax)
  0x000000011c065f72: add    %al,(%rax)
  0x000000011c065f74: add    %al,(%rax)
  0x000000011c065f76: add    %al,(%rax)
  0x000000011c065f78: add    %al,(%rax)
  0x000000011c065f7a: add    %al,(%rax)
  0x000000011c065f7c: add    %al,(%rax)
  0x000000011c065f7e: add    %al,(%rax)

----------------------------------------------------------------------
fstore_0  67 fstore_0  [0x000000011c065fa0, 0x000000011c065fe0]  64 bytes

  0x000000011c065fa0: vmovss (%rsp),%xmm0
  0x000000011c065fa5: add    $0x8,%rsp
  0x000000011c065fa9: vmovss %xmm0,(%r14)
  0x000000011c065fae: movzbl 0x1(%r13),%ebx
  0x000000011c065fb3: inc    %r13
  0x000000011c065fb6: movabs $0x1109d7a20,%r10
  0x000000011c065fc0: jmpq   *(%r10,%rbx,8)
  0x000000011c065fc4: nopl   0x0(%rax)
  0x000000011c065fc8: add    %al,(%rax)
  0x000000011c065fca: add    %al,(%rax)
  0x000000011c065fcc: add    %al,(%rax)
  0x000000011c065fce: add    %al,(%rax)
  0x000000011c065fd0: add    %al,(%rax)
  0x000000011c065fd2: add    %al,(%rax)
  0x000000011c065fd4: add    %al,(%rax)
  0x000000011c065fd6: add    %al,(%rax)
  0x000000011c065fd8: add    %al,(%rax)
  0x000000011c065fda: add    %al,(%rax)
  0x000000011c065fdc: add    %al,(%rax)
  0x000000011c065fde: add    %al,(%rax)

----------------------------------------------------------------------
fstore_1  68 fstore_1  [0x000000011c066000, 0x000000011c066040]  64 bytes

  0x000000011c066000: vmovss (%rsp),%xmm0
  0x000000011c066005: add    $0x8,%rsp
  0x000000011c066009: vmovss %xmm0,-0x8(%r14)
  0x000000011c06600f: movzbl 0x1(%r13),%ebx
  0x000000011c066014: inc    %r13
  0x000000011c066017: movabs $0x1109d7a20,%r10
  0x000000011c066021: jmpq   *(%r10,%rbx,8)
  0x000000011c066025: data16 xchg %ax,%ax
  0x000000011c066028: add    %al,(%rax)
  0x000000011c06602a: add    %al,(%rax)
  0x000000011c06602c: add    %al,(%rax)
  0x000000011c06602e: add    %al,(%rax)
  0x000000011c066030: add    %al,(%rax)
  0x000000011c066032: add    %al,(%rax)
  0x000000011c066034: add    %al,(%rax)
  0x000000011c066036: add    %al,(%rax)
  0x000000011c066038: add    %al,(%rax)
  0x000000011c06603a: add    %al,(%rax)
  0x000000011c06603c: add    %al,(%rax)
  0x000000011c06603e: add    %al,(%rax)

----------------------------------------------------------------------
fstore_2  69 fstore_2  [0x000000011c066060, 0x000000011c0660a0]  64 bytes

  0x000000011c066060: vmovss (%rsp),%xmm0
  0x000000011c066065: add    $0x8,%rsp
  0x000000011c066069: vmovss %xmm0,-0x10(%r14)
  0x000000011c06606f: movzbl 0x1(%r13),%ebx
  0x000000011c066074: inc    %r13
  0x000000011c066077: movabs $0x1109d7a20,%r10
  0x000000011c066081: jmpq   *(%r10,%rbx,8)
  0x000000011c066085: data16 xchg %ax,%ax
  0x000000011c066088: add    %al,(%rax)
  0x000000011c06608a: add    %al,(%rax)
  0x000000011c06608c: add    %al,(%rax)
  0x000000011c06608e: add    %al,(%rax)
  0x000000011c066090: add    %al,(%rax)
  0x000000011c066092: add    %al,(%rax)
  0x000000011c066094: add    %al,(%rax)
  0x000000011c066096: add    %al,(%rax)
  0x000000011c066098: add    %al,(%rax)
  0x000000011c06609a: add    %al,(%rax)
  0x000000011c06609c: add    %al,(%rax)
  0x000000011c06609e: add    %al,(%rax)

----------------------------------------------------------------------
fstore_3  70 fstore_3  [0x000000011c0660c0, 0x000000011c066100]  64 bytes

  0x000000011c0660c0: vmovss (%rsp),%xmm0
  0x000000011c0660c5: add    $0x8,%rsp
  0x000000011c0660c9: vmovss %xmm0,-0x18(%r14)
  0x000000011c0660cf: movzbl 0x1(%r13),%ebx
  0x000000011c0660d4: inc    %r13
  0x000000011c0660d7: movabs $0x1109d7a20,%r10
  0x000000011c0660e1: jmpq   *(%r10,%rbx,8)
  0x000000011c0660e5: data16 xchg %ax,%ax
  0x000000011c0660e8: add    %al,(%rax)
  0x000000011c0660ea: add    %al,(%rax)
  0x000000011c0660ec: add    %al,(%rax)
  0x000000011c0660ee: add    %al,(%rax)
  0x000000011c0660f0: add    %al,(%rax)
  0x000000011c0660f2: add    %al,(%rax)
  0x000000011c0660f4: add    %al,(%rax)
  0x000000011c0660f6: add    %al,(%rax)
  0x000000011c0660f8: add    %al,(%rax)
  0x000000011c0660fa: add    %al,(%rax)
  0x000000011c0660fc: add    %al,(%rax)
  0x000000011c0660fe: add    %al,(%rax)

----------------------------------------------------------------------
dstore_0  71 dstore_0  [0x000000011c066120, 0x000000011c066160]  64 bytes

  0x000000011c066120: vmovsd (%rsp),%xmm0
  0x000000011c066125: add    $0x10,%rsp
  0x000000011c066129: vmovsd %xmm0,-0x8(%r14)
  0x000000011c06612f: movzbl 0x1(%r13),%ebx
  0x000000011c066134: inc    %r13
  0x000000011c066137: movabs $0x1109d7a20,%r10
  0x000000011c066141: jmpq   *(%r10,%rbx,8)
  0x000000011c066145: data16 xchg %ax,%ax
  0x000000011c066148: add    %al,(%rax)
  0x000000011c06614a: add    %al,(%rax)
  0x000000011c06614c: add    %al,(%rax)
  0x000000011c06614e: add    %al,(%rax)
  0x000000011c066150: add    %al,(%rax)
  0x000000011c066152: add    %al,(%rax)
  0x000000011c066154: add    %al,(%rax)
  0x000000011c066156: add    %al,(%rax)
  0x000000011c066158: add    %al,(%rax)
  0x000000011c06615a: add    %al,(%rax)
  0x000000011c06615c: add    %al,(%rax)
  0x000000011c06615e: add    %al,(%rax)

----------------------------------------------------------------------
dstore_1  72 dstore_1  [0x000000011c066180, 0x000000011c0661c0]  64 bytes

  0x000000011c066180: vmovsd (%rsp),%xmm0
  0x000000011c066185: add    $0x10,%rsp
  0x000000011c066189: vmovsd %xmm0,-0x10(%r14)
  0x000000011c06618f: movzbl 0x1(%r13),%ebx
  0x000000011c066194: inc    %r13
  0x000000011c066197: movabs $0x1109d7a20,%r10
  0x000000011c0661a1: jmpq   *(%r10,%rbx,8)
  0x000000011c0661a5: data16 xchg %ax,%ax
  0x000000011c0661a8: add    %al,(%rax)
  0x000000011c0661aa: add    %al,(%rax)
  0x000000011c0661ac: add    %al,(%rax)
  0x000000011c0661ae: add    %al,(%rax)
  0x000000011c0661b0: add    %al,(%rax)
  0x000000011c0661b2: add    %al,(%rax)
  0x000000011c0661b4: add    %al,(%rax)
  0x000000011c0661b6: add    %al,(%rax)
  0x000000011c0661b8: add    %al,(%rax)
  0x000000011c0661ba: add    %al,(%rax)
  0x000000011c0661bc: add    %al,(%rax)
  0x000000011c0661be: add    %al,(%rax)

----------------------------------------------------------------------
dstore_2  73 dstore_2  [0x000000011c0661e0, 0x000000011c066220]  64 bytes

  0x000000011c0661e0: vmovsd (%rsp),%xmm0
  0x000000011c0661e5: add    $0x10,%rsp
  0x000000011c0661e9: vmovsd %xmm0,-0x18(%r14)
  0x000000011c0661ef: movzbl 0x1(%r13),%ebx
  0x000000011c0661f4: inc    %r13
  0x000000011c0661f7: movabs $0x1109d7a20,%r10
  0x000000011c066201: jmpq   *(%r10,%rbx,8)
  0x000000011c066205: data16 xchg %ax,%ax
  0x000000011c066208: add    %al,(%rax)
  0x000000011c06620a: add    %al,(%rax)
  0x000000011c06620c: add    %al,(%rax)
  0x000000011c06620e: add    %al,(%rax)
  0x000000011c066210: add    %al,(%rax)
  0x000000011c066212: add    %al,(%rax)
  0x000000011c066214: add    %al,(%rax)
  0x000000011c066216: add    %al,(%rax)
  0x000000011c066218: add    %al,(%rax)
  0x000000011c06621a: add    %al,(%rax)
  0x000000011c06621c: add    %al,(%rax)
  0x000000011c06621e: add    %al,(%rax)

----------------------------------------------------------------------
dstore_3  74 dstore_3  [0x000000011c066240, 0x000000011c066280]  64 bytes

  0x000000011c066240: vmovsd (%rsp),%xmm0
  0x000000011c066245: add    $0x10,%rsp
  0x000000011c066249: vmovsd %xmm0,-0x20(%r14)
  0x000000011c06624f: movzbl 0x1(%r13),%ebx
  0x000000011c066254: inc    %r13
  0x000000011c066257: movabs $0x1109d7a20,%r10
  0x000000011c066261: jmpq   *(%r10,%rbx,8)
  0x000000011c066265: data16 xchg %ax,%ax
  0x000000011c066268: add    %al,(%rax)
  0x000000011c06626a: add    %al,(%rax)
  0x000000011c06626c: add    %al,(%rax)
  0x000000011c06626e: add    %al,(%rax)
  0x000000011c066270: add    %al,(%rax)
  0x000000011c066272: add    %al,(%rax)
  0x000000011c066274: add    %al,(%rax)
  0x000000011c066276: add    %al,(%rax)
  0x000000011c066278: add    %al,(%rax)
  0x000000011c06627a: add    %al,(%rax)
  0x000000011c06627c: add    %al,(%rax)
  0x000000011c06627e: add    %al,(%rax)

----------------------------------------------------------------------
astore_0  75 astore_0  [0x000000011c0662a0, 0x000000011c066300]  96 bytes

  0x000000011c0662a0: push   %rax
  0x000000011c0662a1: jmpq   0x000000011c0662df
  0x000000011c0662a6: sub    $0x8,%rsp
  0x000000011c0662aa: vmovss %xmm0,(%rsp)
  0x000000011c0662af: jmpq   0x000000011c0662df
  0x000000011c0662b4: sub    $0x10,%rsp
  0x000000011c0662b8: vmovsd %xmm0,(%rsp)
  0x000000011c0662bd: jmpq   0x000000011c0662df
  0x000000011c0662c2: sub    $0x10,%rsp
  0x000000011c0662c6: mov    %rax,(%rsp)
  0x000000011c0662ca: movabs $0x0,%r10
  0x000000011c0662d4: mov    %r10,0x8(%rsp)
  0x000000011c0662d9: jmpq   0x000000011c0662df
  0x000000011c0662de: push   %rax
  0x000000011c0662df: pop    %rax
  0x000000011c0662e0: mov    %rax,(%r14)
  0x000000011c0662e3: movzbl 0x1(%r13),%ebx
  0x000000011c0662e8: inc    %r13
  0x000000011c0662eb: movabs $0x1109d7a20,%r10
  0x000000011c0662f5: jmpq   *(%r10,%rbx,8)
  0x000000011c0662f9: nopl   0x0(%rax)

----------------------------------------------------------------------
astore_1  76 astore_1  [0x000000011c066320, 0x000000011c066380]  96 bytes

  0x000000011c066320: push   %rax
  0x000000011c066321: jmpq   0x000000011c06635f
  0x000000011c066326: sub    $0x8,%rsp
  0x000000011c06632a: vmovss %xmm0,(%rsp)
  0x000000011c06632f: jmpq   0x000000011c06635f
  0x000000011c066334: sub    $0x10,%rsp
  0x000000011c066338: vmovsd %xmm0,(%rsp)
  0x000000011c06633d: jmpq   0x000000011c06635f
  0x000000011c066342: sub    $0x10,%rsp
  0x000000011c066346: mov    %rax,(%rsp)
  0x000000011c06634a: movabs $0x0,%r10
  0x000000011c066354: mov    %r10,0x8(%rsp)
  0x000000011c066359: jmpq   0x000000011c06635f
  0x000000011c06635e: push   %rax
  0x000000011c06635f: pop    %rax
  0x000000011c066360: mov    %rax,-0x8(%r14)
  0x000000011c066364: movzbl 0x1(%r13),%ebx
  0x000000011c066369: inc    %r13
  0x000000011c06636c: movabs $0x1109d7a20,%r10
  0x000000011c066376: jmpq   *(%r10,%rbx,8)
  0x000000011c06637a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
astore_2  77 astore_2  [0x000000011c0663a0, 0x000000011c066400]  96 bytes

  0x000000011c0663a0: push   %rax
  0x000000011c0663a1: jmpq   0x000000011c0663df
  0x000000011c0663a6: sub    $0x8,%rsp
  0x000000011c0663aa: vmovss %xmm0,(%rsp)
  0x000000011c0663af: jmpq   0x000000011c0663df
  0x000000011c0663b4: sub    $0x10,%rsp
  0x000000011c0663b8: vmovsd %xmm0,(%rsp)
  0x000000011c0663bd: jmpq   0x000000011c0663df
  0x000000011c0663c2: sub    $0x10,%rsp
  0x000000011c0663c6: mov    %rax,(%rsp)
  0x000000011c0663ca: movabs $0x0,%r10
  0x000000011c0663d4: mov    %r10,0x8(%rsp)
  0x000000011c0663d9: jmpq   0x000000011c0663df
  0x000000011c0663de: push   %rax
  0x000000011c0663df: pop    %rax
  0x000000011c0663e0: mov    %rax,-0x10(%r14)
  0x000000011c0663e4: movzbl 0x1(%r13),%ebx
  0x000000011c0663e9: inc    %r13
  0x000000011c0663ec: movabs $0x1109d7a20,%r10
  0x000000011c0663f6: jmpq   *(%r10,%rbx,8)
  0x000000011c0663fa: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
astore_3  78 astore_3  [0x000000011c066420, 0x000000011c066480]  96 bytes

  0x000000011c066420: push   %rax
  0x000000011c066421: jmpq   0x000000011c06645f
  0x000000011c066426: sub    $0x8,%rsp
  0x000000011c06642a: vmovss %xmm0,(%rsp)
  0x000000011c06642f: jmpq   0x000000011c06645f
  0x000000011c066434: sub    $0x10,%rsp
  0x000000011c066438: vmovsd %xmm0,(%rsp)
  0x000000011c06643d: jmpq   0x000000011c06645f
  0x000000011c066442: sub    $0x10,%rsp
  0x000000011c066446: mov    %rax,(%rsp)
  0x000000011c06644a: movabs $0x0,%r10
  0x000000011c066454: mov    %r10,0x8(%rsp)
  0x000000011c066459: jmpq   0x000000011c06645f
  0x000000011c06645e: push   %rax
  0x000000011c06645f: pop    %rax
  0x000000011c066460: mov    %rax,-0x18(%r14)
  0x000000011c066464: movzbl 0x1(%r13),%ebx
  0x000000011c066469: inc    %r13
  0x000000011c06646c: movabs $0x1109d7a20,%r10
  0x000000011c066476: jmpq   *(%r10,%rbx,8)
  0x000000011c06647a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
iastore  79 iastore  [0x000000011c0664a0, 0x000000011c0664e0]  64 bytes

  0x000000011c0664a0: mov    (%rsp),%eax
  0x000000011c0664a3: add    $0x8,%rsp
  0x000000011c0664a7: mov    (%rsp),%ebx
  0x000000011c0664aa: add    $0x8,%rsp
  0x000000011c0664ae: pop    %rdx
  0x000000011c0664af: movslq %ebx,%rbx
  0x000000011c0664b2: cmp    0xc(%rdx),%ebx
  0x000000011c0664b5: jb     0x000000011c0664bf
  0x000000011c0664b7: mov    %rdx,%rsi
  0x000000011c0664ba: jmpq   0x000000011c061540
  0x000000011c0664bf: mov    %eax,0x10(%rdx,%rbx,4)
  0x000000011c0664c3: movzbl 0x1(%r13),%ebx
  0x000000011c0664c8: inc    %r13
  0x000000011c0664cb: movabs $0x1109d7a20,%r10
  0x000000011c0664d5: jmpq   *(%r10,%rbx,8)
  0x000000011c0664d9: nopl   0x0(%rax)

----------------------------------------------------------------------
lastore  80 lastore  [0x000000011c066500, 0x000000011c066540]  64 bytes

  0x000000011c066500: mov    (%rsp),%rax
  0x000000011c066504: add    $0x10,%rsp
  0x000000011c066508: mov    (%rsp),%ebx
  0x000000011c06650b: add    $0x8,%rsp
  0x000000011c06650f: pop    %rcx
  0x000000011c066510: movslq %ebx,%rbx
  0x000000011c066513: cmp    0xc(%rcx),%ebx
  0x000000011c066516: jb     0x000000011c066520
  0x000000011c066518: mov    %rcx,%rsi
  0x000000011c06651b: jmpq   0x000000011c061540
  0x000000011c066520: mov    %rax,0x10(%rcx,%rbx,8)
  0x000000011c066525: movzbl 0x1(%r13),%ebx
  0x000000011c06652a: inc    %r13
  0x000000011c06652d: movabs $0x1109d7a20,%r10
  0x000000011c066537: jmpq   *(%r10,%rbx,8)
  0x000000011c06653b: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
fastore  81 fastore  [0x000000011c066560, 0x000000011c0665a0]  64 bytes

  0x000000011c066560: vmovss (%rsp),%xmm0
  0x000000011c066565: add    $0x8,%rsp
  0x000000011c066569: mov    (%rsp),%ebx
  0x000000011c06656c: add    $0x8,%rsp
  0x000000011c066570: pop    %rdx
  0x000000011c066571: movslq %ebx,%rbx
  0x000000011c066574: cmp    0xc(%rdx),%ebx
  0x000000011c066577: jb     0x000000011c066581
  0x000000011c066579: mov    %rdx,%rsi
  0x000000011c06657c: jmpq   0x000000011c061540
  0x000000011c066581: vmovss %xmm0,0x10(%rdx,%rbx,4)
  0x000000011c066587: movzbl 0x1(%r13),%ebx
  0x000000011c06658c: inc    %r13
  0x000000011c06658f: movabs $0x1109d7a20,%r10
  0x000000011c066599: jmpq   *(%r10,%rbx,8)
  0x000000011c06659d: data16 xchg %ax,%ax

----------------------------------------------------------------------
dastore  82 dastore  [0x000000011c0665c0, 0x000000011c066600]  64 bytes

  0x000000011c0665c0: vmovsd (%rsp),%xmm0
  0x000000011c0665c5: add    $0x10,%rsp
  0x000000011c0665c9: mov    (%rsp),%ebx
  0x000000011c0665cc: add    $0x8,%rsp
  0x000000011c0665d0: pop    %rdx
  0x000000011c0665d1: movslq %ebx,%rbx
  0x000000011c0665d4: cmp    0xc(%rdx),%ebx
  0x000000011c0665d7: jb     0x000000011c0665e1
  0x000000011c0665d9: mov    %rdx,%rsi
  0x000000011c0665dc: jmpq   0x000000011c061540
  0x000000011c0665e1: vmovsd %xmm0,0x10(%rdx,%rbx,8)
  0x000000011c0665e7: movzbl 0x1(%r13),%ebx
  0x000000011c0665ec: inc    %r13
  0x000000011c0665ef: movabs $0x1109d7a20,%r10
  0x000000011c0665f9: jmpq   *(%r10,%rbx,8)
  0x000000011c0665fd: data16 xchg %ax,%ax

----------------------------------------------------------------------
aastore  83 aastore  [0x000000011c066620, 0x000000011c0668c0]  672 bytes

  0x000000011c066620: push   %rax
  0x000000011c066621: jmpq   0x000000011c06665f
  0x000000011c066626: sub    $0x8,%rsp
  0x000000011c06662a: vmovss %xmm0,(%rsp)
  0x000000011c06662f: jmpq   0x000000011c06665f
  0x000000011c066634: sub    $0x10,%rsp
  0x000000011c066638: vmovsd %xmm0,(%rsp)
  0x000000011c06663d: jmpq   0x000000011c06665f
  0x000000011c066642: sub    $0x10,%rsp
  0x000000011c066646: mov    %rax,(%rsp)
  0x000000011c06664a: movabs $0x0,%r10
  0x000000011c066654: mov    %r10,0x8(%rsp)
  0x000000011c066659: jmpq   0x000000011c06665f
  0x000000011c06665e: push   %rax
  0x000000011c06665f: mov    (%rsp),%rax
  0x000000011c066663: mov    0x8(%rsp),%ecx
  0x000000011c066667: mov    0x10(%rsp),%rdx
  0x000000011c06666c: movslq %ecx,%rcx
  0x000000011c06666f: cmp    0xc(%rdx),%ecx
  0x000000011c066672: mov    %ecx,%ebx
  0x000000011c066674: jb     0x000000011c06667e
  0x000000011c066676: mov    %rdx,%rsi
  0x000000011c066679: jmpq   0x000000011c061540
  0x000000011c06667e: test   %rax,%rax
  0x000000011c066681: je     0x000000011c066823
  0x000000011c066687: mov    0x8(%rax),%ebx
  0x000000011c06668a: movabs $0x800000000,%r12
  0x000000011c066694: add    %r12,%rbx
  0x000000011c066697: xor    %r12,%r12
  0x000000011c06669a: mov    0x8(%rdx),%eax
  0x000000011c06669d: movabs $0x800000000,%r12
  0x000000011c0666a7: add    %r12,%rax
  0x000000011c0666aa: xor    %r12,%r12
  0x000000011c0666ad: mov    0xe8(%rax),%rax
  0x000000011c0666b4: cmp    %rax,%rbx
  0x000000011c0666b7: je     0x000000011c0666fa
  0x000000011c0666bd: mov    0x10(%rax),%ecx
  0x000000011c0666c0: cmp    (%rbx,%rcx,1),%rax
  0x000000011c0666c4: je     0x000000011c0666fa
  0x000000011c0666ca: cmp    $0x20,%ecx
  0x000000011c0666cd: jne    0x000000011c0666f5
  0x000000011c0666d3: push   %rax
  0x000000011c0666d4: mov    %rax,%rax
  0x000000011c0666d7: push   %rdi
  0x000000011c0666d8: mov    0x28(%rbx),%rdi
  0x000000011c0666dc: mov    (%rdi),%ecx
  0x000000011c0666de: add    $0x8,%rdi
  0x000000011c0666e2: test   %rax,%rax
  0x000000011c0666e5: repnz scas %es:(%rdi),%rax
  0x000000011c0666e8: pop    %rdi
  0x000000011c0666e9: pop    %rax
  0x000000011c0666ea: jne    0x000000011c0666f5
  0x000000011c0666ec: mov    %rax,0x20(%rbx)
  0x000000011c0666f0: jmpq   0x000000011c0666fa
  0x000000011c0666f5: jmpq   0x000000011c0615eb
  0x000000011c0666fa: mov    (%rsp),%rax
  0x000000011c0666fe: mov    0x8(%rsp),%ecx
  0x000000011c066702: lea    0x10(%rdx,%rcx,4),%rdx
  0x000000011c066707: cmpb   $0x0,0x30(%r15)
  0x000000011c06670c: je     0x000000011c066773
  0x000000011c066712: mov    (%rdx),%ebx
  0x000000011c066714: shl    $0x3,%rbx
  0x000000011c066718: cmp    $0x0,%rbx
  0x000000011c06671c: je     0x000000011c066773
  0x000000011c066722: mov    0x38(%r15),%r8
  0x000000011c066726: cmp    $0x0,%r8
  0x000000011c06672a: je     0x000000011c066744
  0x000000011c066730: sub    $0x8,%r8
  0x000000011c066734: mov    %r8,0x38(%r15)
  0x000000011c066738: add    0x48(%r15),%r8
  0x000000011c06673c: mov    %rbx,(%r8)
  0x000000011c06673f: jmpq   0x000000011c066773
  0x000000011c066744: push   %rax
  0x000000011c066745: push   %rdx
  0x000000011c066746: push   %rbx
  0x000000011c066747: mov    %r15,%rsi
  0x000000011c06674a: mov    %rbx,%rdi
  0x000000011c06674d: test   $0xf,%esp
  0x000000011c066753: je     0x000000011c06676b
  0x000000011c066759: sub    $0x8,%rsp
  0x000000011c06675d: callq  0x000000011030185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x000000011c066762: add    $0x8,%rsp
  0x000000011c066766: jmpq   0x000000011c066770
  0x000000011c06676b: callq  0x000000011030185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x000000011c066770: pop    %rbx
  0x000000011c066771: pop    %rdx
  0x000000011c066772: pop    %rax
  0x000000011c066773: mov    %rax,%rbx
  0x000000011c066776: shr    $0x3,%rax
  0x000000011c06677a: mov    %eax,(%rdx)
  0x000000011c06677c: mov    %rdx,%r8
  0x000000011c06677f: xor    %rbx,%r8
  0x000000011c066782: shr    $0x16,%r8
  0x000000011c066786: je     0x000000011c06681e
  0x000000011c06678c: cmp    $0x0,%rbx
  0x000000011c066790: je     0x000000011c06681e
  0x000000011c066796: mov    %rdx,%r8
  0x000000011c066799: shr    $0x9,%r8
  0x000000011c06679d: movabs $0x11d054000,%rbx
  0x000000011c0667a7: add    %rbx,%r8
  0x000000011c0667aa: cmpb   $0x20,(%r8)
  0x000000011c0667ae: je     0x000000011c06681e
  0x000000011c0667b4: lock addl $0x0,-0x40(%rsp)
  0x000000011c0667ba: cmpb   $0x0,(%r8)
  0x000000011c0667be: je     0x000000011c06681e
  0x000000011c0667c4: movb   $0x0,(%r8)
  0x000000011c0667c8: cmpl   $0x0,0x70(%r15)
  0x000000011c0667d0: je     0x000000011c0667f1
  0x000000011c0667d6: subl   $0x8,0x70(%r15)
  0x000000011c0667db: mov    0x80(%r15),%rbx
  0x000000011c0667e2: movslq 0x70(%r15),%r10
  0x000000011c0667e6: add    %r10,%rbx
  0x000000011c0667e9: mov    %r8,(%rbx)
  0x000000011c0667ec: jmpq   0x000000011c06681e
  0x000000011c0667f1: push   %rdx
  0x000000011c0667f2: push   %rbx
  0x000000011c0667f3: mov    %r15,%rsi
  0x000000011c0667f6: mov    %r8,%rdi
  0x000000011c0667f9: test   $0xf,%esp
  0x000000011c0667ff: je     0x000000011c066817
  0x000000011c066805: sub    $0x8,%rsp
  0x000000011c066809: callq  0x0000000110301882 = G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*)
  0x000000011c06680e: add    $0x8,%rsp
  0x000000011c066812: jmpq   0x000000011c06681c
  0x000000011c066817: callq  0x0000000110301882 = G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*)
  0x000000011c06681c: pop    %rbx
  0x000000011c06681d: pop    %rdx
  0x000000011c06681e: jmpq   0x000000011c066898
  0x000000011c066823: lea    0x10(%rdx,%rcx,4),%rdx
  0x000000011c066828: cmpb   $0x0,0x30(%r15)
  0x000000011c06682d: je     0x000000011c066892
  0x000000011c066833: mov    (%rdx),%ebx
  0x000000011c066835: shl    $0x3,%rbx
  0x000000011c066839: cmp    $0x0,%rbx
  0x000000011c06683d: je     0x000000011c066892
  0x000000011c066843: mov    0x38(%r15),%r8
  0x000000011c066847: cmp    $0x0,%r8
  0x000000011c06684b: je     0x000000011c066865
  0x000000011c066851: sub    $0x8,%r8
  0x000000011c066855: mov    %r8,0x38(%r15)
  0x000000011c066859: add    0x48(%r15),%r8
  0x000000011c06685d: mov    %rbx,(%r8)
  0x000000011c066860: jmpq   0x000000011c066892
  0x000000011c066865: push   %rdx
  0x000000011c066866: push   %rbx
  0x000000011c066867: mov    %r15,%rsi
  0x000000011c06686a: mov    %rbx,%rdi
  0x000000011c06686d: test   $0xf,%esp
  0x000000011c066873: je     0x000000011c06688b
  0x000000011c066879: sub    $0x8,%rsp
  0x000000011c06687d: callq  0x000000011030185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x000000011c066882: add    $0x8,%rsp
  0x000000011c066886: jmpq   0x000000011c066890
  0x000000011c06688b: callq  0x000000011030185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x000000011c066890: pop    %rbx
  0x000000011c066891: pop    %rdx
  0x000000011c066892: movl   $0x0,(%rdx)
  0x000000011c066898: add    $0x18,%rsp
  0x000000011c06689c: movzbl 0x1(%r13),%ebx
  0x000000011c0668a1: inc    %r13
  0x000000011c0668a4: movabs $0x1109d7a20,%r10
  0x000000011c0668ae: jmpq   *(%r10,%rbx,8)
  0x000000011c0668b2: nopw   0x0(%rax,%rax,1)
  0x000000011c0668b8: add    %al,(%rax)
  0x000000011c0668ba: add    %al,(%rax)
  0x000000011c0668bc: add    %al,(%rax)
  0x000000011c0668be: add    %al,(%rax)

----------------------------------------------------------------------
bastore  84 bastore  [0x000000011c0668e0, 0x000000011c066940]  96 bytes

  0x000000011c0668e0: mov    (%rsp),%eax
  0x000000011c0668e3: add    $0x8,%rsp
  0x000000011c0668e7: mov    (%rsp),%ebx
  0x000000011c0668ea: add    $0x8,%rsp
  0x000000011c0668ee: pop    %rdx
  0x000000011c0668ef: movslq %ebx,%rbx
  0x000000011c0668f2: cmp    0xc(%rdx),%ebx
  0x000000011c0668f5: jb     0x000000011c0668ff
  0x000000011c0668f7: mov    %rdx,%rsi
  0x000000011c0668fa: jmpq   0x000000011c061540
  0x000000011c0668ff: mov    0x8(%rdx),%ecx
  0x000000011c066902: movabs $0x800000000,%r12
  0x000000011c06690c: add    %r12,%rcx
  0x000000011c06690f: xor    %r12,%r12
  0x000000011c066912: mov    0x8(%rcx),%ecx
  0x000000011c066915: test   $0x400,%ecx
  0x000000011c06691b: je     0x000000011c066920
  0x000000011c06691d: and    $0x1,%eax
  0x000000011c066920: mov    %al,0x10(%rdx,%rbx,1)
  0x000000011c066924: movzbl 0x1(%r13),%ebx
  0x000000011c066929: inc    %r13
  0x000000011c06692c: movabs $0x1109d7a20,%r10
  0x000000011c066936: jmpq   *(%r10,%rbx,8)
  0x000000011c06693a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
castore  85 castore  [0x000000011c066960, 0x000000011c0669a0]  64 bytes

  0x000000011c066960: mov    (%rsp),%eax
  0x000000011c066963: add    $0x8,%rsp
  0x000000011c066967: mov    (%rsp),%ebx
  0x000000011c06696a: add    $0x8,%rsp
  0x000000011c06696e: pop    %rdx
  0x000000011c06696f: movslq %ebx,%rbx
  0x000000011c066972: cmp    0xc(%rdx),%ebx
  0x000000011c066975: jb     0x000000011c06697f
  0x000000011c066977: mov    %rdx,%rsi
  0x000000011c06697a: jmpq   0x000000011c061540
  0x000000011c06697f: mov    %ax,0x10(%rdx,%rbx,2)
  0x000000011c066984: movzbl 0x1(%r13),%ebx
  0x000000011c066989: inc    %r13
  0x000000011c06698c: movabs $0x1109d7a20,%r10
  0x000000011c066996: jmpq   *(%r10,%rbx,8)
  0x000000011c06699a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
sastore  86 sastore  [0x000000011c0669c0, 0x000000011c066a00]  64 bytes

  0x000000011c0669c0: mov    (%rsp),%eax
  0x000000011c0669c3: add    $0x8,%rsp
  0x000000011c0669c7: mov    (%rsp),%ebx
  0x000000011c0669ca: add    $0x8,%rsp
  0x000000011c0669ce: pop    %rdx
  0x000000011c0669cf: movslq %ebx,%rbx
  0x000000011c0669d2: cmp    0xc(%rdx),%ebx
  0x000000011c0669d5: jb     0x000000011c0669df
  0x000000011c0669d7: mov    %rdx,%rsi
  0x000000011c0669da: jmpq   0x000000011c061540
  0x000000011c0669df: mov    %ax,0x10(%rdx,%rbx,2)
  0x000000011c0669e4: movzbl 0x1(%r13),%ebx
  0x000000011c0669e9: inc    %r13
  0x000000011c0669ec: movabs $0x1109d7a20,%r10
  0x000000011c0669f6: jmpq   *(%r10,%rbx,8)
  0x000000011c0669fa: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
pop  87 pop  [0x000000011c066a20, 0x000000011c066a80]  96 bytes

  0x000000011c066a20: push   %rax
  0x000000011c066a21: jmpq   0x000000011c066a5f
  0x000000011c066a26: sub    $0x8,%rsp
  0x000000011c066a2a: vmovss %xmm0,(%rsp)
  0x000000011c066a2f: jmpq   0x000000011c066a5f
  0x000000011c066a34: sub    $0x10,%rsp
  0x000000011c066a38: vmovsd %xmm0,(%rsp)
  0x000000011c066a3d: jmpq   0x000000011c066a5f
  0x000000011c066a42: sub    $0x10,%rsp
  0x000000011c066a46: mov    %rax,(%rsp)
  0x000000011c066a4a: movabs $0x0,%r10
  0x000000011c066a54: mov    %r10,0x8(%rsp)
  0x000000011c066a59: jmpq   0x000000011c066a5f
  0x000000011c066a5e: push   %rax
  0x000000011c066a5f: add    $0x8,%rsp
  0x000000011c066a63: movzbl 0x1(%r13),%ebx
  0x000000011c066a68: inc    %r13
  0x000000011c066a6b: movabs $0x1109d7a20,%r10
  0x000000011c066a75: jmpq   *(%r10,%rbx,8)
  0x000000011c066a79: nopl   0x0(%rax)

----------------------------------------------------------------------
pop2  88 pop2  [0x000000011c066aa0, 0x000000011c066b00]  96 bytes

  0x000000011c066aa0: push   %rax
  0x000000011c066aa1: jmpq   0x000000011c066adf
  0x000000011c066aa6: sub    $0x8,%rsp
  0x000000011c066aaa: vmovss %xmm0,(%rsp)
  0x000000011c066aaf: jmpq   0x000000011c066adf
  0x000000011c066ab4: sub    $0x10,%rsp
  0x000000011c066ab8: vmovsd %xmm0,(%rsp)
  0x000000011c066abd: jmpq   0x000000011c066adf
  0x000000011c066ac2: sub    $0x10,%rsp
  0x000000011c066ac6: mov    %rax,(%rsp)
  0x000000011c066aca: movabs $0x0,%r10
  0x000000011c066ad4: mov    %r10,0x8(%rsp)
  0x000000011c066ad9: jmpq   0x000000011c066adf
  0x000000011c066ade: push   %rax
  0x000000011c066adf: add    $0x10,%rsp
  0x000000011c066ae3: movzbl 0x1(%r13),%ebx
  0x000000011c066ae8: inc    %r13
  0x000000011c066aeb: movabs $0x1109d7a20,%r10
  0x000000011c066af5: jmpq   *(%r10,%rbx,8)
  0x000000011c066af9: nopl   0x0(%rax)

----------------------------------------------------------------------
dup  89 dup  [0x000000011c066b20, 0x000000011c066b80]  96 bytes

  0x000000011c066b20: push   %rax
  0x000000011c066b21: jmpq   0x000000011c066b5f
  0x000000011c066b26: sub    $0x8,%rsp
  0x000000011c066b2a: vmovss %xmm0,(%rsp)
  0x000000011c066b2f: jmpq   0x000000011c066b5f
  0x000000011c066b34: sub    $0x10,%rsp
  0x000000011c066b38: vmovsd %xmm0,(%rsp)
  0x000000011c066b3d: jmpq   0x000000011c066b5f
  0x000000011c066b42: sub    $0x10,%rsp
  0x000000011c066b46: mov    %rax,(%rsp)
  0x000000011c066b4a: movabs $0x0,%r10
  0x000000011c066b54: mov    %r10,0x8(%rsp)
  0x000000011c066b59: jmpq   0x000000011c066b5f
  0x000000011c066b5e: push   %rax
  0x000000011c066b5f: mov    (%rsp),%rax
  0x000000011c066b63: push   %rax
  0x000000011c066b64: movzbl 0x1(%r13),%ebx
  0x000000011c066b69: inc    %r13
  0x000000011c066b6c: movabs $0x1109d7a20,%r10
  0x000000011c066b76: jmpq   *(%r10,%rbx,8)
  0x000000011c066b7a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
dup_x1  90 dup_x1  [0x000000011c066ba0, 0x000000011c066c20]  128 bytes

  0x000000011c066ba0: push   %rax
  0x000000011c066ba1: jmpq   0x000000011c066bdf
  0x000000011c066ba6: sub    $0x8,%rsp
  0x000000011c066baa: vmovss %xmm0,(%rsp)
  0x000000011c066baf: jmpq   0x000000011c066bdf
  0x000000011c066bb4: sub    $0x10,%rsp
  0x000000011c066bb8: vmovsd %xmm0,(%rsp)
  0x000000011c066bbd: jmpq   0x000000011c066bdf
  0x000000011c066bc2: sub    $0x10,%rsp
  0x000000011c066bc6: mov    %rax,(%rsp)
  0x000000011c066bca: movabs $0x0,%r10
  0x000000011c066bd4: mov    %r10,0x8(%rsp)
  0x000000011c066bd9: jmpq   0x000000011c066bdf
  0x000000011c066bde: push   %rax
  0x000000011c066bdf: mov    (%rsp),%rax
  0x000000011c066be3: mov    0x8(%rsp),%rcx
  0x000000011c066be8: mov    %rax,0x8(%rsp)
  0x000000011c066bed: mov    %rcx,(%rsp)
  0x000000011c066bf1: push   %rax
  0x000000011c066bf2: movzbl 0x1(%r13),%ebx
  0x000000011c066bf7: inc    %r13
  0x000000011c066bfa: movabs $0x1109d7a20,%r10
  0x000000011c066c04: jmpq   *(%r10,%rbx,8)
  0x000000011c066c08: add    %al,(%rax)
  0x000000011c066c0a: add    %al,(%rax)
  0x000000011c066c0c: add    %al,(%rax)
  0x000000011c066c0e: add    %al,(%rax)
  0x000000011c066c10: add    %al,(%rax)
  0x000000011c066c12: add    %al,(%rax)
  0x000000011c066c14: add    %al,(%rax)
  0x000000011c066c16: add    %al,(%rax)
  0x000000011c066c18: add    %al,(%rax)
  0x000000011c066c1a: add    %al,(%rax)
  0x000000011c066c1c: add    %al,(%rax)
  0x000000011c066c1e: add    %al,(%rax)

----------------------------------------------------------------------
dup_x2  91 dup_x2  [0x000000011c066c40, 0x000000011c066cc0]  128 bytes

  0x000000011c066c40: push   %rax
  0x000000011c066c41: jmpq   0x000000011c066c7f
  0x000000011c066c46: sub    $0x8,%rsp
  0x000000011c066c4a: vmovss %xmm0,(%rsp)
  0x000000011c066c4f: jmpq   0x000000011c066c7f
  0x000000011c066c54: sub    $0x10,%rsp
  0x000000011c066c58: vmovsd %xmm0,(%rsp)
  0x000000011c066c5d: jmpq   0x000000011c066c7f
  0x000000011c066c62: sub    $0x10,%rsp
  0x000000011c066c66: mov    %rax,(%rsp)
  0x000000011c066c6a: movabs $0x0,%r10
  0x000000011c066c74: mov    %r10,0x8(%rsp)
  0x000000011c066c79: jmpq   0x000000011c066c7f
  0x000000011c066c7e: push   %rax
  0x000000011c066c7f: mov    (%rsp),%rax
  0x000000011c066c83: mov    0x10(%rsp),%rcx
  0x000000011c066c88: mov    %rax,0x10(%rsp)
  0x000000011c066c8d: push   %rax
  0x000000011c066c8e: mov    0x10(%rsp),%rax
  0x000000011c066c93: mov    %rcx,0x10(%rsp)
  0x000000011c066c98: mov    %rax,0x8(%rsp)
  0x000000011c066c9d: movzbl 0x1(%r13),%ebx
  0x000000011c066ca2: inc    %r13
  0x000000011c066ca5: movabs $0x1109d7a20,%r10
  0x000000011c066caf: jmpq   *(%r10,%rbx,8)
  0x000000011c066cb3: nopl   0x0(%rax,%rax,1)
  0x000000011c066cb8: add    %al,(%rax)
  0x000000011c066cba: add    %al,(%rax)
  0x000000011c066cbc: add    %al,(%rax)
  0x000000011c066cbe: add    %al,(%rax)

----------------------------------------------------------------------
dup2  92 dup2  [0x000000011c066ce0, 0x000000011c066d60]  128 bytes

  0x000000011c066ce0: push   %rax
  0x000000011c066ce1: jmpq   0x000000011c066d1f
  0x000000011c066ce6: sub    $0x8,%rsp
  0x000000011c066cea: vmovss %xmm0,(%rsp)
  0x000000011c066cef: jmpq   0x000000011c066d1f
  0x000000011c066cf4: sub    $0x10,%rsp
  0x000000011c066cf8: vmovsd %xmm0,(%rsp)
  0x000000011c066cfd: jmpq   0x000000011c066d1f
  0x000000011c066d02: sub    $0x10,%rsp
  0x000000011c066d06: mov    %rax,(%rsp)
  0x000000011c066d0a: movabs $0x0,%r10
  0x000000011c066d14: mov    %r10,0x8(%rsp)
  0x000000011c066d19: jmpq   0x000000011c066d1f
  0x000000011c066d1e: push   %rax
  0x000000011c066d1f: mov    0x8(%rsp),%rax
  0x000000011c066d24: push   %rax
  0x000000011c066d25: mov    0x8(%rsp),%rax
  0x000000011c066d2a: push   %rax
  0x000000011c066d2b: movzbl 0x1(%r13),%ebx
  0x000000011c066d30: inc    %r13
  0x000000011c066d33: movabs $0x1109d7a20,%r10
  0x000000011c066d3d: jmpq   *(%r10,%rbx,8)
  0x000000011c066d41: nopl   0x0(%rax)
  0x000000011c066d48: add    %al,(%rax)
  0x000000011c066d4a: add    %al,(%rax)
  0x000000011c066d4c: add    %al,(%rax)
  0x000000011c066d4e: add    %al,(%rax)
  0x000000011c066d50: add    %al,(%rax)
  0x000000011c066d52: add    %al,(%rax)
  0x000000011c066d54: add    %al,(%rax)
  0x000000011c066d56: add    %al,(%rax)
  0x000000011c066d58: add    %al,(%rax)
  0x000000011c066d5a: add    %al,(%rax)
  0x000000011c066d5c: add    %al,(%rax)
  0x000000011c066d5e: add    %al,(%rax)

----------------------------------------------------------------------
dup2_x1  93 dup2_x1  [0x000000011c066d80, 0x000000011c066e00]  128 bytes

  0x000000011c066d80: push   %rax
  0x000000011c066d81: jmpq   0x000000011c066dbf
  0x000000011c066d86: sub    $0x8,%rsp
  0x000000011c066d8a: vmovss %xmm0,(%rsp)
  0x000000011c066d8f: jmpq   0x000000011c066dbf
  0x000000011c066d94: sub    $0x10,%rsp
  0x000000011c066d98: vmovsd %xmm0,(%rsp)
  0x000000011c066d9d: jmpq   0x000000011c066dbf
  0x000000011c066da2: sub    $0x10,%rsp
  0x000000011c066da6: mov    %rax,(%rsp)
  0x000000011c066daa: movabs $0x0,%r10
  0x000000011c066db4: mov    %r10,0x8(%rsp)
  0x000000011c066db9: jmpq   0x000000011c066dbf
  0x000000011c066dbe: push   %rax
  0x000000011c066dbf: mov    (%rsp),%rcx
  0x000000011c066dc3: mov    0x8(%rsp),%rax
  0x000000011c066dc8: push   %rax
  0x000000011c066dc9: push   %rcx
  0x000000011c066dca: mov    %rcx,0x18(%rsp)
  0x000000011c066dcf: mov    0x20(%rsp),%rcx
  0x000000011c066dd4: mov    %rcx,0x10(%rsp)
  0x000000011c066dd9: mov    %rax,0x20(%rsp)
  0x000000011c066dde: movzbl 0x1(%r13),%ebx
  0x000000011c066de3: inc    %r13
  0x000000011c066de6: movabs $0x1109d7a20,%r10
  0x000000011c066df0: jmpq   *(%r10,%rbx,8)
  0x000000011c066df4: nopl   0x0(%rax)
  0x000000011c066df8: add    %al,(%rax)
  0x000000011c066dfa: add    %al,(%rax)
  0x000000011c066dfc: add    %al,(%rax)
  0x000000011c066dfe: add    %al,(%rax)

----------------------------------------------------------------------
dup2_x2  94 dup2_x2  [0x000000011c066e20, 0x000000011c066ec0]  160 bytes

  0x000000011c066e20: push   %rax
  0x000000011c066e21: jmpq   0x000000011c066e5f
  0x000000011c066e26: sub    $0x8,%rsp
  0x000000011c066e2a: vmovss %xmm0,(%rsp)
  0x000000011c066e2f: jmpq   0x000000011c066e5f
  0x000000011c066e34: sub    $0x10,%rsp
  0x000000011c066e38: vmovsd %xmm0,(%rsp)
  0x000000011c066e3d: jmpq   0x000000011c066e5f
  0x000000011c066e42: sub    $0x10,%rsp
  0x000000011c066e46: mov    %rax,(%rsp)
  0x000000011c066e4a: movabs $0x0,%r10
  0x000000011c066e54: mov    %r10,0x8(%rsp)
  0x000000011c066e59: jmpq   0x000000011c066e5f
  0x000000011c066e5e: push   %rax
  0x000000011c066e5f: mov    (%rsp),%rcx
  0x000000011c066e63: mov    0x8(%rsp),%rax
  0x000000011c066e68: push   %rax
  0x000000011c066e69: push   %rcx
  0x000000011c066e6a: mov    0x20(%rsp),%rax
  0x000000011c066e6f: mov    %rax,0x10(%rsp)
  0x000000011c066e74: mov    %rcx,0x20(%rsp)
  0x000000011c066e79: mov    0x28(%rsp),%rcx
  0x000000011c066e7e: mov    0x18(%rsp),%rax
  0x000000011c066e83: mov    %rcx,0x18(%rsp)
  0x000000011c066e88: mov    %rax,0x28(%rsp)
  0x000000011c066e8d: movzbl 0x1(%r13),%ebx
  0x000000011c066e92: inc    %r13
  0x000000011c066e95: movabs $0x1109d7a20,%r10
  0x000000011c066e9f: jmpq   *(%r10,%rbx,8)
  0x000000011c066ea3: nopl   0x0(%rax,%rax,1)
  0x000000011c066ea8: add    %al,(%rax)
  0x000000011c066eaa: add    %al,(%rax)
  0x000000011c066eac: add    %al,(%rax)
  0x000000011c066eae: add    %al,(%rax)
  0x000000011c066eb0: add    %al,(%rax)
  0x000000011c066eb2: add    %al,(%rax)
  0x000000011c066eb4: add    %al,(%rax)
  0x000000011c066eb6: add    %al,(%rax)
  0x000000011c066eb8: add    %al,(%rax)
  0x000000011c066eba: add    %al,(%rax)
  0x000000011c066ebc: add    %al,(%rax)
  0x000000011c066ebe: add    %al,(%rax)

----------------------------------------------------------------------
swap  95 swap  [0x000000011c066ee0, 0x000000011c066f60]  128 bytes

  0x000000011c066ee0: push   %rax
  0x000000011c066ee1: jmpq   0x000000011c066f1f
  0x000000011c066ee6: sub    $0x8,%rsp
  0x000000011c066eea: vmovss %xmm0,(%rsp)
  0x000000011c066eef: jmpq   0x000000011c066f1f
  0x000000011c066ef4: sub    $0x10,%rsp
  0x000000011c066ef8: vmovsd %xmm0,(%rsp)
  0x000000011c066efd: jmpq   0x000000011c066f1f
  0x000000011c066f02: sub    $0x10,%rsp
  0x000000011c066f06: mov    %rax,(%rsp)
  0x000000011c066f0a: movabs $0x0,%r10
  0x000000011c066f14: mov    %r10,0x8(%rsp)
  0x000000011c066f19: jmpq   0x000000011c066f1f
  0x000000011c066f1e: push   %rax
  0x000000011c066f1f: mov    0x8(%rsp),%rcx
  0x000000011c066f24: mov    (%rsp),%rax
  0x000000011c066f28: mov    %rcx,(%rsp)
  0x000000011c066f2c: mov    %rax,0x8(%rsp)
  0x000000011c066f31: movzbl 0x1(%r13),%ebx
  0x000000011c066f36: inc    %r13
  0x000000011c066f39: movabs $0x1109d7a20,%r10
  0x000000011c066f43: jmpq   *(%r10,%rbx,8)
  0x000000011c066f47: nop
  0x000000011c066f48: add    %al,(%rax)
  0x000000011c066f4a: add    %al,(%rax)
  0x000000011c066f4c: add    %al,(%rax)
  0x000000011c066f4e: add    %al,(%rax)
  0x000000011c066f50: add    %al,(%rax)
  0x000000011c066f52: add    %al,(%rax)
  0x000000011c066f54: add    %al,(%rax)
  0x000000011c066f56: add    %al,(%rax)
  0x000000011c066f58: add    %al,(%rax)
  0x000000011c066f5a: add    %al,(%rax)
  0x000000011c066f5c: add    %al,(%rax)
  0x000000011c066f5e: add    %al,(%rax)

----------------------------------------------------------------------
iadd  96 iadd  [0x000000011c066f80, 0x000000011c066fc0]  64 bytes

  0x000000011c066f80: mov    (%rsp),%eax
  0x000000011c066f83: add    $0x8,%rsp
  0x000000011c066f87: mov    (%rsp),%edx
  0x000000011c066f8a: add    $0x8,%rsp
  0x000000011c066f8e: add    %edx,%eax
  0x000000011c066f90: movzbl 0x1(%r13),%ebx
  0x000000011c066f95: inc    %r13
  0x000000011c066f98: movabs $0x1109d5220,%r10
  0x000000011c066fa2: jmpq   *(%r10,%rbx,8)
  0x000000011c066fa6: xchg   %ax,%ax
  0x000000011c066fa8: add    %al,(%rax)
  0x000000011c066faa: add    %al,(%rax)
  0x000000011c066fac: add    %al,(%rax)
  0x000000011c066fae: add    %al,(%rax)
  0x000000011c066fb0: add    %al,(%rax)
  0x000000011c066fb2: add    %al,(%rax)
  0x000000011c066fb4: add    %al,(%rax)
  0x000000011c066fb6: add    %al,(%rax)
  0x000000011c066fb8: add    %al,(%rax)
  0x000000011c066fba: add    %al,(%rax)
  0x000000011c066fbc: add    %al,(%rax)
  0x000000011c066fbe: add    %al,(%rax)

----------------------------------------------------------------------
ladd  97 ladd  [0x000000011c066fe0, 0x000000011c067020]  64 bytes

  0x000000011c066fe0: mov    (%rsp),%rax
  0x000000011c066fe4: add    $0x10,%rsp
  0x000000011c066fe8: mov    (%rsp),%rdx
  0x000000011c066fec: add    $0x10,%rsp
  0x000000011c066ff0: add    %rdx,%rax
  0x000000011c066ff3: movzbl 0x1(%r13),%ebx
  0x000000011c066ff8: inc    %r13
  0x000000011c066ffb: movabs $0x1109d5a20,%r10
  0x000000011c067005: jmpq   *(%r10,%rbx,8)
  0x000000011c067009: nopl   0x0(%rax)
  0x000000011c067010: add    %al,(%rax)
  0x000000011c067012: add    %al,(%rax)
  0x000000011c067014: add    %al,(%rax)
  0x000000011c067016: add    %al,(%rax)
  0x000000011c067018: add    %al,(%rax)
  0x000000011c06701a: add    %al,(%rax)
  0x000000011c06701c: add    %al,(%rax)
  0x000000011c06701e: add    %al,(%rax)

----------------------------------------------------------------------
fadd  98 fadd  [0x000000011c067040, 0x000000011c067080]  64 bytes

  0x000000011c067040: vmovss (%rsp),%xmm0
  0x000000011c067045: add    $0x8,%rsp
  0x000000011c067049: vaddss (%rsp),%xmm0,%xmm0
  0x000000011c06704e: add    $0x8,%rsp
  0x000000011c067052: movzbl 0x1(%r13),%ebx
  0x000000011c067057: inc    %r13
  0x000000011c06705a: movabs $0x1109d6220,%r10
  0x000000011c067064: jmpq   *(%r10,%rbx,8)
  0x000000011c067068: add    %al,(%rax)
  0x000000011c06706a: add    %al,(%rax)
  0x000000011c06706c: add    %al,(%rax)
  0x000000011c06706e: add    %al,(%rax)
  0x000000011c067070: add    %al,(%rax)
  0x000000011c067072: add    %al,(%rax)
  0x000000011c067074: add    %al,(%rax)
  0x000000011c067076: add    %al,(%rax)
  0x000000011c067078: add    %al,(%rax)
  0x000000011c06707a: add    %al,(%rax)
  0x000000011c06707c: add    %al,(%rax)
  0x000000011c06707e: add    %al,(%rax)

----------------------------------------------------------------------
dadd  99 dadd  [0x000000011c0670a0, 0x000000011c0670e0]  64 bytes

  0x000000011c0670a0: vmovsd (%rsp),%xmm0
  0x000000011c0670a5: add    $0x10,%rsp
  0x000000011c0670a9: vaddsd (%rsp),%xmm0,%xmm0
  0x000000011c0670ae: add    $0x10,%rsp
  0x000000011c0670b2: movzbl 0x1(%r13),%ebx
  0x000000011c0670b7: inc    %r13
  0x000000011c0670ba: movabs $0x1109d6a20,%r10
  0x000000011c0670c4: jmpq   *(%r10,%rbx,8)
  0x000000011c0670c8: add    %al,(%rax)
  0x000000011c0670ca: add    %al,(%rax)
  0x000000011c0670cc: add    %al,(%rax)
  0x000000011c0670ce: add    %al,(%rax)
  0x000000011c0670d0: add    %al,(%rax)
  0x000000011c0670d2: add    %al,(%rax)
  0x000000011c0670d4: add    %al,(%rax)
  0x000000011c0670d6: add    %al,(%rax)
  0x000000011c0670d8: add    %al,(%rax)
  0x000000011c0670da: add    %al,(%rax)
  0x000000011c0670dc: add    %al,(%rax)
  0x000000011c0670de: add    %al,(%rax)

----------------------------------------------------------------------
isub  100 isub  [0x000000011c067100, 0x000000011c067140]  64 bytes

  0x000000011c067100: mov    (%rsp),%eax
  0x000000011c067103: add    $0x8,%rsp
  0x000000011c067107: mov    %eax,%edx
  0x000000011c067109: mov    (%rsp),%eax
  0x000000011c06710c: add    $0x8,%rsp
  0x000000011c067110: sub    %edx,%eax
  0x000000011c067112: movzbl 0x1(%r13),%ebx
  0x000000011c067117: inc    %r13
  0x000000011c06711a: movabs $0x1109d5220,%r10
  0x000000011c067124: jmpq   *(%r10,%rbx,8)
  0x000000011c067128: add    %al,(%rax)
  0x000000011c06712a: add    %al,(%rax)
  0x000000011c06712c: add    %al,(%rax)
  0x000000011c06712e: add    %al,(%rax)
  0x000000011c067130: add    %al,(%rax)
  0x000000011c067132: add    %al,(%rax)
  0x000000011c067134: add    %al,(%rax)
  0x000000011c067136: add    %al,(%rax)
  0x000000011c067138: add    %al,(%rax)
  0x000000011c06713a: add    %al,(%rax)
  0x000000011c06713c: add    %al,(%rax)
  0x000000011c06713e: add    %al,(%rax)

----------------------------------------------------------------------
lsub  101 lsub  [0x000000011c067160, 0x000000011c0671a0]  64 bytes

  0x000000011c067160: mov    (%rsp),%rax
  0x000000011c067164: add    $0x10,%rsp
  0x000000011c067168: mov    %rax,%rdx
  0x000000011c06716b: mov    (%rsp),%rax
  0x000000011c06716f: add    $0x10,%rsp
  0x000000011c067173: sub    %rdx,%rax
  0x000000011c067176: movzbl 0x1(%r13),%ebx
  0x000000011c06717b: inc    %r13
  0x000000011c06717e: movabs $0x1109d5a20,%r10
  0x000000011c067188: jmpq   *(%r10,%rbx,8)
  0x000000011c06718c: nopl   0x0(%rax)
  0x000000011c067190: add    %al,(%rax)
  0x000000011c067192: add    %al,(%rax)
  0x000000011c067194: add    %al,(%rax)
  0x000000011c067196: add    %al,(%rax)
  0x000000011c067198: add    %al,(%rax)
  0x000000011c06719a: add    %al,(%rax)
  0x000000011c06719c: add    %al,(%rax)
  0x000000011c06719e: add    %al,(%rax)

----------------------------------------------------------------------
fsub  102 fsub  [0x000000011c0671c0, 0x000000011c067200]  64 bytes

  0x000000011c0671c0: vmovss (%rsp),%xmm0
  0x000000011c0671c5: add    $0x8,%rsp
  0x000000011c0671c9: vmovaps %xmm0,%xmm1
  0x000000011c0671cd: vmovss (%rsp),%xmm0
  0x000000011c0671d2: add    $0x8,%rsp
  0x000000011c0671d6: vsubss %xmm1,%xmm0,%xmm0
  0x000000011c0671da: movzbl 0x1(%r13),%ebx
  0x000000011c0671df: inc    %r13
  0x000000011c0671e2: movabs $0x1109d6220,%r10
  0x000000011c0671ec: jmpq   *(%r10,%rbx,8)
  0x000000011c0671f0: add    %al,(%rax)
  0x000000011c0671f2: add    %al,(%rax)
  0x000000011c0671f4: add    %al,(%rax)
  0x000000011c0671f6: add    %al,(%rax)
  0x000000011c0671f8: add    %al,(%rax)
  0x000000011c0671fa: add    %al,(%rax)
  0x000000011c0671fc: add    %al,(%rax)
  0x000000011c0671fe: add    %al,(%rax)

----------------------------------------------------------------------
dsub  103 dsub  [0x000000011c067220, 0x000000011c067260]  64 bytes

  0x000000011c067220: vmovsd (%rsp),%xmm0
  0x000000011c067225: add    $0x10,%rsp
  0x000000011c067229: vmovapd %xmm0,%xmm1
  0x000000011c06722d: vmovsd (%rsp),%xmm0
  0x000000011c067232: add    $0x10,%rsp
  0x000000011c067236: vsubsd %xmm1,%xmm0,%xmm0
  0x000000011c06723a: movzbl 0x1(%r13),%ebx
  0x000000011c06723f: inc    %r13
  0x000000011c067242: movabs $0x1109d6a20,%r10
  0x000000011c06724c: jmpq   *(%r10,%rbx,8)
  0x000000011c067250: add    %al,(%rax)
  0x000000011c067252: add    %al,(%rax)
  0x000000011c067254: add    %al,(%rax)
  0x000000011c067256: add    %al,(%rax)
  0x000000011c067258: add    %al,(%rax)
  0x000000011c06725a: add    %al,(%rax)
  0x000000011c06725c: add    %al,(%rax)
  0x000000011c06725e: add    %al,(%rax)

----------------------------------------------------------------------
imul  104 imul  [0x000000011c067280, 0x000000011c0672c0]  64 bytes

  0x000000011c067280: mov    (%rsp),%eax
  0x000000011c067283: add    $0x8,%rsp
  0x000000011c067287: mov    (%rsp),%edx
  0x000000011c06728a: add    $0x8,%rsp
  0x000000011c06728e: imul   %edx,%eax
  0x000000011c067291: movzbl 0x1(%r13),%ebx
  0x000000011c067296: inc    %r13
  0x000000011c067299: movabs $0x1109d5220,%r10
  0x000000011c0672a3: jmpq   *(%r10,%rbx,8)
  0x000000011c0672a7: nop
  0x000000011c0672a8: add    %al,(%rax)
  0x000000011c0672aa: add    %al,(%rax)
  0x000000011c0672ac: add    %al,(%rax)
  0x000000011c0672ae: add    %al,(%rax)
  0x000000011c0672b0: add    %al,(%rax)
  0x000000011c0672b2: add    %al,(%rax)
  0x000000011c0672b4: add    %al,(%rax)
  0x000000011c0672b6: add    %al,(%rax)
  0x000000011c0672b8: add    %al,(%rax)
  0x000000011c0672ba: add    %al,(%rax)
  0x000000011c0672bc: add    %al,(%rax)
  0x000000011c0672be: add    %al,(%rax)

----------------------------------------------------------------------
lmul  105 lmul  [0x000000011c0672e0, 0x000000011c067320]  64 bytes

  0x000000011c0672e0: mov    (%rsp),%rax
  0x000000011c0672e4: add    $0x10,%rsp
  0x000000011c0672e8: mov    (%rsp),%rdx
  0x000000011c0672ec: add    $0x10,%rsp
  0x000000011c0672f0: imul   %rdx,%rax
  0x000000011c0672f4: movzbl 0x1(%r13),%ebx
  0x000000011c0672f9: inc    %r13
  0x000000011c0672fc: movabs $0x1109d5a20,%r10
  0x000000011c067306: jmpq   *(%r10,%rbx,8)
  0x000000011c06730a: nopw   0x0(%rax,%rax,1)
  0x000000011c067310: add    %al,(%rax)
  0x000000011c067312: add    %al,(%rax)
  0x000000011c067314: add    %al,(%rax)
  0x000000011c067316: add    %al,(%rax)
  0x000000011c067318: add    %al,(%rax)
  0x000000011c06731a: add    %al,(%rax)
  0x000000011c06731c: add    %al,(%rax)
  0x000000011c06731e: add    %al,(%rax)

----------------------------------------------------------------------
fmul  106 fmul  [0x000000011c067340, 0x000000011c067380]  64 bytes

  0x000000011c067340: vmovss (%rsp),%xmm0
  0x000000011c067345: add    $0x8,%rsp
  0x000000011c067349: vmulss (%rsp),%xmm0,%xmm0
  0x000000011c06734e: add    $0x8,%rsp
  0x000000011c067352: movzbl 0x1(%r13),%ebx
  0x000000011c067357: inc    %r13
  0x000000011c06735a: movabs $0x1109d6220,%r10
  0x000000011c067364: jmpq   *(%r10,%rbx,8)
  0x000000011c067368: add    %al,(%rax)
  0x000000011c06736a: add    %al,(%rax)
  0x000000011c06736c: add    %al,(%rax)
  0x000000011c06736e: add    %al,(%rax)
  0x000000011c067370: add    %al,(%rax)
  0x000000011c067372: add    %al,(%rax)
  0x000000011c067374: add    %al,(%rax)
  0x000000011c067376: add    %al,(%rax)
  0x000000011c067378: add    %al,(%rax)
  0x000000011c06737a: add    %al,(%rax)
  0x000000011c06737c: add    %al,(%rax)
  0x000000011c06737e: add    %al,(%rax)

----------------------------------------------------------------------
dmul  107 dmul  [0x000000011c0673a0, 0x000000011c0673e0]  64 bytes

  0x000000011c0673a0: vmovsd (%rsp),%xmm0
  0x000000011c0673a5: add    $0x10,%rsp
  0x000000011c0673a9: vmulsd (%rsp),%xmm0,%xmm0
  0x000000011c0673ae: add    $0x10,%rsp
  0x000000011c0673b2: movzbl 0x1(%r13),%ebx
  0x000000011c0673b7: inc    %r13
  0x000000011c0673ba: movabs $0x1109d6a20,%r10
  0x000000011c0673c4: jmpq   *(%r10,%rbx,8)
  0x000000011c0673c8: add    %al,(%rax)
  0x000000011c0673ca: add    %al,(%rax)
  0x000000011c0673cc: add    %al,(%rax)
  0x000000011c0673ce: add    %al,(%rax)
  0x000000011c0673d0: add    %al,(%rax)
  0x000000011c0673d2: add    %al,(%rax)
  0x000000011c0673d4: add    %al,(%rax)
  0x000000011c0673d6: add    %al,(%rax)
  0x000000011c0673d8: add    %al,(%rax)
  0x000000011c0673da: add    %al,(%rax)
  0x000000011c0673dc: add    %al,(%rax)
  0x000000011c0673de: add    %al,(%rax)

----------------------------------------------------------------------
idiv  108 idiv  [0x000000011c067400, 0x000000011c067440]  64 bytes

  0x000000011c067400: mov    (%rsp),%eax
  0x000000011c067403: add    $0x8,%rsp
  0x000000011c067407: mov    %eax,%ecx
  0x000000011c067409: mov    (%rsp),%eax
  0x000000011c06740c: add    $0x8,%rsp
  0x000000011c067410: cmp    $0x80000000,%eax
  0x000000011c067416: jne    0x000000011c067427
  0x000000011c06741c: xor    %edx,%edx
  0x000000011c06741e: cmp    $0xffffffff,%ecx
  0x000000011c067421: je     0x000000011c06742a
  0x000000011c067427: cltd   
  0x000000011c067428: idiv   %ecx
  0x000000011c06742a: movzbl 0x1(%r13),%ebx
  0x000000011c06742f: inc    %r13
  0x000000011c067432: movabs $0x1109d5220,%r10
  0x000000011c06743c: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
ldiv  109 ldiv  [0x000000011c067460, 0x000000011c0674c0]  96 bytes

  0x000000011c067460: mov    (%rsp),%rax
  0x000000011c067464: add    $0x10,%rsp
  0x000000011c067468: mov    %rax,%rcx
  0x000000011c06746b: mov    (%rsp),%rax
  0x000000011c06746f: add    $0x10,%rsp
  0x000000011c067473: test   %rcx,%rcx
  0x000000011c067476: je     0x000000011c0616bb
  0x000000011c06747c: cmp    -0xb7f8943(%rip),%rax        # 0x000000011086eb40 = MacroAssembler::corrected_idivq(RegisterImpl*)::min_long
  0x000000011c067483: jne    0x000000011c067495
  0x000000011c067489: xor    %edx,%edx
  0x000000011c06748b: cmp    $0xffffffffffffffff,%rcx
  0x000000011c06748f: je     0x000000011c06749a
  0x000000011c067495: cqto   
  0x000000011c067497: idiv   %rcx
  0x000000011c06749a: movzbl 0x1(%r13),%ebx
  0x000000011c06749f: inc    %r13
  0x000000011c0674a2: movabs $0x1109d5a20,%r10
  0x000000011c0674ac: jmpq   *(%r10,%rbx,8)
  0x000000011c0674b0: add    %al,(%rax)
  0x000000011c0674b2: add    %al,(%rax)
  0x000000011c0674b4: add    %al,(%rax)
  0x000000011c0674b6: add    %al,(%rax)
  0x000000011c0674b8: add    %al,(%rax)
  0x000000011c0674ba: add    %al,(%rax)
  0x000000011c0674bc: add    %al,(%rax)
  0x000000011c0674be: add    %al,(%rax)

----------------------------------------------------------------------
fdiv  110 fdiv  [0x000000011c0674e0, 0x000000011c067520]  64 bytes

  0x000000011c0674e0: vmovss (%rsp),%xmm0
  0x000000011c0674e5: add    $0x8,%rsp
  0x000000011c0674e9: vmovaps %xmm0,%xmm1
  0x000000011c0674ed: vmovss (%rsp),%xmm0
  0x000000011c0674f2: add    $0x8,%rsp
  0x000000011c0674f6: vdivss %xmm1,%xmm0,%xmm0
  0x000000011c0674fa: movzbl 0x1(%r13),%ebx
  0x000000011c0674ff: inc    %r13
  0x000000011c067502: movabs $0x1109d6220,%r10
  0x000000011c06750c: jmpq   *(%r10,%rbx,8)
  0x000000011c067510: add    %al,(%rax)
  0x000000011c067512: add    %al,(%rax)
  0x000000011c067514: add    %al,(%rax)
  0x000000011c067516: add    %al,(%rax)
  0x000000011c067518: add    %al,(%rax)
  0x000000011c06751a: add    %al,(%rax)
  0x000000011c06751c: add    %al,(%rax)
  0x000000011c06751e: add    %al,(%rax)

----------------------------------------------------------------------
ddiv  111 ddiv  [0x000000011c067540, 0x000000011c067580]  64 bytes

  0x000000011c067540: vmovsd (%rsp),%xmm0
  0x000000011c067545: add    $0x10,%rsp
  0x000000011c067549: vmovapd %xmm0,%xmm1
  0x000000011c06754d: vmovsd (%rsp),%xmm0
  0x000000011c067552: add    $0x10,%rsp
  0x000000011c067556: vdivsd %xmm1,%xmm0,%xmm0
  0x000000011c06755a: movzbl 0x1(%r13),%ebx
  0x000000011c06755f: inc    %r13
  0x000000011c067562: movabs $0x1109d6a20,%r10
  0x000000011c06756c: jmpq   *(%r10,%rbx,8)
  0x000000011c067570: add    %al,(%rax)
  0x000000011c067572: add    %al,(%rax)
  0x000000011c067574: add    %al,(%rax)
  0x000000011c067576: add    %al,(%rax)
  0x000000011c067578: add    %al,(%rax)
  0x000000011c06757a: add    %al,(%rax)
  0x000000011c06757c: add    %al,(%rax)
  0x000000011c06757e: add    %al,(%rax)

----------------------------------------------------------------------
irem  112 irem  [0x000000011c0675a0, 0x000000011c067600]  96 bytes

  0x000000011c0675a0: mov    (%rsp),%eax
  0x000000011c0675a3: add    $0x8,%rsp
  0x000000011c0675a7: mov    %eax,%ecx
  0x000000011c0675a9: mov    (%rsp),%eax
  0x000000011c0675ac: add    $0x8,%rsp
  0x000000011c0675b0: cmp    $0x80000000,%eax
  0x000000011c0675b6: jne    0x000000011c0675c7
  0x000000011c0675bc: xor    %edx,%edx
  0x000000011c0675be: cmp    $0xffffffff,%ecx
  0x000000011c0675c1: je     0x000000011c0675ca
  0x000000011c0675c7: cltd   
  0x000000011c0675c8: idiv   %ecx
  0x000000011c0675ca: mov    %edx,%eax
  0x000000011c0675cc: movzbl 0x1(%r13),%ebx
  0x000000011c0675d1: inc    %r13
  0x000000011c0675d4: movabs $0x1109d5220,%r10
  0x000000011c0675de: jmpq   *(%r10,%rbx,8)
  0x000000011c0675e2: nopw   0x0(%rax,%rax,1)
  0x000000011c0675e8: add    %al,(%rax)
  0x000000011c0675ea: add    %al,(%rax)
  0x000000011c0675ec: add    %al,(%rax)
  0x000000011c0675ee: add    %al,(%rax)
  0x000000011c0675f0: add    %al,(%rax)
  0x000000011c0675f2: add    %al,(%rax)
  0x000000011c0675f4: add    %al,(%rax)
  0x000000011c0675f6: add    %al,(%rax)
  0x000000011c0675f8: add    %al,(%rax)
  0x000000011c0675fa: add    %al,(%rax)
  0x000000011c0675fc: add    %al,(%rax)
  0x000000011c0675fe: add    %al,(%rax)

----------------------------------------------------------------------
lrem  113 lrem  [0x000000011c067620, 0x000000011c067680]  96 bytes

  0x000000011c067620: mov    (%rsp),%rax
  0x000000011c067624: add    $0x10,%rsp
  0x000000011c067628: mov    %rax,%rcx
  0x000000011c06762b: mov    (%rsp),%rax
  0x000000011c06762f: add    $0x10,%rsp
  0x000000011c067633: test   %rcx,%rcx
  0x000000011c067636: je     0x000000011c0616bb
  0x000000011c06763c: cmp    -0xb7f8b03(%rip),%rax        # 0x000000011086eb40 = MacroAssembler::corrected_idivq(RegisterImpl*)::min_long
  0x000000011c067643: jne    0x000000011c067655
  0x000000011c067649: xor    %edx,%edx
  0x000000011c06764b: cmp    $0xffffffffffffffff,%rcx
  0x000000011c06764f: je     0x000000011c06765a
  0x000000011c067655: cqto   
  0x000000011c067657: idiv   %rcx
  0x000000011c06765a: mov    %rdx,%rax
  0x000000011c06765d: movzbl 0x1(%r13),%ebx
  0x000000011c067662: inc    %r13
  0x000000011c067665: movabs $0x1109d5a20,%r10
  0x000000011c06766f: jmpq   *(%r10,%rbx,8)
  0x000000011c067673: nopl   0x0(%rax,%rax,1)
  0x000000011c067678: add    %al,(%rax)
  0x000000011c06767a: add    %al,(%rax)
  0x000000011c06767c: add    %al,(%rax)
  0x000000011c06767e: add    %al,(%rax)

----------------------------------------------------------------------
frem  114 frem  [0x000000011c0676a0, 0x000000011c067700]  96 bytes

  0x000000011c0676a0: vmovss (%rsp),%xmm0
  0x000000011c0676a5: add    $0x8,%rsp
  0x000000011c0676a9: vmovaps %xmm0,%xmm1
  0x000000011c0676ad: vmovss (%rsp),%xmm0
  0x000000011c0676b2: add    $0x8,%rsp
  0x000000011c0676b6: test   $0xf,%esp
  0x000000011c0676bc: je     0x000000011c0676d4
  0x000000011c0676c2: sub    $0x8,%rsp
  0x000000011c0676c6: callq  0x00000001106963ac = SharedRuntime::frem(float, float)
  0x000000011c0676cb: add    $0x8,%rsp
  0x000000011c0676cf: jmpq   0x000000011c0676d9
  0x000000011c0676d4: callq  0x00000001106963ac = SharedRuntime::frem(float, float)
  0x000000011c0676d9: movzbl 0x1(%r13),%ebx
  0x000000011c0676de: inc    %r13
  0x000000011c0676e1: movabs $0x1109d6220,%r10
  0x000000011c0676eb: jmpq   *(%r10,%rbx,8)
  0x000000011c0676ef: nop
  0x000000011c0676f0: add    %al,(%rax)
  0x000000011c0676f2: add    %al,(%rax)
  0x000000011c0676f4: add    %al,(%rax)
  0x000000011c0676f6: add    %al,(%rax)
  0x000000011c0676f8: add    %al,(%rax)
  0x000000011c0676fa: add    %al,(%rax)
  0x000000011c0676fc: add    %al,(%rax)
  0x000000011c0676fe: add    %al,(%rax)

----------------------------------------------------------------------
drem  115 drem  [0x000000011c067720, 0x000000011c067780]  96 bytes

  0x000000011c067720: vmovsd (%rsp),%xmm0
  0x000000011c067725: add    $0x10,%rsp
  0x000000011c067729: vmovapd %xmm0,%xmm1
  0x000000011c06772d: vmovsd (%rsp),%xmm0
  0x000000011c067732: add    $0x10,%rsp
  0x000000011c067736: test   $0xf,%esp
  0x000000011c06773c: je     0x000000011c067754
  0x000000011c067742: sub    $0x8,%rsp
  0x000000011c067746: callq  0x00000001106963b6 = SharedRuntime::drem(double, double)
  0x000000011c06774b: add    $0x8,%rsp
  0x000000011c06774f: jmpq   0x000000011c067759
  0x000000011c067754: callq  0x00000001106963b6 = SharedRuntime::drem(double, double)
  0x000000011c067759: movzbl 0x1(%r13),%ebx
  0x000000011c06775e: inc    %r13
  0x000000011c067761: movabs $0x1109d6a20,%r10
  0x000000011c06776b: jmpq   *(%r10,%rbx,8)
  0x000000011c06776f: nop
  0x000000011c067770: add    %al,(%rax)
  0x000000011c067772: add    %al,(%rax)
  0x000000011c067774: add    %al,(%rax)
  0x000000011c067776: add    %al,(%rax)
  0x000000011c067778: add    %al,(%rax)
  0x000000011c06777a: add    %al,(%rax)
  0x000000011c06777c: add    %al,(%rax)
  0x000000011c06777e: add    %al,(%rax)

----------------------------------------------------------------------
ineg  116 ineg  [0x000000011c0677a0, 0x000000011c0677c0]  32 bytes

  0x000000011c0677a0: mov    (%rsp),%eax
  0x000000011c0677a3: add    $0x8,%rsp
  0x000000011c0677a7: neg    %eax
  0x000000011c0677a9: movzbl 0x1(%r13),%ebx
  0x000000011c0677ae: inc    %r13
  0x000000011c0677b1: movabs $0x1109d5220,%r10
  0x000000011c0677bb: jmpq   *(%r10,%rbx,8)
  0x000000011c0677bf: nop

----------------------------------------------------------------------
lneg  117 lneg  [0x000000011c0677e0, 0x000000011c067820]  64 bytes

  0x000000011c0677e0: mov    (%rsp),%rax
  0x000000011c0677e4: add    $0x10,%rsp
  0x000000011c0677e8: neg    %rax
  0x000000011c0677eb: movzbl 0x1(%r13),%ebx
  0x000000011c0677f0: inc    %r13
  0x000000011c0677f3: movabs $0x1109d5a20,%r10
  0x000000011c0677fd: jmpq   *(%r10,%rbx,8)
  0x000000011c067801: nopl   0x0(%rax)
  0x000000011c067808: add    %al,(%rax)
  0x000000011c06780a: add    %al,(%rax)
  0x000000011c06780c: add    %al,(%rax)
  0x000000011c06780e: add    %al,(%rax)
  0x000000011c067810: add    %al,(%rax)
  0x000000011c067812: add    %al,(%rax)
  0x000000011c067814: add    %al,(%rax)
  0x000000011c067816: add    %al,(%rax)
  0x000000011c067818: add    %al,(%rax)
  0x000000011c06781a: add    %al,(%rax)
  0x000000011c06781c: add    %al,(%rax)
  0x000000011c06781e: add    %al,(%rax)

----------------------------------------------------------------------
fneg  118 fneg  [0x000000011c067840, 0x000000011c067880]  64 bytes

  0x000000011c067840: vmovss (%rsp),%xmm0
  0x000000011c067845: add    $0x8,%rsp
  0x000000011c067849: vxorps -0xb6754e1(%rip),%xmm0,%xmm0        # 0x00000001109f2370 = float_signflip_pool
  0x000000011c067851: movzbl 0x1(%r13),%ebx
  0x000000011c067856: inc    %r13
  0x000000011c067859: movabs $0x1109d6220,%r10
  0x000000011c067863: jmpq   *(%r10,%rbx,8)
  0x000000011c067867: nop
  0x000000011c067868: add    %al,(%rax)
  0x000000011c06786a: add    %al,(%rax)
  0x000000011c06786c: add    %al,(%rax)
  0x000000011c06786e: add    %al,(%rax)
  0x000000011c067870: add    %al,(%rax)
  0x000000011c067872: add    %al,(%rax)
  0x000000011c067874: add    %al,(%rax)
  0x000000011c067876: add    %al,(%rax)
  0x000000011c067878: add    %al,(%rax)
  0x000000011c06787a: add    %al,(%rax)
  0x000000011c06787c: add    %al,(%rax)
  0x000000011c06787e: add    %al,(%rax)

----------------------------------------------------------------------
dneg  119 dneg  [0x000000011c0678a0, 0x000000011c0678e0]  64 bytes

  0x000000011c0678a0: vmovsd (%rsp),%xmm0
  0x000000011c0678a5: add    $0x10,%rsp
  0x000000011c0678a9: vxorpd -0xb675511(%rip),%xmm0,%xmm0        # 0x00000001109f23a0 = double_signflip_pool
  0x000000011c0678b1: movzbl 0x1(%r13),%ebx
  0x000000011c0678b6: inc    %r13
  0x000000011c0678b9: movabs $0x1109d6a20,%r10
  0x000000011c0678c3: jmpq   *(%r10,%rbx,8)
  0x000000011c0678c7: nop
  0x000000011c0678c8: add    %al,(%rax)
  0x000000011c0678ca: add    %al,(%rax)
  0x000000011c0678cc: add    %al,(%rax)
  0x000000011c0678ce: add    %al,(%rax)
  0x000000011c0678d0: add    %al,(%rax)
  0x000000011c0678d2: add    %al,(%rax)
  0x000000011c0678d4: add    %al,(%rax)
  0x000000011c0678d6: add    %al,(%rax)
  0x000000011c0678d8: add    %al,(%rax)
  0x000000011c0678da: add    %al,(%rax)
  0x000000011c0678dc: add    %al,(%rax)
  0x000000011c0678de: add    %al,(%rax)

----------------------------------------------------------------------
ishl  120 ishl  [0x000000011c067900, 0x000000011c067940]  64 bytes

  0x000000011c067900: mov    (%rsp),%eax
  0x000000011c067903: add    $0x8,%rsp
  0x000000011c067907: mov    %eax,%ecx
  0x000000011c067909: mov    (%rsp),%eax
  0x000000011c06790c: add    $0x8,%rsp
  0x000000011c067910: shl    %cl,%eax
  0x000000011c067912: movzbl 0x1(%r13),%ebx
  0x000000011c067917: inc    %r13
  0x000000011c06791a: movabs $0x1109d5220,%r10
  0x000000011c067924: jmpq   *(%r10,%rbx,8)
  0x000000011c067928: add    %al,(%rax)
  0x000000011c06792a: add    %al,(%rax)
  0x000000011c06792c: add    %al,(%rax)
  0x000000011c06792e: add    %al,(%rax)
  0x000000011c067930: add    %al,(%rax)
  0x000000011c067932: add    %al,(%rax)
  0x000000011c067934: add    %al,(%rax)
  0x000000011c067936: add    %al,(%rax)
  0x000000011c067938: add    %al,(%rax)
  0x000000011c06793a: add    %al,(%rax)
  0x000000011c06793c: add    %al,(%rax)
  0x000000011c06793e: add    %al,(%rax)

----------------------------------------------------------------------
lshl  121 lshl  [0x000000011c067960, 0x000000011c0679a0]  64 bytes

  0x000000011c067960: mov    (%rsp),%eax
  0x000000011c067963: add    $0x8,%rsp
  0x000000011c067967: mov    %eax,%ecx
  0x000000011c067969: mov    (%rsp),%rax
  0x000000011c06796d: add    $0x10,%rsp
  0x000000011c067971: shl    %cl,%rax
  0x000000011c067974: movzbl 0x1(%r13),%ebx
  0x000000011c067979: inc    %r13
  0x000000011c06797c: movabs $0x1109d5a20,%r10
  0x000000011c067986: jmpq   *(%r10,%rbx,8)
  0x000000011c06798a: nopw   0x0(%rax,%rax,1)
  0x000000011c067990: add    %al,(%rax)
  0x000000011c067992: add    %al,(%rax)
  0x000000011c067994: add    %al,(%rax)
  0x000000011c067996: add    %al,(%rax)
  0x000000011c067998: add    %al,(%rax)
  0x000000011c06799a: add    %al,(%rax)
  0x000000011c06799c: add    %al,(%rax)
  0x000000011c06799e: add    %al,(%rax)

----------------------------------------------------------------------
ishr  122 ishr  [0x000000011c0679c0, 0x000000011c067a00]  64 bytes

  0x000000011c0679c0: mov    (%rsp),%eax
  0x000000011c0679c3: add    $0x8,%rsp
  0x000000011c0679c7: mov    %eax,%ecx
  0x000000011c0679c9: mov    (%rsp),%eax
  0x000000011c0679cc: add    $0x8,%rsp
  0x000000011c0679d0: sar    %cl,%eax
  0x000000011c0679d2: movzbl 0x1(%r13),%ebx
  0x000000011c0679d7: inc    %r13
  0x000000011c0679da: movabs $0x1109d5220,%r10
  0x000000011c0679e4: jmpq   *(%r10,%rbx,8)
  0x000000011c0679e8: add    %al,(%rax)
  0x000000011c0679ea: add    %al,(%rax)
  0x000000011c0679ec: add    %al,(%rax)
  0x000000011c0679ee: add    %al,(%rax)
  0x000000011c0679f0: add    %al,(%rax)
  0x000000011c0679f2: add    %al,(%rax)
  0x000000011c0679f4: add    %al,(%rax)
  0x000000011c0679f6: add    %al,(%rax)
  0x000000011c0679f8: add    %al,(%rax)
  0x000000011c0679fa: add    %al,(%rax)
  0x000000011c0679fc: add    %al,(%rax)
  0x000000011c0679fe: add    %al,(%rax)

----------------------------------------------------------------------
lshr  123 lshr  [0x000000011c067a20, 0x000000011c067a60]  64 bytes

  0x000000011c067a20: mov    (%rsp),%eax
  0x000000011c067a23: add    $0x8,%rsp
  0x000000011c067a27: mov    %eax,%ecx
  0x000000011c067a29: mov    (%rsp),%rax
  0x000000011c067a2d: add    $0x10,%rsp
  0x000000011c067a31: sar    %cl,%rax
  0x000000011c067a34: movzbl 0x1(%r13),%ebx
  0x000000011c067a39: inc    %r13
  0x000000011c067a3c: movabs $0x1109d5a20,%r10
  0x000000011c067a46: jmpq   *(%r10,%rbx,8)
  0x000000011c067a4a: nopw   0x0(%rax,%rax,1)
  0x000000011c067a50: add    %al,(%rax)
  0x000000011c067a52: add    %al,(%rax)
  0x000000011c067a54: add    %al,(%rax)
  0x000000011c067a56: add    %al,(%rax)
  0x000000011c067a58: add    %al,(%rax)
  0x000000011c067a5a: add    %al,(%rax)
  0x000000011c067a5c: add    %al,(%rax)
  0x000000011c067a5e: add    %al,(%rax)

----------------------------------------------------------------------
iushr  124 iushr  [0x000000011c067a80, 0x000000011c067ac0]  64 bytes

  0x000000011c067a80: mov    (%rsp),%eax
  0x000000011c067a83: add    $0x8,%rsp
  0x000000011c067a87: mov    %eax,%ecx
  0x000000011c067a89: mov    (%rsp),%eax
  0x000000011c067a8c: add    $0x8,%rsp
  0x000000011c067a90: shr    %cl,%eax
  0x000000011c067a92: movzbl 0x1(%r13),%ebx
  0x000000011c067a97: inc    %r13
  0x000000011c067a9a: movabs $0x1109d5220,%r10
  0x000000011c067aa4: jmpq   *(%r10,%rbx,8)
  0x000000011c067aa8: add    %al,(%rax)
  0x000000011c067aaa: add    %al,(%rax)
  0x000000011c067aac: add    %al,(%rax)
  0x000000011c067aae: add    %al,(%rax)
  0x000000011c067ab0: add    %al,(%rax)
  0x000000011c067ab2: add    %al,(%rax)
  0x000000011c067ab4: add    %al,(%rax)
  0x000000011c067ab6: add    %al,(%rax)
  0x000000011c067ab8: add    %al,(%rax)
  0x000000011c067aba: add    %al,(%rax)
  0x000000011c067abc: add    %al,(%rax)
  0x000000011c067abe: add    %al,(%rax)

----------------------------------------------------------------------
lushr  125 lushr  [0x000000011c067ae0, 0x000000011c067b20]  64 bytes

  0x000000011c067ae0: mov    (%rsp),%eax
  0x000000011c067ae3: add    $0x8,%rsp
  0x000000011c067ae7: mov    %eax,%ecx
  0x000000011c067ae9: mov    (%rsp),%rax
  0x000000011c067aed: add    $0x10,%rsp
  0x000000011c067af1: shr    %cl,%rax
  0x000000011c067af4: movzbl 0x1(%r13),%ebx
  0x000000011c067af9: inc    %r13
  0x000000011c067afc: movabs $0x1109d5a20,%r10
  0x000000011c067b06: jmpq   *(%r10,%rbx,8)
  0x000000011c067b0a: nopw   0x0(%rax,%rax,1)
  0x000000011c067b10: add    %al,(%rax)
  0x000000011c067b12: add    %al,(%rax)
  0x000000011c067b14: add    %al,(%rax)
  0x000000011c067b16: add    %al,(%rax)
  0x000000011c067b18: add    %al,(%rax)
  0x000000011c067b1a: add    %al,(%rax)
  0x000000011c067b1c: add    %al,(%rax)
  0x000000011c067b1e: add    %al,(%rax)

----------------------------------------------------------------------
iand  126 iand  [0x000000011c067b40, 0x000000011c067b80]  64 bytes

  0x000000011c067b40: mov    (%rsp),%eax
  0x000000011c067b43: add    $0x8,%rsp
  0x000000011c067b47: mov    (%rsp),%edx
  0x000000011c067b4a: add    $0x8,%rsp
  0x000000011c067b4e: and    %edx,%eax
  0x000000011c067b50: movzbl 0x1(%r13),%ebx
  0x000000011c067b55: inc    %r13
  0x000000011c067b58: movabs $0x1109d5220,%r10
  0x000000011c067b62: jmpq   *(%r10,%rbx,8)
  0x000000011c067b66: xchg   %ax,%ax
  0x000000011c067b68: add    %al,(%rax)
  0x000000011c067b6a: add    %al,(%rax)
  0x000000011c067b6c: add    %al,(%rax)
  0x000000011c067b6e: add    %al,(%rax)
  0x000000011c067b70: add    %al,(%rax)
  0x000000011c067b72: add    %al,(%rax)
  0x000000011c067b74: add    %al,(%rax)
  0x000000011c067b76: add    %al,(%rax)
  0x000000011c067b78: add    %al,(%rax)
  0x000000011c067b7a: add    %al,(%rax)
  0x000000011c067b7c: add    %al,(%rax)
  0x000000011c067b7e: add    %al,(%rax)

----------------------------------------------------------------------
land  127 land  [0x000000011c067ba0, 0x000000011c067be0]  64 bytes

  0x000000011c067ba0: mov    (%rsp),%rax
  0x000000011c067ba4: add    $0x10,%rsp
  0x000000011c067ba8: mov    (%rsp),%rdx
  0x000000011c067bac: add    $0x10,%rsp
  0x000000011c067bb0: and    %rdx,%rax
  0x000000011c067bb3: movzbl 0x1(%r13),%ebx
  0x000000011c067bb8: inc    %r13
  0x000000011c067bbb: movabs $0x1109d5a20,%r10
  0x000000011c067bc5: jmpq   *(%r10,%rbx,8)
  0x000000011c067bc9: nopl   0x0(%rax)
  0x000000011c067bd0: add    %al,(%rax)
  0x000000011c067bd2: add    %al,(%rax)
  0x000000011c067bd4: add    %al,(%rax)
  0x000000011c067bd6: add    %al,(%rax)
  0x000000011c067bd8: add    %al,(%rax)
  0x000000011c067bda: add    %al,(%rax)
  0x000000011c067bdc: add    %al,(%rax)
  0x000000011c067bde: add    %al,(%rax)

----------------------------------------------------------------------
ior  128 ior  [0x000000011c067c00, 0x000000011c067c40]  64 bytes

  0x000000011c067c00: mov    (%rsp),%eax
  0x000000011c067c03: add    $0x8,%rsp
  0x000000011c067c07: mov    (%rsp),%edx
  0x000000011c067c0a: add    $0x8,%rsp
  0x000000011c067c0e: or     %edx,%eax
  0x000000011c067c10: movzbl 0x1(%r13),%ebx
  0x000000011c067c15: inc    %r13
  0x000000011c067c18: movabs $0x1109d5220,%r10
  0x000000011c067c22: jmpq   *(%r10,%rbx,8)
  0x000000011c067c26: xchg   %ax,%ax
  0x000000011c067c28: add    %al,(%rax)
  0x000000011c067c2a: add    %al,(%rax)
  0x000000011c067c2c: add    %al,(%rax)
  0x000000011c067c2e: add    %al,(%rax)
  0x000000011c067c30: add    %al,(%rax)
  0x000000011c067c32: add    %al,(%rax)
  0x000000011c067c34: add    %al,(%rax)
  0x000000011c067c36: add    %al,(%rax)
  0x000000011c067c38: add    %al,(%rax)
  0x000000011c067c3a: add    %al,(%rax)
  0x000000011c067c3c: add    %al,(%rax)
  0x000000011c067c3e: add    %al,(%rax)

----------------------------------------------------------------------
lor  129 lor  [0x000000011c067c60, 0x000000011c067ca0]  64 bytes

  0x000000011c067c60: mov    (%rsp),%rax
  0x000000011c067c64: add    $0x10,%rsp
  0x000000011c067c68: mov    (%rsp),%rdx
  0x000000011c067c6c: add    $0x10,%rsp
  0x000000011c067c70: or     %rdx,%rax
  0x000000011c067c73: movzbl 0x1(%r13),%ebx
  0x000000011c067c78: inc    %r13
  0x000000011c067c7b: movabs $0x1109d5a20,%r10
  0x000000011c067c85: jmpq   *(%r10,%rbx,8)
  0x000000011c067c89: nopl   0x0(%rax)
  0x000000011c067c90: add    %al,(%rax)
  0x000000011c067c92: add    %al,(%rax)
  0x000000011c067c94: add    %al,(%rax)
  0x000000011c067c96: add    %al,(%rax)
  0x000000011c067c98: add    %al,(%rax)
  0x000000011c067c9a: add    %al,(%rax)
  0x000000011c067c9c: add    %al,(%rax)
  0x000000011c067c9e: add    %al,(%rax)

----------------------------------------------------------------------
ixor  130 ixor  [0x000000011c067cc0, 0x000000011c067d00]  64 bytes

  0x000000011c067cc0: mov    (%rsp),%eax
  0x000000011c067cc3: add    $0x8,%rsp
  0x000000011c067cc7: mov    (%rsp),%edx
  0x000000011c067cca: add    $0x8,%rsp
  0x000000011c067cce: xor    %edx,%eax
  0x000000011c067cd0: movzbl 0x1(%r13),%ebx
  0x000000011c067cd5: inc    %r13
  0x000000011c067cd8: movabs $0x1109d5220,%r10
  0x000000011c067ce2: jmpq   *(%r10,%rbx,8)
  0x000000011c067ce6: xchg   %ax,%ax
  0x000000011c067ce8: add    %al,(%rax)
  0x000000011c067cea: add    %al,(%rax)
  0x000000011c067cec: add    %al,(%rax)
  0x000000011c067cee: add    %al,(%rax)
  0x000000011c067cf0: add    %al,(%rax)
  0x000000011c067cf2: add    %al,(%rax)
  0x000000011c067cf4: add    %al,(%rax)
  0x000000011c067cf6: add    %al,(%rax)
  0x000000011c067cf8: add    %al,(%rax)
  0x000000011c067cfa: add    %al,(%rax)
  0x000000011c067cfc: add    %al,(%rax)
  0x000000011c067cfe: add    %al,(%rax)

----------------------------------------------------------------------
lxor  131 lxor  [0x000000011c067d20, 0x000000011c067d60]  64 bytes

  0x000000011c067d20: mov    (%rsp),%rax
  0x000000011c067d24: add    $0x10,%rsp
  0x000000011c067d28: mov    (%rsp),%rdx
  0x000000011c067d2c: add    $0x10,%rsp
  0x000000011c067d30: xor    %rdx,%rax
  0x000000011c067d33: movzbl 0x1(%r13),%ebx
  0x000000011c067d38: inc    %r13
  0x000000011c067d3b: movabs $0x1109d5a20,%r10
  0x000000011c067d45: jmpq   *(%r10,%rbx,8)
  0x000000011c067d49: nopl   0x0(%rax)
  0x000000011c067d50: add    %al,(%rax)
  0x000000011c067d52: add    %al,(%rax)
  0x000000011c067d54: add    %al,(%rax)
  0x000000011c067d56: add    %al,(%rax)
  0x000000011c067d58: add    %al,(%rax)
  0x000000011c067d5a: add    %al,(%rax)
  0x000000011c067d5c: add    %al,(%rax)
  0x000000011c067d5e: add    %al,(%rax)

----------------------------------------------------------------------
iinc  132 iinc  [0x000000011c067d80, 0x000000011c067e20]  160 bytes

  0x000000011c067d80: push   %rax
  0x000000011c067d81: jmpq   0x000000011c067dbf
  0x000000011c067d86: sub    $0x8,%rsp
  0x000000011c067d8a: vmovss %xmm0,(%rsp)
  0x000000011c067d8f: jmpq   0x000000011c067dbf
  0x000000011c067d94: sub    $0x10,%rsp
  0x000000011c067d98: vmovsd %xmm0,(%rsp)
  0x000000011c067d9d: jmpq   0x000000011c067dbf
  0x000000011c067da2: sub    $0x10,%rsp
  0x000000011c067da6: mov    %rax,(%rsp)
  0x000000011c067daa: movabs $0x0,%r10
  0x000000011c067db4: mov    %r10,0x8(%rsp)
  0x000000011c067db9: jmpq   0x000000011c067dbf
  0x000000011c067dbe: push   %rax
  0x000000011c067dbf: movsbl 0x2(%r13),%edx
  0x000000011c067dc4: movzbl 0x1(%r13),%ebx
  0x000000011c067dc9: neg    %rbx
  0x000000011c067dcc: add    %edx,(%r14,%rbx,8)
  0x000000011c067dd0: movzbl 0x3(%r13),%ebx
  0x000000011c067dd5: add    $0x3,%r13
  0x000000011c067dd9: movabs $0x1109d7a20,%r10
  0x000000011c067de3: jmpq   *(%r10,%rbx,8)
  0x000000011c067de7: mov    0x4(%r13),%edx
  0x000000011c067deb: movzwl 0x2(%r13),%ebx
  0x000000011c067df0: bswap  %ebx
  0x000000011c067df2: shr    $0x10,%ebx
  0x000000011c067df5: neg    %rbx
  0x000000011c067df8: bswap  %edx
  0x000000011c067dfa: sar    $0x10,%edx
  0x000000011c067dfd: add    %edx,(%r14,%rbx,8)
  0x000000011c067e01: movzbl 0x6(%r13),%ebx
  0x000000011c067e06: add    $0x6,%r13
  0x000000011c067e0a: movabs $0x1109d7a20,%r10
  0x000000011c067e14: jmpq   *(%r10,%rbx,8)
  0x000000011c067e18: add    %al,(%rax)
  0x000000011c067e1a: add    %al,(%rax)
  0x000000011c067e1c: add    %al,(%rax)
  0x000000011c067e1e: add    %al,(%rax)

----------------------------------------------------------------------
i2l  133 i2l  [0x000000011c067e40, 0x000000011c067e60]  32 bytes

  0x000000011c067e40: mov    (%rsp),%eax
  0x000000011c067e43: add    $0x8,%rsp
  0x000000011c067e47: movslq %eax,%rax
  0x000000011c067e4a: movzbl 0x1(%r13),%ebx
  0x000000011c067e4f: inc    %r13
  0x000000011c067e52: movabs $0x1109d5a20,%r10
  0x000000011c067e5c: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
i2f  134 i2f  [0x000000011c067e80, 0x000000011c067ec0]  64 bytes

  0x000000011c067e80: mov    (%rsp),%eax
  0x000000011c067e83: add    $0x8,%rsp
  0x000000011c067e87: vcvtsi2ss %eax,%xmm0,%xmm0
  0x000000011c067e8b: movzbl 0x1(%r13),%ebx
  0x000000011c067e90: inc    %r13
  0x000000011c067e93: movabs $0x1109d6220,%r10
  0x000000011c067e9d: jmpq   *(%r10,%rbx,8)
  0x000000011c067ea1: nopl   0x0(%rax)
  0x000000011c067ea8: add    %al,(%rax)
  0x000000011c067eaa: add    %al,(%rax)
  0x000000011c067eac: add    %al,(%rax)
  0x000000011c067eae: add    %al,(%rax)
  0x000000011c067eb0: add    %al,(%rax)
  0x000000011c067eb2: add    %al,(%rax)
  0x000000011c067eb4: add    %al,(%rax)
  0x000000011c067eb6: add    %al,(%rax)
  0x000000011c067eb8: add    %al,(%rax)
  0x000000011c067eba: add    %al,(%rax)
  0x000000011c067ebc: add    %al,(%rax)
  0x000000011c067ebe: add    %al,(%rax)

----------------------------------------------------------------------
i2d  135 i2d  [0x000000011c067ee0, 0x000000011c067f20]  64 bytes

  0x000000011c067ee0: mov    (%rsp),%eax
  0x000000011c067ee3: add    $0x8,%rsp
  0x000000011c067ee7: vcvtsi2sd %eax,%xmm0,%xmm0
  0x000000011c067eeb: movzbl 0x1(%r13),%ebx
  0x000000011c067ef0: inc    %r13
  0x000000011c067ef3: movabs $0x1109d6a20,%r10
  0x000000011c067efd: jmpq   *(%r10,%rbx,8)
  0x000000011c067f01: nopl   0x0(%rax)
  0x000000011c067f08: add    %al,(%rax)
  0x000000011c067f0a: add    %al,(%rax)
  0x000000011c067f0c: add    %al,(%rax)
  0x000000011c067f0e: add    %al,(%rax)
  0x000000011c067f10: add    %al,(%rax)
  0x000000011c067f12: add    %al,(%rax)
  0x000000011c067f14: add    %al,(%rax)
  0x000000011c067f16: add    %al,(%rax)
  0x000000011c067f18: add    %al,(%rax)
  0x000000011c067f1a: add    %al,(%rax)
  0x000000011c067f1c: add    %al,(%rax)
  0x000000011c067f1e: add    %al,(%rax)

----------------------------------------------------------------------
l2i  136 l2i  [0x000000011c067f40, 0x000000011c067f60]  32 bytes

  0x000000011c067f40: mov    (%rsp),%rax
  0x000000011c067f44: add    $0x10,%rsp
  0x000000011c067f48: mov    %eax,%eax
  0x000000011c067f4a: movzbl 0x1(%r13),%ebx
  0x000000011c067f4f: inc    %r13
  0x000000011c067f52: movabs $0x1109d5220,%r10
  0x000000011c067f5c: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
l2f  137 l2f  [0x000000011c067f80, 0x000000011c067fc0]  64 bytes

  0x000000011c067f80: mov    (%rsp),%rax
  0x000000011c067f84: add    $0x10,%rsp
  0x000000011c067f88: vcvtsi2ss %rax,%xmm0,%xmm0
  0x000000011c067f8d: movzbl 0x1(%r13),%ebx
  0x000000011c067f92: inc    %r13
  0x000000011c067f95: movabs $0x1109d6220,%r10
  0x000000011c067f9f: jmpq   *(%r10,%rbx,8)
  0x000000011c067fa3: nopl   0x0(%rax,%rax,1)
  0x000000011c067fa8: add    %al,(%rax)
  0x000000011c067faa: add    %al,(%rax)
  0x000000011c067fac: add    %al,(%rax)
  0x000000011c067fae: add    %al,(%rax)
  0x000000011c067fb0: add    %al,(%rax)
  0x000000011c067fb2: add    %al,(%rax)
  0x000000011c067fb4: add    %al,(%rax)
  0x000000011c067fb6: add    %al,(%rax)
  0x000000011c067fb8: add    %al,(%rax)
  0x000000011c067fba: add    %al,(%rax)
  0x000000011c067fbc: add    %al,(%rax)
  0x000000011c067fbe: add    %al,(%rax)

----------------------------------------------------------------------
l2d  138 l2d  [0x000000011c067fe0, 0x000000011c068020]  64 bytes

  0x000000011c067fe0: mov    (%rsp),%rax
  0x000000011c067fe4: add    $0x10,%rsp
  0x000000011c067fe8: vcvtsi2sd %rax,%xmm0,%xmm0
  0x000000011c067fed: movzbl 0x1(%r13),%ebx
  0x000000011c067ff2: inc    %r13
  0x000000011c067ff5: movabs $0x1109d6a20,%r10
  0x000000011c067fff: jmpq   *(%r10,%rbx,8)
  0x000000011c068003: nopl   0x0(%rax,%rax,1)
  0x000000011c068008: add    %al,(%rax)
  0x000000011c06800a: add    %al,(%rax)
  0x000000011c06800c: add    %al,(%rax)
  0x000000011c06800e: add    %al,(%rax)
  0x000000011c068010: add    %al,(%rax)
  0x000000011c068012: add    %al,(%rax)
  0x000000011c068014: add    %al,(%rax)
  0x000000011c068016: add    %al,(%rax)
  0x000000011c068018: add    %al,(%rax)
  0x000000011c06801a: add    %al,(%rax)
  0x000000011c06801c: add    %al,(%rax)
  0x000000011c06801e: add    %al,(%rax)

----------------------------------------------------------------------
f2i  139 f2i  [0x000000011c068040, 0x000000011c0680a0]  96 bytes

  0x000000011c068040: vmovss (%rsp),%xmm0
  0x000000011c068045: add    $0x8,%rsp
  0x000000011c068049: vcvttss2si %xmm0,%eax
  0x000000011c06804d: cmp    $0x80000000,%eax
  0x000000011c068053: jne    0x000000011c06807c
  0x000000011c068059: test   $0xf,%esp
  0x000000011c06805f: je     0x000000011c068077
  0x000000011c068065: sub    $0x8,%rsp
  0x000000011c068069: callq  0x00000001106963c0 = SharedRuntime::f2i(float)
  0x000000011c06806e: add    $0x8,%rsp
  0x000000011c068072: jmpq   0x000000011c06807c
  0x000000011c068077: callq  0x00000001106963c0 = SharedRuntime::f2i(float)
  0x000000011c06807c: movzbl 0x1(%r13),%ebx
  0x000000011c068081: inc    %r13
  0x000000011c068084: movabs $0x1109d5220,%r10
  0x000000011c06808e: jmpq   *(%r10,%rbx,8)
  0x000000011c068092: nopw   0x0(%rax,%rax,1)
  0x000000011c068098: add    %al,(%rax)
  0x000000011c06809a: add    %al,(%rax)
  0x000000011c06809c: add    %al,(%rax)
  0x000000011c06809e: add    %al,(%rax)

----------------------------------------------------------------------
f2l  140 f2l  [0x000000011c0680c0, 0x000000011c068120]  96 bytes

  0x000000011c0680c0: vmovss (%rsp),%xmm0
  0x000000011c0680c5: add    $0x8,%rsp
  0x000000011c0680c9: vcvttss2si %xmm0,%rax
  0x000000011c0680ce: cmp    -0xb7f8345(%rip),%rax        # 0x000000011086fd90 = TemplateTable::convert()::is_nan
  0x000000011c0680d5: jne    0x000000011c0680fe
  0x000000011c0680db: test   $0xf,%esp
  0x000000011c0680e1: je     0x000000011c0680f9
  0x000000011c0680e7: sub    $0x8,%rsp
  0x000000011c0680eb: callq  0x00000001106963f4 = SharedRuntime::f2l(float)
  0x000000011c0680f0: add    $0x8,%rsp
  0x000000011c0680f4: jmpq   0x000000011c0680fe
  0x000000011c0680f9: callq  0x00000001106963f4 = SharedRuntime::f2l(float)
  0x000000011c0680fe: movzbl 0x1(%r13),%ebx
  0x000000011c068103: inc    %r13
  0x000000011c068106: movabs $0x1109d5a20,%r10
  0x000000011c068110: jmpq   *(%r10,%rbx,8)
  0x000000011c068114: nopl   0x0(%rax)
  0x000000011c068118: add    %al,(%rax)
  0x000000011c06811a: add    %al,(%rax)
  0x000000011c06811c: add    %al,(%rax)
  0x000000011c06811e: add    %al,(%rax)

----------------------------------------------------------------------
f2d  141 f2d  [0x000000011c068140, 0x000000011c068180]  64 bytes

  0x000000011c068140: vmovss (%rsp),%xmm0
  0x000000011c068145: add    $0x8,%rsp
  0x000000011c068149: vcvtss2sd %xmm0,%xmm0,%xmm0
  0x000000011c06814d: movzbl 0x1(%r13),%ebx
  0x000000011c068152: inc    %r13
  0x000000011c068155: movabs $0x1109d6a20,%r10
  0x000000011c06815f: jmpq   *(%r10,%rbx,8)
  0x000000011c068163: nopl   0x0(%rax,%rax,1)
  0x000000011c068168: add    %al,(%rax)
  0x000000011c06816a: add    %al,(%rax)
  0x000000011c06816c: add    %al,(%rax)
  0x000000011c06816e: add    %al,(%rax)
  0x000000011c068170: add    %al,(%rax)
  0x000000011c068172: add    %al,(%rax)
  0x000000011c068174: add    %al,(%rax)
  0x000000011c068176: add    %al,(%rax)
  0x000000011c068178: add    %al,(%rax)
  0x000000011c06817a: add    %al,(%rax)
  0x000000011c06817c: add    %al,(%rax)
  0x000000011c06817e: add    %al,(%rax)

----------------------------------------------------------------------
d2i  142 d2i  [0x000000011c0681a0, 0x000000011c068200]  96 bytes

  0x000000011c0681a0: vmovsd (%rsp),%xmm0
  0x000000011c0681a5: add    $0x10,%rsp
  0x000000011c0681a9: vcvttsd2si %xmm0,%eax
  0x000000011c0681ad: cmp    $0x80000000,%eax
  0x000000011c0681b3: jne    0x000000011c0681dc
  0x000000011c0681b9: test   $0xf,%esp
  0x000000011c0681bf: je     0x000000011c0681d7
  0x000000011c0681c5: sub    $0x8,%rsp
  0x000000011c0681c9: callq  0x000000011069642e = SharedRuntime::d2i(double)
  0x000000011c0681ce: add    $0x8,%rsp
  0x000000011c0681d2: jmpq   0x000000011c0681dc
  0x000000011c0681d7: callq  0x000000011069642e = SharedRuntime::d2i(double)
  0x000000011c0681dc: movzbl 0x1(%r13),%ebx
  0x000000011c0681e1: inc    %r13
  0x000000011c0681e4: movabs $0x1109d5220,%r10
  0x000000011c0681ee: jmpq   *(%r10,%rbx,8)
  0x000000011c0681f2: nopw   0x0(%rax,%rax,1)
  0x000000011c0681f8: add    %al,(%rax)
  0x000000011c0681fa: add    %al,(%rax)
  0x000000011c0681fc: add    %al,(%rax)
  0x000000011c0681fe: add    %al,(%rax)

----------------------------------------------------------------------
d2l  143 d2l  [0x000000011c068220, 0x000000011c068280]  96 bytes

  0x000000011c068220: vmovsd (%rsp),%xmm0
  0x000000011c068225: add    $0x10,%rsp
  0x000000011c068229: vcvttsd2si %xmm0,%rax
  0x000000011c06822e: cmp    -0xb7f84a5(%rip),%rax        # 0x000000011086fd90 = TemplateTable::convert()::is_nan
  0x000000011c068235: jne    0x000000011c06825e
  0x000000011c06823b: test   $0xf,%esp
  0x000000011c068241: je     0x000000011c068259
  0x000000011c068247: sub    $0x8,%rsp
  0x000000011c06824b: callq  0x0000000110696464 = SharedRuntime::d2l(double)
  0x000000011c068250: add    $0x8,%rsp
  0x000000011c068254: jmpq   0x000000011c06825e
  0x000000011c068259: callq  0x0000000110696464 = SharedRuntime::d2l(double)
  0x000000011c06825e: movzbl 0x1(%r13),%ebx
  0x000000011c068263: inc    %r13
  0x000000011c068266: movabs $0x1109d5a20,%r10
  0x000000011c068270: jmpq   *(%r10,%rbx,8)
  0x000000011c068274: nopl   0x0(%rax)
  0x000000011c068278: add    %al,(%rax)
  0x000000011c06827a: add    %al,(%rax)
  0x000000011c06827c: add    %al,(%rax)
  0x000000011c06827e: add    %al,(%rax)

----------------------------------------------------------------------
d2f  144 d2f  [0x000000011c0682a0, 0x000000011c0682e0]  64 bytes

  0x000000011c0682a0: vmovsd (%rsp),%xmm0
  0x000000011c0682a5: add    $0x10,%rsp
  0x000000011c0682a9: vcvtsd2ss %xmm0,%xmm0,%xmm0
  0x000000011c0682ad: movzbl 0x1(%r13),%ebx
  0x000000011c0682b2: inc    %r13
  0x000000011c0682b5: movabs $0x1109d6220,%r10
  0x000000011c0682bf: jmpq   *(%r10,%rbx,8)
  0x000000011c0682c3: nopl   0x0(%rax,%rax,1)
  0x000000011c0682c8: add    %al,(%rax)
  0x000000011c0682ca: add    %al,(%rax)
  0x000000011c0682cc: add    %al,(%rax)
  0x000000011c0682ce: add    %al,(%rax)
  0x000000011c0682d0: add    %al,(%rax)
  0x000000011c0682d2: add    %al,(%rax)
  0x000000011c0682d4: add    %al,(%rax)
  0x000000011c0682d6: add    %al,(%rax)
  0x000000011c0682d8: add    %al,(%rax)
  0x000000011c0682da: add    %al,(%rax)
  0x000000011c0682dc: add    %al,(%rax)
  0x000000011c0682de: add    %al,(%rax)

----------------------------------------------------------------------
i2b  145 i2b  [0x000000011c068300, 0x000000011c068320]  32 bytes

  0x000000011c068300: mov    (%rsp),%eax
  0x000000011c068303: add    $0x8,%rsp
  0x000000011c068307: movsbl %al,%eax
  0x000000011c06830a: movzbl 0x1(%r13),%ebx
  0x000000011c06830f: inc    %r13
  0x000000011c068312: movabs $0x1109d5220,%r10
  0x000000011c06831c: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
i2c  146 i2c  [0x000000011c068340, 0x000000011c068360]  32 bytes

  0x000000011c068340: mov    (%rsp),%eax
  0x000000011c068343: add    $0x8,%rsp
  0x000000011c068347: movzwl %ax,%eax
  0x000000011c06834a: movzbl 0x1(%r13),%ebx
  0x000000011c06834f: inc    %r13
  0x000000011c068352: movabs $0x1109d5220,%r10
  0x000000011c06835c: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
i2s  147 i2s  [0x000000011c068380, 0x000000011c0683a0]  32 bytes

  0x000000011c068380: mov    (%rsp),%eax
  0x000000011c068383: add    $0x8,%rsp
  0x000000011c068387: movswl %ax,%eax
  0x000000011c06838a: movzbl 0x1(%r13),%ebx
  0x000000011c06838f: inc    %r13
  0x000000011c068392: movabs $0x1109d5220,%r10
  0x000000011c06839c: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
lcmp  148 lcmp  [0x000000011c0683c0, 0x000000011c068400]  64 bytes

  0x000000011c0683c0: mov    (%rsp),%rax
  0x000000011c0683c4: add    $0x10,%rsp
  0x000000011c0683c8: mov    (%rsp),%rdx
  0x000000011c0683cc: add    $0x10,%rsp
  0x000000011c0683d0: cmp    %rax,%rdx
  0x000000011c0683d3: mov    $0xffffffff,%eax
  0x000000011c0683d8: jl     0x000000011c0683e0
  0x000000011c0683da: setne  %al
  0x000000011c0683dd: movzbl %al,%eax
  0x000000011c0683e0: movzbl 0x1(%r13),%ebx
  0x000000011c0683e5: inc    %r13
  0x000000011c0683e8: movabs $0x1109d5220,%r10
  0x000000011c0683f2: jmpq   *(%r10,%rbx,8)
  0x000000011c0683f6: xchg   %ax,%ax
  0x000000011c0683f8: add    %al,(%rax)
  0x000000011c0683fa: add    %al,(%rax)
  0x000000011c0683fc: add    %al,(%rax)
  0x000000011c0683fe: add    %al,(%rax)

----------------------------------------------------------------------
fcmpl  149 fcmpl  [0x000000011c068420, 0x000000011c068460]  64 bytes

  0x000000011c068420: vmovss (%rsp),%xmm0
  0x000000011c068425: add    $0x8,%rsp
  0x000000011c068429: vmovss (%rsp),%xmm1
  0x000000011c06842e: add    $0x8,%rsp
  0x000000011c068432: vucomiss %xmm0,%xmm1
  0x000000011c068436: mov    $0xffffffff,%eax
  0x000000011c06843b: jp     0x000000011c068445
  0x000000011c06843d: jb     0x000000011c068445
  0x000000011c06843f: setne  %dl
  0x000000011c068442: movzbl %dl,%eax
  0x000000011c068445: movzbl 0x1(%r13),%ebx
  0x000000011c06844a: inc    %r13
  0x000000011c06844d: movabs $0x1109d5220,%r10
  0x000000011c068457: jmpq   *(%r10,%rbx,8)
  0x000000011c06845b: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
fcmpg  150 fcmpg  [0x000000011c068480, 0x000000011c0684c0]  64 bytes

  0x000000011c068480: vmovss (%rsp),%xmm0
  0x000000011c068485: add    $0x8,%rsp
  0x000000011c068489: vmovss (%rsp),%xmm1
  0x000000011c06848e: add    $0x8,%rsp
  0x000000011c068492: vucomiss %xmm0,%xmm1
  0x000000011c068496: mov    $0x1,%eax
  0x000000011c06849b: jp     0x000000011c0684a8
  0x000000011c06849d: ja     0x000000011c0684a8
  0x000000011c06849f: mov    $0x0,%eax
  0x000000011c0684a4: je     0x000000011c0684a8
  0x000000011c0684a6: dec    %eax
  0x000000011c0684a8: movzbl 0x1(%r13),%ebx
  0x000000011c0684ad: inc    %r13
  0x000000011c0684b0: movabs $0x1109d5220,%r10
  0x000000011c0684ba: jmpq   *(%r10,%rbx,8)
  0x000000011c0684be: xchg   %ax,%ax

----------------------------------------------------------------------
dcmpl  151 dcmpl  [0x000000011c0684e0, 0x000000011c068520]  64 bytes

  0x000000011c0684e0: vmovsd (%rsp),%xmm0
  0x000000011c0684e5: add    $0x10,%rsp
  0x000000011c0684e9: vmovsd (%rsp),%xmm1
  0x000000011c0684ee: add    $0x10,%rsp
  0x000000011c0684f2: vucomisd %xmm0,%xmm1
  0x000000011c0684f6: mov    $0xffffffff,%eax
  0x000000011c0684fb: jp     0x000000011c068505
  0x000000011c0684fd: jb     0x000000011c068505
  0x000000011c0684ff: setne  %dl
  0x000000011c068502: movzbl %dl,%eax
  0x000000011c068505: movzbl 0x1(%r13),%ebx
  0x000000011c06850a: inc    %r13
  0x000000011c06850d: movabs $0x1109d5220,%r10
  0x000000011c068517: jmpq   *(%r10,%rbx,8)
  0x000000011c06851b: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
dcmpg  152 dcmpg  [0x000000011c068540, 0x000000011c068580]  64 bytes

  0x000000011c068540: vmovsd (%rsp),%xmm0
  0x000000011c068545: add    $0x10,%rsp
  0x000000011c068549: vmovsd (%rsp),%xmm1
  0x000000011c06854e: add    $0x10,%rsp
  0x000000011c068552: vucomisd %xmm0,%xmm1
  0x000000011c068556: mov    $0x1,%eax
  0x000000011c06855b: jp     0x000000011c068568
  0x000000011c06855d: ja     0x000000011c068568
  0x000000011c06855f: mov    $0x0,%eax
  0x000000011c068564: je     0x000000011c068568
  0x000000011c068566: dec    %eax
  0x000000011c068568: movzbl 0x1(%r13),%ebx
  0x000000011c06856d: inc    %r13
  0x000000011c068570: movabs $0x1109d5220,%r10
  0x000000011c06857a: jmpq   *(%r10,%rbx,8)
  0x000000011c06857e: xchg   %ax,%ax

----------------------------------------------------------------------
ifeq  153 ifeq  [0x000000011c0685a0, 0x000000011c068620]  128 bytes

  0x000000011c0685a0: mov    (%rsp),%eax
  0x000000011c0685a3: add    $0x8,%rsp
  0x000000011c0685a7: test   %eax,%eax
  0x000000011c0685a9: jne    0x000000011c0685ec
  0x000000011c0685af: mov    -0x18(%rbp),%rcx
  0x000000011c0685b3: movswl 0x1(%r13),%edx
  0x000000011c0685b8: bswap  %edx
  0x000000011c0685ba: sar    $0x10,%edx
  0x000000011c0685bd: movslq %edx,%rdx
  0x000000011c0685c0: add    %rdx,%r13
  0x000000011c0685c3: movzbl 0x0(%r13),%ebx
  0x000000011c0685c8: testb  $0x8,0x108(%r15)
  0x000000011c0685d0: je     0x000000011c0685de
  0x000000011c0685d2: movabs $0x1109dd020,%r10
  0x000000011c0685dc: jmp    0x000000011c0685e8
  0x000000011c0685de: movabs $0x1109d7a20,%r10
  0x000000011c0685e8: jmpq   *(%r10,%rbx,8)
  0x000000011c0685ec: movzbl 0x3(%r13),%ebx
  0x000000011c0685f1: add    $0x3,%r13
  0x000000011c0685f5: movabs $0x1109d7a20,%r10
  0x000000011c0685ff: jmpq   *(%r10,%rbx,8)
  0x000000011c068603: nopl   0x0(%rax,%rax,1)
  0x000000011c068608: add    %al,(%rax)
  0x000000011c06860a: add    %al,(%rax)
  0x000000011c06860c: add    %al,(%rax)
  0x000000011c06860e: add    %al,(%rax)
  0x000000011c068610: add    %al,(%rax)
  0x000000011c068612: add    %al,(%rax)
  0x000000011c068614: add    %al,(%rax)
  0x000000011c068616: add    %al,(%rax)
  0x000000011c068618: add    %al,(%rax)
  0x000000011c06861a: add    %al,(%rax)
  0x000000011c06861c: add    %al,(%rax)
  0x000000011c06861e: add    %al,(%rax)

----------------------------------------------------------------------
ifne  154 ifne  [0x000000011c068640, 0x000000011c0686c0]  128 bytes

  0x000000011c068640: mov    (%rsp),%eax
  0x000000011c068643: add    $0x8,%rsp
  0x000000011c068647: test   %eax,%eax
  0x000000011c068649: je     0x000000011c06868c
  0x000000011c06864f: mov    -0x18(%rbp),%rcx
  0x000000011c068653: movswl 0x1(%r13),%edx
  0x000000011c068658: bswap  %edx
  0x000000011c06865a: sar    $0x10,%edx
  0x000000011c06865d: movslq %edx,%rdx
  0x000000011c068660: add    %rdx,%r13
  0x000000011c068663: movzbl 0x0(%r13),%ebx
  0x000000011c068668: testb  $0x8,0x108(%r15)
  0x000000011c068670: je     0x000000011c06867e
  0x000000011c068672: movabs $0x1109dd020,%r10
  0x000000011c06867c: jmp    0x000000011c068688
  0x000000011c06867e: movabs $0x1109d7a20,%r10
  0x000000011c068688: jmpq   *(%r10,%rbx,8)
  0x000000011c06868c: movzbl 0x3(%r13),%ebx
  0x000000011c068691: add    $0x3,%r13
  0x000000011c068695: movabs $0x1109d7a20,%r10
  0x000000011c06869f: jmpq   *(%r10,%rbx,8)
  0x000000011c0686a3: nopl   0x0(%rax,%rax,1)
  0x000000011c0686a8: add    %al,(%rax)
  0x000000011c0686aa: add    %al,(%rax)
  0x000000011c0686ac: add    %al,(%rax)
  0x000000011c0686ae: add    %al,(%rax)
  0x000000011c0686b0: add    %al,(%rax)
  0x000000011c0686b2: add    %al,(%rax)
  0x000000011c0686b4: add    %al,(%rax)
  0x000000011c0686b6: add    %al,(%rax)
  0x000000011c0686b8: add    %al,(%rax)
  0x000000011c0686ba: add    %al,(%rax)
  0x000000011c0686bc: add    %al,(%rax)
  0x000000011c0686be: add    %al,(%rax)

----------------------------------------------------------------------
iflt  155 iflt  [0x000000011c0686e0, 0x000000011c068760]  128 bytes

  0x000000011c0686e0: mov    (%rsp),%eax
  0x000000011c0686e3: add    $0x8,%rsp
  0x000000011c0686e7: test   %eax,%eax
  0x000000011c0686e9: jge    0x000000011c06872c
  0x000000011c0686ef: mov    -0x18(%rbp),%rcx
  0x000000011c0686f3: movswl 0x1(%r13),%edx
  0x000000011c0686f8: bswap  %edx
  0x000000011c0686fa: sar    $0x10,%edx
  0x000000011c0686fd: movslq %edx,%rdx
  0x000000011c068700: add    %rdx,%r13
  0x000000011c068703: movzbl 0x0(%r13),%ebx
  0x000000011c068708: testb  $0x8,0x108(%r15)
  0x000000011c068710: je     0x000000011c06871e
  0x000000011c068712: movabs $0x1109dd020,%r10
  0x000000011c06871c: jmp    0x000000011c068728
  0x000000011c06871e: movabs $0x1109d7a20,%r10
  0x000000011c068728: jmpq   *(%r10,%rbx,8)
  0x000000011c06872c: movzbl 0x3(%r13),%ebx
  0x000000011c068731: add    $0x3,%r13
  0x000000011c068735: movabs $0x1109d7a20,%r10
  0x000000011c06873f: jmpq   *(%r10,%rbx,8)
  0x000000011c068743: nopl   0x0(%rax,%rax,1)
  0x000000011c068748: add    %al,(%rax)
  0x000000011c06874a: add    %al,(%rax)
  0x000000011c06874c: add    %al,(%rax)
  0x000000011c06874e: add    %al,(%rax)
  0x000000011c068750: add    %al,(%rax)
  0x000000011c068752: add    %al,(%rax)
  0x000000011c068754: add    %al,(%rax)
  0x000000011c068756: add    %al,(%rax)
  0x000000011c068758: add    %al,(%rax)
  0x000000011c06875a: add    %al,(%rax)
  0x000000011c06875c: add    %al,(%rax)
  0x000000011c06875e: add    %al,(%rax)

----------------------------------------------------------------------
ifge  156 ifge  [0x000000011c068780, 0x000000011c068800]  128 bytes

  0x000000011c068780: mov    (%rsp),%eax
  0x000000011c068783: add    $0x8,%rsp
  0x000000011c068787: test   %eax,%eax
  0x000000011c068789: jl     0x000000011c0687cc
  0x000000011c06878f: mov    -0x18(%rbp),%rcx
  0x000000011c068793: movswl 0x1(%r13),%edx
  0x000000011c068798: bswap  %edx
  0x000000011c06879a: sar    $0x10,%edx
  0x000000011c06879d: movslq %edx,%rdx
  0x000000011c0687a0: add    %rdx,%r13
  0x000000011c0687a3: movzbl 0x0(%r13),%ebx
  0x000000011c0687a8: testb  $0x8,0x108(%r15)
  0x000000011c0687b0: je     0x000000011c0687be
  0x000000011c0687b2: movabs $0x1109dd020,%r10
  0x000000011c0687bc: jmp    0x000000011c0687c8
  0x000000011c0687be: movabs $0x1109d7a20,%r10
  0x000000011c0687c8: jmpq   *(%r10,%rbx,8)
  0x000000011c0687cc: movzbl 0x3(%r13),%ebx
  0x000000011c0687d1: add    $0x3,%r13
  0x000000011c0687d5: movabs $0x1109d7a20,%r10
  0x000000011c0687df: jmpq   *(%r10,%rbx,8)
  0x000000011c0687e3: nopl   0x0(%rax,%rax,1)
  0x000000011c0687e8: add    %al,(%rax)
  0x000000011c0687ea: add    %al,(%rax)
  0x000000011c0687ec: add    %al,(%rax)
  0x000000011c0687ee: add    %al,(%rax)
  0x000000011c0687f0: add    %al,(%rax)
  0x000000011c0687f2: add    %al,(%rax)
  0x000000011c0687f4: add    %al,(%rax)
  0x000000011c0687f6: add    %al,(%rax)
  0x000000011c0687f8: add    %al,(%rax)
  0x000000011c0687fa: add    %al,(%rax)
  0x000000011c0687fc: add    %al,(%rax)
  0x000000011c0687fe: add    %al,(%rax)

----------------------------------------------------------------------
ifgt  157 ifgt  [0x000000011c068820, 0x000000011c0688a0]  128 bytes

  0x000000011c068820: mov    (%rsp),%eax
  0x000000011c068823: add    $0x8,%rsp
  0x000000011c068827: test   %eax,%eax
  0x000000011c068829: jle    0x000000011c06886c
  0x000000011c06882f: mov    -0x18(%rbp),%rcx
  0x000000011c068833: movswl 0x1(%r13),%edx
  0x000000011c068838: bswap  %edx
  0x000000011c06883a: sar    $0x10,%edx
  0x000000011c06883d: movslq %edx,%rdx
  0x000000011c068840: add    %rdx,%r13
  0x000000011c068843: movzbl 0x0(%r13),%ebx
  0x000000011c068848: testb  $0x8,0x108(%r15)
  0x000000011c068850: je     0x000000011c06885e
  0x000000011c068852: movabs $0x1109dd020,%r10
  0x000000011c06885c: jmp    0x000000011c068868
  0x000000011c06885e: movabs $0x1109d7a20,%r10
  0x000000011c068868: jmpq   *(%r10,%rbx,8)
  0x000000011c06886c: movzbl 0x3(%r13),%ebx
  0x000000011c068871: add    $0x3,%r13
  0x000000011c068875: movabs $0x1109d7a20,%r10
  0x000000011c06887f: jmpq   *(%r10,%rbx,8)
  0x000000011c068883: nopl   0x0(%rax,%rax,1)
  0x000000011c068888: add    %al,(%rax)
  0x000000011c06888a: add    %al,(%rax)
  0x000000011c06888c: add    %al,(%rax)
  0x000000011c06888e: add    %al,(%rax)
  0x000000011c068890: add    %al,(%rax)
  0x000000011c068892: add    %al,(%rax)
  0x000000011c068894: add    %al,(%rax)
  0x000000011c068896: add    %al,(%rax)
  0x000000011c068898: add    %al,(%rax)
  0x000000011c06889a: add    %al,(%rax)
  0x000000011c06889c: add    %al,(%rax)
  0x000000011c06889e: add    %al,(%rax)

----------------------------------------------------------------------
ifle  158 ifle  [0x000000011c0688c0, 0x000000011c068940]  128 bytes

  0x000000011c0688c0: mov    (%rsp),%eax
  0x000000011c0688c3: add    $0x8,%rsp
  0x000000011c0688c7: test   %eax,%eax
  0x000000011c0688c9: jg     0x000000011c06890c
  0x000000011c0688cf: mov    -0x18(%rbp),%rcx
  0x000000011c0688d3: movswl 0x1(%r13),%edx
  0x000000011c0688d8: bswap  %edx
  0x000000011c0688da: sar    $0x10,%edx
  0x000000011c0688dd: movslq %edx,%rdx
  0x000000011c0688e0: add    %rdx,%r13
  0x000000011c0688e3: movzbl 0x0(%r13),%ebx
  0x000000011c0688e8: testb  $0x8,0x108(%r15)
  0x000000011c0688f0: je     0x000000011c0688fe
  0x000000011c0688f2: movabs $0x1109dd020,%r10
  0x000000011c0688fc: jmp    0x000000011c068908
  0x000000011c0688fe: movabs $0x1109d7a20,%r10
  0x000000011c068908: jmpq   *(%r10,%rbx,8)
  0x000000011c06890c: movzbl 0x3(%r13),%ebx
  0x000000011c068911: add    $0x3,%r13
  0x000000011c068915: movabs $0x1109d7a20,%r10
  0x000000011c06891f: jmpq   *(%r10,%rbx,8)
  0x000000011c068923: nopl   0x0(%rax,%rax,1)
  0x000000011c068928: add    %al,(%rax)
  0x000000011c06892a: add    %al,(%rax)
  0x000000011c06892c: add    %al,(%rax)
  0x000000011c06892e: add    %al,(%rax)
  0x000000011c068930: add    %al,(%rax)
  0x000000011c068932: add    %al,(%rax)
  0x000000011c068934: add    %al,(%rax)
  0x000000011c068936: add    %al,(%rax)
  0x000000011c068938: add    %al,(%rax)
  0x000000011c06893a: add    %al,(%rax)
  0x000000011c06893c: add    %al,(%rax)
  0x000000011c06893e: add    %al,(%rax)

----------------------------------------------------------------------
if_icmpeq  159 if_icmpeq  [0x000000011c068960, 0x000000011c0689e0]  128 bytes

  0x000000011c068960: mov    (%rsp),%eax
  0x000000011c068963: add    $0x8,%rsp
  0x000000011c068967: mov    (%rsp),%edx
  0x000000011c06896a: add    $0x8,%rsp
  0x000000011c06896e: cmp    %eax,%edx
  0x000000011c068970: jne    0x000000011c0689b3
  0x000000011c068976: mov    -0x18(%rbp),%rcx
  0x000000011c06897a: movswl 0x1(%r13),%edx
  0x000000011c06897f: bswap  %edx
  0x000000011c068981: sar    $0x10,%edx
  0x000000011c068984: movslq %edx,%rdx
  0x000000011c068987: add    %rdx,%r13
  0x000000011c06898a: movzbl 0x0(%r13),%ebx
  0x000000011c06898f: testb  $0x8,0x108(%r15)
  0x000000011c068997: je     0x000000011c0689a5
  0x000000011c068999: movabs $0x1109dd020,%r10
  0x000000011c0689a3: jmp    0x000000011c0689af
  0x000000011c0689a5: movabs $0x1109d7a20,%r10
  0x000000011c0689af: jmpq   *(%r10,%rbx,8)
  0x000000011c0689b3: movzbl 0x3(%r13),%ebx
  0x000000011c0689b8: add    $0x3,%r13
  0x000000011c0689bc: movabs $0x1109d7a20,%r10
  0x000000011c0689c6: jmpq   *(%r10,%rbx,8)
  0x000000011c0689ca: nopw   0x0(%rax,%rax,1)
  0x000000011c0689d0: add    %al,(%rax)
  0x000000011c0689d2: add    %al,(%rax)
  0x000000011c0689d4: add    %al,(%rax)
  0x000000011c0689d6: add    %al,(%rax)
  0x000000011c0689d8: add    %al,(%rax)
  0x000000011c0689da: add    %al,(%rax)
  0x000000011c0689dc: add    %al,(%rax)
  0x000000011c0689de: add    %al,(%rax)

----------------------------------------------------------------------
if_icmpne  160 if_icmpne  [0x000000011c068a00, 0x000000011c068a80]  128 bytes

  0x000000011c068a00: mov    (%rsp),%eax
  0x000000011c068a03: add    $0x8,%rsp
  0x000000011c068a07: mov    (%rsp),%edx
  0x000000011c068a0a: add    $0x8,%rsp
  0x000000011c068a0e: cmp    %eax,%edx
  0x000000011c068a10: je     0x000000011c068a53
  0x000000011c068a16: mov    -0x18(%rbp),%rcx
  0x000000011c068a1a: movswl 0x1(%r13),%edx
  0x000000011c068a1f: bswap  %edx
  0x000000011c068a21: sar    $0x10,%edx
  0x000000011c068a24: movslq %edx,%rdx
  0x000000011c068a27: add    %rdx,%r13
  0x000000011c068a2a: movzbl 0x0(%r13),%ebx
  0x000000011c068a2f: testb  $0x8,0x108(%r15)
  0x000000011c068a37: je     0x000000011c068a45
  0x000000011c068a39: movabs $0x1109dd020,%r10
  0x000000011c068a43: jmp    0x000000011c068a4f
  0x000000011c068a45: movabs $0x1109d7a20,%r10
  0x000000011c068a4f: jmpq   *(%r10,%rbx,8)
  0x000000011c068a53: movzbl 0x3(%r13),%ebx
  0x000000011c068a58: add    $0x3,%r13
  0x000000011c068a5c: movabs $0x1109d7a20,%r10
  0x000000011c068a66: jmpq   *(%r10,%rbx,8)
  0x000000011c068a6a: nopw   0x0(%rax,%rax,1)
  0x000000011c068a70: add    %al,(%rax)
  0x000000011c068a72: add    %al,(%rax)
  0x000000011c068a74: add    %al,(%rax)
  0x000000011c068a76: add    %al,(%rax)
  0x000000011c068a78: add    %al,(%rax)
  0x000000011c068a7a: add    %al,(%rax)
  0x000000011c068a7c: add    %al,(%rax)
  0x000000011c068a7e: add    %al,(%rax)

----------------------------------------------------------------------
if_icmplt  161 if_icmplt  [0x000000011c068aa0, 0x000000011c068b20]  128 bytes

  0x000000011c068aa0: mov    (%rsp),%eax
  0x000000011c068aa3: add    $0x8,%rsp
  0x000000011c068aa7: mov    (%rsp),%edx
  0x000000011c068aaa: add    $0x8,%rsp
  0x000000011c068aae: cmp    %eax,%edx
  0x000000011c068ab0: jge    0x000000011c068af3
  0x000000011c068ab6: mov    -0x18(%rbp),%rcx
  0x000000011c068aba: movswl 0x1(%r13),%edx
  0x000000011c068abf: bswap  %edx
  0x000000011c068ac1: sar    $0x10,%edx
  0x000000011c068ac4: movslq %edx,%rdx
  0x000000011c068ac7: add    %rdx,%r13
  0x000000011c068aca: movzbl 0x0(%r13),%ebx
  0x000000011c068acf: testb  $0x8,0x108(%r15)
  0x000000011c068ad7: je     0x000000011c068ae5
  0x000000011c068ad9: movabs $0x1109dd020,%r10
  0x000000011c068ae3: jmp    0x000000011c068aef
  0x000000011c068ae5: movabs $0x1109d7a20,%r10
  0x000000011c068aef: jmpq   *(%r10,%rbx,8)
  0x000000011c068af3: movzbl 0x3(%r13),%ebx
  0x000000011c068af8: add    $0x3,%r13
  0x000000011c068afc: movabs $0x1109d7a20,%r10
  0x000000011c068b06: jmpq   *(%r10,%rbx,8)
  0x000000011c068b0a: nopw   0x0(%rax,%rax,1)
  0x000000011c068b10: add    %al,(%rax)
  0x000000011c068b12: add    %al,(%rax)
  0x000000011c068b14: add    %al,(%rax)
  0x000000011c068b16: add    %al,(%rax)
  0x000000011c068b18: add    %al,(%rax)
  0x000000011c068b1a: add    %al,(%rax)
  0x000000011c068b1c: add    %al,(%rax)
  0x000000011c068b1e: add    %al,(%rax)

----------------------------------------------------------------------
if_icmpge  162 if_icmpge  [0x000000011c068b40, 0x000000011c068bc0]  128 bytes

  0x000000011c068b40: mov    (%rsp),%eax
  0x000000011c068b43: add    $0x8,%rsp
  0x000000011c068b47: mov    (%rsp),%edx
  0x000000011c068b4a: add    $0x8,%rsp
  0x000000011c068b4e: cmp    %eax,%edx
  0x000000011c068b50: jl     0x000000011c068b93
  0x000000011c068b56: mov    -0x18(%rbp),%rcx
  0x000000011c068b5a: movswl 0x1(%r13),%edx
  0x000000011c068b5f: bswap  %edx
  0x000000011c068b61: sar    $0x10,%edx
  0x000000011c068b64: movslq %edx,%rdx
  0x000000011c068b67: add    %rdx,%r13
  0x000000011c068b6a: movzbl 0x0(%r13),%ebx
  0x000000011c068b6f: testb  $0x8,0x108(%r15)
  0x000000011c068b77: je     0x000000011c068b85
  0x000000011c068b79: movabs $0x1109dd020,%r10
  0x000000011c068b83: jmp    0x000000011c068b8f
  0x000000011c068b85: movabs $0x1109d7a20,%r10
  0x000000011c068b8f: jmpq   *(%r10,%rbx,8)
  0x000000011c068b93: movzbl 0x3(%r13),%ebx
  0x000000011c068b98: add    $0x3,%r13
  0x000000011c068b9c: movabs $0x1109d7a20,%r10
  0x000000011c068ba6: jmpq   *(%r10,%rbx,8)
  0x000000011c068baa: nopw   0x0(%rax,%rax,1)
  0x000000011c068bb0: add    %al,(%rax)
  0x000000011c068bb2: add    %al,(%rax)
  0x000000011c068bb4: add    %al,(%rax)
  0x000000011c068bb6: add    %al,(%rax)
  0x000000011c068bb8: add    %al,(%rax)
  0x000000011c068bba: add    %al,(%rax)
  0x000000011c068bbc: add    %al,(%rax)
  0x000000011c068bbe: add    %al,(%rax)

----------------------------------------------------------------------
if_icmpgt  163 if_icmpgt  [0x000000011c068be0, 0x000000011c068c60]  128 bytes

  0x000000011c068be0: mov    (%rsp),%eax
  0x000000011c068be3: add    $0x8,%rsp
  0x000000011c068be7: mov    (%rsp),%edx
  0x000000011c068bea: add    $0x8,%rsp
  0x000000011c068bee: cmp    %eax,%edx
  0x000000011c068bf0: jle    0x000000011c068c33
  0x000000011c068bf6: mov    -0x18(%rbp),%rcx
  0x000000011c068bfa: movswl 0x1(%r13),%edx
  0x000000011c068bff: bswap  %edx
  0x000000011c068c01: sar    $0x10,%edx
  0x000000011c068c04: movslq %edx,%rdx
  0x000000011c068c07: add    %rdx,%r13
  0x000000011c068c0a: movzbl 0x0(%r13),%ebx
  0x000000011c068c0f: testb  $0x8,0x108(%r15)
  0x000000011c068c17: je     0x000000011c068c25
  0x000000011c068c19: movabs $0x1109dd020,%r10
  0x000000011c068c23: jmp    0x000000011c068c2f
  0x000000011c068c25: movabs $0x1109d7a20,%r10
  0x000000011c068c2f: jmpq   *(%r10,%rbx,8)
  0x000000011c068c33: movzbl 0x3(%r13),%ebx
  0x000000011c068c38: add    $0x3,%r13
  0x000000011c068c3c: movabs $0x1109d7a20,%r10
  0x000000011c068c46: jmpq   *(%r10,%rbx,8)
  0x000000011c068c4a: nopw   0x0(%rax,%rax,1)
  0x000000011c068c50: add    %al,(%rax)
  0x000000011c068c52: add    %al,(%rax)
  0x000000011c068c54: add    %al,(%rax)
  0x000000011c068c56: add    %al,(%rax)
  0x000000011c068c58: add    %al,(%rax)
  0x000000011c068c5a: add    %al,(%rax)
  0x000000011c068c5c: add    %al,(%rax)
  0x000000011c068c5e: add    %al,(%rax)

----------------------------------------------------------------------
if_icmple  164 if_icmple  [0x000000011c068c80, 0x000000011c068d00]  128 bytes

  0x000000011c068c80: mov    (%rsp),%eax
  0x000000011c068c83: add    $0x8,%rsp
  0x000000011c068c87: mov    (%rsp),%edx
  0x000000011c068c8a: add    $0x8,%rsp
  0x000000011c068c8e: cmp    %eax,%edx
  0x000000011c068c90: jg     0x000000011c068cd3
  0x000000011c068c96: mov    -0x18(%rbp),%rcx
  0x000000011c068c9a: movswl 0x1(%r13),%edx
  0x000000011c068c9f: bswap  %edx
  0x000000011c068ca1: sar    $0x10,%edx
  0x000000011c068ca4: movslq %edx,%rdx
  0x000000011c068ca7: add    %rdx,%r13
  0x000000011c068caa: movzbl 0x0(%r13),%ebx
  0x000000011c068caf: testb  $0x8,0x108(%r15)
  0x000000011c068cb7: je     0x000000011c068cc5
  0x000000011c068cb9: movabs $0x1109dd020,%r10
  0x000000011c068cc3: jmp    0x000000011c068ccf
  0x000000011c068cc5: movabs $0x1109d7a20,%r10
  0x000000011c068ccf: jmpq   *(%r10,%rbx,8)
  0x000000011c068cd3: movzbl 0x3(%r13),%ebx
  0x000000011c068cd8: add    $0x3,%r13
  0x000000011c068cdc: movabs $0x1109d7a20,%r10
  0x000000011c068ce6: jmpq   *(%r10,%rbx,8)
  0x000000011c068cea: nopw   0x0(%rax,%rax,1)
  0x000000011c068cf0: add    %al,(%rax)
  0x000000011c068cf2: add    %al,(%rax)
  0x000000011c068cf4: add    %al,(%rax)
  0x000000011c068cf6: add    %al,(%rax)
  0x000000011c068cf8: add    %al,(%rax)
  0x000000011c068cfa: add    %al,(%rax)
  0x000000011c068cfc: add    %al,(%rax)
  0x000000011c068cfe: add    %al,(%rax)

----------------------------------------------------------------------
if_acmpeq  165 if_acmpeq  [0x000000011c068d20, 0x000000011c068d80]  96 bytes

  0x000000011c068d20: pop    %rax
  0x000000011c068d21: pop    %rdx
  0x000000011c068d22: cmp    %rax,%rdx
  0x000000011c068d25: jne    0x000000011c068d68
  0x000000011c068d2b: mov    -0x18(%rbp),%rcx
  0x000000011c068d2f: movswl 0x1(%r13),%edx
  0x000000011c068d34: bswap  %edx
  0x000000011c068d36: sar    $0x10,%edx
  0x000000011c068d39: movslq %edx,%rdx
  0x000000011c068d3c: add    %rdx,%r13
  0x000000011c068d3f: movzbl 0x0(%r13),%ebx
  0x000000011c068d44: testb  $0x8,0x108(%r15)
  0x000000011c068d4c: je     0x000000011c068d5a
  0x000000011c068d4e: movabs $0x1109dd020,%r10
  0x000000011c068d58: jmp    0x000000011c068d64
  0x000000011c068d5a: movabs $0x1109d7a20,%r10
  0x000000011c068d64: jmpq   *(%r10,%rbx,8)
  0x000000011c068d68: movzbl 0x3(%r13),%ebx
  0x000000011c068d6d: add    $0x3,%r13
  0x000000011c068d71: movabs $0x1109d7a20,%r10
  0x000000011c068d7b: jmpq   *(%r10,%rbx,8)
  0x000000011c068d7f: nop

----------------------------------------------------------------------
if_acmpne  166 if_acmpne  [0x000000011c068da0, 0x000000011c068e00]  96 bytes

  0x000000011c068da0: pop    %rax
  0x000000011c068da1: pop    %rdx
  0x000000011c068da2: cmp    %rax,%rdx
  0x000000011c068da5: je     0x000000011c068de8
  0x000000011c068dab: mov    -0x18(%rbp),%rcx
  0x000000011c068daf: movswl 0x1(%r13),%edx
  0x000000011c068db4: bswap  %edx
  0x000000011c068db6: sar    $0x10,%edx
  0x000000011c068db9: movslq %edx,%rdx
  0x000000011c068dbc: add    %rdx,%r13
  0x000000011c068dbf: movzbl 0x0(%r13),%ebx
  0x000000011c068dc4: testb  $0x8,0x108(%r15)
  0x000000011c068dcc: je     0x000000011c068dda
  0x000000011c068dce: movabs $0x1109dd020,%r10
  0x000000011c068dd8: jmp    0x000000011c068de4
  0x000000011c068dda: movabs $0x1109d7a20,%r10
  0x000000011c068de4: jmpq   *(%r10,%rbx,8)
  0x000000011c068de8: movzbl 0x3(%r13),%ebx
  0x000000011c068ded: add    $0x3,%r13
  0x000000011c068df1: movabs $0x1109d7a20,%r10
  0x000000011c068dfb: jmpq   *(%r10,%rbx,8)
  0x000000011c068dff: nop

----------------------------------------------------------------------
goto  167 goto  [0x000000011c068e20, 0x000000011c068ea0]  128 bytes

  0x000000011c068e20: push   %rax
  0x000000011c068e21: jmpq   0x000000011c068e5f
  0x000000011c068e26: sub    $0x8,%rsp
  0x000000011c068e2a: vmovss %xmm0,(%rsp)
  0x000000011c068e2f: jmpq   0x000000011c068e5f
  0x000000011c068e34: sub    $0x10,%rsp
  0x000000011c068e38: vmovsd %xmm0,(%rsp)
  0x000000011c068e3d: jmpq   0x000000011c068e5f
  0x000000011c068e42: sub    $0x10,%rsp
  0x000000011c068e46: mov    %rax,(%rsp)
  0x000000011c068e4a: movabs $0x0,%r10
  0x000000011c068e54: mov    %r10,0x8(%rsp)
  0x000000011c068e59: jmpq   0x000000011c068e5f
  0x000000011c068e5e: push   %rax
  0x000000011c068e5f: mov    -0x18(%rbp),%rcx
  0x000000011c068e63: movswl 0x1(%r13),%edx
  0x000000011c068e68: bswap  %edx
  0x000000011c068e6a: sar    $0x10,%edx
  0x000000011c068e6d: movslq %edx,%rdx
  0x000000011c068e70: add    %rdx,%r13
  0x000000011c068e73: movzbl 0x0(%r13),%ebx
  0x000000011c068e78: testb  $0x8,0x108(%r15)
  0x000000011c068e80: je     0x000000011c068e8e
  0x000000011c068e82: movabs $0x1109dd020,%r10
  0x000000011c068e8c: jmp    0x000000011c068e98
  0x000000011c068e8e: movabs $0x1109d7a20,%r10
  0x000000011c068e98: jmpq   *(%r10,%rbx,8)
  0x000000011c068e9c: nopl   0x0(%rax)

----------------------------------------------------------------------
jsr  168 jsr  [0x000000011c068ec0, 0x000000011c068f60]  160 bytes

  0x000000011c068ec0: push   %rax
  0x000000011c068ec1: jmpq   0x000000011c068eff
  0x000000011c068ec6: sub    $0x8,%rsp
  0x000000011c068eca: vmovss %xmm0,(%rsp)
  0x000000011c068ecf: jmpq   0x000000011c068eff
  0x000000011c068ed4: sub    $0x10,%rsp
  0x000000011c068ed8: vmovsd %xmm0,(%rsp)
  0x000000011c068edd: jmpq   0x000000011c068eff
  0x000000011c068ee2: sub    $0x10,%rsp
  0x000000011c068ee6: mov    %rax,(%rsp)
  0x000000011c068eea: movabs $0x0,%r10
  0x000000011c068ef4: mov    %r10,0x8(%rsp)
  0x000000011c068ef9: jmpq   0x000000011c068eff
  0x000000011c068efe: push   %rax
  0x000000011c068eff: mov    -0x18(%rbp),%rcx
  0x000000011c068f03: movswl 0x1(%r13),%edx
  0x000000011c068f08: bswap  %edx
  0x000000011c068f0a: sar    $0x10,%edx
  0x000000011c068f0d: movslq %edx,%rdx
  0x000000011c068f10: movzbl 0x0(%r13,%rdx,1),%ebx
  0x000000011c068f16: lea    -0x35(%r13),%rax
  0x000000011c068f1a: sub    0x8(%rcx),%rax
  0x000000011c068f1e: add    %rdx,%r13
  0x000000011c068f21: push   %rax
  0x000000011c068f22: testb  $0x8,0x108(%r15)
  0x000000011c068f2a: je     0x000000011c068f38
  0x000000011c068f2c: movabs $0x1109dd020,%r10
  0x000000011c068f36: jmp    0x000000011c068f42
  0x000000011c068f38: movabs $0x1109d7a20,%r10
  0x000000011c068f42: jmpq   *(%r10,%rbx,8)
  0x000000011c068f46: xchg   %ax,%ax
  0x000000011c068f48: add    %al,(%rax)
  0x000000011c068f4a: add    %al,(%rax)
  0x000000011c068f4c: add    %al,(%rax)
  0x000000011c068f4e: add    %al,(%rax)
  0x000000011c068f50: add    %al,(%rax)
  0x000000011c068f52: add    %al,(%rax)
  0x000000011c068f54: add    %al,(%rax)
  0x000000011c068f56: add    %al,(%rax)
  0x000000011c068f58: add    %al,(%rax)
  0x000000011c068f5a: add    %al,(%rax)
  0x000000011c068f5c: add    %al,(%rax)
  0x000000011c068f5e: add    %al,(%rax)

----------------------------------------------------------------------
ret  169 ret  [0x000000011c068f80, 0x000000011c069060]  224 bytes

  0x000000011c068f80: push   %rax
  0x000000011c068f81: jmpq   0x000000011c068fbf
  0x000000011c068f86: sub    $0x8,%rsp
  0x000000011c068f8a: vmovss %xmm0,(%rsp)
  0x000000011c068f8f: jmpq   0x000000011c068fbf
  0x000000011c068f94: sub    $0x10,%rsp
  0x000000011c068f98: vmovsd %xmm0,(%rsp)
  0x000000011c068f9d: jmpq   0x000000011c068fbf
  0x000000011c068fa2: sub    $0x10,%rsp
  0x000000011c068fa6: mov    %rax,(%rsp)
  0x000000011c068faa: movabs $0x0,%r10
  0x000000011c068fb4: mov    %r10,0x8(%rsp)
  0x000000011c068fb9: jmpq   0x000000011c068fbf
  0x000000011c068fbe: push   %rax
  0x000000011c068fbf: movzbl 0x1(%r13),%ebx
  0x000000011c068fc4: neg    %rbx
  0x000000011c068fc7: movslq (%r14,%rbx,8),%rbx
  0x000000011c068fcb: mov    -0x18(%rbp),%rax
  0x000000011c068fcf: mov    0x8(%rax),%r13
  0x000000011c068fd3: lea    0x38(%r13,%rbx,1),%r13
  0x000000011c068fd8: movzbl 0x0(%r13),%ebx
  0x000000011c068fdd: testb  $0x8,0x108(%r15)
  0x000000011c068fe5: je     0x000000011c068ff3
  0x000000011c068fe7: movabs $0x1109dd020,%r10
  0x000000011c068ff1: jmp    0x000000011c068ffd
  0x000000011c068ff3: movabs $0x1109d7a20,%r10
  0x000000011c068ffd: jmpq   *(%r10,%rbx,8)
  0x000000011c069001: movzwl 0x2(%r13),%ebx
  0x000000011c069006: bswap  %ebx
  0x000000011c069008: shr    $0x10,%ebx
  0x000000011c06900b: neg    %rbx
  0x000000011c06900e: mov    (%r14,%rbx,8),%rbx
  0x000000011c069012: mov    -0x18(%rbp),%rax
  0x000000011c069016: mov    0x8(%rax),%r13
  0x000000011c06901a: lea    0x38(%r13,%rbx,1),%r13
  0x000000011c06901f: movzbl 0x0(%r13),%ebx
  0x000000011c069024: testb  $0x8,0x108(%r15)
  0x000000011c06902c: je     0x000000011c06903a
  0x000000011c06902e: movabs $0x1109dd020,%r10
  0x000000011c069038: jmp    0x000000011c069044
  0x000000011c06903a: movabs $0x1109d7a20,%r10
  0x000000011c069044: jmpq   *(%r10,%rbx,8)
  0x000000011c069048: add    %al,(%rax)
  0x000000011c06904a: add    %al,(%rax)
  0x000000011c06904c: add    %al,(%rax)
  0x000000011c06904e: add    %al,(%rax)
  0x000000011c069050: add    %al,(%rax)
  0x000000011c069052: add    %al,(%rax)
  0x000000011c069054: add    %al,(%rax)
  0x000000011c069056: add    %al,(%rax)
  0x000000011c069058: add    %al,(%rax)
  0x000000011c06905a: add    %al,(%rax)
  0x000000011c06905c: add    %al,(%rax)
  0x000000011c06905e: add    %al,(%rax)

----------------------------------------------------------------------
tableswitch  170 tableswitch  [0x000000011c069080, 0x000000011c069100]  128 bytes

  0x000000011c069080: mov    (%rsp),%eax
  0x000000011c069083: add    $0x8,%rsp
  0x000000011c069087: lea    0x4(%r13),%rbx
  0x000000011c06908b: and    $0xfffffffffffffffc,%rbx
  0x000000011c06908f: mov    0x4(%rbx),%ecx
  0x000000011c069092: mov    0x8(%rbx),%edx
  0x000000011c069095: bswap  %ecx
  0x000000011c069097: bswap  %edx
  0x000000011c069099: cmp    %ecx,%eax
  0x000000011c06909b: jl     0x000000011c0690e1
  0x000000011c0690a1: cmp    %edx,%eax
  0x000000011c0690a3: jg     0x000000011c0690e1
  0x000000011c0690a9: sub    %ecx,%eax
  0x000000011c0690ab: mov    0xc(%rbx,%rax,4),%edx
  0x000000011c0690af: bswap  %edx
  0x000000011c0690b1: movslq %edx,%rdx
  0x000000011c0690b4: movzbl 0x0(%r13,%rdx,1),%ebx
  0x000000011c0690ba: add    %rdx,%r13
  0x000000011c0690bd: testb  $0x8,0x108(%r15)
  0x000000011c0690c5: je     0x000000011c0690d3
  0x000000011c0690c7: movabs $0x1109dd020,%r10
  0x000000011c0690d1: jmp    0x000000011c0690dd
  0x000000011c0690d3: movabs $0x1109d7a20,%r10
  0x000000011c0690dd: jmpq   *(%r10,%rbx,8)
  0x000000011c0690e1: mov    (%rbx),%edx
  0x000000011c0690e3: jmp    0x000000011c0690af
  0x000000011c0690e5: data16 xchg %ax,%ax
  0x000000011c0690e8: add    %al,(%rax)
  0x000000011c0690ea: add    %al,(%rax)
  0x000000011c0690ec: add    %al,(%rax)
  0x000000011c0690ee: add    %al,(%rax)
  0x000000011c0690f0: add    %al,(%rax)
  0x000000011c0690f2: add    %al,(%rax)
  0x000000011c0690f4: add    %al,(%rax)
  0x000000011c0690f6: add    %al,(%rax)
  0x000000011c0690f8: add    %al,(%rax)
  0x000000011c0690fa: add    %al,(%rax)
  0x000000011c0690fc: add    %al,(%rax)
  0x000000011c0690fe: add    %al,(%rax)

----------------------------------------------------------------------
lookupswitch  171 lookupswitch  [0x000000011c069120, 0x000000011c069140]  32 bytes

  0x000000011c069120: mov    (%rsp),%eax
  0x000000011c069123: add    $0x8,%rsp
  0x000000011c069127: movabs $0x110851c52,%rdi
  0x000000011c069131: and    $0xfffffffffffffff0,%rsp
  0x000000011c069135: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c06913a: hlt    
  0x000000011c06913b: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
ireturn  172 ireturn  [0x000000011c069160, 0x000000011c069660]  1280 bytes

  0x000000011c069160: mov    (%rsp),%eax
  0x000000011c069163: add    $0x8,%rsp
  0x000000011c069167: testb  $0x8,0x108(%r15)
  0x000000011c06916f: je     0x000000011c069219
  0x000000011c069175: push   %rax
  0x000000011c069176: callq  0x000000011c069180
  0x000000011c06917b: jmpq   0x000000011c069212
  0x000000011c069180: lea    0x8(%rsp),%rax
  0x000000011c069185: mov    %r13,-0x40(%rbp)
  0x000000011c069189: mov    %r15,%rdi
  0x000000011c06918c: vzeroupper 
  0x000000011c06918f: mov    %rbp,0x330(%r15)
  0x000000011c069196: mov    %rax,0x320(%r15)
  0x000000011c06919d: test   $0xf,%esp
  0x000000011c0691a3: je     0x000000011c0691bb
  0x000000011c0691a9: sub    $0x8,%rsp
  0x000000011c0691ad: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c0691b2: add    $0x8,%rsp
  0x000000011c0691b6: jmpq   0x000000011c0691c0
  0x000000011c0691bb: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c0691c0: movabs $0x0,%r10
  0x000000011c0691ca: mov    %r10,0x320(%r15)
  0x000000011c0691d1: movabs $0x0,%r10
  0x000000011c0691db: mov    %r10,0x330(%r15)
  0x000000011c0691e2: movabs $0x0,%r10
  0x000000011c0691ec: mov    %r10,0x328(%r15)
  0x000000011c0691f3: vzeroupper 
  0x000000011c0691f6: cmpq   $0x0,0x8(%r15)
  0x000000011c0691fe: je     0x000000011c069209
  0x000000011c069204: jmpq   0x000000011c054780
  0x000000011c069209: mov    -0x40(%rbp),%r13
  0x000000011c06920d: mov    -0x38(%rbp),%r14
  0x000000011c069211: retq   
  0x000000011c069212: mov    (%rsp),%eax
  0x000000011c069215: add    $0x8,%rsp
  0x000000011c069219: mov    -0x18(%rbp),%rcx
  0x000000011c06921d: mov    0x8(%rcx),%rcx
  0x000000011c069221: movzbl 0x26(%rcx),%ecx
  0x000000011c069225: cmp    $0xa,%ecx
  0x000000011c069228: je     0x000000011c069264
  0x000000011c06922e: cmp    $0x4,%ecx
  0x000000011c069231: jne    0x000000011c06923f
  0x000000011c069237: and    $0x1,%eax
  0x000000011c06923a: jmpq   0x000000011c069264
  0x000000011c06923f: cmp    $0x8,%ecx
  0x000000011c069242: jne    0x000000011c069250
  0x000000011c069248: movsbl %al,%eax
  0x000000011c06924b: jmpq   0x000000011c069264
  0x000000011c069250: cmp    $0x5,%ecx
  0x000000011c069253: jne    0x000000011c069261
  0x000000011c069259: movzwl %ax,%eax
  0x000000011c06925c: jmpq   0x000000011c069264
  0x000000011c069261: movswl %ax,%eax
  0x000000011c069264: mov    0x3dd(%r15),%bl
  0x000000011c06926b: movb   $0x0,0x3dd(%r15)
  0x000000011c069273: mov    -0x18(%rbp),%rcx
  0x000000011c069277: mov    0x20(%rcx),%ecx
  0x000000011c06927a: test   $0x20,%ecx
  0x000000011c069280: je     0x000000011c06943e
  0x000000011c069286: test   $0xff,%bl
  0x000000011c069289: jne    0x000000011c069512
  0x000000011c06928f: push   %rax
  0x000000011c069290: lea    -0x58(%rbp),%rsi
  0x000000011c069294: mov    0x8(%rsi),%rax
  0x000000011c069298: test   %rax,%rax
  0x000000011c06929b: jne    0x000000011c069358
  0x000000011c0692a1: mov    (%rsp),%eax
  0x000000011c0692a4: add    $0x8,%rsp
  0x000000011c0692a8: callq  0x000000011c0692b2
  0x000000011c0692ad: jmpq   0x000000011c069344
  0x000000011c0692b2: lea    0x8(%rsp),%rax
  0x000000011c0692b7: mov    %r13,-0x40(%rbp)
  0x000000011c0692bb: mov    %r15,%rdi
  0x000000011c0692be: vzeroupper 
  0x000000011c0692c1: mov    %rbp,0x330(%r15)
  0x000000011c0692c8: mov    %rax,0x320(%r15)
  0x000000011c0692cf: test   $0xf,%esp
  0x000000011c0692d5: je     0x000000011c0692ed
  0x000000011c0692db: sub    $0x8,%rsp
  0x000000011c0692df: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c0692e4: add    $0x8,%rsp
  0x000000011c0692e8: jmpq   0x000000011c0692f2
  0x000000011c0692ed: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c0692f2: movabs $0x0,%r10
  0x000000011c0692fc: mov    %r10,0x320(%r15)
  0x000000011c069303: movabs $0x0,%r10
  0x000000011c06930d: mov    %r10,0x330(%r15)
  0x000000011c069314: movabs $0x0,%r10
  0x000000011c06931e: mov    %r10,0x328(%r15)
  0x000000011c069325: vzeroupper 
  0x000000011c069328: cmpq   $0x0,0x8(%r15)
  0x000000011c069330: je     0x000000011c06933b
  0x000000011c069336: jmpq   0x000000011c054780
  0x000000011c06933b: mov    -0x40(%rbp),%r13
  0x000000011c06933f: mov    -0x38(%rbp),%r14
  0x000000011c069343: retq   
  0x000000011c069344: movabs $0x1107f3493,%rdi
  0x000000011c06934e: and    $0xfffffffffffffff0,%rsp
  0x000000011c069352: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c069357: hlt    
  0x000000011c069358: mov    %r13,-0x40(%rbp)
  0x000000011c06935c: lea    (%rsi),%rax
  0x000000011c06935f: mov    0x8(%rsi),%rcx
  0x000000011c069363: movq   $0x0,0x8(%rsi)
  0x000000011c06936b: mov    (%rcx),%rdx
  0x000000011c06936e: and    $0x7,%rdx
  0x000000011c069372: cmp    $0x5,%rdx
  0x000000011c069376: je     0x000000011c069433
  0x000000011c06937c: mov    (%rax),%rdx
  0x000000011c06937f: test   %rdx,%rdx
  0x000000011c069382: je     0x000000011c069433
  0x000000011c069388: lock cmpxchg %rdx,(%rcx)
  0x000000011c06938d: je     0x000000011c069433
  0x000000011c069393: mov    %rcx,0x8(%rsi)
  0x000000011c069397: callq  0x000000011c0693a1
  0x000000011c06939c: jmpq   0x000000011c069433
  0x000000011c0693a1: lea    0x8(%rsp),%rax
  0x000000011c0693a6: mov    %r13,-0x40(%rbp)
  0x000000011c0693aa: mov    %r15,%rdi
  0x000000011c0693ad: vzeroupper 
  0x000000011c0693b0: mov    %rbp,0x330(%r15)
  0x000000011c0693b7: mov    %rax,0x320(%r15)
  0x000000011c0693be: test   $0xf,%esp
  0x000000011c0693c4: je     0x000000011c0693dc
  0x000000011c0693ca: sub    $0x8,%rsp
  0x000000011c0693ce: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c0693d3: add    $0x8,%rsp
  0x000000011c0693d7: jmpq   0x000000011c0693e1
  0x000000011c0693dc: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c0693e1: movabs $0x0,%r10
  0x000000011c0693eb: mov    %r10,0x320(%r15)
  0x000000011c0693f2: movabs $0x0,%r10
  0x000000011c0693fc: mov    %r10,0x330(%r15)
  0x000000011c069403: movabs $0x0,%r10
  0x000000011c06940d: mov    %r10,0x328(%r15)
  0x000000011c069414: vzeroupper 
  0x000000011c069417: cmpq   $0x0,0x8(%r15)
  0x000000011c06941f: je     0x000000011c06942a
  0x000000011c069425: jmpq   0x000000011c054780
  0x000000011c06942a: mov    -0x40(%rbp),%r13
  0x000000011c06942e: mov    -0x38(%rbp),%r14
  0x000000011c069432: retq   
  0x000000011c069433: mov    -0x40(%rbp),%r13
  0x000000011c069437: mov    (%rsp),%eax
  0x000000011c06943a: add    $0x8,%rsp
  0x000000011c06943e: mov    -0x48(%rbp),%rsi
  0x000000011c069442: lea    -0x48(%rbp),%rbx
  0x000000011c069446: jmpq   0x000000011c06950d
  0x000000011c06944b: callq  0x000000011c069455
  0x000000011c069450: jmpq   0x000000011c0694e7
  0x000000011c069455: lea    0x8(%rsp),%rax
  0x000000011c06945a: mov    %r13,-0x40(%rbp)
  0x000000011c06945e: mov    %r15,%rdi
  0x000000011c069461: vzeroupper 
  0x000000011c069464: mov    %rbp,0x330(%r15)
  0x000000011c06946b: mov    %rax,0x320(%r15)
  0x000000011c069472: test   $0xf,%esp
  0x000000011c069478: je     0x000000011c069490
  0x000000011c06947e: sub    $0x8,%rsp
  0x000000011c069482: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c069487: add    $0x8,%rsp
  0x000000011c06948b: jmpq   0x000000011c069495
  0x000000011c069490: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c069495: movabs $0x0,%r10
  0x000000011c06949f: mov    %r10,0x320(%r15)
  0x000000011c0694a6: movabs $0x0,%r10
  0x000000011c0694b0: mov    %r10,0x330(%r15)
  0x000000011c0694b7: movabs $0x0,%r10
  0x000000011c0694c1: mov    %r10,0x328(%r15)
  0x000000011c0694c8: vzeroupper 
  0x000000011c0694cb: cmpq   $0x0,0x8(%r15)
  0x000000011c0694d3: je     0x000000011c0694de
  0x000000011c0694d9: jmpq   0x000000011c054780
  0x000000011c0694de: mov    -0x40(%rbp),%r13
  0x000000011c0694e2: mov    -0x38(%rbp),%r14
  0x000000011c0694e6: retq   
  0x000000011c0694e7: movabs $0x1107f3493,%rdi
  0x000000011c0694f1: and    $0xfffffffffffffff0,%rsp
  0x000000011c0694f5: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c0694fa: hlt    
  0x000000011c0694fb: cmpq   $0x0,0x8(%rsi)
  0x000000011c069503: jne    0x000000011c06944b
  0x000000011c069509: add    $0x10,%rsi
  0x000000011c06950d: cmp    %rbx,%rsi
  0x000000011c069510: jne    0x000000011c0694fb
  0x000000011c069512: cmpb   $0x0,-0xb6af43f(%rip)        # 0x00000001109ba0da = DTraceMethodProbes
  0x000000011c069519: je     0x000000011c069551
  0x000000011c06951f: push   %rax
  0x000000011c069520: mov    -0x18(%rbp),%rsi
  0x000000011c069524: mov    %r15,%rdi
  0x000000011c069527: test   $0xf,%esp
  0x000000011c06952d: je     0x000000011c069545
  0x000000011c069533: sub    $0x8,%rsp
  0x000000011c069537: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c06953c: add    $0x8,%rsp
  0x000000011c069540: jmpq   0x000000011c06954a
  0x000000011c069545: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c06954a: mov    (%rsp),%eax
  0x000000011c06954d: add    $0x8,%rsp
  0x000000011c069551: mov    -0x8(%rbp),%rbx
  0x000000011c069555: cmpl   $0x3,0x408(%r15)
  0x000000011c069560: je     0x000000011c069649
  0x000000011c069566: cmp    0x418(%r15),%rbx
  0x000000011c06956d: jle    0x000000011c069649
  0x000000011c069573: mov    %r15,%rdi
  0x000000011c069576: test   $0xf,%esp
  0x000000011c06957c: je     0x000000011c069594
  0x000000011c069582: sub    $0x8,%rsp
  0x000000011c069586: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c06958b: add    $0x8,%rsp
  0x000000011c06958f: jmpq   0x000000011c069599
  0x000000011c069594: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c069599: callq  0x000000011c0695a3
  0x000000011c06959e: jmpq   0x000000011c069635
  0x000000011c0695a3: lea    0x8(%rsp),%rax
  0x000000011c0695a8: mov    %r13,-0x40(%rbp)
  0x000000011c0695ac: mov    %r15,%rdi
  0x000000011c0695af: vzeroupper 
  0x000000011c0695b2: mov    %rbp,0x330(%r15)
  0x000000011c0695b9: mov    %rax,0x320(%r15)
  0x000000011c0695c0: test   $0xf,%esp
  0x000000011c0695c6: je     0x000000011c0695de
  0x000000011c0695cc: sub    $0x8,%rsp
  0x000000011c0695d0: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c0695d5: add    $0x8,%rsp
  0x000000011c0695d9: jmpq   0x000000011c0695e3
  0x000000011c0695de: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c0695e3: movabs $0x0,%r10
  0x000000011c0695ed: mov    %r10,0x320(%r15)
  0x000000011c0695f4: movabs $0x0,%r10
  0x000000011c0695fe: mov    %r10,0x330(%r15)
  0x000000011c069605: movabs $0x0,%r10
  0x000000011c06960f: mov    %r10,0x328(%r15)
  0x000000011c069616: vzeroupper 
  0x000000011c069619: cmpq   $0x0,0x8(%r15)
  0x000000011c069621: je     0x000000011c06962c
  0x000000011c069627: jmpq   0x000000011c054780
  0x000000011c06962c: mov    -0x40(%rbp),%r13
  0x000000011c069630: mov    -0x38(%rbp),%r14
  0x000000011c069634: retq   
  0x000000011c069635: movabs $0x1107f3493,%rdi
  0x000000011c06963f: and    $0xfffffffffffffff0,%rsp
  0x000000011c069643: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c069648: hlt    
  0x000000011c069649: leaveq 
  0x000000011c06964a: pop    %r13
  0x000000011c06964c: mov    %rbx,%rsp
  0x000000011c06964f: jmpq   *%r13
  0x000000011c069652: nopw   0x0(%rax,%rax,1)
  0x000000011c069658: add    %al,(%rax)
  0x000000011c06965a: add    %al,(%rax)
  0x000000011c06965c: add    %al,(%rax)
  0x000000011c06965e: add    %al,(%rax)

----------------------------------------------------------------------
lreturn  173 lreturn  [0x000000011c069680, 0x000000011c069b80]  1280 bytes

  0x000000011c069680: mov    (%rsp),%rax
  0x000000011c069684: add    $0x10,%rsp
  0x000000011c069688: testb  $0x8,0x108(%r15)
  0x000000011c069690: je     0x000000011c069751
  0x000000011c069696: sub    $0x10,%rsp
  0x000000011c06969a: mov    %rax,(%rsp)
  0x000000011c06969e: movabs $0x0,%r10
  0x000000011c0696a8: mov    %r10,0x8(%rsp)
  0x000000011c0696ad: callq  0x000000011c0696b7
  0x000000011c0696b2: jmpq   0x000000011c069749
  0x000000011c0696b7: lea    0x8(%rsp),%rax
  0x000000011c0696bc: mov    %r13,-0x40(%rbp)
  0x000000011c0696c0: mov    %r15,%rdi
  0x000000011c0696c3: vzeroupper 
  0x000000011c0696c6: mov    %rbp,0x330(%r15)
  0x000000011c0696cd: mov    %rax,0x320(%r15)
  0x000000011c0696d4: test   $0xf,%esp
  0x000000011c0696da: je     0x000000011c0696f2
  0x000000011c0696e0: sub    $0x8,%rsp
  0x000000011c0696e4: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c0696e9: add    $0x8,%rsp
  0x000000011c0696ed: jmpq   0x000000011c0696f7
  0x000000011c0696f2: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c0696f7: movabs $0x0,%r10
  0x000000011c069701: mov    %r10,0x320(%r15)
  0x000000011c069708: movabs $0x0,%r10
  0x000000011c069712: mov    %r10,0x330(%r15)
  0x000000011c069719: movabs $0x0,%r10
  0x000000011c069723: mov    %r10,0x328(%r15)
  0x000000011c06972a: vzeroupper 
  0x000000011c06972d: cmpq   $0x0,0x8(%r15)
  0x000000011c069735: je     0x000000011c069740
  0x000000011c06973b: jmpq   0x000000011c054780
  0x000000011c069740: mov    -0x40(%rbp),%r13
  0x000000011c069744: mov    -0x38(%rbp),%r14
  0x000000011c069748: retq   
  0x000000011c069749: mov    (%rsp),%rax
  0x000000011c06974d: add    $0x10,%rsp
  0x000000011c069751: mov    0x3dd(%r15),%bl
  0x000000011c069758: movb   $0x0,0x3dd(%r15)
  0x000000011c069760: mov    -0x18(%rbp),%rcx
  0x000000011c069764: mov    0x20(%rcx),%ecx
  0x000000011c069767: test   $0x20,%ecx
  0x000000011c06976d: je     0x000000011c069943
  0x000000011c069773: test   $0xff,%bl
  0x000000011c069776: jne    0x000000011c069a17
  0x000000011c06977c: sub    $0x10,%rsp
  0x000000011c069780: mov    %rax,(%rsp)
  0x000000011c069784: movabs $0x0,%r10
  0x000000011c06978e: mov    %r10,0x8(%rsp)
  0x000000011c069793: lea    -0x58(%rbp),%rsi
  0x000000011c069797: mov    0x8(%rsi),%rax
  0x000000011c06979b: test   %rax,%rax
  0x000000011c06979e: jne    0x000000011c06985c
  0x000000011c0697a4: mov    (%rsp),%rax
  0x000000011c0697a8: add    $0x10,%rsp
  0x000000011c0697ac: callq  0x000000011c0697b6
  0x000000011c0697b1: jmpq   0x000000011c069848
  0x000000011c0697b6: lea    0x8(%rsp),%rax
  0x000000011c0697bb: mov    %r13,-0x40(%rbp)
  0x000000011c0697bf: mov    %r15,%rdi
  0x000000011c0697c2: vzeroupper 
  0x000000011c0697c5: mov    %rbp,0x330(%r15)
  0x000000011c0697cc: mov    %rax,0x320(%r15)
  0x000000011c0697d3: test   $0xf,%esp
  0x000000011c0697d9: je     0x000000011c0697f1
  0x000000011c0697df: sub    $0x8,%rsp
  0x000000011c0697e3: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c0697e8: add    $0x8,%rsp
  0x000000011c0697ec: jmpq   0x000000011c0697f6
  0x000000011c0697f1: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c0697f6: movabs $0x0,%r10
  0x000000011c069800: mov    %r10,0x320(%r15)
  0x000000011c069807: movabs $0x0,%r10
  0x000000011c069811: mov    %r10,0x330(%r15)
  0x000000011c069818: movabs $0x0,%r10
  0x000000011c069822: mov    %r10,0x328(%r15)
  0x000000011c069829: vzeroupper 
  0x000000011c06982c: cmpq   $0x0,0x8(%r15)
  0x000000011c069834: je     0x000000011c06983f
  0x000000011c06983a: jmpq   0x000000011c054780
  0x000000011c06983f: mov    -0x40(%rbp),%r13
  0x000000011c069843: mov    -0x38(%rbp),%r14
  0x000000011c069847: retq   
  0x000000011c069848: movabs $0x1107f3493,%rdi
  0x000000011c069852: and    $0xfffffffffffffff0,%rsp
  0x000000011c069856: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c06985b: hlt    
  0x000000011c06985c: mov    %r13,-0x40(%rbp)
  0x000000011c069860: lea    (%rsi),%rax
  0x000000011c069863: mov    0x8(%rsi),%rcx
  0x000000011c069867: movq   $0x0,0x8(%rsi)
  0x000000011c06986f: mov    (%rcx),%rdx
  0x000000011c069872: and    $0x7,%rdx
  0x000000011c069876: cmp    $0x5,%rdx
  0x000000011c06987a: je     0x000000011c069937
  0x000000011c069880: mov    (%rax),%rdx
  0x000000011c069883: test   %rdx,%rdx
  0x000000011c069886: je     0x000000011c069937
  0x000000011c06988c: lock cmpxchg %rdx,(%rcx)
  0x000000011c069891: je     0x000000011c069937
  0x000000011c069897: mov    %rcx,0x8(%rsi)
  0x000000011c06989b: callq  0x000000011c0698a5
  0x000000011c0698a0: jmpq   0x000000011c069937
  0x000000011c0698a5: lea    0x8(%rsp),%rax
  0x000000011c0698aa: mov    %r13,-0x40(%rbp)
  0x000000011c0698ae: mov    %r15,%rdi
  0x000000011c0698b1: vzeroupper 
  0x000000011c0698b4: mov    %rbp,0x330(%r15)
  0x000000011c0698bb: mov    %rax,0x320(%r15)
  0x000000011c0698c2: test   $0xf,%esp
  0x000000011c0698c8: je     0x000000011c0698e0
  0x000000011c0698ce: sub    $0x8,%rsp
  0x000000011c0698d2: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c0698d7: add    $0x8,%rsp
  0x000000011c0698db: jmpq   0x000000011c0698e5
  0x000000011c0698e0: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c0698e5: movabs $0x0,%r10
  0x000000011c0698ef: mov    %r10,0x320(%r15)
  0x000000011c0698f6: movabs $0x0,%r10
  0x000000011c069900: mov    %r10,0x330(%r15)
  0x000000011c069907: movabs $0x0,%r10
  0x000000011c069911: mov    %r10,0x328(%r15)
  0x000000011c069918: vzeroupper 
  0x000000011c06991b: cmpq   $0x0,0x8(%r15)
  0x000000011c069923: je     0x000000011c06992e
  0x000000011c069929: jmpq   0x000000011c054780
  0x000000011c06992e: mov    -0x40(%rbp),%r13
  0x000000011c069932: mov    -0x38(%rbp),%r14
  0x000000011c069936: retq   
  0x000000011c069937: mov    -0x40(%rbp),%r13
  0x000000011c06993b: mov    (%rsp),%rax
  0x000000011c06993f: add    $0x10,%rsp
  0x000000011c069943: mov    -0x48(%rbp),%rsi
  0x000000011c069947: lea    -0x48(%rbp),%rbx
  0x000000011c06994b: jmpq   0x000000011c069a12
  0x000000011c069950: callq  0x000000011c06995a
  0x000000011c069955: jmpq   0x000000011c0699ec
  0x000000011c06995a: lea    0x8(%rsp),%rax
  0x000000011c06995f: mov    %r13,-0x40(%rbp)
  0x000000011c069963: mov    %r15,%rdi
  0x000000011c069966: vzeroupper 
  0x000000011c069969: mov    %rbp,0x330(%r15)
  0x000000011c069970: mov    %rax,0x320(%r15)
  0x000000011c069977: test   $0xf,%esp
  0x000000011c06997d: je     0x000000011c069995
  0x000000011c069983: sub    $0x8,%rsp
  0x000000011c069987: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c06998c: add    $0x8,%rsp
  0x000000011c069990: jmpq   0x000000011c06999a
  0x000000011c069995: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c06999a: movabs $0x0,%r10
  0x000000011c0699a4: mov    %r10,0x320(%r15)
  0x000000011c0699ab: movabs $0x0,%r10
  0x000000011c0699b5: mov    %r10,0x330(%r15)
  0x000000011c0699bc: movabs $0x0,%r10
  0x000000011c0699c6: mov    %r10,0x328(%r15)
  0x000000011c0699cd: vzeroupper 
  0x000000011c0699d0: cmpq   $0x0,0x8(%r15)
  0x000000011c0699d8: je     0x000000011c0699e3
  0x000000011c0699de: jmpq   0x000000011c054780
  0x000000011c0699e3: mov    -0x40(%rbp),%r13
  0x000000011c0699e7: mov    -0x38(%rbp),%r14
  0x000000011c0699eb: retq   
  0x000000011c0699ec: movabs $0x1107f3493,%rdi
  0x000000011c0699f6: and    $0xfffffffffffffff0,%rsp
  0x000000011c0699fa: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c0699ff: hlt    
  0x000000011c069a00: cmpq   $0x0,0x8(%rsi)
  0x000000011c069a08: jne    0x000000011c069950
  0x000000011c069a0e: add    $0x10,%rsi
  0x000000011c069a12: cmp    %rbx,%rsi
  0x000000011c069a15: jne    0x000000011c069a00
  0x000000011c069a17: cmpb   $0x0,-0xb6af944(%rip)        # 0x00000001109ba0da = DTraceMethodProbes
  0x000000011c069a1e: je     0x000000011c069a6d
  0x000000011c069a24: sub    $0x10,%rsp
  0x000000011c069a28: mov    %rax,(%rsp)
  0x000000011c069a2c: movabs $0x0,%r10
  0x000000011c069a36: mov    %r10,0x8(%rsp)
  0x000000011c069a3b: mov    -0x18(%rbp),%rsi
  0x000000011c069a3f: mov    %r15,%rdi
  0x000000011c069a42: test   $0xf,%esp
  0x000000011c069a48: je     0x000000011c069a60
  0x000000011c069a4e: sub    $0x8,%rsp
  0x000000011c069a52: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c069a57: add    $0x8,%rsp
  0x000000011c069a5b: jmpq   0x000000011c069a65
  0x000000011c069a60: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c069a65: mov    (%rsp),%rax
  0x000000011c069a69: add    $0x10,%rsp
  0x000000011c069a6d: mov    -0x8(%rbp),%rbx
  0x000000011c069a71: cmpl   $0x3,0x408(%r15)
  0x000000011c069a7c: je     0x000000011c069b65
  0x000000011c069a82: cmp    0x418(%r15),%rbx
  0x000000011c069a89: jle    0x000000011c069b65
  0x000000011c069a8f: mov    %r15,%rdi
  0x000000011c069a92: test   $0xf,%esp
  0x000000011c069a98: je     0x000000011c069ab0
  0x000000011c069a9e: sub    $0x8,%rsp
  0x000000011c069aa2: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c069aa7: add    $0x8,%rsp
  0x000000011c069aab: jmpq   0x000000011c069ab5
  0x000000011c069ab0: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c069ab5: callq  0x000000011c069abf
  0x000000011c069aba: jmpq   0x000000011c069b51
  0x000000011c069abf: lea    0x8(%rsp),%rax
  0x000000011c069ac4: mov    %r13,-0x40(%rbp)
  0x000000011c069ac8: mov    %r15,%rdi
  0x000000011c069acb: vzeroupper 
  0x000000011c069ace: mov    %rbp,0x330(%r15)
  0x000000011c069ad5: mov    %rax,0x320(%r15)
  0x000000011c069adc: test   $0xf,%esp
  0x000000011c069ae2: je     0x000000011c069afa
  0x000000011c069ae8: sub    $0x8,%rsp
  0x000000011c069aec: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c069af1: add    $0x8,%rsp
  0x000000011c069af5: jmpq   0x000000011c069aff
  0x000000011c069afa: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c069aff: movabs $0x0,%r10
  0x000000011c069b09: mov    %r10,0x320(%r15)
  0x000000011c069b10: movabs $0x0,%r10
  0x000000011c069b1a: mov    %r10,0x330(%r15)
  0x000000011c069b21: movabs $0x0,%r10
  0x000000011c069b2b: mov    %r10,0x328(%r15)
  0x000000011c069b32: vzeroupper 
  0x000000011c069b35: cmpq   $0x0,0x8(%r15)
  0x000000011c069b3d: je     0x000000011c069b48
  0x000000011c069b43: jmpq   0x000000011c054780
  0x000000011c069b48: mov    -0x40(%rbp),%r13
  0x000000011c069b4c: mov    -0x38(%rbp),%r14
  0x000000011c069b50: retq   
  0x000000011c069b51: movabs $0x1107f3493,%rdi
  0x000000011c069b5b: and    $0xfffffffffffffff0,%rsp
  0x000000011c069b5f: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c069b64: hlt    
  0x000000011c069b65: leaveq 
  0x000000011c069b66: pop    %r13
  0x000000011c069b68: mov    %rbx,%rsp
  0x000000011c069b6b: jmpq   *%r13
  0x000000011c069b6e: xchg   %ax,%ax
  0x000000011c069b70: add    %al,(%rax)
  0x000000011c069b72: add    %al,(%rax)
  0x000000011c069b74: add    %al,(%rax)
  0x000000011c069b76: add    %al,(%rax)
  0x000000011c069b78: add    %al,(%rax)
  0x000000011c069b7a: add    %al,(%rax)
  0x000000011c069b7c: add    %al,(%rax)
  0x000000011c069b7e: add    %al,(%rax)

----------------------------------------------------------------------
freturn  174 freturn  [0x000000011c069ba0, 0x000000011c06a080]  1248 bytes

  0x000000011c069ba0: vmovss (%rsp),%xmm0
  0x000000011c069ba5: add    $0x8,%rsp
  0x000000011c069ba9: testb  $0x8,0x108(%r15)
  0x000000011c069bb1: je     0x000000011c069c65
  0x000000011c069bb7: sub    $0x8,%rsp
  0x000000011c069bbb: vmovss %xmm0,(%rsp)
  0x000000011c069bc0: callq  0x000000011c069bca
  0x000000011c069bc5: jmpq   0x000000011c069c5c
  0x000000011c069bca: lea    0x8(%rsp),%rax
  0x000000011c069bcf: mov    %r13,-0x40(%rbp)
  0x000000011c069bd3: mov    %r15,%rdi
  0x000000011c069bd6: vzeroupper 
  0x000000011c069bd9: mov    %rbp,0x330(%r15)
  0x000000011c069be0: mov    %rax,0x320(%r15)
  0x000000011c069be7: test   $0xf,%esp
  0x000000011c069bed: je     0x000000011c069c05
  0x000000011c069bf3: sub    $0x8,%rsp
  0x000000011c069bf7: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c069bfc: add    $0x8,%rsp
  0x000000011c069c00: jmpq   0x000000011c069c0a
  0x000000011c069c05: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c069c0a: movabs $0x0,%r10
  0x000000011c069c14: mov    %r10,0x320(%r15)
  0x000000011c069c1b: movabs $0x0,%r10
  0x000000011c069c25: mov    %r10,0x330(%r15)
  0x000000011c069c2c: movabs $0x0,%r10
  0x000000011c069c36: mov    %r10,0x328(%r15)
  0x000000011c069c3d: vzeroupper 
  0x000000011c069c40: cmpq   $0x0,0x8(%r15)
  0x000000011c069c48: je     0x000000011c069c53
  0x000000011c069c4e: jmpq   0x000000011c054780
  0x000000011c069c53: mov    -0x40(%rbp),%r13
  0x000000011c069c57: mov    -0x38(%rbp),%r14
  0x000000011c069c5b: retq   
  0x000000011c069c5c: vmovss (%rsp),%xmm0
  0x000000011c069c61: add    $0x8,%rsp
  0x000000011c069c65: mov    0x3dd(%r15),%bl
  0x000000011c069c6c: movb   $0x0,0x3dd(%r15)
  0x000000011c069c74: mov    -0x18(%rbp),%rcx
  0x000000011c069c78: mov    0x20(%rcx),%ecx
  0x000000011c069c7b: test   $0x20,%ecx
  0x000000011c069c81: je     0x000000011c069e4b
  0x000000011c069c87: test   $0xff,%bl
  0x000000011c069c8a: jne    0x000000011c069f1f
  0x000000011c069c90: sub    $0x8,%rsp
  0x000000011c069c94: vmovss %xmm0,(%rsp)
  0x000000011c069c99: lea    -0x58(%rbp),%rsi
  0x000000011c069c9d: mov    0x8(%rsi),%rax
  0x000000011c069ca1: test   %rax,%rax
  0x000000011c069ca4: jne    0x000000011c069d63
  0x000000011c069caa: vmovss (%rsp),%xmm0
  0x000000011c069caf: add    $0x8,%rsp
  0x000000011c069cb3: callq  0x000000011c069cbd
  0x000000011c069cb8: jmpq   0x000000011c069d4f
  0x000000011c069cbd: lea    0x8(%rsp),%rax
  0x000000011c069cc2: mov    %r13,-0x40(%rbp)
  0x000000011c069cc6: mov    %r15,%rdi
  0x000000011c069cc9: vzeroupper 
  0x000000011c069ccc: mov    %rbp,0x330(%r15)
  0x000000011c069cd3: mov    %rax,0x320(%r15)
  0x000000011c069cda: test   $0xf,%esp
  0x000000011c069ce0: je     0x000000011c069cf8
  0x000000011c069ce6: sub    $0x8,%rsp
  0x000000011c069cea: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c069cef: add    $0x8,%rsp
  0x000000011c069cf3: jmpq   0x000000011c069cfd
  0x000000011c069cf8: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c069cfd: movabs $0x0,%r10
  0x000000011c069d07: mov    %r10,0x320(%r15)
  0x000000011c069d0e: movabs $0x0,%r10
  0x000000011c069d18: mov    %r10,0x330(%r15)
  0x000000011c069d1f: movabs $0x0,%r10
  0x000000011c069d29: mov    %r10,0x328(%r15)
  0x000000011c069d30: vzeroupper 
  0x000000011c069d33: cmpq   $0x0,0x8(%r15)
  0x000000011c069d3b: je     0x000000011c069d46
  0x000000011c069d41: jmpq   0x000000011c054780
  0x000000011c069d46: mov    -0x40(%rbp),%r13
  0x000000011c069d4a: mov    -0x38(%rbp),%r14
  0x000000011c069d4e: retq   
  0x000000011c069d4f: movabs $0x1107f3493,%rdi
  0x000000011c069d59: and    $0xfffffffffffffff0,%rsp
  0x000000011c069d5d: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c069d62: hlt    
  0x000000011c069d63: mov    %r13,-0x40(%rbp)
  0x000000011c069d67: lea    (%rsi),%rax
  0x000000011c069d6a: mov    0x8(%rsi),%rcx
  0x000000011c069d6e: movq   $0x0,0x8(%rsi)
  0x000000011c069d76: mov    (%rcx),%rdx
  0x000000011c069d79: and    $0x7,%rdx
  0x000000011c069d7d: cmp    $0x5,%rdx
  0x000000011c069d81: je     0x000000011c069e3e
  0x000000011c069d87: mov    (%rax),%rdx
  0x000000011c069d8a: test   %rdx,%rdx
  0x000000011c069d8d: je     0x000000011c069e3e
  0x000000011c069d93: lock cmpxchg %rdx,(%rcx)
  0x000000011c069d98: je     0x000000011c069e3e
  0x000000011c069d9e: mov    %rcx,0x8(%rsi)
  0x000000011c069da2: callq  0x000000011c069dac
  0x000000011c069da7: jmpq   0x000000011c069e3e
  0x000000011c069dac: lea    0x8(%rsp),%rax
  0x000000011c069db1: mov    %r13,-0x40(%rbp)
  0x000000011c069db5: mov    %r15,%rdi
  0x000000011c069db8: vzeroupper 
  0x000000011c069dbb: mov    %rbp,0x330(%r15)
  0x000000011c069dc2: mov    %rax,0x320(%r15)
  0x000000011c069dc9: test   $0xf,%esp
  0x000000011c069dcf: je     0x000000011c069de7
  0x000000011c069dd5: sub    $0x8,%rsp
  0x000000011c069dd9: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c069dde: add    $0x8,%rsp
  0x000000011c069de2: jmpq   0x000000011c069dec
  0x000000011c069de7: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c069dec: movabs $0x0,%r10
  0x000000011c069df6: mov    %r10,0x320(%r15)
  0x000000011c069dfd: movabs $0x0,%r10
  0x000000011c069e07: mov    %r10,0x330(%r15)
  0x000000011c069e0e: movabs $0x0,%r10
  0x000000011c069e18: mov    %r10,0x328(%r15)
  0x000000011c069e1f: vzeroupper 
  0x000000011c069e22: cmpq   $0x0,0x8(%r15)
  0x000000011c069e2a: je     0x000000011c069e35
  0x000000011c069e30: jmpq   0x000000011c054780
  0x000000011c069e35: mov    -0x40(%rbp),%r13
  0x000000011c069e39: mov    -0x38(%rbp),%r14
  0x000000011c069e3d: retq   
  0x000000011c069e3e: mov    -0x40(%rbp),%r13
  0x000000011c069e42: vmovss (%rsp),%xmm0
  0x000000011c069e47: add    $0x8,%rsp
  0x000000011c069e4b: mov    -0x48(%rbp),%rsi
  0x000000011c069e4f: lea    -0x48(%rbp),%rbx
  0x000000011c069e53: jmpq   0x000000011c069f1a
  0x000000011c069e58: callq  0x000000011c069e62
  0x000000011c069e5d: jmpq   0x000000011c069ef4
  0x000000011c069e62: lea    0x8(%rsp),%rax
  0x000000011c069e67: mov    %r13,-0x40(%rbp)
  0x000000011c069e6b: mov    %r15,%rdi
  0x000000011c069e6e: vzeroupper 
  0x000000011c069e71: mov    %rbp,0x330(%r15)
  0x000000011c069e78: mov    %rax,0x320(%r15)
  0x000000011c069e7f: test   $0xf,%esp
  0x000000011c069e85: je     0x000000011c069e9d
  0x000000011c069e8b: sub    $0x8,%rsp
  0x000000011c069e8f: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c069e94: add    $0x8,%rsp
  0x000000011c069e98: jmpq   0x000000011c069ea2
  0x000000011c069e9d: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c069ea2: movabs $0x0,%r10
  0x000000011c069eac: mov    %r10,0x320(%r15)
  0x000000011c069eb3: movabs $0x0,%r10
  0x000000011c069ebd: mov    %r10,0x330(%r15)
  0x000000011c069ec4: movabs $0x0,%r10
  0x000000011c069ece: mov    %r10,0x328(%r15)
  0x000000011c069ed5: vzeroupper 
  0x000000011c069ed8: cmpq   $0x0,0x8(%r15)
  0x000000011c069ee0: je     0x000000011c069eeb
  0x000000011c069ee6: jmpq   0x000000011c054780
  0x000000011c069eeb: mov    -0x40(%rbp),%r13
  0x000000011c069eef: mov    -0x38(%rbp),%r14
  0x000000011c069ef3: retq   
  0x000000011c069ef4: movabs $0x1107f3493,%rdi
  0x000000011c069efe: and    $0xfffffffffffffff0,%rsp
  0x000000011c069f02: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c069f07: hlt    
  0x000000011c069f08: cmpq   $0x0,0x8(%rsi)
  0x000000011c069f10: jne    0x000000011c069e58
  0x000000011c069f16: add    $0x10,%rsi
  0x000000011c069f1a: cmp    %rbx,%rsi
  0x000000011c069f1d: jne    0x000000011c069f08
  0x000000011c069f1f: cmpb   $0x0,-0xb6afe4c(%rip)        # 0x00000001109ba0da = DTraceMethodProbes
  0x000000011c069f26: je     0x000000011c069f68
  0x000000011c069f2c: sub    $0x8,%rsp
  0x000000011c069f30: vmovss %xmm0,(%rsp)
  0x000000011c069f35: mov    -0x18(%rbp),%rsi
  0x000000011c069f39: mov    %r15,%rdi
  0x000000011c069f3c: test   $0xf,%esp
  0x000000011c069f42: je     0x000000011c069f5a
  0x000000011c069f48: sub    $0x8,%rsp
  0x000000011c069f4c: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c069f51: add    $0x8,%rsp
  0x000000011c069f55: jmpq   0x000000011c069f5f
  0x000000011c069f5a: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c069f5f: vmovss (%rsp),%xmm0
  0x000000011c069f64: add    $0x8,%rsp
  0x000000011c069f68: mov    -0x8(%rbp),%rbx
  0x000000011c069f6c: cmpl   $0x3,0x408(%r15)
  0x000000011c069f77: je     0x000000011c06a060
  0x000000011c069f7d: cmp    0x418(%r15),%rbx
  0x000000011c069f84: jle    0x000000011c06a060
  0x000000011c069f8a: mov    %r15,%rdi
  0x000000011c069f8d: test   $0xf,%esp
  0x000000011c069f93: je     0x000000011c069fab
  0x000000011c069f99: sub    $0x8,%rsp
  0x000000011c069f9d: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c069fa2: add    $0x8,%rsp
  0x000000011c069fa6: jmpq   0x000000011c069fb0
  0x000000011c069fab: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c069fb0: callq  0x000000011c069fba
  0x000000011c069fb5: jmpq   0x000000011c06a04c
  0x000000011c069fba: lea    0x8(%rsp),%rax
  0x000000011c069fbf: mov    %r13,-0x40(%rbp)
  0x000000011c069fc3: mov    %r15,%rdi
  0x000000011c069fc6: vzeroupper 
  0x000000011c069fc9: mov    %rbp,0x330(%r15)
  0x000000011c069fd0: mov    %rax,0x320(%r15)
  0x000000011c069fd7: test   $0xf,%esp
  0x000000011c069fdd: je     0x000000011c069ff5
  0x000000011c069fe3: sub    $0x8,%rsp
  0x000000011c069fe7: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c069fec: add    $0x8,%rsp
  0x000000011c069ff0: jmpq   0x000000011c069ffa
  0x000000011c069ff5: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c069ffa: movabs $0x0,%r10
  0x000000011c06a004: mov    %r10,0x320(%r15)
  0x000000011c06a00b: movabs $0x0,%r10
  0x000000011c06a015: mov    %r10,0x330(%r15)
  0x000000011c06a01c: movabs $0x0,%r10
  0x000000011c06a026: mov    %r10,0x328(%r15)
  0x000000011c06a02d: vzeroupper 
  0x000000011c06a030: cmpq   $0x0,0x8(%r15)
  0x000000011c06a038: je     0x000000011c06a043
  0x000000011c06a03e: jmpq   0x000000011c054780
  0x000000011c06a043: mov    -0x40(%rbp),%r13
  0x000000011c06a047: mov    -0x38(%rbp),%r14
  0x000000011c06a04b: retq   
  0x000000011c06a04c: movabs $0x1107f3493,%rdi
  0x000000011c06a056: and    $0xfffffffffffffff0,%rsp
  0x000000011c06a05a: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c06a05f: hlt    
  0x000000011c06a060: leaveq 
  0x000000011c06a061: pop    %r13
  0x000000011c06a063: mov    %rbx,%rsp
  0x000000011c06a066: jmpq   *%r13
  0x000000011c06a069: nopl   0x0(%rax)
  0x000000011c06a070: add    %al,(%rax)
  0x000000011c06a072: add    %al,(%rax)
  0x000000011c06a074: add    %al,(%rax)
  0x000000011c06a076: add    %al,(%rax)
  0x000000011c06a078: add    %al,(%rax)
  0x000000011c06a07a: add    %al,(%rax)
  0x000000011c06a07c: add    %al,(%rax)
  0x000000011c06a07e: add    %al,(%rax)

----------------------------------------------------------------------
dreturn  175 dreturn  [0x000000011c06a0a0, 0x000000011c06a580]  1248 bytes

  0x000000011c06a0a0: vmovsd (%rsp),%xmm0
  0x000000011c06a0a5: add    $0x10,%rsp
  0x000000011c06a0a9: testb  $0x8,0x108(%r15)
  0x000000011c06a0b1: je     0x000000011c06a165
  0x000000011c06a0b7: sub    $0x10,%rsp
  0x000000011c06a0bb: vmovsd %xmm0,(%rsp)
  0x000000011c06a0c0: callq  0x000000011c06a0ca
  0x000000011c06a0c5: jmpq   0x000000011c06a15c
  0x000000011c06a0ca: lea    0x8(%rsp),%rax
  0x000000011c06a0cf: mov    %r13,-0x40(%rbp)
  0x000000011c06a0d3: mov    %r15,%rdi
  0x000000011c06a0d6: vzeroupper 
  0x000000011c06a0d9: mov    %rbp,0x330(%r15)
  0x000000011c06a0e0: mov    %rax,0x320(%r15)
  0x000000011c06a0e7: test   $0xf,%esp
  0x000000011c06a0ed: je     0x000000011c06a105
  0x000000011c06a0f3: sub    $0x8,%rsp
  0x000000011c06a0f7: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c06a0fc: add    $0x8,%rsp
  0x000000011c06a100: jmpq   0x000000011c06a10a
  0x000000011c06a105: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c06a10a: movabs $0x0,%r10
  0x000000011c06a114: mov    %r10,0x320(%r15)
  0x000000011c06a11b: movabs $0x0,%r10
  0x000000011c06a125: mov    %r10,0x330(%r15)
  0x000000011c06a12c: movabs $0x0,%r10
  0x000000011c06a136: mov    %r10,0x328(%r15)
  0x000000011c06a13d: vzeroupper 
  0x000000011c06a140: cmpq   $0x0,0x8(%r15)
  0x000000011c06a148: je     0x000000011c06a153
  0x000000011c06a14e: jmpq   0x000000011c054780
  0x000000011c06a153: mov    -0x40(%rbp),%r13
  0x000000011c06a157: mov    -0x38(%rbp),%r14
  0x000000011c06a15b: retq   
  0x000000011c06a15c: vmovsd (%rsp),%xmm0
  0x000000011c06a161: add    $0x10,%rsp
  0x000000011c06a165: mov    0x3dd(%r15),%bl
  0x000000011c06a16c: movb   $0x0,0x3dd(%r15)
  0x000000011c06a174: mov    -0x18(%rbp),%rcx
  0x000000011c06a178: mov    0x20(%rcx),%ecx
  0x000000011c06a17b: test   $0x20,%ecx
  0x000000011c06a181: je     0x000000011c06a34b
  0x000000011c06a187: test   $0xff,%bl
  0x000000011c06a18a: jne    0x000000011c06a41f
  0x000000011c06a190: sub    $0x10,%rsp
  0x000000011c06a194: vmovsd %xmm0,(%rsp)
  0x000000011c06a199: lea    -0x58(%rbp),%rsi
  0x000000011c06a19d: mov    0x8(%rsi),%rax
  0x000000011c06a1a1: test   %rax,%rax
  0x000000011c06a1a4: jne    0x000000011c06a263
  0x000000011c06a1aa: vmovsd (%rsp),%xmm0
  0x000000011c06a1af: add    $0x10,%rsp
  0x000000011c06a1b3: callq  0x000000011c06a1bd
  0x000000011c06a1b8: jmpq   0x000000011c06a24f
  0x000000011c06a1bd: lea    0x8(%rsp),%rax
  0x000000011c06a1c2: mov    %r13,-0x40(%rbp)
  0x000000011c06a1c6: mov    %r15,%rdi
  0x000000011c06a1c9: vzeroupper 
  0x000000011c06a1cc: mov    %rbp,0x330(%r15)
  0x000000011c06a1d3: mov    %rax,0x320(%r15)
  0x000000011c06a1da: test   $0xf,%esp
  0x000000011c06a1e0: je     0x000000011c06a1f8
  0x000000011c06a1e6: sub    $0x8,%rsp
  0x000000011c06a1ea: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c06a1ef: add    $0x8,%rsp
  0x000000011c06a1f3: jmpq   0x000000011c06a1fd
  0x000000011c06a1f8: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c06a1fd: movabs $0x0,%r10
  0x000000011c06a207: mov    %r10,0x320(%r15)
  0x000000011c06a20e: movabs $0x0,%r10
  0x000000011c06a218: mov    %r10,0x330(%r15)
  0x000000011c06a21f: movabs $0x0,%r10
  0x000000011c06a229: mov    %r10,0x328(%r15)
  0x000000011c06a230: vzeroupper 
  0x000000011c06a233: cmpq   $0x0,0x8(%r15)
  0x000000011c06a23b: je     0x000000011c06a246
  0x000000011c06a241: jmpq   0x000000011c054780
  0x000000011c06a246: mov    -0x40(%rbp),%r13
  0x000000011c06a24a: mov    -0x38(%rbp),%r14
  0x000000011c06a24e: retq   
  0x000000011c06a24f: movabs $0x1107f3493,%rdi
  0x000000011c06a259: and    $0xfffffffffffffff0,%rsp
  0x000000011c06a25d: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c06a262: hlt    
  0x000000011c06a263: mov    %r13,-0x40(%rbp)
  0x000000011c06a267: lea    (%rsi),%rax
  0x000000011c06a26a: mov    0x8(%rsi),%rcx
  0x000000011c06a26e: movq   $0x0,0x8(%rsi)
  0x000000011c06a276: mov    (%rcx),%rdx
  0x000000011c06a279: and    $0x7,%rdx
  0x000000011c06a27d: cmp    $0x5,%rdx
  0x000000011c06a281: je     0x000000011c06a33e
  0x000000011c06a287: mov    (%rax),%rdx
  0x000000011c06a28a: test   %rdx,%rdx
  0x000000011c06a28d: je     0x000000011c06a33e
  0x000000011c06a293: lock cmpxchg %rdx,(%rcx)
  0x000000011c06a298: je     0x000000011c06a33e
  0x000000011c06a29e: mov    %rcx,0x8(%rsi)
  0x000000011c06a2a2: callq  0x000000011c06a2ac
  0x000000011c06a2a7: jmpq   0x000000011c06a33e
  0x000000011c06a2ac: lea    0x8(%rsp),%rax
  0x000000011c06a2b1: mov    %r13,-0x40(%rbp)
  0x000000011c06a2b5: mov    %r15,%rdi
  0x000000011c06a2b8: vzeroupper 
  0x000000011c06a2bb: mov    %rbp,0x330(%r15)
  0x000000011c06a2c2: mov    %rax,0x320(%r15)
  0x000000011c06a2c9: test   $0xf,%esp
  0x000000011c06a2cf: je     0x000000011c06a2e7
  0x000000011c06a2d5: sub    $0x8,%rsp
  0x000000011c06a2d9: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c06a2de: add    $0x8,%rsp
  0x000000011c06a2e2: jmpq   0x000000011c06a2ec
  0x000000011c06a2e7: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c06a2ec: movabs $0x0,%r10
  0x000000011c06a2f6: mov    %r10,0x320(%r15)
  0x000000011c06a2fd: movabs $0x0,%r10
  0x000000011c06a307: mov    %r10,0x330(%r15)
  0x000000011c06a30e: movabs $0x0,%r10
  0x000000011c06a318: mov    %r10,0x328(%r15)
  0x000000011c06a31f: vzeroupper 
  0x000000011c06a322: cmpq   $0x0,0x8(%r15)
  0x000000011c06a32a: je     0x000000011c06a335
  0x000000011c06a330: jmpq   0x000000011c054780
  0x000000011c06a335: mov    -0x40(%rbp),%r13
  0x000000011c06a339: mov    -0x38(%rbp),%r14
  0x000000011c06a33d: retq   
  0x000000011c06a33e: mov    -0x40(%rbp),%r13
  0x000000011c06a342: vmovsd (%rsp),%xmm0
  0x000000011c06a347: add    $0x10,%rsp
  0x000000011c06a34b: mov    -0x48(%rbp),%rsi
  0x000000011c06a34f: lea    -0x48(%rbp),%rbx
  0x000000011c06a353: jmpq   0x000000011c06a41a
  0x000000011c06a358: callq  0x000000011c06a362
  0x000000011c06a35d: jmpq   0x000000011c06a3f4
  0x000000011c06a362: lea    0x8(%rsp),%rax
  0x000000011c06a367: mov    %r13,-0x40(%rbp)
  0x000000011c06a36b: mov    %r15,%rdi
  0x000000011c06a36e: vzeroupper 
  0x000000011c06a371: mov    %rbp,0x330(%r15)
  0x000000011c06a378: mov    %rax,0x320(%r15)
  0x000000011c06a37f: test   $0xf,%esp
  0x000000011c06a385: je     0x000000011c06a39d
  0x000000011c06a38b: sub    $0x8,%rsp
  0x000000011c06a38f: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c06a394: add    $0x8,%rsp
  0x000000011c06a398: jmpq   0x000000011c06a3a2
  0x000000011c06a39d: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c06a3a2: movabs $0x0,%r10
  0x000000011c06a3ac: mov    %r10,0x320(%r15)
  0x000000011c06a3b3: movabs $0x0,%r10
  0x000000011c06a3bd: mov    %r10,0x330(%r15)
  0x000000011c06a3c4: movabs $0x0,%r10
  0x000000011c06a3ce: mov    %r10,0x328(%r15)
  0x000000011c06a3d5: vzeroupper 
  0x000000011c06a3d8: cmpq   $0x0,0x8(%r15)
  0x000000011c06a3e0: je     0x000000011c06a3eb
  0x000000011c06a3e6: jmpq   0x000000011c054780
  0x000000011c06a3eb: mov    -0x40(%rbp),%r13
  0x000000011c06a3ef: mov    -0x38(%rbp),%r14
  0x000000011c06a3f3: retq   
  0x000000011c06a3f4: movabs $0x1107f3493,%rdi
  0x000000011c06a3fe: and    $0xfffffffffffffff0,%rsp
  0x000000011c06a402: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c06a407: hlt    
  0x000000011c06a408: cmpq   $0x0,0x8(%rsi)
  0x000000011c06a410: jne    0x000000011c06a358
  0x000000011c06a416: add    $0x10,%rsi
  0x000000011c06a41a: cmp    %rbx,%rsi
  0x000000011c06a41d: jne    0x000000011c06a408
  0x000000011c06a41f: cmpb   $0x0,-0xb6b034c(%rip)        # 0x00000001109ba0da = DTraceMethodProbes
  0x000000011c06a426: je     0x000000011c06a468
  0x000000011c06a42c: sub    $0x10,%rsp
  0x000000011c06a430: vmovsd %xmm0,(%rsp)
  0x000000011c06a435: mov    -0x18(%rbp),%rsi
  0x000000011c06a439: mov    %r15,%rdi
  0x000000011c06a43c: test   $0xf,%esp
  0x000000011c06a442: je     0x000000011c06a45a
  0x000000011c06a448: sub    $0x8,%rsp
  0x000000011c06a44c: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c06a451: add    $0x8,%rsp
  0x000000011c06a455: jmpq   0x000000011c06a45f
  0x000000011c06a45a: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c06a45f: vmovsd (%rsp),%xmm0
  0x000000011c06a464: add    $0x10,%rsp
  0x000000011c06a468: mov    -0x8(%rbp),%rbx
  0x000000011c06a46c: cmpl   $0x3,0x408(%r15)
  0x000000011c06a477: je     0x000000011c06a560
  0x000000011c06a47d: cmp    0x418(%r15),%rbx
  0x000000011c06a484: jle    0x000000011c06a560
  0x000000011c06a48a: mov    %r15,%rdi
  0x000000011c06a48d: test   $0xf,%esp
  0x000000011c06a493: je     0x000000011c06a4ab
  0x000000011c06a499: sub    $0x8,%rsp
  0x000000011c06a49d: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c06a4a2: add    $0x8,%rsp
  0x000000011c06a4a6: jmpq   0x000000011c06a4b0
  0x000000011c06a4ab: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c06a4b0: callq  0x000000011c06a4ba
  0x000000011c06a4b5: jmpq   0x000000011c06a54c
  0x000000011c06a4ba: lea    0x8(%rsp),%rax
  0x000000011c06a4bf: mov    %r13,-0x40(%rbp)
  0x000000011c06a4c3: mov    %r15,%rdi
  0x000000011c06a4c6: vzeroupper 
  0x000000011c06a4c9: mov    %rbp,0x330(%r15)
  0x000000011c06a4d0: mov    %rax,0x320(%r15)
  0x000000011c06a4d7: test   $0xf,%esp
  0x000000011c06a4dd: je     0x000000011c06a4f5
  0x000000011c06a4e3: sub    $0x8,%rsp
  0x000000011c06a4e7: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c06a4ec: add    $0x8,%rsp
  0x000000011c06a4f0: jmpq   0x000000011c06a4fa
  0x000000011c06a4f5: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c06a4fa: movabs $0x0,%r10
  0x000000011c06a504: mov    %r10,0x320(%r15)
  0x000000011c06a50b: movabs $0x0,%r10
  0x000000011c06a515: mov    %r10,0x330(%r15)
  0x000000011c06a51c: movabs $0x0,%r10
  0x000000011c06a526: mov    %r10,0x328(%r15)
  0x000000011c06a52d: vzeroupper 
  0x000000011c06a530: cmpq   $0x0,0x8(%r15)
  0x000000011c06a538: je     0x000000011c06a543
  0x000000011c06a53e: jmpq   0x000000011c054780
  0x000000011c06a543: mov    -0x40(%rbp),%r13
  0x000000011c06a547: mov    -0x38(%rbp),%r14
  0x000000011c06a54b: retq   
  0x000000011c06a54c: movabs $0x1107f3493,%rdi
  0x000000011c06a556: and    $0xfffffffffffffff0,%rsp
  0x000000011c06a55a: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c06a55f: hlt    
  0x000000011c06a560: leaveq 
  0x000000011c06a561: pop    %r13
  0x000000011c06a563: mov    %rbx,%rsp
  0x000000011c06a566: jmpq   *%r13
  0x000000011c06a569: nopl   0x0(%rax)
  0x000000011c06a570: add    %al,(%rax)
  0x000000011c06a572: add    %al,(%rax)
  0x000000011c06a574: add    %al,(%rax)
  0x000000011c06a576: add    %al,(%rax)
  0x000000011c06a578: add    %al,(%rax)
  0x000000011c06a57a: add    %al,(%rax)
  0x000000011c06a57c: add    %al,(%rax)
  0x000000011c06a57e: add    %al,(%rax)

----------------------------------------------------------------------
areturn  176 areturn  [0x000000011c06a5a0, 0x000000011c06aa40]  1184 bytes

  0x000000011c06a5a0: pop    %rax
  0x000000011c06a5a1: testb  $0x8,0x108(%r15)
  0x000000011c06a5a9: je     0x000000011c06a64d
  0x000000011c06a5af: push   %rax
  0x000000011c06a5b0: callq  0x000000011c06a5ba
  0x000000011c06a5b5: jmpq   0x000000011c06a64c
  0x000000011c06a5ba: lea    0x8(%rsp),%rax
  0x000000011c06a5bf: mov    %r13,-0x40(%rbp)
  0x000000011c06a5c3: mov    %r15,%rdi
  0x000000011c06a5c6: vzeroupper 
  0x000000011c06a5c9: mov    %rbp,0x330(%r15)
  0x000000011c06a5d0: mov    %rax,0x320(%r15)
  0x000000011c06a5d7: test   $0xf,%esp
  0x000000011c06a5dd: je     0x000000011c06a5f5
  0x000000011c06a5e3: sub    $0x8,%rsp
  0x000000011c06a5e7: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c06a5ec: add    $0x8,%rsp
  0x000000011c06a5f0: jmpq   0x000000011c06a5fa
  0x000000011c06a5f5: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c06a5fa: movabs $0x0,%r10
  0x000000011c06a604: mov    %r10,0x320(%r15)
  0x000000011c06a60b: movabs $0x0,%r10
  0x000000011c06a615: mov    %r10,0x330(%r15)
  0x000000011c06a61c: movabs $0x0,%r10
  0x000000011c06a626: mov    %r10,0x328(%r15)
  0x000000011c06a62d: vzeroupper 
  0x000000011c06a630: cmpq   $0x0,0x8(%r15)
  0x000000011c06a638: je     0x000000011c06a643
  0x000000011c06a63e: jmpq   0x000000011c054780
  0x000000011c06a643: mov    -0x40(%rbp),%r13
  0x000000011c06a647: mov    -0x38(%rbp),%r14
  0x000000011c06a64b: retq   
  0x000000011c06a64c: pop    %rax
  0x000000011c06a64d: mov    0x3dd(%r15),%bl
  0x000000011c06a654: movb   $0x0,0x3dd(%r15)
  0x000000011c06a65c: mov    -0x18(%rbp),%rcx
  0x000000011c06a660: mov    0x20(%rcx),%ecx
  0x000000011c06a663: test   $0x20,%ecx
  0x000000011c06a669: je     0x000000011c06a81b
  0x000000011c06a66f: test   $0xff,%bl
  0x000000011c06a672: jne    0x000000011c06a8ef
  0x000000011c06a678: push   %rax
  0x000000011c06a679: lea    -0x58(%rbp),%rsi
  0x000000011c06a67d: mov    0x8(%rsi),%rax
  0x000000011c06a681: test   %rax,%rax
  0x000000011c06a684: jne    0x000000011c06a73b
  0x000000011c06a68a: pop    %rax
  0x000000011c06a68b: callq  0x000000011c06a695
  0x000000011c06a690: jmpq   0x000000011c06a727
  0x000000011c06a695: lea    0x8(%rsp),%rax
  0x000000011c06a69a: mov    %r13,-0x40(%rbp)
  0x000000011c06a69e: mov    %r15,%rdi
  0x000000011c06a6a1: vzeroupper 
  0x000000011c06a6a4: mov    %rbp,0x330(%r15)
  0x000000011c06a6ab: mov    %rax,0x320(%r15)
  0x000000011c06a6b2: test   $0xf,%esp
  0x000000011c06a6b8: je     0x000000011c06a6d0
  0x000000011c06a6be: sub    $0x8,%rsp
  0x000000011c06a6c2: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c06a6c7: add    $0x8,%rsp
  0x000000011c06a6cb: jmpq   0x000000011c06a6d5
  0x000000011c06a6d0: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c06a6d5: movabs $0x0,%r10
  0x000000011c06a6df: mov    %r10,0x320(%r15)
  0x000000011c06a6e6: movabs $0x0,%r10
  0x000000011c06a6f0: mov    %r10,0x330(%r15)
  0x000000011c06a6f7: movabs $0x0,%r10
  0x000000011c06a701: mov    %r10,0x328(%r15)
  0x000000011c06a708: vzeroupper 
  0x000000011c06a70b: cmpq   $0x0,0x8(%r15)
  0x000000011c06a713: je     0x000000011c06a71e
  0x000000011c06a719: jmpq   0x000000011c054780
  0x000000011c06a71e: mov    -0x40(%rbp),%r13
  0x000000011c06a722: mov    -0x38(%rbp),%r14
  0x000000011c06a726: retq   
  0x000000011c06a727: movabs $0x1107f3493,%rdi
  0x000000011c06a731: and    $0xfffffffffffffff0,%rsp
  0x000000011c06a735: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c06a73a: hlt    
  0x000000011c06a73b: mov    %r13,-0x40(%rbp)
  0x000000011c06a73f: lea    (%rsi),%rax
  0x000000011c06a742: mov    0x8(%rsi),%rcx
  0x000000011c06a746: movq   $0x0,0x8(%rsi)
  0x000000011c06a74e: mov    (%rcx),%rdx
  0x000000011c06a751: and    $0x7,%rdx
  0x000000011c06a755: cmp    $0x5,%rdx
  0x000000011c06a759: je     0x000000011c06a816
  0x000000011c06a75f: mov    (%rax),%rdx
  0x000000011c06a762: test   %rdx,%rdx
  0x000000011c06a765: je     0x000000011c06a816
  0x000000011c06a76b: lock cmpxchg %rdx,(%rcx)
  0x000000011c06a770: je     0x000000011c06a816
  0x000000011c06a776: mov    %rcx,0x8(%rsi)
  0x000000011c06a77a: callq  0x000000011c06a784
  0x000000011c06a77f: jmpq   0x000000011c06a816
  0x000000011c06a784: lea    0x8(%rsp),%rax
  0x000000011c06a789: mov    %r13,-0x40(%rbp)
  0x000000011c06a78d: mov    %r15,%rdi
  0x000000011c06a790: vzeroupper 
  0x000000011c06a793: mov    %rbp,0x330(%r15)
  0x000000011c06a79a: mov    %rax,0x320(%r15)
  0x000000011c06a7a1: test   $0xf,%esp
  0x000000011c06a7a7: je     0x000000011c06a7bf
  0x000000011c06a7ad: sub    $0x8,%rsp
  0x000000011c06a7b1: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c06a7b6: add    $0x8,%rsp
  0x000000011c06a7ba: jmpq   0x000000011c06a7c4
  0x000000011c06a7bf: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c06a7c4: movabs $0x0,%r10
  0x000000011c06a7ce: mov    %r10,0x320(%r15)
  0x000000011c06a7d5: movabs $0x0,%r10
  0x000000011c06a7df: mov    %r10,0x330(%r15)
  0x000000011c06a7e6: movabs $0x0,%r10
  0x000000011c06a7f0: mov    %r10,0x328(%r15)
  0x000000011c06a7f7: vzeroupper 
  0x000000011c06a7fa: cmpq   $0x0,0x8(%r15)
  0x000000011c06a802: je     0x000000011c06a80d
  0x000000011c06a808: jmpq   0x000000011c054780
  0x000000011c06a80d: mov    -0x40(%rbp),%r13
  0x000000011c06a811: mov    -0x38(%rbp),%r14
  0x000000011c06a815: retq   
  0x000000011c06a816: mov    -0x40(%rbp),%r13
  0x000000011c06a81a: pop    %rax
  0x000000011c06a81b: mov    -0x48(%rbp),%rsi
  0x000000011c06a81f: lea    -0x48(%rbp),%rbx
  0x000000011c06a823: jmpq   0x000000011c06a8ea
  0x000000011c06a828: callq  0x000000011c06a832
  0x000000011c06a82d: jmpq   0x000000011c06a8c4
  0x000000011c06a832: lea    0x8(%rsp),%rax
  0x000000011c06a837: mov    %r13,-0x40(%rbp)
  0x000000011c06a83b: mov    %r15,%rdi
  0x000000011c06a83e: vzeroupper 
  0x000000011c06a841: mov    %rbp,0x330(%r15)
  0x000000011c06a848: mov    %rax,0x320(%r15)
  0x000000011c06a84f: test   $0xf,%esp
  0x000000011c06a855: je     0x000000011c06a86d
  0x000000011c06a85b: sub    $0x8,%rsp
  0x000000011c06a85f: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c06a864: add    $0x8,%rsp
  0x000000011c06a868: jmpq   0x000000011c06a872
  0x000000011c06a86d: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c06a872: movabs $0x0,%r10
  0x000000011c06a87c: mov    %r10,0x320(%r15)
  0x000000011c06a883: movabs $0x0,%r10
  0x000000011c06a88d: mov    %r10,0x330(%r15)
  0x000000011c06a894: movabs $0x0,%r10
  0x000000011c06a89e: mov    %r10,0x328(%r15)
  0x000000011c06a8a5: vzeroupper 
  0x000000011c06a8a8: cmpq   $0x0,0x8(%r15)
  0x000000011c06a8b0: je     0x000000011c06a8bb
  0x000000011c06a8b6: jmpq   0x000000011c054780
  0x000000011c06a8bb: mov    -0x40(%rbp),%r13
  0x000000011c06a8bf: mov    -0x38(%rbp),%r14
  0x000000011c06a8c3: retq   
  0x000000011c06a8c4: movabs $0x1107f3493,%rdi
  0x000000011c06a8ce: and    $0xfffffffffffffff0,%rsp
  0x000000011c06a8d2: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c06a8d7: hlt    
  0x000000011c06a8d8: cmpq   $0x0,0x8(%rsi)
  0x000000011c06a8e0: jne    0x000000011c06a828
  0x000000011c06a8e6: add    $0x10,%rsi
  0x000000011c06a8ea: cmp    %rbx,%rsi
  0x000000011c06a8ed: jne    0x000000011c06a8d8
  0x000000011c06a8ef: cmpb   $0x0,-0xb6b081c(%rip)        # 0x00000001109ba0da = DTraceMethodProbes
  0x000000011c06a8f6: je     0x000000011c06a928
  0x000000011c06a8fc: push   %rax
  0x000000011c06a8fd: mov    -0x18(%rbp),%rsi
  0x000000011c06a901: mov    %r15,%rdi
  0x000000011c06a904: test   $0xf,%esp
  0x000000011c06a90a: je     0x000000011c06a922
  0x000000011c06a910: sub    $0x8,%rsp
  0x000000011c06a914: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c06a919: add    $0x8,%rsp
  0x000000011c06a91d: jmpq   0x000000011c06a927
  0x000000011c06a922: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c06a927: pop    %rax
  0x000000011c06a928: mov    -0x8(%rbp),%rbx
  0x000000011c06a92c: cmpl   $0x3,0x408(%r15)
  0x000000011c06a937: je     0x000000011c06aa20
  0x000000011c06a93d: cmp    0x418(%r15),%rbx
  0x000000011c06a944: jle    0x000000011c06aa20
  0x000000011c06a94a: mov    %r15,%rdi
  0x000000011c06a94d: test   $0xf,%esp
  0x000000011c06a953: je     0x000000011c06a96b
  0x000000011c06a959: sub    $0x8,%rsp
  0x000000011c06a95d: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c06a962: add    $0x8,%rsp
  0x000000011c06a966: jmpq   0x000000011c06a970
  0x000000011c06a96b: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c06a970: callq  0x000000011c06a97a
  0x000000011c06a975: jmpq   0x000000011c06aa0c
  0x000000011c06a97a: lea    0x8(%rsp),%rax
  0x000000011c06a97f: mov    %r13,-0x40(%rbp)
  0x000000011c06a983: mov    %r15,%rdi
  0x000000011c06a986: vzeroupper 
  0x000000011c06a989: mov    %rbp,0x330(%r15)
  0x000000011c06a990: mov    %rax,0x320(%r15)
  0x000000011c06a997: test   $0xf,%esp
  0x000000011c06a99d: je     0x000000011c06a9b5
  0x000000011c06a9a3: sub    $0x8,%rsp
  0x000000011c06a9a7: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c06a9ac: add    $0x8,%rsp
  0x000000011c06a9b0: jmpq   0x000000011c06a9ba
  0x000000011c06a9b5: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c06a9ba: movabs $0x0,%r10
  0x000000011c06a9c4: mov    %r10,0x320(%r15)
  0x000000011c06a9cb: movabs $0x0,%r10
  0x000000011c06a9d5: mov    %r10,0x330(%r15)
  0x000000011c06a9dc: movabs $0x0,%r10
  0x000000011c06a9e6: mov    %r10,0x328(%r15)
  0x000000011c06a9ed: vzeroupper 
  0x000000011c06a9f0: cmpq   $0x0,0x8(%r15)
  0x000000011c06a9f8: je     0x000000011c06aa03
  0x000000011c06a9fe: jmpq   0x000000011c054780
  0x000000011c06aa03: mov    -0x40(%rbp),%r13
  0x000000011c06aa07: mov    -0x38(%rbp),%r14
  0x000000011c06aa0b: retq   
  0x000000011c06aa0c: movabs $0x1107f3493,%rdi
  0x000000011c06aa16: and    $0xfffffffffffffff0,%rsp
  0x000000011c06aa1a: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c06aa1f: hlt    
  0x000000011c06aa20: leaveq 
  0x000000011c06aa21: pop    %r13
  0x000000011c06aa23: mov    %rbx,%rsp
  0x000000011c06aa26: jmpq   *%r13
  0x000000011c06aa29: nopl   0x0(%rax)
  0x000000011c06aa30: add    %al,(%rax)
  0x000000011c06aa32: add    %al,(%rax)
  0x000000011c06aa34: add    %al,(%rax)
  0x000000011c06aa36: add    %al,(%rax)
  0x000000011c06aa38: add    %al,(%rax)
  0x000000011c06aa3a: add    %al,(%rax)
  0x000000011c06aa3c: add    %al,(%rax)
  0x000000011c06aa3e: add    %al,(%rax)

----------------------------------------------------------------------
return  177 return  [0x000000011c06aa60, 0x000000011c06af20]  1216 bytes

  0x000000011c06aa60: push   %rax
  0x000000011c06aa61: jmpq   0x000000011c06aa9f
  0x000000011c06aa66: sub    $0x8,%rsp
  0x000000011c06aa6a: vmovss %xmm0,(%rsp)
  0x000000011c06aa6f: jmpq   0x000000011c06aa9f
  0x000000011c06aa74: sub    $0x10,%rsp
  0x000000011c06aa78: vmovsd %xmm0,(%rsp)
  0x000000011c06aa7d: jmpq   0x000000011c06aa9f
  0x000000011c06aa82: sub    $0x10,%rsp
  0x000000011c06aa86: mov    %rax,(%rsp)
  0x000000011c06aa8a: movabs $0x0,%r10
  0x000000011c06aa94: mov    %r10,0x8(%rsp)
  0x000000011c06aa99: jmpq   0x000000011c06aa9f
  0x000000011c06aa9e: push   %rax
  0x000000011c06aa9f: testb  $0x8,0x108(%r15)
  0x000000011c06aaa7: je     0x000000011c06ab49
  0x000000011c06aaad: callq  0x000000011c06aab7
  0x000000011c06aab2: jmpq   0x000000011c06ab49
  0x000000011c06aab7: lea    0x8(%rsp),%rax
  0x000000011c06aabc: mov    %r13,-0x40(%rbp)
  0x000000011c06aac0: mov    %r15,%rdi
  0x000000011c06aac3: vzeroupper 
  0x000000011c06aac6: mov    %rbp,0x330(%r15)
  0x000000011c06aacd: mov    %rax,0x320(%r15)
  0x000000011c06aad4: test   $0xf,%esp
  0x000000011c06aada: je     0x000000011c06aaf2
  0x000000011c06aae0: sub    $0x8,%rsp
  0x000000011c06aae4: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c06aae9: add    $0x8,%rsp
  0x000000011c06aaed: jmpq   0x000000011c06aaf7
  0x000000011c06aaf2: callq  0x00000001103ad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000011c06aaf7: movabs $0x0,%r10
  0x000000011c06ab01: mov    %r10,0x320(%r15)
  0x000000011c06ab08: movabs $0x0,%r10
  0x000000011c06ab12: mov    %r10,0x330(%r15)
  0x000000011c06ab19: movabs $0x0,%r10
  0x000000011c06ab23: mov    %r10,0x328(%r15)
  0x000000011c06ab2a: vzeroupper 
  0x000000011c06ab2d: cmpq   $0x0,0x8(%r15)
  0x000000011c06ab35: je     0x000000011c06ab40
  0x000000011c06ab3b: jmpq   0x000000011c054780
  0x000000011c06ab40: mov    -0x40(%rbp),%r13
  0x000000011c06ab44: mov    -0x38(%rbp),%r14
  0x000000011c06ab48: retq   
  0x000000011c06ab49: mov    0x3dd(%r15),%bl
  0x000000011c06ab50: movb   $0x0,0x3dd(%r15)
  0x000000011c06ab58: mov    -0x18(%rbp),%rcx
  0x000000011c06ab5c: mov    0x20(%rcx),%ecx
  0x000000011c06ab5f: test   $0x20,%ecx
  0x000000011c06ab65: je     0x000000011c06ad14
  0x000000011c06ab6b: test   $0xff,%bl
  0x000000011c06ab6e: jne    0x000000011c06ade8
  0x000000011c06ab74: lea    -0x58(%rbp),%rsi
  0x000000011c06ab78: mov    0x8(%rsi),%rax
  0x000000011c06ab7c: test   %rax,%rax
  0x000000011c06ab7f: jne    0x000000011c06ac35
  0x000000011c06ab85: callq  0x000000011c06ab8f
  0x000000011c06ab8a: jmpq   0x000000011c06ac21
  0x000000011c06ab8f: lea    0x8(%rsp),%rax
  0x000000011c06ab94: mov    %r13,-0x40(%rbp)
  0x000000011c06ab98: mov    %r15,%rdi
  0x000000011c06ab9b: vzeroupper 
  0x000000011c06ab9e: mov    %rbp,0x330(%r15)
  0x000000011c06aba5: mov    %rax,0x320(%r15)
  0x000000011c06abac: test   $0xf,%esp
  0x000000011c06abb2: je     0x000000011c06abca
  0x000000011c06abb8: sub    $0x8,%rsp
  0x000000011c06abbc: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c06abc1: add    $0x8,%rsp
  0x000000011c06abc5: jmpq   0x000000011c06abcf
  0x000000011c06abca: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c06abcf: movabs $0x0,%r10
  0x000000011c06abd9: mov    %r10,0x320(%r15)
  0x000000011c06abe0: movabs $0x0,%r10
  0x000000011c06abea: mov    %r10,0x330(%r15)
  0x000000011c06abf1: movabs $0x0,%r10
  0x000000011c06abfb: mov    %r10,0x328(%r15)
  0x000000011c06ac02: vzeroupper 
  0x000000011c06ac05: cmpq   $0x0,0x8(%r15)
  0x000000011c06ac0d: je     0x000000011c06ac18
  0x000000011c06ac13: jmpq   0x000000011c054780
  0x000000011c06ac18: mov    -0x40(%rbp),%r13
  0x000000011c06ac1c: mov    -0x38(%rbp),%r14
  0x000000011c06ac20: retq   
  0x000000011c06ac21: movabs $0x1107f3493,%rdi
  0x000000011c06ac2b: and    $0xfffffffffffffff0,%rsp
  0x000000011c06ac2f: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c06ac34: hlt    
  0x000000011c06ac35: mov    %r13,-0x40(%rbp)
  0x000000011c06ac39: lea    (%rsi),%rax
  0x000000011c06ac3c: mov    0x8(%rsi),%rcx
  0x000000011c06ac40: movq   $0x0,0x8(%rsi)
  0x000000011c06ac48: mov    (%rcx),%rdx
  0x000000011c06ac4b: and    $0x7,%rdx
  0x000000011c06ac4f: cmp    $0x5,%rdx
  0x000000011c06ac53: je     0x000000011c06ad10
  0x000000011c06ac59: mov    (%rax),%rdx
  0x000000011c06ac5c: test   %rdx,%rdx
  0x000000011c06ac5f: je     0x000000011c06ad10
  0x000000011c06ac65: lock cmpxchg %rdx,(%rcx)
  0x000000011c06ac6a: je     0x000000011c06ad10
  0x000000011c06ac70: mov    %rcx,0x8(%rsi)
  0x000000011c06ac74: callq  0x000000011c06ac7e
  0x000000011c06ac79: jmpq   0x000000011c06ad10
  0x000000011c06ac7e: lea    0x8(%rsp),%rax
  0x000000011c06ac83: mov    %r13,-0x40(%rbp)
  0x000000011c06ac87: mov    %r15,%rdi
  0x000000011c06ac8a: vzeroupper 
  0x000000011c06ac8d: mov    %rbp,0x330(%r15)
  0x000000011c06ac94: mov    %rax,0x320(%r15)
  0x000000011c06ac9b: test   $0xf,%esp
  0x000000011c06aca1: je     0x000000011c06acb9
  0x000000011c06aca7: sub    $0x8,%rsp
  0x000000011c06acab: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c06acb0: add    $0x8,%rsp
  0x000000011c06acb4: jmpq   0x000000011c06acbe
  0x000000011c06acb9: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c06acbe: movabs $0x0,%r10
  0x000000011c06acc8: mov    %r10,0x320(%r15)
  0x000000011c06accf: movabs $0x0,%r10
  0x000000011c06acd9: mov    %r10,0x330(%r15)
  0x000000011c06ace0: movabs $0x0,%r10
  0x000000011c06acea: mov    %r10,0x328(%r15)
  0x000000011c06acf1: vzeroupper 
  0x000000011c06acf4: cmpq   $0x0,0x8(%r15)
  0x000000011c06acfc: je     0x000000011c06ad07
  0x000000011c06ad02: jmpq   0x000000011c054780
  0x000000011c06ad07: mov    -0x40(%rbp),%r13
  0x000000011c06ad0b: mov    -0x38(%rbp),%r14
  0x000000011c06ad0f: retq   
  0x000000011c06ad10: mov    -0x40(%rbp),%r13
  0x000000011c06ad14: mov    -0x48(%rbp),%rsi
  0x000000011c06ad18: lea    -0x48(%rbp),%rbx
  0x000000011c06ad1c: jmpq   0x000000011c06ade3
  0x000000011c06ad21: callq  0x000000011c06ad2b
  0x000000011c06ad26: jmpq   0x000000011c06adbd
  0x000000011c06ad2b: lea    0x8(%rsp),%rax
  0x000000011c06ad30: mov    %r13,-0x40(%rbp)
  0x000000011c06ad34: mov    %r15,%rdi
  0x000000011c06ad37: vzeroupper 
  0x000000011c06ad3a: mov    %rbp,0x330(%r15)
  0x000000011c06ad41: mov    %rax,0x320(%r15)
  0x000000011c06ad48: test   $0xf,%esp
  0x000000011c06ad4e: je     0x000000011c06ad66
  0x000000011c06ad54: sub    $0x8,%rsp
  0x000000011c06ad58: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c06ad5d: add    $0x8,%rsp
  0x000000011c06ad61: jmpq   0x000000011c06ad6b
  0x000000011c06ad66: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c06ad6b: movabs $0x0,%r10
  0x000000011c06ad75: mov    %r10,0x320(%r15)
  0x000000011c06ad7c: movabs $0x0,%r10
  0x000000011c06ad86: mov    %r10,0x330(%r15)
  0x000000011c06ad8d: movabs $0x0,%r10
  0x000000011c06ad97: mov    %r10,0x328(%r15)
  0x000000011c06ad9e: vzeroupper 
  0x000000011c06ada1: cmpq   $0x0,0x8(%r15)
  0x000000011c06ada9: je     0x000000011c06adb4
  0x000000011c06adaf: jmpq   0x000000011c054780
  0x000000011c06adb4: mov    -0x40(%rbp),%r13
  0x000000011c06adb8: mov    -0x38(%rbp),%r14
  0x000000011c06adbc: retq   
  0x000000011c06adbd: movabs $0x1107f3493,%rdi
  0x000000011c06adc7: and    $0xfffffffffffffff0,%rsp
  0x000000011c06adcb: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c06add0: hlt    
  0x000000011c06add1: cmpq   $0x0,0x8(%rsi)
  0x000000011c06add9: jne    0x000000011c06ad21
  0x000000011c06addf: add    $0x10,%rsi
  0x000000011c06ade3: cmp    %rbx,%rsi
  0x000000011c06ade6: jne    0x000000011c06add1
  0x000000011c06ade8: cmpb   $0x0,-0xb6b0d15(%rip)        # 0x00000001109ba0da = DTraceMethodProbes
  0x000000011c06adef: je     0x000000011c06ae1f
  0x000000011c06adf5: mov    -0x18(%rbp),%rsi
  0x000000011c06adf9: mov    %r15,%rdi
  0x000000011c06adfc: test   $0xf,%esp
  0x000000011c06ae02: je     0x000000011c06ae1a
  0x000000011c06ae08: sub    $0x8,%rsp
  0x000000011c06ae0c: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c06ae11: add    $0x8,%rsp
  0x000000011c06ae15: jmpq   0x000000011c06ae1f
  0x000000011c06ae1a: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c06ae1f: mov    -0x8(%rbp),%rbx
  0x000000011c06ae23: cmpl   $0x3,0x408(%r15)
  0x000000011c06ae2e: je     0x000000011c06af17
  0x000000011c06ae34: cmp    0x418(%r15),%rbx
  0x000000011c06ae3b: jle    0x000000011c06af17
  0x000000011c06ae41: mov    %r15,%rdi
  0x000000011c06ae44: test   $0xf,%esp
  0x000000011c06ae4a: je     0x000000011c06ae62
  0x000000011c06ae50: sub    $0x8,%rsp
  0x000000011c06ae54: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c06ae59: add    $0x8,%rsp
  0x000000011c06ae5d: jmpq   0x000000011c06ae67
  0x000000011c06ae62: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c06ae67: callq  0x000000011c06ae71
  0x000000011c06ae6c: jmpq   0x000000011c06af03
  0x000000011c06ae71: lea    0x8(%rsp),%rax
  0x000000011c06ae76: mov    %r13,-0x40(%rbp)
  0x000000011c06ae7a: mov    %r15,%rdi
  0x000000011c06ae7d: vzeroupper 
  0x000000011c06ae80: mov    %rbp,0x330(%r15)
  0x000000011c06ae87: mov    %rax,0x320(%r15)
  0x000000011c06ae8e: test   $0xf,%esp
  0x000000011c06ae94: je     0x000000011c06aeac
  0x000000011c06ae9a: sub    $0x8,%rsp
  0x000000011c06ae9e: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c06aea3: add    $0x8,%rsp
  0x000000011c06aea7: jmpq   0x000000011c06aeb1
  0x000000011c06aeac: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c06aeb1: movabs $0x0,%r10
  0x000000011c06aebb: mov    %r10,0x320(%r15)
  0x000000011c06aec2: movabs $0x0,%r10
  0x000000011c06aecc: mov    %r10,0x330(%r15)
  0x000000011c06aed3: movabs $0x0,%r10
  0x000000011c06aedd: mov    %r10,0x328(%r15)
  0x000000011c06aee4: vzeroupper 
  0x000000011c06aee7: cmpq   $0x0,0x8(%r15)
  0x000000011c06aeef: je     0x000000011c06aefa
  0x000000011c06aef5: jmpq   0x000000011c054780
  0x000000011c06aefa: mov    -0x40(%rbp),%r13
  0x000000011c06aefe: mov    -0x38(%rbp),%r14
  0x000000011c06af02: retq   
  0x000000011c06af03: movabs $0x1107f3493,%rdi
  0x000000011c06af0d: and    $0xfffffffffffffff0,%rsp
  0x000000011c06af11: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c06af16: hlt    
  0x000000011c06af17: leaveq 
  0x000000011c06af18: pop    %r13
  0x000000011c06af1a: mov    %rbx,%rsp
  0x000000011c06af1d: jmpq   *%r13

----------------------------------------------------------------------
getstatic  178 getstatic  [0x000000011c06af40, 0x000000011c06b160]  544 bytes

  0x000000011c06af40: push   %rax
  0x000000011c06af41: jmpq   0x000000011c06af7f
  0x000000011c06af46: sub    $0x8,%rsp
  0x000000011c06af4a: vmovss %xmm0,(%rsp)
  0x000000011c06af4f: jmpq   0x000000011c06af7f
  0x000000011c06af54: sub    $0x10,%rsp
  0x000000011c06af58: vmovsd %xmm0,(%rsp)
  0x000000011c06af5d: jmpq   0x000000011c06af7f
  0x000000011c06af62: sub    $0x10,%rsp
  0x000000011c06af66: mov    %rax,(%rsp)
  0x000000011c06af6a: movabs $0x0,%r10
  0x000000011c06af74: mov    %r10,0x8(%rsp)
  0x000000011c06af79: jmpq   0x000000011c06af7f
  0x000000011c06af7e: push   %rax
  0x000000011c06af7f: movzwl 0x1(%r13),%edx
  0x000000011c06af84: mov    -0x30(%rbp),%rcx
  0x000000011c06af88: shl    $0x2,%edx
  0x000000011c06af8b: mov    0x28(%rcx,%rdx,8),%ebx
  0x000000011c06af8f: shr    $0x10,%ebx
  0x000000011c06af92: and    $0xff,%ebx
  0x000000011c06af98: cmp    $0xb2,%ebx
  0x000000011c06af9e: je     0x000000011c06b054
  0x000000011c06afa4: mov    $0xb2,%ebx
  0x000000011c06afa9: callq  0x000000011c06afb3
  0x000000011c06afae: jmpq   0x000000011c06b048
  0x000000011c06afb3: mov    %rbx,%rsi
  0x000000011c06afb6: lea    0x8(%rsp),%rax
  0x000000011c06afbb: mov    %r13,-0x40(%rbp)
  0x000000011c06afbf: mov    %r15,%rdi
  0x000000011c06afc2: vzeroupper 
  0x000000011c06afc5: mov    %rbp,0x330(%r15)
  0x000000011c06afcc: mov    %rax,0x320(%r15)
  0x000000011c06afd3: test   $0xf,%esp
  0x000000011c06afd9: je     0x000000011c06aff1
  0x000000011c06afdf: sub    $0x8,%rsp
  0x000000011c06afe3: callq  0x00000001103ac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x000000011c06afe8: add    $0x8,%rsp
  0x000000011c06afec: jmpq   0x000000011c06aff6
  0x000000011c06aff1: callq  0x00000001103ac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x000000011c06aff6: movabs $0x0,%r10
  0x000000011c06b000: mov    %r10,0x320(%r15)
  0x000000011c06b007: movabs $0x0,%r10
  0x000000011c06b011: mov    %r10,0x330(%r15)
  0x000000011c06b018: movabs $0x0,%r10
  0x000000011c06b022: mov    %r10,0x328(%r15)
  0x000000011c06b029: vzeroupper 
  0x000000011c06b02c: cmpq   $0x0,0x8(%r15)
  0x000000011c06b034: je     0x000000011c06b03f
  0x000000011c06b03a: jmpq   0x000000011c054780
  0x000000011c06b03f: mov    -0x40(%rbp),%r13
  0x000000011c06b043: mov    -0x38(%rbp),%r14
  0x000000011c06b047: retq   
  0x000000011c06b048: movzwl 0x1(%r13),%edx
  0x000000011c06b04d: mov    -0x30(%rbp),%rcx
  0x000000011c06b051: shl    $0x2,%edx
  0x000000011c06b054: mov    0x38(%rcx,%rdx,8),%rbx
  0x000000011c06b059: mov    0x40(%rcx,%rdx,8),%eax
  0x000000011c06b05d: mov    0x30(%rcx,%rdx,8),%rcx
  0x000000011c06b062: mov    0x70(%rcx),%rcx
  0x000000011c06b066: mov    (%rcx),%rcx
  0x000000011c06b069: shr    $0x1c,%eax
  0x000000011c06b06c: and    $0xf,%eax
  0x000000011c06b06f: jne    0x000000011c06b07f
  0x000000011c06b075: movsbl (%rcx,%rbx,1),%eax
  0x000000011c06b079: push   %rax
  0x000000011c06b07a: jmpq   0x000000011c06b133
  0x000000011c06b07f: cmp    $0x1,%eax
  0x000000011c06b082: jne    0x000000011c06b092
  0x000000011c06b088: movzbl (%rcx,%rbx,1),%eax
  0x000000011c06b08c: push   %rax
  0x000000011c06b08d: jmpq   0x000000011c06b133
  0x000000011c06b092: cmp    $0x8,%eax
  0x000000011c06b095: jne    0x000000011c06b0a8
  0x000000011c06b09b: mov    (%rcx,%rbx,1),%eax
  0x000000011c06b09e: shl    $0x3,%rax
  0x000000011c06b0a2: push   %rax
  0x000000011c06b0a3: jmpq   0x000000011c06b133
  0x000000011c06b0a8: cmp    $0x4,%eax
  0x000000011c06b0ab: jne    0x000000011c06b0ba
  0x000000011c06b0b1: mov    (%rcx,%rbx,1),%eax
  0x000000011c06b0b4: push   %rax
  0x000000011c06b0b5: jmpq   0x000000011c06b133
  0x000000011c06b0ba: cmp    $0x2,%eax
  0x000000011c06b0bd: jne    0x000000011c06b0cd
  0x000000011c06b0c3: movzwl (%rcx,%rbx,1),%eax
  0x000000011c06b0c7: push   %rax
  0x000000011c06b0c8: jmpq   0x000000011c06b133
  0x000000011c06b0cd: cmp    $0x3,%eax
  0x000000011c06b0d0: jne    0x000000011c06b0e0
  0x000000011c06b0d6: movswl (%rcx,%rbx,1),%eax
  0x000000011c06b0da: push   %rax
  0x000000011c06b0db: jmpq   0x000000011c06b133
  0x000000011c06b0e0: cmp    $0x5,%eax
  0x000000011c06b0e3: jne    0x000000011c06b109
  0x000000011c06b0e9: mov    (%rcx,%rbx,1),%rax
  0x000000011c06b0ed: sub    $0x10,%rsp
  0x000000011c06b0f1: mov    %rax,(%rsp)
  0x000000011c06b0f5: movabs $0x0,%r10
  0x000000011c06b0ff: mov    %r10,0x8(%rsp)
  0x000000011c06b104: jmpq   0x000000011c06b133
  0x000000011c06b109: cmp    $0x6,%eax
  0x000000011c06b10c: jne    0x000000011c06b125
  0x000000011c06b112: vmovss (%rcx,%rbx,1),%xmm0
  0x000000011c06b117: sub    $0x8,%rsp
  0x000000011c06b11b: vmovss %xmm0,(%rsp)
  0x000000011c06b120: jmpq   0x000000011c06b133
  0x000000011c06b125: vmovsd (%rcx,%rbx,1),%xmm0
  0x000000011c06b12a: sub    $0x10,%rsp
  0x000000011c06b12e: vmovsd %xmm0,(%rsp)
  0x000000011c06b133: movzbl 0x3(%r13),%ebx
  0x000000011c06b138: add    $0x3,%r13
  0x000000011c06b13c: movabs $0x1109d7a20,%r10
  0x000000011c06b146: jmpq   *(%r10,%rbx,8)
  0x000000011c06b14a: nopw   0x0(%rax,%rax,1)
  0x000000011c06b150: add    %al,(%rax)
  0x000000011c06b152: add    %al,(%rax)
  0x000000011c06b154: add    %al,(%rax)
  0x000000011c06b156: add    %al,(%rax)
  0x000000011c06b158: add    %al,(%rax)
  0x000000011c06b15a: add    %al,(%rax)
  0x000000011c06b15c: add    %al,(%rax)
  0x000000011c06b15e: add    %al,(%rax)

----------------------------------------------------------------------
putstatic  179 putstatic  [0x000000011c06b180, 0x000000011c06b4e0]  864 bytes

  0x000000011c06b180: push   %rax
  0x000000011c06b181: jmpq   0x000000011c06b1bf
  0x000000011c06b186: sub    $0x8,%rsp
  0x000000011c06b18a: vmovss %xmm0,(%rsp)
  0x000000011c06b18f: jmpq   0x000000011c06b1bf
  0x000000011c06b194: sub    $0x10,%rsp
  0x000000011c06b198: vmovsd %xmm0,(%rsp)
  0x000000011c06b19d: jmpq   0x000000011c06b1bf
  0x000000011c06b1a2: sub    $0x10,%rsp
  0x000000011c06b1a6: mov    %rax,(%rsp)
  0x000000011c06b1aa: movabs $0x0,%r10
  0x000000011c06b1b4: mov    %r10,0x8(%rsp)
  0x000000011c06b1b9: jmpq   0x000000011c06b1bf
  0x000000011c06b1be: push   %rax
  0x000000011c06b1bf: movzwl 0x1(%r13),%edx
  0x000000011c06b1c4: mov    -0x30(%rbp),%rcx
  0x000000011c06b1c8: shl    $0x2,%edx
  0x000000011c06b1cb: mov    0x28(%rcx,%rdx,8),%ebx
  0x000000011c06b1cf: shr    $0x18,%ebx
  0x000000011c06b1d2: and    $0xff,%ebx
  0x000000011c06b1d8: cmp    $0xb3,%ebx
  0x000000011c06b1de: je     0x000000011c06b294
  0x000000011c06b1e4: mov    $0xb3,%ebx
  0x000000011c06b1e9: callq  0x000000011c06b1f3
  0x000000011c06b1ee: jmpq   0x000000011c06b288
  0x000000011c06b1f3: mov    %rbx,%rsi
  0x000000011c06b1f6: lea    0x8(%rsp),%rax
  0x000000011c06b1fb: mov    %r13,-0x40(%rbp)
  0x000000011c06b1ff: mov    %r15,%rdi
  0x000000011c06b202: vzeroupper 
  0x000000011c06b205: mov    %rbp,0x330(%r15)
  0x000000011c06b20c: mov    %rax,0x320(%r15)
  0x000000011c06b213: test   $0xf,%esp
  0x000000011c06b219: je     0x000000011c06b231
  0x000000011c06b21f: sub    $0x8,%rsp
  0x000000011c06b223: callq  0x00000001103ac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x000000011c06b228: add    $0x8,%rsp
  0x000000011c06b22c: jmpq   0x000000011c06b236
  0x000000011c06b231: callq  0x00000001103ac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x000000011c06b236: movabs $0x0,%r10
  0x000000011c06b240: mov    %r10,0x320(%r15)
  0x000000011c06b247: movabs $0x0,%r10
  0x000000011c06b251: mov    %r10,0x330(%r15)
  0x000000011c06b258: movabs $0x0,%r10
  0x000000011c06b262: mov    %r10,0x328(%r15)
  0x000000011c06b269: vzeroupper 
  0x000000011c06b26c: cmpq   $0x0,0x8(%r15)
  0x000000011c06b274: je     0x000000011c06b27f
  0x000000011c06b27a: jmpq   0x000000011c054780
  0x000000011c06b27f: mov    -0x40(%rbp),%r13
  0x000000011c06b283: mov    -0x38(%rbp),%r14
  0x000000011c06b287: retq   
  0x000000011c06b288: movzwl 0x1(%r13),%edx
  0x000000011c06b28d: mov    -0x30(%rbp),%rcx
  0x000000011c06b291: shl    $0x2,%edx
  0x000000011c06b294: mov    0x38(%rcx,%rdx,8),%rbx
  0x000000011c06b299: mov    0x40(%rcx,%rdx,8),%eax
  0x000000011c06b29d: mov    0x30(%rcx,%rdx,8),%rcx
  0x000000011c06b2a2: mov    0x70(%rcx),%rcx
  0x000000011c06b2a6: mov    (%rcx),%rcx
  0x000000011c06b2a9: mov    %eax,%edx
  0x000000011c06b2ab: shr    $0x15,%edx
  0x000000011c06b2ae: and    $0x1,%edx
  0x000000011c06b2b1: shr    $0x1c,%eax
  0x000000011c06b2b4: and    $0xf,%eax
  0x000000011c06b2b7: jne    0x000000011c06b2cc
  0x000000011c06b2bd: mov    (%rsp),%eax
  0x000000011c06b2c0: add    $0x8,%rsp
  0x000000011c06b2c4: mov    %al,(%rcx,%rbx,1)
  0x000000011c06b2c7: jmpq   0x000000011c06b49f
  0x000000011c06b2cc: cmp    $0x1,%eax
  0x000000011c06b2cf: jne    0x000000011c06b2e7
  0x000000011c06b2d5: mov    (%rsp),%eax
  0x000000011c06b2d8: add    $0x8,%rsp
  0x000000011c06b2dc: and    $0x1,%eax
  0x000000011c06b2df: mov    %al,(%rcx,%rbx,1)
  0x000000011c06b2e2: jmpq   0x000000011c06b49f
  0x000000011c06b2e7: cmp    $0x8,%eax
  0x000000011c06b2ea: jne    0x000000011c06b411
  0x000000011c06b2f0: pop    %rax
  0x000000011c06b2f1: lea    (%rcx,%rbx,1),%rdx
  0x000000011c06b2f5: cmpb   $0x0,0x30(%r15)
  0x000000011c06b2fa: je     0x000000011c06b361
  0x000000011c06b300: mov    (%rdx),%ebx
  0x000000011c06b302: shl    $0x3,%rbx
  0x000000011c06b306: cmp    $0x0,%rbx
  0x000000011c06b30a: je     0x000000011c06b361
  0x000000011c06b310: mov    0x38(%r15),%r8
  0x000000011c06b314: cmp    $0x0,%r8
  0x000000011c06b318: je     0x000000011c06b332
  0x000000011c06b31e: sub    $0x8,%r8
  0x000000011c06b322: mov    %r8,0x38(%r15)
  0x000000011c06b326: add    0x48(%r15),%r8
  0x000000011c06b32a: mov    %rbx,(%r8)
  0x000000011c06b32d: jmpq   0x000000011c06b361
  0x000000011c06b332: push   %rax
  0x000000011c06b333: push   %rdx
  0x000000011c06b334: push   %rbx
  0x000000011c06b335: mov    %r15,%rsi
  0x000000011c06b338: mov    %rbx,%rdi
  0x000000011c06b33b: test   $0xf,%esp
  0x000000011c06b341: je     0x000000011c06b359
  0x000000011c06b347: sub    $0x8,%rsp
  0x000000011c06b34b: callq  0x000000011030185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x000000011c06b350: add    $0x8,%rsp
  0x000000011c06b354: jmpq   0x000000011c06b35e
  0x000000011c06b359: callq  0x000000011030185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x000000011c06b35e: pop    %rbx
  0x000000011c06b35f: pop    %rdx
  0x000000011c06b360: pop    %rax
  0x000000011c06b361: mov    %rax,%rbx
  0x000000011c06b364: shr    $0x3,%rax
  0x000000011c06b368: mov    %eax,(%rdx)
  0x000000011c06b36a: mov    %rdx,%r8
  0x000000011c06b36d: xor    %rbx,%r8
  0x000000011c06b370: shr    $0x16,%r8
  0x000000011c06b374: je     0x000000011c06b40c
  0x000000011c06b37a: cmp    $0x0,%rbx
  0x000000011c06b37e: je     0x000000011c06b40c
  0x000000011c06b384: mov    %rdx,%r8
  0x000000011c06b387: shr    $0x9,%r8
  0x000000011c06b38b: movabs $0x11d054000,%rbx
  0x000000011c06b395: add    %rbx,%r8
  0x000000011c06b398: cmpb   $0x20,(%r8)
  0x000000011c06b39c: je     0x000000011c06b40c
  0x000000011c06b3a2: lock addl $0x0,-0x40(%rsp)
  0x000000011c06b3a8: cmpb   $0x0,(%r8)
  0x000000011c06b3ac: je     0x000000011c06b40c
  0x000000011c06b3b2: movb   $0x0,(%r8)
  0x000000011c06b3b6: cmpl   $0x0,0x70(%r15)
  0x000000011c06b3be: je     0x000000011c06b3df
  0x000000011c06b3c4: subl   $0x8,0x70(%r15)
  0x000000011c06b3c9: mov    0x80(%r15),%rbx
  0x000000011c06b3d0: movslq 0x70(%r15),%r10
  0x000000011c06b3d4: add    %r10,%rbx
  0x000000011c06b3d7: mov    %r8,(%rbx)
  0x000000011c06b3da: jmpq   0x000000011c06b40c
  0x000000011c06b3df: push   %rdx
  0x000000011c06b3e0: push   %rbx
  0x000000011c06b3e1: mov    %r15,%rsi
  0x000000011c06b3e4: mov    %r8,%rdi
  0x000000011c06b3e7: test   $0xf,%esp
  0x000000011c06b3ed: je     0x000000011c06b405
  0x000000011c06b3f3: sub    $0x8,%rsp
  0x000000011c06b3f7: callq  0x0000000110301882 = G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*)
  0x000000011c06b3fc: add    $0x8,%rsp
  0x000000011c06b400: jmpq   0x000000011c06b40a
  0x000000011c06b405: callq  0x0000000110301882 = G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*)
  0x000000011c06b40a: pop    %rbx
  0x000000011c06b40b: pop    %rdx
  0x000000011c06b40c: jmpq   0x000000011c06b49f
  0x000000011c06b411: cmp    $0x4,%eax
  0x000000011c06b414: jne    0x000000011c06b429
  0x000000011c06b41a: mov    (%rsp),%eax
  0x000000011c06b41d: add    $0x8,%rsp
  0x000000011c06b421: mov    %eax,(%rcx,%rbx,1)
  0x000000011c06b424: jmpq   0x000000011c06b49f
  0x000000011c06b429: cmp    $0x2,%eax
  0x000000011c06b42c: jne    0x000000011c06b442
  0x000000011c06b432: mov    (%rsp),%eax
  0x000000011c06b435: add    $0x8,%rsp
  0x000000011c06b439: mov    %ax,(%rcx,%rbx,1)
  0x000000011c06b43d: jmpq   0x000000011c06b49f
  0x000000011c06b442: cmp    $0x3,%eax
  0x000000011c06b445: jne    0x000000011c06b45b
  0x000000011c06b44b: mov    (%rsp),%eax
  0x000000011c06b44e: add    $0x8,%rsp
  0x000000011c06b452: mov    %ax,(%rcx,%rbx,1)
  0x000000011c06b456: jmpq   0x000000011c06b49f
  0x000000011c06b45b: cmp    $0x5,%eax
  0x000000011c06b45e: jne    0x000000011c06b475
  0x000000011c06b464: mov    (%rsp),%rax
  0x000000011c06b468: add    $0x10,%rsp
  0x000000011c06b46c: mov    %rax,(%rcx,%rbx,1)
  0x000000011c06b470: jmpq   0x000000011c06b49f
  0x000000011c06b475: cmp    $0x6,%eax
  0x000000011c06b478: jne    0x000000011c06b491
  0x000000011c06b47e: vmovss (%rsp),%xmm0
  0x000000011c06b483: add    $0x8,%rsp
  0x000000011c06b487: vmovss %xmm0,(%rcx,%rbx,1)
  0x000000011c06b48c: jmpq   0x000000011c06b49f
  0x000000011c06b491: vmovsd (%rsp),%xmm0
  0x000000011c06b496: add    $0x10,%rsp
  0x000000011c06b49a: vmovsd %xmm0,(%rcx,%rbx,1)
  0x000000011c06b49f: test   %edx,%edx
  0x000000011c06b4a1: je     0x000000011c06b4ad
  0x000000011c06b4a7: lock addl $0x0,-0x40(%rsp)
  0x000000011c06b4ad: movzbl 0x3(%r13),%ebx
  0x000000011c06b4b2: add    $0x3,%r13
  0x000000011c06b4b6: movabs $0x1109d7a20,%r10
  0x000000011c06b4c0: jmpq   *(%r10,%rbx,8)
  0x000000011c06b4c4: nopl   0x0(%rax)
  0x000000011c06b4c8: add    %al,(%rax)
  0x000000011c06b4ca: add    %al,(%rax)
  0x000000011c06b4cc: add    %al,(%rax)
  0x000000011c06b4ce: add    %al,(%rax)
  0x000000011c06b4d0: add    %al,(%rax)
  0x000000011c06b4d2: add    %al,(%rax)
  0x000000011c06b4d4: add    %al,(%rax)
  0x000000011c06b4d6: add    %al,(%rax)
  0x000000011c06b4d8: add    %al,(%rax)
  0x000000011c06b4da: add    %al,(%rax)
  0x000000011c06b4dc: add    %al,(%rax)
  0x000000011c06b4de: add    %al,(%rax)

----------------------------------------------------------------------
getfield  180 getfield  [0x000000011c06b500, 0x000000011c06b760]  608 bytes

  0x000000011c06b500: push   %rax
  0x000000011c06b501: jmpq   0x000000011c06b53f
  0x000000011c06b506: sub    $0x8,%rsp
  0x000000011c06b50a: vmovss %xmm0,(%rsp)
  0x000000011c06b50f: jmpq   0x000000011c06b53f
  0x000000011c06b514: sub    $0x10,%rsp
  0x000000011c06b518: vmovsd %xmm0,(%rsp)
  0x000000011c06b51d: jmpq   0x000000011c06b53f
  0x000000011c06b522: sub    $0x10,%rsp
  0x000000011c06b526: mov    %rax,(%rsp)
  0x000000011c06b52a: movabs $0x0,%r10
  0x000000011c06b534: mov    %r10,0x8(%rsp)
  0x000000011c06b539: jmpq   0x000000011c06b53f
  0x000000011c06b53e: push   %rax
  0x000000011c06b53f: movzwl 0x1(%r13),%edx
  0x000000011c06b544: mov    -0x30(%rbp),%rcx
  0x000000011c06b548: shl    $0x2,%edx
  0x000000011c06b54b: mov    0x28(%rcx,%rdx,8),%ebx
  0x000000011c06b54f: shr    $0x10,%ebx
  0x000000011c06b552: and    $0xff,%ebx
  0x000000011c06b558: cmp    $0xb4,%ebx
  0x000000011c06b55e: je     0x000000011c06b614
  0x000000011c06b564: mov    $0xb4,%ebx
  0x000000011c06b569: callq  0x000000011c06b573
  0x000000011c06b56e: jmpq   0x000000011c06b608
  0x000000011c06b573: mov    %rbx,%rsi
  0x000000011c06b576: lea    0x8(%rsp),%rax
  0x000000011c06b57b: mov    %r13,-0x40(%rbp)
  0x000000011c06b57f: mov    %r15,%rdi
  0x000000011c06b582: vzeroupper 
  0x000000011c06b585: mov    %rbp,0x330(%r15)
  0x000000011c06b58c: mov    %rax,0x320(%r15)
  0x000000011c06b593: test   $0xf,%esp
  0x000000011c06b599: je     0x000000011c06b5b1
  0x000000011c06b59f: sub    $0x8,%rsp
  0x000000011c06b5a3: callq  0x00000001103ac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x000000011c06b5a8: add    $0x8,%rsp
  0x000000011c06b5ac: jmpq   0x000000011c06b5b6
  0x000000011c06b5b1: callq  0x00000001103ac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x000000011c06b5b6: movabs $0x0,%r10
  0x000000011c06b5c0: mov    %r10,0x320(%r15)
  0x000000011c06b5c7: movabs $0x0,%r10
  0x000000011c06b5d1: mov    %r10,0x330(%r15)
  0x000000011c06b5d8: movabs $0x0,%r10
  0x000000011c06b5e2: mov    %r10,0x328(%r15)
  0x000000011c06b5e9: vzeroupper 
  0x000000011c06b5ec: cmpq   $0x0,0x8(%r15)
  0x000000011c06b5f4: je     0x000000011c06b5ff
  0x000000011c06b5fa: jmpq   0x000000011c054780
  0x000000011c06b5ff: mov    -0x40(%rbp),%r13
  0x000000011c06b603: mov    -0x38(%rbp),%r14
  0x000000011c06b607: retq   
  0x000000011c06b608: movzwl 0x1(%r13),%edx
  0x000000011c06b60d: mov    -0x30(%rbp),%rcx
  0x000000011c06b611: shl    $0x2,%edx
  0x000000011c06b614: mov    0x38(%rcx,%rdx,8),%rbx
  0x000000011c06b619: mov    0x40(%rcx,%rdx,8),%eax
  0x000000011c06b61d: pop    %rcx
  0x000000011c06b61e: cmp    (%rcx),%rax
  0x000000011c06b621: shr    $0x1c,%eax
  0x000000011c06b624: and    $0xf,%eax
  0x000000011c06b627: jne    0x000000011c06b640
  0x000000011c06b62d: movsbl (%rcx,%rbx,1),%eax
  0x000000011c06b631: push   %rax
  0x000000011c06b632: mov    $0xcc,%ecx
  0x000000011c06b637: mov    %cl,0x0(%r13)
  0x000000011c06b63b: jmpq   0x000000011c06b73c
  0x000000011c06b640: cmp    $0x1,%eax
  0x000000011c06b643: jne    0x000000011c06b65c
  0x000000011c06b649: movzbl (%rcx,%rbx,1),%eax
  0x000000011c06b64d: push   %rax
  0x000000011c06b64e: mov    $0xcc,%ecx
  0x000000011c06b653: mov    %cl,0x0(%r13)
  0x000000011c06b657: jmpq   0x000000011c06b73c
  0x000000011c06b65c: cmp    $0x8,%eax
  0x000000011c06b65f: jne    0x000000011c06b67b
  0x000000011c06b665: mov    (%rcx,%rbx,1),%eax
  0x000000011c06b668: shl    $0x3,%rax
  0x000000011c06b66c: push   %rax
  0x000000011c06b66d: mov    $0xcb,%ecx
  0x000000011c06b672: mov    %cl,0x0(%r13)
  0x000000011c06b676: jmpq   0x000000011c06b73c
  0x000000011c06b67b: cmp    $0x4,%eax
  0x000000011c06b67e: jne    0x000000011c06b696
  0x000000011c06b684: mov    (%rcx,%rbx,1),%eax
  0x000000011c06b687: push   %rax
  0x000000011c06b688: mov    $0xd0,%ecx
  0x000000011c06b68d: mov    %cl,0x0(%r13)
  0x000000011c06b691: jmpq   0x000000011c06b73c
  0x000000011c06b696: cmp    $0x2,%eax
  0x000000011c06b699: jne    0x000000011c06b6b2
  0x000000011c06b69f: movzwl (%rcx,%rbx,1),%eax
  0x000000011c06b6a3: push   %rax
  0x000000011c06b6a4: mov    $0xcd,%ecx
  0x000000011c06b6a9: mov    %cl,0x0(%r13)
  0x000000011c06b6ad: jmpq   0x000000011c06b73c
  0x000000011c06b6b2: cmp    $0x3,%eax
  0x000000011c06b6b5: jne    0x000000011c06b6ce
  0x000000011c06b6bb: movswl (%rcx,%rbx,1),%eax
  0x000000011c06b6bf: push   %rax
  0x000000011c06b6c0: mov    $0xd2,%ecx
  0x000000011c06b6c5: mov    %cl,0x0(%r13)
  0x000000011c06b6c9: jmpq   0x000000011c06b73c
  0x000000011c06b6ce: cmp    $0x5,%eax
  0x000000011c06b6d1: jne    0x000000011c06b700
  0x000000011c06b6d7: mov    (%rcx,%rbx,1),%rax
  0x000000011c06b6db: sub    $0x10,%rsp
  0x000000011c06b6df: mov    %rax,(%rsp)
  0x000000011c06b6e3: movabs $0x0,%r10
  0x000000011c06b6ed: mov    %r10,0x8(%rsp)
  0x000000011c06b6f2: mov    $0xd1,%ecx
  0x000000011c06b6f7: mov    %cl,0x0(%r13)
  0x000000011c06b6fb: jmpq   0x000000011c06b73c
  0x000000011c06b700: cmp    $0x6,%eax
  0x000000011c06b703: jne    0x000000011c06b725
  0x000000011c06b709: vmovss (%rcx,%rbx,1),%xmm0
  0x000000011c06b70e: sub    $0x8,%rsp
  0x000000011c06b712: vmovss %xmm0,(%rsp)
  0x000000011c06b717: mov    $0xcf,%ecx
  0x000000011c06b71c: mov    %cl,0x0(%r13)
  0x000000011c06b720: jmpq   0x000000011c06b73c
  0x000000011c06b725: vmovsd (%rcx,%rbx,1),%xmm0
  0x000000011c06b72a: sub    $0x10,%rsp
  0x000000011c06b72e: vmovsd %xmm0,(%rsp)
  0x000000011c06b733: mov    $0xce,%ecx
  0x000000011c06b738: mov    %cl,0x0(%r13)
  0x000000011c06b73c: movzbl 0x3(%r13),%ebx
  0x000000011c06b741: add    $0x3,%r13
  0x000000011c06b745: movabs $0x1109d7a20,%r10
  0x000000011c06b74f: jmpq   *(%r10,%rbx,8)
  0x000000011c06b753: nopl   0x0(%rax,%rax,1)
  0x000000011c06b758: add    %al,(%rax)
  0x000000011c06b75a: add    %al,(%rax)
  0x000000011c06b75c: add    %al,(%rax)
  0x000000011c06b75e: add    %al,(%rax)

----------------------------------------------------------------------
putfield  181 putfield  [0x000000011c06b780, 0x000000011c06bc60]  1248 bytes

  0x000000011c06b780: push   %rax
  0x000000011c06b781: jmpq   0x000000011c06b7bf
  0x000000011c06b786: sub    $0x8,%rsp
  0x000000011c06b78a: vmovss %xmm0,(%rsp)
  0x000000011c06b78f: jmpq   0x000000011c06b7bf
  0x000000011c06b794: sub    $0x10,%rsp
  0x000000011c06b798: vmovsd %xmm0,(%rsp)
  0x000000011c06b79d: jmpq   0x000000011c06b7bf
  0x000000011c06b7a2: sub    $0x10,%rsp
  0x000000011c06b7a6: mov    %rax,(%rsp)
  0x000000011c06b7aa: movabs $0x0,%r10
  0x000000011c06b7b4: mov    %r10,0x8(%rsp)
  0x000000011c06b7b9: jmpq   0x000000011c06b7bf
  0x000000011c06b7be: push   %rax
  0x000000011c06b7bf: movzwl 0x1(%r13),%edx
  0x000000011c06b7c4: mov    -0x30(%rbp),%rcx
  0x000000011c06b7c8: shl    $0x2,%edx
  0x000000011c06b7cb: mov    0x28(%rcx,%rdx,8),%ebx
  0x000000011c06b7cf: shr    $0x18,%ebx
  0x000000011c06b7d2: and    $0xff,%ebx
  0x000000011c06b7d8: cmp    $0xb5,%ebx
  0x000000011c06b7de: je     0x000000011c06b894
  0x000000011c06b7e4: mov    $0xb5,%ebx
  0x000000011c06b7e9: callq  0x000000011c06b7f3
  0x000000011c06b7ee: jmpq   0x000000011c06b888
  0x000000011c06b7f3: mov    %rbx,%rsi
  0x000000011c06b7f6: lea    0x8(%rsp),%rax
  0x000000011c06b7fb: mov    %r13,-0x40(%rbp)
  0x000000011c06b7ff: mov    %r15,%rdi
  0x000000011c06b802: vzeroupper 
  0x000000011c06b805: mov    %rbp,0x330(%r15)
  0x000000011c06b80c: mov    %rax,0x320(%r15)
  0x000000011c06b813: test   $0xf,%esp
  0x000000011c06b819: je     0x000000011c06b831
  0x000000011c06b81f: sub    $0x8,%rsp
  0x000000011c06b823: callq  0x00000001103ac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x000000011c06b828: add    $0x8,%rsp
  0x000000011c06b82c: jmpq   0x000000011c06b836
  0x000000011c06b831: callq  0x00000001103ac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x000000011c06b836: movabs $0x0,%r10
  0x000000011c06b840: mov    %r10,0x320(%r15)
  0x000000011c06b847: movabs $0x0,%r10
  0x000000011c06b851: mov    %r10,0x330(%r15)
  0x000000011c06b858: movabs $0x0,%r10
  0x000000011c06b862: mov    %r10,0x328(%r15)
  0x000000011c06b869: vzeroupper 
  0x000000011c06b86c: cmpq   $0x0,0x8(%r15)
  0x000000011c06b874: je     0x000000011c06b87f
  0x000000011c06b87a: jmpq   0x000000011c054780
  0x000000011c06b87f: mov    -0x40(%rbp),%r13
  0x000000011c06b883: mov    -0x38(%rbp),%r14
  0x000000011c06b887: retq   
  0x000000011c06b888: movzwl 0x1(%r13),%edx
  0x000000011c06b88d: mov    -0x30(%rbp),%rcx
  0x000000011c06b891: shl    $0x2,%edx
  0x000000011c06b894: mov    0x38(%rcx,%rdx,8),%rbx
  0x000000011c06b899: mov    0x40(%rcx,%rdx,8),%eax
  0x000000011c06b89d: mov    %eax,%edx
  0x000000011c06b89f: shr    $0x15,%edx
  0x000000011c06b8a2: and    $0x1,%edx
  0x000000011c06b8a5: shr    $0x1c,%eax
  0x000000011c06b8a8: and    $0xf,%eax
  0x000000011c06b8ab: jne    0x000000011c06b8ef
  0x000000011c06b8b1: mov    (%rsp),%eax
  0x000000011c06b8b4: add    $0x8,%rsp
  0x000000011c06b8b8: pop    %rcx
  0x000000011c06b8b9: cmp    (%rcx),%rax
  0x000000011c06b8bc: mov    %al,(%rcx,%rbx,1)
  0x000000011c06b8bf: movzwl 0x1(%r13),%ecx
  0x000000011c06b8c4: mov    -0x30(%rbp),%rbx
  0x000000011c06b8c8: shl    $0x2,%ecx
  0x000000011c06b8cb: mov    0x28(%rbx,%rcx,8),%ebx
  0x000000011c06b8cf: shr    $0x18,%ebx
  0x000000011c06b8d2: and    $0xff,%ebx
  0x000000011c06b8d8: mov    $0xd4,%ecx
  0x000000011c06b8dd: cmp    $0x0,%ebx
  0x000000011c06b8e0: je     0x000000011c06b8ea
  0x000000011c06b8e6: mov    %cl,0x0(%r13)
  0x000000011c06b8ea: jmpq   0x000000011c06bc3a
  0x000000011c06b8ef: cmp    $0x1,%eax
  0x000000011c06b8f2: jne    0x000000011c06b939
  0x000000011c06b8f8: mov    (%rsp),%eax
  0x000000011c06b8fb: add    $0x8,%rsp
  0x000000011c06b8ff: pop    %rcx
  0x000000011c06b900: cmp    (%rcx),%rax
  0x000000011c06b903: and    $0x1,%eax
  0x000000011c06b906: mov    %al,(%rcx,%rbx,1)
  0x000000011c06b909: movzwl 0x1(%r13),%ecx
  0x000000011c06b90e: mov    -0x30(%rbp),%rbx
  0x000000011c06b912: shl    $0x2,%ecx
  0x000000011c06b915: mov    0x28(%rbx,%rcx,8),%ebx
  0x000000011c06b919: shr    $0x18,%ebx
  0x000000011c06b91c: and    $0xff,%ebx
  0x000000011c06b922: mov    $0xd5,%ecx
  0x000000011c06b927: cmp    $0x0,%ebx
  0x000000011c06b92a: je     0x000000011c06b934
  0x000000011c06b930: mov    %cl,0x0(%r13)
  0x000000011c06b934: jmpq   0x000000011c06bc3a
  0x000000011c06b939: cmp    $0x8,%eax
  0x000000011c06b93c: jne    0x000000011c06ba92
  0x000000011c06b942: pop    %rax
  0x000000011c06b943: pop    %rcx
  0x000000011c06b944: cmp    (%rcx),%rax
  0x000000011c06b947: lea    (%rcx,%rbx,1),%rdx
  0x000000011c06b94b: cmpb   $0x0,0x30(%r15)
  0x000000011c06b950: je     0x000000011c06b9b7
  0x000000011c06b956: mov    (%rdx),%ebx
  0x000000011c06b958: shl    $0x3,%rbx
  0x000000011c06b95c: cmp    $0x0,%rbx
  0x000000011c06b960: je     0x000000011c06b9b7
  0x000000011c06b966: mov    0x38(%r15),%r8
  0x000000011c06b96a: cmp    $0x0,%r8
  0x000000011c06b96e: je     0x000000011c06b988
  0x000000011c06b974: sub    $0x8,%r8
  0x000000011c06b978: mov    %r8,0x38(%r15)
  0x000000011c06b97c: add    0x48(%r15),%r8
  0x000000011c06b980: mov    %rbx,(%r8)
  0x000000011c06b983: jmpq   0x000000011c06b9b7
  0x000000011c06b988: push   %rax
  0x000000011c06b989: push   %rdx
  0x000000011c06b98a: push   %rbx
  0x000000011c06b98b: mov    %r15,%rsi
  0x000000011c06b98e: mov    %rbx,%rdi
  0x000000011c06b991: test   $0xf,%esp
  0x000000011c06b997: je     0x000000011c06b9af
  0x000000011c06b99d: sub    $0x8,%rsp
  0x000000011c06b9a1: callq  0x000000011030185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x000000011c06b9a6: add    $0x8,%rsp
  0x000000011c06b9aa: jmpq   0x000000011c06b9b4
  0x000000011c06b9af: callq  0x000000011030185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x000000011c06b9b4: pop    %rbx
  0x000000011c06b9b5: pop    %rdx
  0x000000011c06b9b6: pop    %rax
  0x000000011c06b9b7: mov    %rax,%rbx
  0x000000011c06b9ba: shr    $0x3,%rax
  0x000000011c06b9be: mov    %eax,(%rdx)
  0x000000011c06b9c0: mov    %rdx,%r8
  0x000000011c06b9c3: xor    %rbx,%r8
  0x000000011c06b9c6: shr    $0x16,%r8
  0x000000011c06b9ca: je     0x000000011c06ba62
  0x000000011c06b9d0: cmp    $0x0,%rbx
  0x000000011c06b9d4: je     0x000000011c06ba62
  0x000000011c06b9da: mov    %rdx,%r8
  0x000000011c06b9dd: shr    $0x9,%r8
  0x000000011c06b9e1: movabs $0x11d054000,%rbx
  0x000000011c06b9eb: add    %rbx,%r8
  0x000000011c06b9ee: cmpb   $0x20,(%r8)
  0x000000011c06b9f2: je     0x000000011c06ba62
  0x000000011c06b9f8: lock addl $0x0,-0x40(%rsp)
  0x000000011c06b9fe: cmpb   $0x0,(%r8)
  0x000000011c06ba02: je     0x000000011c06ba62
  0x000000011c06ba08: movb   $0x0,(%r8)
  0x000000011c06ba0c: cmpl   $0x0,0x70(%r15)
  0x000000011c06ba14: je     0x000000011c06ba35
  0x000000011c06ba1a: subl   $0x8,0x70(%r15)
  0x000000011c06ba1f: mov    0x80(%r15),%rbx
  0x000000011c06ba26: movslq 0x70(%r15),%r10
  0x000000011c06ba2a: add    %r10,%rbx
  0x000000011c06ba2d: mov    %r8,(%rbx)
  0x000000011c06ba30: jmpq   0x000000011c06ba62
  0x000000011c06ba35: push   %rdx
  0x000000011c06ba36: push   %rbx
  0x000000011c06ba37: mov    %r15,%rsi
  0x000000011c06ba3a: mov    %r8,%rdi
  0x000000011c06ba3d: test   $0xf,%esp
  0x000000011c06ba43: je     0x000000011c06ba5b
  0x000000011c06ba49: sub    $0x8,%rsp
  0x000000011c06ba4d: callq  0x0000000110301882 = G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*)
  0x000000011c06ba52: add    $0x8,%rsp
  0x000000011c06ba56: jmpq   0x000000011c06ba60
  0x000000011c06ba5b: callq  0x0000000110301882 = G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*)
  0x000000011c06ba60: pop    %rbx
  0x000000011c06ba61: pop    %rdx
  0x000000011c06ba62: movzwl 0x1(%r13),%ecx
  0x000000011c06ba67: mov    -0x30(%rbp),%rbx
  0x000000011c06ba6b: shl    $0x2,%ecx
  0x000000011c06ba6e: mov    0x28(%rbx,%rcx,8),%ebx
  0x000000011c06ba72: shr    $0x18,%ebx
  0x000000011c06ba75: and    $0xff,%ebx
  0x000000011c06ba7b: mov    $0xd3,%ecx
  0x000000011c06ba80: cmp    $0x0,%ebx
  0x000000011c06ba83: je     0x000000011c06ba8d
  0x000000011c06ba89: mov    %cl,0x0(%r13)
  0x000000011c06ba8d: jmpq   0x000000011c06bc3a
  0x000000011c06ba92: cmp    $0x4,%eax
  0x000000011c06ba95: jne    0x000000011c06bad9
  0x000000011c06ba9b: mov    (%rsp),%eax
  0x000000011c06ba9e: add    $0x8,%rsp
  0x000000011c06baa2: pop    %rcx
  0x000000011c06baa3: cmp    (%rcx),%rax
  0x000000011c06baa6: mov    %eax,(%rcx,%rbx,1)
  0x000000011c06baa9: movzwl 0x1(%r13),%ecx
  0x000000011c06baae: mov    -0x30(%rbp),%rbx
  0x000000011c06bab2: shl    $0x2,%ecx
  0x000000011c06bab5: mov    0x28(%rbx,%rcx,8),%ebx
  0x000000011c06bab9: shr    $0x18,%ebx
  0x000000011c06babc: and    $0xff,%ebx
  0x000000011c06bac2: mov    $0xd9,%ecx
  0x000000011c06bac7: cmp    $0x0,%ebx
  0x000000011c06baca: je     0x000000011c06bad4
  0x000000011c06bad0: mov    %cl,0x0(%r13)
  0x000000011c06bad4: jmpq   0x000000011c06bc3a
  0x000000011c06bad9: cmp    $0x2,%eax
  0x000000011c06badc: jne    0x000000011c06bb21
  0x000000011c06bae2: mov    (%rsp),%eax
  0x000000011c06bae5: add    $0x8,%rsp
  0x000000011c06bae9: pop    %rcx
  0x000000011c06baea: cmp    (%rcx),%rax
  0x000000011c06baed: mov    %ax,(%rcx,%rbx,1)
  0x000000011c06baf1: movzwl 0x1(%r13),%ecx
  0x000000011c06baf6: mov    -0x30(%rbp),%rbx
  0x000000011c06bafa: shl    $0x2,%ecx
  0x000000011c06bafd: mov    0x28(%rbx,%rcx,8),%ebx
  0x000000011c06bb01: shr    $0x18,%ebx
  0x000000011c06bb04: and    $0xff,%ebx
  0x000000011c06bb0a: mov    $0xd6,%ecx
  0x000000011c06bb0f: cmp    $0x0,%ebx
  0x000000011c06bb12: je     0x000000011c06bb1c
  0x000000011c06bb18: mov    %cl,0x0(%r13)
  0x000000011c06bb1c: jmpq   0x000000011c06bc3a
  0x000000011c06bb21: cmp    $0x3,%eax
  0x000000011c06bb24: jne    0x000000011c06bb69
  0x000000011c06bb2a: mov    (%rsp),%eax
  0x000000011c06bb2d: add    $0x8,%rsp
  0x000000011c06bb31: pop    %rcx
  0x000000011c06bb32: cmp    (%rcx),%rax
  0x000000011c06bb35: mov    %ax,(%rcx,%rbx,1)
  0x000000011c06bb39: movzwl 0x1(%r13),%ecx
  0x000000011c06bb3e: mov    -0x30(%rbp),%rbx
  0x000000011c06bb42: shl    $0x2,%ecx
  0x000000011c06bb45: mov    0x28(%rbx,%rcx,8),%ebx
  0x000000011c06bb49: shr    $0x18,%ebx
  0x000000011c06bb4c: and    $0xff,%ebx
  0x000000011c06bb52: mov    $0xdb,%ecx
  0x000000011c06bb57: cmp    $0x0,%ebx
  0x000000011c06bb5a: je     0x000000011c06bb64
  0x000000011c06bb60: mov    %cl,0x0(%r13)
  0x000000011c06bb64: jmpq   0x000000011c06bc3a
  0x000000011c06bb69: cmp    $0x5,%eax
  0x000000011c06bb6c: jne    0x000000011c06bbb2
  0x000000011c06bb72: mov    (%rsp),%rax
  0x000000011c06bb76: add    $0x10,%rsp
  0x000000011c06bb7a: pop    %rcx
  0x000000011c06bb7b: cmp    (%rcx),%rax
  0x000000011c06bb7e: mov    %rax,(%rcx,%rbx,1)
  0x000000011c06bb82: movzwl 0x1(%r13),%ecx
  0x000000011c06bb87: mov    -0x30(%rbp),%rbx
  0x000000011c06bb8b: shl    $0x2,%ecx
  0x000000011c06bb8e: mov    0x28(%rbx,%rcx,8),%ebx
  0x000000011c06bb92: shr    $0x18,%ebx
  0x000000011c06bb95: and    $0xff,%ebx
  0x000000011c06bb9b: mov    $0xda,%ecx
  0x000000011c06bba0: cmp    $0x0,%ebx
  0x000000011c06bba3: je     0x000000011c06bbad
  0x000000011c06bba9: mov    %cl,0x0(%r13)
  0x000000011c06bbad: jmpq   0x000000011c06bc3a
  0x000000011c06bbb2: cmp    $0x6,%eax
  0x000000011c06bbb5: jne    0x000000011c06bbfd
  0x000000011c06bbbb: vmovss (%rsp),%xmm0
  0x000000011c06bbc0: add    $0x8,%rsp
  0x000000011c06bbc4: pop    %rcx
  0x000000011c06bbc5: cmp    (%rcx),%rax
  0x000000011c06bbc8: vmovss %xmm0,(%rcx,%rbx,1)
  0x000000011c06bbcd: movzwl 0x1(%r13),%ecx
  0x000000011c06bbd2: mov    -0x30(%rbp),%rbx
  0x000000011c06bbd6: shl    $0x2,%ecx
  0x000000011c06bbd9: mov    0x28(%rbx,%rcx,8),%ebx
  0x000000011c06bbdd: shr    $0x18,%ebx
  0x000000011c06bbe0: and    $0xff,%ebx
  0x000000011c06bbe6: mov    $0xd8,%ecx
  0x000000011c06bbeb: cmp    $0x0,%ebx
  0x000000011c06bbee: je     0x000000011c06bbf8
  0x000000011c06bbf4: mov    %cl,0x0(%r13)
  0x000000011c06bbf8: jmpq   0x000000011c06bc3a
  0x000000011c06bbfd: vmovsd (%rsp),%xmm0
  0x000000011c06bc02: add    $0x10,%rsp
  0x000000011c06bc06: pop    %rcx
  0x000000011c06bc07: cmp    (%rcx),%rax
  0x000000011c06bc0a: vmovsd %xmm0,(%rcx,%rbx,1)
  0x000000011c06bc0f: movzwl 0x1(%r13),%ecx
  0x000000011c06bc14: mov    -0x30(%rbp),%rbx
  0x000000011c06bc18: shl    $0x2,%ecx
  0x000000011c06bc1b: mov    0x28(%rbx,%rcx,8),%ebx
  0x000000011c06bc1f: shr    $0x18,%ebx
  0x000000011c06bc22: and    $0xff,%ebx
  0x000000011c06bc28: mov    $0xd7,%ecx
  0x000000011c06bc2d: cmp    $0x0,%ebx
  0x000000011c06bc30: je     0x000000011c06bc3a
  0x000000011c06bc36: mov    %cl,0x0(%r13)
  0x000000011c06bc3a: test   %edx,%edx
  0x000000011c06bc3c: je     0x000000011c06bc48
  0x000000011c06bc42: lock addl $0x0,-0x40(%rsp)
  0x000000011c06bc48: movzbl 0x3(%r13),%ebx
  0x000000011c06bc4d: add    $0x3,%r13
  0x000000011c06bc51: movabs $0x1109d7a20,%r10
  0x000000011c06bc5b: jmpq   *(%r10,%rbx,8)
  0x000000011c06bc5f: nop

----------------------------------------------------------------------
invokevirtual  182 invokevirtual  [0x000000011c06bc80, 0x000000011c06be20]  416 bytes

  0x000000011c06bc80: push   %rax
  0x000000011c06bc81: jmpq   0x000000011c06bcbf
  0x000000011c06bc86: sub    $0x8,%rsp
  0x000000011c06bc8a: vmovss %xmm0,(%rsp)
  0x000000011c06bc8f: jmpq   0x000000011c06bcbf
  0x000000011c06bc94: sub    $0x10,%rsp
  0x000000011c06bc98: vmovsd %xmm0,(%rsp)
  0x000000011c06bc9d: jmpq   0x000000011c06bcbf
  0x000000011c06bca2: sub    $0x10,%rsp
  0x000000011c06bca6: mov    %rax,(%rsp)
  0x000000011c06bcaa: movabs $0x0,%r10
  0x000000011c06bcb4: mov    %r10,0x8(%rsp)
  0x000000011c06bcb9: jmpq   0x000000011c06bcbf
  0x000000011c06bcbe: push   %rax
  0x000000011c06bcbf: mov    %r13,-0x40(%rbp)
  0x000000011c06bcc3: movzwl 0x1(%r13),%edx
  0x000000011c06bcc8: mov    -0x30(%rbp),%rcx
  0x000000011c06bccc: shl    $0x2,%edx
  0x000000011c06bccf: mov    0x28(%rcx,%rdx,8),%ebx
  0x000000011c06bcd3: shr    $0x18,%ebx
  0x000000011c06bcd6: and    $0xff,%ebx
  0x000000011c06bcdc: cmp    $0xb6,%ebx
  0x000000011c06bce2: je     0x000000011c06bd98
  0x000000011c06bce8: mov    $0xb6,%ebx
  0x000000011c06bced: callq  0x000000011c06bcf7
  0x000000011c06bcf2: jmpq   0x000000011c06bd8c
  0x000000011c06bcf7: mov    %rbx,%rsi
  0x000000011c06bcfa: lea    0x8(%rsp),%rax
  0x000000011c06bcff: mov    %r13,-0x40(%rbp)
  0x000000011c06bd03: mov    %r15,%rdi
  0x000000011c06bd06: vzeroupper 
  0x000000011c06bd09: mov    %rbp,0x330(%r15)
  0x000000011c06bd10: mov    %rax,0x320(%r15)
  0x000000011c06bd17: test   $0xf,%esp
  0x000000011c06bd1d: je     0x000000011c06bd35
  0x000000011c06bd23: sub    $0x8,%rsp
  0x000000011c06bd27: callq  0x00000001103ac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x000000011c06bd2c: add    $0x8,%rsp
  0x000000011c06bd30: jmpq   0x000000011c06bd3a
  0x000000011c06bd35: callq  0x00000001103ac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x000000011c06bd3a: movabs $0x0,%r10
  0x000000011c06bd44: mov    %r10,0x320(%r15)
  0x000000011c06bd4b: movabs $0x0,%r10
  0x000000011c06bd55: mov    %r10,0x330(%r15)
  0x000000011c06bd5c: movabs $0x0,%r10
  0x000000011c06bd66: mov    %r10,0x328(%r15)
  0x000000011c06bd6d: vzeroupper 
  0x000000011c06bd70: cmpq   $0x0,0x8(%r15)
  0x000000011c06bd78: je     0x000000011c06bd83
  0x000000011c06bd7e: jmpq   0x000000011c054780
  0x000000011c06bd83: mov    -0x40(%rbp),%r13
  0x000000011c06bd87: mov    -0x38(%rbp),%r14
  0x000000011c06bd8b: retq   
  0x000000011c06bd8c: movzwl 0x1(%r13),%edx
  0x000000011c06bd91: mov    -0x30(%rbp),%rcx
  0x000000011c06bd95: shl    $0x2,%edx
  0x000000011c06bd98: mov    0x38(%rcx,%rdx,8),%rbx
  0x000000011c06bd9d: mov    0x40(%rcx,%rdx,8),%edx
  0x000000011c06bda1: mov    %edx,%ecx
  0x000000011c06bda3: and    $0xff,%ecx
  0x000000011c06bda9: mov    -0x8(%rsp,%rcx,8),%rcx
  0x000000011c06bdae: mov    %edx,%r13d
  0x000000011c06bdb1: shr    $0x1c,%edx
  0x000000011c06bdb4: movabs $0x1109d8730,%r10
  0x000000011c06bdbe: mov    (%r10,%rdx,8),%rdx
  0x000000011c06bdc2: push   %rdx
  0x000000011c06bdc3: mov    %r13d,%edx
  0x000000011c06bdc6: mov    -0x40(%rbp),%r13
  0x000000011c06bdca: mov    %edx,%eax
  0x000000011c06bdcc: and    $0x100000,%eax
  0x000000011c06bdd2: je     0x000000011c06bde7
  0x000000011c06bdd8: cmp    (%rcx),%rax
  0x000000011c06bddb: lea    0x8(%rsp),%r13
  0x000000011c06bde0: mov    %r13,-0x10(%rbp)
  0x000000011c06bde4: jmpq   *0x48(%rbx)
  0x000000011c06bde7: mov    0x8(%rcx),%eax
  0x000000011c06bdea: movabs $0x800000000,%r12
  0x000000011c06bdf4: add    %r12,%rax
  0x000000011c06bdf7: xor    %r12,%r12
  0x000000011c06bdfa: mov    0x1d0(%rax,%rbx,8),%rbx
  0x000000011c06be02: lea    0x8(%rsp),%r13
  0x000000011c06be07: mov    %r13,-0x10(%rbp)
  0x000000011c06be0b: jmpq   *0x48(%rbx)
  0x000000011c06be0e: xchg   %ax,%ax
  0x000000011c06be10: add    %al,(%rax)
  0x000000011c06be12: add    %al,(%rax)
  0x000000011c06be14: add    %al,(%rax)
  0x000000011c06be16: add    %al,(%rax)
  0x000000011c06be18: add    %al,(%rax)
  0x000000011c06be1a: add    %al,(%rax)
  0x000000011c06be1c: add    %al,(%rax)
  0x000000011c06be1e: add    %al,(%rax)

----------------------------------------------------------------------
invokespecial  183 invokespecial  [0x000000011c06be40, 0x000000011c06bfa0]  352 bytes

  0x000000011c06be40: push   %rax
  0x000000011c06be41: jmpq   0x000000011c06be7f
  0x000000011c06be46: sub    $0x8,%rsp
  0x000000011c06be4a: vmovss %xmm0,(%rsp)
  0x000000011c06be4f: jmpq   0x000000011c06be7f
  0x000000011c06be54: sub    $0x10,%rsp
  0x000000011c06be58: vmovsd %xmm0,(%rsp)
  0x000000011c06be5d: jmpq   0x000000011c06be7f
  0x000000011c06be62: sub    $0x10,%rsp
  0x000000011c06be66: mov    %rax,(%rsp)
  0x000000011c06be6a: movabs $0x0,%r10
  0x000000011c06be74: mov    %r10,0x8(%rsp)
  0x000000011c06be79: jmpq   0x000000011c06be7f
  0x000000011c06be7e: push   %rax
  0x000000011c06be7f: mov    %r13,-0x40(%rbp)
  0x000000011c06be83: movzwl 0x1(%r13),%edx
  0x000000011c06be88: mov    -0x30(%rbp),%rcx
  0x000000011c06be8c: shl    $0x2,%edx
  0x000000011c06be8f: mov    0x28(%rcx,%rdx,8),%ebx
  0x000000011c06be93: shr    $0x10,%ebx
  0x000000011c06be96: and    $0xff,%ebx
  0x000000011c06be9c: cmp    $0xb7,%ebx
  0x000000011c06bea2: je     0x000000011c06bf58
  0x000000011c06bea8: mov    $0xb7,%ebx
  0x000000011c06bead: callq  0x000000011c06beb7
  0x000000011c06beb2: jmpq   0x000000011c06bf4c
  0x000000011c06beb7: mov    %rbx,%rsi
  0x000000011c06beba: lea    0x8(%rsp),%rax
  0x000000011c06bebf: mov    %r13,-0x40(%rbp)
  0x000000011c06bec3: mov    %r15,%rdi
  0x000000011c06bec6: vzeroupper 
  0x000000011c06bec9: mov    %rbp,0x330(%r15)
  0x000000011c06bed0: mov    %rax,0x320(%r15)
  0x000000011c06bed7: test   $0xf,%esp
  0x000000011c06bedd: je     0x000000011c06bef5
  0x000000011c06bee3: sub    $0x8,%rsp
  0x000000011c06bee7: callq  0x00000001103ac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x000000011c06beec: add    $0x8,%rsp
  0x000000011c06bef0: jmpq   0x000000011c06befa
  0x000000011c06bef5: callq  0x00000001103ac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x000000011c06befa: movabs $0x0,%r10
  0x000000011c06bf04: mov    %r10,0x320(%r15)
  0x000000011c06bf0b: movabs $0x0,%r10
  0x000000011c06bf15: mov    %r10,0x330(%r15)
  0x000000011c06bf1c: movabs $0x0,%r10
  0x000000011c06bf26: mov    %r10,0x328(%r15)
  0x000000011c06bf2d: vzeroupper 
  0x000000011c06bf30: cmpq   $0x0,0x8(%r15)
  0x000000011c06bf38: je     0x000000011c06bf43
  0x000000011c06bf3e: jmpq   0x000000011c054780
  0x000000011c06bf43: mov    -0x40(%rbp),%r13
  0x000000011c06bf47: mov    -0x38(%rbp),%r14
  0x000000011c06bf4b: retq   
  0x000000011c06bf4c: movzwl 0x1(%r13),%edx
  0x000000011c06bf51: mov    -0x30(%rbp),%rcx
  0x000000011c06bf55: shl    $0x2,%edx
  0x000000011c06bf58: mov    0x30(%rcx,%rdx,8),%rbx
  0x000000011c06bf5d: mov    0x40(%rcx,%rdx,8),%edx
  0x000000011c06bf61: mov    %edx,%ecx
  0x000000011c06bf63: and    $0xff,%ecx
  0x000000011c06bf69: mov    -0x8(%rsp,%rcx,8),%rcx
  0x000000011c06bf6e: shr    $0x1c,%edx
  0x000000011c06bf71: movabs $0x1109d8730,%r10
  0x000000011c06bf7b: mov    (%r10,%rdx,8),%rdx
  0x000000011c06bf7f: push   %rdx
  0x000000011c06bf80: cmp    (%rcx),%rax
  0x000000011c06bf83: lea    0x8(%rsp),%r13
  0x000000011c06bf88: mov    %r13,-0x10(%rbp)
  0x000000011c06bf8c: jmpq   *0x48(%rbx)
  0x000000011c06bf8f: nop
  0x000000011c06bf90: add    %al,(%rax)
  0x000000011c06bf92: add    %al,(%rax)
  0x000000011c06bf94: add    %al,(%rax)
  0x000000011c06bf96: add    %al,(%rax)
  0x000000011c06bf98: add    %al,(%rax)
  0x000000011c06bf9a: add    %al,(%rax)
  0x000000011c06bf9c: add    %al,(%rax)
  0x000000011c06bf9e: add    %al,(%rax)

----------------------------------------------------------------------
invokestatic  184 invokestatic  [0x000000011c06bfc0, 0x000000011c06c100]  320 bytes

  0x000000011c06bfc0: push   %rax
  0x000000011c06bfc1: jmpq   0x000000011c06bfff
  0x000000011c06bfc6: sub    $0x8,%rsp
  0x000000011c06bfca: vmovss %xmm0,(%rsp)
  0x000000011c06bfcf: jmpq   0x000000011c06bfff
  0x000000011c06bfd4: sub    $0x10,%rsp
  0x000000011c06bfd8: vmovsd %xmm0,(%rsp)
  0x000000011c06bfdd: jmpq   0x000000011c06bfff
  0x000000011c06bfe2: sub    $0x10,%rsp
  0x000000011c06bfe6: mov    %rax,(%rsp)
  0x000000011c06bfea: movabs $0x0,%r10
  0x000000011c06bff4: mov    %r10,0x8(%rsp)
  0x000000011c06bff9: jmpq   0x000000011c06bfff
  0x000000011c06bffe: push   %rax
  0x000000011c06bfff: mov    %r13,-0x40(%rbp)
  0x000000011c06c003: movzwl 0x1(%r13),%edx
  0x000000011c06c008: mov    -0x30(%rbp),%rcx
  0x000000011c06c00c: shl    $0x2,%edx
  0x000000011c06c00f: mov    0x28(%rcx,%rdx,8),%ebx
  0x000000011c06c013: shr    $0x10,%ebx
  0x000000011c06c016: and    $0xff,%ebx
  0x000000011c06c01c: cmp    $0xb8,%ebx
  0x000000011c06c022: je     0x000000011c06c0d8
  0x000000011c06c028: mov    $0xb8,%ebx
  0x000000011c06c02d: callq  0x000000011c06c037
  0x000000011c06c032: jmpq   0x000000011c06c0cc
  0x000000011c06c037: mov    %rbx,%rsi
  0x000000011c06c03a: lea    0x8(%rsp),%rax
  0x000000011c06c03f: mov    %r13,-0x40(%rbp)
  0x000000011c06c043: mov    %r15,%rdi
  0x000000011c06c046: vzeroupper 
  0x000000011c06c049: mov    %rbp,0x330(%r15)
  0x000000011c06c050: mov    %rax,0x320(%r15)
  0x000000011c06c057: test   $0xf,%esp
  0x000000011c06c05d: je     0x000000011c06c075
  0x000000011c06c063: sub    $0x8,%rsp
  0x000000011c06c067: callq  0x00000001103ac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x000000011c06c06c: add    $0x8,%rsp
  0x000000011c06c070: jmpq   0x000000011c06c07a
  0x000000011c06c075: callq  0x00000001103ac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x000000011c06c07a: movabs $0x0,%r10
  0x000000011c06c084: mov    %r10,0x320(%r15)
  0x000000011c06c08b: movabs $0x0,%r10
  0x000000011c06c095: mov    %r10,0x330(%r15)
  0x000000011c06c09c: movabs $0x0,%r10
  0x000000011c06c0a6: mov    %r10,0x328(%r15)
  0x000000011c06c0ad: vzeroupper 
  0x000000011c06c0b0: cmpq   $0x0,0x8(%r15)
  0x000000011c06c0b8: je     0x000000011c06c0c3
  0x000000011c06c0be: jmpq   0x000000011c054780
  0x000000011c06c0c3: mov    -0x40(%rbp),%r13
  0x000000011c06c0c7: mov    -0x38(%rbp),%r14
  0x000000011c06c0cb: retq   
  0x000000011c06c0cc: movzwl 0x1(%r13),%edx
  0x000000011c06c0d1: mov    -0x30(%rbp),%rcx
  0x000000011c06c0d5: shl    $0x2,%edx
  0x000000011c06c0d8: mov    0x30(%rcx,%rdx,8),%rbx
  0x000000011c06c0dd: mov    0x40(%rcx,%rdx,8),%edx
  0x000000011c06c0e1: shr    $0x1c,%edx
  0x000000011c06c0e4: movabs $0x1109d8730,%r10
  0x000000011c06c0ee: mov    (%r10,%rdx,8),%rdx
  0x000000011c06c0f2: push   %rdx
  0x000000011c06c0f3: lea    0x8(%rsp),%r13
  0x000000011c06c0f8: mov    %r13,-0x10(%rbp)
  0x000000011c06c0fc: jmpq   *0x48(%rbx)
  0x000000011c06c0ff: nop

----------------------------------------------------------------------
invokeinterface  185 invokeinterface  [0x000000011c06c120, 0x000000011c06c5a0]  1152 bytes

  0x000000011c06c120: push   %rax
  0x000000011c06c121: jmpq   0x000000011c06c15f
  0x000000011c06c126: sub    $0x8,%rsp
  0x000000011c06c12a: vmovss %xmm0,(%rsp)
  0x000000011c06c12f: jmpq   0x000000011c06c15f
  0x000000011c06c134: sub    $0x10,%rsp
  0x000000011c06c138: vmovsd %xmm0,(%rsp)
  0x000000011c06c13d: jmpq   0x000000011c06c15f
  0x000000011c06c142: sub    $0x10,%rsp
  0x000000011c06c146: mov    %rax,(%rsp)
  0x000000011c06c14a: movabs $0x0,%r10
  0x000000011c06c154: mov    %r10,0x8(%rsp)
  0x000000011c06c159: jmpq   0x000000011c06c15f
  0x000000011c06c15e: push   %rax
  0x000000011c06c15f: mov    %r13,-0x40(%rbp)
  0x000000011c06c163: movzwl 0x1(%r13),%edx
  0x000000011c06c168: mov    -0x30(%rbp),%rcx
  0x000000011c06c16c: shl    $0x2,%edx
  0x000000011c06c16f: mov    0x28(%rcx,%rdx,8),%ebx
  0x000000011c06c173: shr    $0x10,%ebx
  0x000000011c06c176: and    $0xff,%ebx
  0x000000011c06c17c: cmp    $0xb9,%ebx
  0x000000011c06c182: je     0x000000011c06c238
  0x000000011c06c188: mov    $0xb9,%ebx
  0x000000011c06c18d: callq  0x000000011c06c197
  0x000000011c06c192: jmpq   0x000000011c06c22c
  0x000000011c06c197: mov    %rbx,%rsi
  0x000000011c06c19a: lea    0x8(%rsp),%rax
  0x000000011c06c19f: mov    %r13,-0x40(%rbp)
  0x000000011c06c1a3: mov    %r15,%rdi
  0x000000011c06c1a6: vzeroupper 
  0x000000011c06c1a9: mov    %rbp,0x330(%r15)
  0x000000011c06c1b0: mov    %rax,0x320(%r15)
  0x000000011c06c1b7: test   $0xf,%esp
  0x000000011c06c1bd: je     0x000000011c06c1d5
  0x000000011c06c1c3: sub    $0x8,%rsp
  0x000000011c06c1c7: callq  0x00000001103ac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x000000011c06c1cc: add    $0x8,%rsp
  0x000000011c06c1d0: jmpq   0x000000011c06c1da
  0x000000011c06c1d5: callq  0x00000001103ac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x000000011c06c1da: movabs $0x0,%r10
  0x000000011c06c1e4: mov    %r10,0x320(%r15)
  0x000000011c06c1eb: movabs $0x0,%r10
  0x000000011c06c1f5: mov    %r10,0x330(%r15)
  0x000000011c06c1fc: movabs $0x0,%r10
  0x000000011c06c206: mov    %r10,0x328(%r15)
  0x000000011c06c20d: vzeroupper 
  0x000000011c06c210: cmpq   $0x0,0x8(%r15)
  0x000000011c06c218: je     0x000000011c06c223
  0x000000011c06c21e: jmpq   0x000000011c054780
  0x000000011c06c223: mov    -0x40(%rbp),%r13
  0x000000011c06c227: mov    -0x38(%rbp),%r14
  0x000000011c06c22b: retq   
  0x000000011c06c22c: movzwl 0x1(%r13),%edx
  0x000000011c06c231: mov    -0x30(%rbp),%rcx
  0x000000011c06c235: shl    $0x2,%edx
  0x000000011c06c238: mov    0x30(%rcx,%rdx,8),%rax
  0x000000011c06c23d: mov    0x38(%rcx,%rdx,8),%rbx
  0x000000011c06c242: mov    0x40(%rcx,%rdx,8),%edx
  0x000000011c06c246: mov    %edx,%ecx
  0x000000011c06c248: and    $0xff,%ecx
  0x000000011c06c24e: mov    -0x8(%rsp,%rcx,8),%rcx
  0x000000011c06c253: mov    %edx,%r13d
  0x000000011c06c256: shr    $0x1c,%edx
  0x000000011c06c259: movabs $0x1109d8780,%r10
  0x000000011c06c263: mov    (%r10,%rdx,8),%rdx
  0x000000011c06c267: push   %rdx
  0x000000011c06c268: mov    %r13d,%edx
  0x000000011c06c26b: mov    -0x40(%rbp),%r13
  0x000000011c06c26f: mov    %edx,%r14d
  0x000000011c06c272: and    $0x800000,%r14d
  0x000000011c06c279: je     0x000000011c06c2c3
  0x000000011c06c27f: mov    %edx,%eax
  0x000000011c06c281: and    $0x100000,%eax
  0x000000011c06c287: je     0x000000011c06c29c
  0x000000011c06c28d: cmp    (%rcx),%rax
  0x000000011c06c290: lea    0x8(%rsp),%r13
  0x000000011c06c295: mov    %r13,-0x10(%rbp)
  0x000000011c06c299: jmpq   *0x48(%rbx)
  0x000000011c06c29c: mov    0x8(%rcx),%eax
  0x000000011c06c29f: movabs $0x800000000,%r12
  0x000000011c06c2a9: add    %r12,%rax
  0x000000011c06c2ac: xor    %r12,%r12
  0x000000011c06c2af: mov    0x1d0(%rax,%rbx,8),%rbx
  0x000000011c06c2b7: lea    0x8(%rsp),%r13
  0x000000011c06c2bc: mov    %r13,-0x10(%rbp)
  0x000000011c06c2c0: jmpq   *0x48(%rbx)
  0x000000011c06c2c3: mov    %edx,%r14d
  0x000000011c06c2c6: and    $0x100000,%r14d
  0x000000011c06c2cd: je     0x000000011c06c340
  0x000000011c06c2d3: mov    0x8(%rcx),%r14d
  0x000000011c06c2d7: movabs $0x800000000,%r12
  0x000000011c06c2e1: add    %r12,%r14
  0x000000011c06c2e4: xor    %r12,%r12
  0x000000011c06c2e7: cmp    %rax,%r14
  0x000000011c06c2ea: je     0x000000011c06c334
  0x000000011c06c2f0: mov    0x10(%rax),%r13d
  0x000000011c06c2f4: cmp    (%r14,%r13,1),%rax
  0x000000011c06c2f8: je     0x000000011c06c334
  0x000000011c06c2fe: cmp    $0x20,%r13d
  0x000000011c06c302: jne    0x000000011c06c32c
  0x000000011c06c308: push   %rax
  0x000000011c06c309: mov    %rax,%rax
  0x000000011c06c30c: push   %rcx
  0x000000011c06c30d: push   %rdi
  0x000000011c06c30e: mov    0x28(%r14),%rdi
  0x000000011c06c312: mov    (%rdi),%ecx
  0x000000011c06c314: add    $0x8,%rdi
  0x000000011c06c318: test   %rax,%rax
  0x000000011c06c31b: repnz scas %es:(%rdi),%rax
  0x000000011c06c31e: pop    %rdi
  0x000000011c06c31f: pop    %rcx
  0x000000011c06c320: pop    %rax
  0x000000011c06c321: jne    0x000000011c06c32c
  0x000000011c06c323: mov    %rax,0x20(%r14)
  0x000000011c06c327: jmpq   0x000000011c06c334
  0x000000011c06c32c: mov    %r14,%rdx
  0x000000011c06c32f: jmpq   0x000000011c06c4c3
  0x000000011c06c334: lea    0x8(%rsp),%r13
  0x000000011c06c339: mov    %r13,-0x10(%rbp)
  0x000000011c06c33d: jmpq   *0x48(%rbx)
  0x000000011c06c340: mov    -0x38(%rbp),%r14
  0x000000011c06c344: mov    0x8(%rcx),%edx
  0x000000011c06c347: movabs $0x800000000,%r12
  0x000000011c06c351: add    %r12,%rdx
  0x000000011c06c354: xor    %r12,%r12
  0x000000011c06c357: mov    %rbx,%rcx
  0x000000011c06c35a: mov    0xc4(%rdx),%r14d
  0x000000011c06c361: lea    0x1d0(%rdx,%r14,8),%r14
  0x000000011c06c369: mov    (%r14),%r13
  0x000000011c06c36c: cmp    %r13,%rax
  0x000000011c06c36f: je     0x000000011c06c386
  0x000000011c06c371: test   %r13,%r13
  0x000000011c06c374: je     0x000000011c06c4c3
  0x000000011c06c37a: add    $0x10,%r14
  0x000000011c06c37e: mov    (%r14),%r13
  0x000000011c06c381: cmp    %r13,%rax
  0x000000011c06c384: jne    0x000000011c06c371
  0x000000011c06c386: mov    -0x40(%rbp),%r13
  0x000000011c06c38a: mov    0x8(%rbx),%rax
  0x000000011c06c38e: mov    0x8(%rax),%rax
  0x000000011c06c392: mov    0x18(%rax),%rax
  0x000000011c06c396: mov    0x24(%rbx),%ebx
  0x000000011c06c399: sub    $0xfffffff6,%ebx
  0x000000011c06c39c: neg    %ebx
  0x000000011c06c39e: mov    %rdx,%r14
  0x000000011c06c3a1: mov    0xc4(%r14),%r13d
  0x000000011c06c3a8: lea    0x1d0(%r14,%r13,8),%r13
  0x000000011c06c3b0: lea    (%r14,%rbx,8),%r14
  0x000000011c06c3b4: mov    0x0(%r13),%rbx
  0x000000011c06c3b8: cmp    %rbx,%rax
  0x000000011c06c3bb: je     0x000000011c06c3d3
  0x000000011c06c3bd: test   %rbx,%rbx
  0x000000011c06c3c0: je     0x000000011c06c4c3
  0x000000011c06c3c6: add    $0x10,%r13
  0x000000011c06c3ca: mov    0x0(%r13),%rbx
  0x000000011c06c3ce: cmp    %rbx,%rax
  0x000000011c06c3d1: jne    0x000000011c06c3bd
  0x000000011c06c3d3: mov    0x8(%r13),%r13d
  0x000000011c06c3d7: mov    (%r14,%r13,1),%rbx
  0x000000011c06c3db: test   %rbx,%rbx
  0x000000011c06c3de: je     0x000000011c06c404
  0x000000011c06c3e4: lea    0x8(%rsp),%r13
  0x000000011c06c3e9: mov    %r13,-0x10(%rbp)
  0x000000011c06c3ed: jmpq   *0x48(%rbx)
  0x000000011c06c3f0: movabs $0x1107f3493,%rdi
  0x000000011c06c3fa: and    $0xfffffffffffffff0,%rsp
  0x000000011c06c3fe: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c06c403: hlt    
  0x000000011c06c404: pop    %rbx
  0x000000011c06c405: mov    -0x40(%rbp),%r13
  0x000000011c06c409: mov    -0x38(%rbp),%r14
  0x000000011c06c40d: mov    %rdx,%rsi
  0x000000011c06c410: mov    %rcx,%rdx
  0x000000011c06c413: callq  0x000000011c06c41d
  0x000000011c06c418: jmpq   0x000000011c06c4af
  0x000000011c06c41d: lea    0x8(%rsp),%rax
  0x000000011c06c422: mov    %r13,-0x40(%rbp)
  0x000000011c06c426: mov    %r15,%rdi
  0x000000011c06c429: vzeroupper 
  0x000000011c06c42c: mov    %rbp,0x330(%r15)
  0x000000011c06c433: mov    %rax,0x320(%r15)
  0x000000011c06c43a: test   $0xf,%esp
  0x000000011c06c440: je     0x000000011c06c458
  0x000000011c06c446: sub    $0x8,%rsp
  0x000000011c06c44a: callq  0x00000001103ab502 = InterpreterRuntime::throw_AbstractMethodErrorVerbose(JavaThread*, Klass*, Method*)
  0x000000011c06c44f: add    $0x8,%rsp
  0x000000011c06c453: jmpq   0x000000011c06c45d
  0x000000011c06c458: callq  0x00000001103ab502 = InterpreterRuntime::throw_AbstractMethodErrorVerbose(JavaThread*, Klass*, Method*)
  0x000000011c06c45d: movabs $0x0,%r10
  0x000000011c06c467: mov    %r10,0x320(%r15)
  0x000000011c06c46e: movabs $0x0,%r10
  0x000000011c06c478: mov    %r10,0x330(%r15)
  0x000000011c06c47f: movabs $0x0,%r10
  0x000000011c06c489: mov    %r10,0x328(%r15)
  0x000000011c06c490: vzeroupper 
  0x000000011c06c493: cmpq   $0x0,0x8(%r15)
  0x000000011c06c49b: je     0x000000011c06c4a6
  0x000000011c06c4a1: jmpq   0x000000011c054780
  0x000000011c06c4a6: mov    -0x40(%rbp),%r13
  0x000000011c06c4aa: mov    -0x38(%rbp),%r14
  0x000000011c06c4ae: retq   
  0x000000011c06c4af: movabs $0x1107f3493,%rdi
  0x000000011c06c4b9: and    $0xfffffffffffffff0,%rsp
  0x000000011c06c4bd: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c06c4c2: hlt    
  0x000000011c06c4c3: pop    %rbx
  0x000000011c06c4c4: mov    -0x40(%rbp),%r13
  0x000000011c06c4c8: mov    -0x38(%rbp),%r14
  0x000000011c06c4cc: mov    %rdx,%rsi
  0x000000011c06c4cf: callq  0x000000011c06c4d9
  0x000000011c06c4d4: jmpq   0x000000011c06c56e
  0x000000011c06c4d9: mov    %rax,%rdx
  0x000000011c06c4dc: lea    0x8(%rsp),%rax
  0x000000011c06c4e1: mov    %r13,-0x40(%rbp)
  0x000000011c06c4e5: mov    %r15,%rdi
  0x000000011c06c4e8: vzeroupper 
  0x000000011c06c4eb: mov    %rbp,0x330(%r15)
  0x000000011c06c4f2: mov    %rax,0x320(%r15)
  0x000000011c06c4f9: test   $0xf,%esp
  0x000000011c06c4ff: je     0x000000011c06c517
  0x000000011c06c505: sub    $0x8,%rsp
  0x000000011c06c509: callq  0x00000001103ab684 = InterpreterRuntime::throw_IncompatibleClassChangeErrorVerbose(JavaThread*, Klass*, Klass*)
  0x000000011c06c50e: add    $0x8,%rsp
  0x000000011c06c512: jmpq   0x000000011c06c51c
  0x000000011c06c517: callq  0x00000001103ab684 = InterpreterRuntime::throw_IncompatibleClassChangeErrorVerbose(JavaThread*, Klass*, Klass*)
  0x000000011c06c51c: movabs $0x0,%r10
  0x000000011c06c526: mov    %r10,0x320(%r15)
  0x000000011c06c52d: movabs $0x0,%r10
  0x000000011c06c537: mov    %r10,0x330(%r15)
  0x000000011c06c53e: movabs $0x0,%r10
  0x000000011c06c548: mov    %r10,0x328(%r15)
  0x000000011c06c54f: vzeroupper 
  0x000000011c06c552: cmpq   $0x0,0x8(%r15)
  0x000000011c06c55a: je     0x000000011c06c565
  0x000000011c06c560: jmpq   0x000000011c054780
  0x000000011c06c565: mov    -0x40(%rbp),%r13
  0x000000011c06c569: mov    -0x38(%rbp),%r14
  0x000000011c06c56d: retq   
  0x000000011c06c56e: movabs $0x1107f3493,%rdi
  0x000000011c06c578: and    $0xfffffffffffffff0,%rsp
  0x000000011c06c57c: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c06c581: hlt    
  0x000000011c06c582: nopw   0x0(%rax,%rax,1)
  0x000000011c06c588: add    %al,(%rax)
  0x000000011c06c58a: add    %al,(%rax)
  0x000000011c06c58c: add    %al,(%rax)
  0x000000011c06c58e: add    %al,(%rax)
  0x000000011c06c590: add    %al,(%rax)
  0x000000011c06c592: add    %al,(%rax)
  0x000000011c06c594: add    %al,(%rax)
  0x000000011c06c596: add    %al,(%rax)
  0x000000011c06c598: add    %al,(%rax)
  0x000000011c06c59a: add    %al,(%rax)
  0x000000011c06c59c: add    %al,(%rax)
  0x000000011c06c59e: add    %al,(%rax)

----------------------------------------------------------------------
invokedynamic  186 invokedynamic  [0x000000011c06c5c0, 0x000000011c06c740]  384 bytes

  0x000000011c06c5c0: push   %rax
  0x000000011c06c5c1: jmpq   0x000000011c06c5ff
  0x000000011c06c5c6: sub    $0x8,%rsp
  0x000000011c06c5ca: vmovss %xmm0,(%rsp)
  0x000000011c06c5cf: jmpq   0x000000011c06c5ff
  0x000000011c06c5d4: sub    $0x10,%rsp
  0x000000011c06c5d8: vmovsd %xmm0,(%rsp)
  0x000000011c06c5dd: jmpq   0x000000011c06c5ff
  0x000000011c06c5e2: sub    $0x10,%rsp
  0x000000011c06c5e6: mov    %rax,(%rsp)
  0x000000011c06c5ea: movabs $0x0,%r10
  0x000000011c06c5f4: mov    %r10,0x8(%rsp)
  0x000000011c06c5f9: jmpq   0x000000011c06c5ff
  0x000000011c06c5fe: push   %rax
  0x000000011c06c5ff: mov    %r13,-0x40(%rbp)
  0x000000011c06c603: mov    0x1(%r13),%edx
  0x000000011c06c607: not    %edx
  0x000000011c06c609: mov    -0x30(%rbp),%rcx
  0x000000011c06c60d: shl    $0x2,%edx
  0x000000011c06c610: mov    0x28(%rcx,%rdx,8),%ebx
  0x000000011c06c614: shr    $0x10,%ebx
  0x000000011c06c617: and    $0xff,%ebx
  0x000000011c06c61d: cmp    $0xba,%ebx
  0x000000011c06c623: je     0x000000011c06c6da
  0x000000011c06c629: mov    $0xba,%ebx
  0x000000011c06c62e: callq  0x000000011c06c638
  0x000000011c06c633: jmpq   0x000000011c06c6cd
  0x000000011c06c638: mov    %rbx,%rsi
  0x000000011c06c63b: lea    0x8(%rsp),%rax
  0x000000011c06c640: mov    %r13,-0x40(%rbp)
  0x000000011c06c644: mov    %r15,%rdi
  0x000000011c06c647: vzeroupper 
  0x000000011c06c64a: mov    %rbp,0x330(%r15)
  0x000000011c06c651: mov    %rax,0x320(%r15)
  0x000000011c06c658: test   $0xf,%esp
  0x000000011c06c65e: je     0x000000011c06c676
  0x000000011c06c664: sub    $0x8,%rsp
  0x000000011c06c668: callq  0x00000001103ac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x000000011c06c66d: add    $0x8,%rsp
  0x000000011c06c671: jmpq   0x000000011c06c67b
  0x000000011c06c676: callq  0x00000001103ac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x000000011c06c67b: movabs $0x0,%r10
  0x000000011c06c685: mov    %r10,0x320(%r15)
  0x000000011c06c68c: movabs $0x0,%r10
  0x000000011c06c696: mov    %r10,0x330(%r15)
  0x000000011c06c69d: movabs $0x0,%r10
  0x000000011c06c6a7: mov    %r10,0x328(%r15)
  0x000000011c06c6ae: vzeroupper 
  0x000000011c06c6b1: cmpq   $0x0,0x8(%r15)
  0x000000011c06c6b9: je     0x000000011c06c6c4
  0x000000011c06c6bf: jmpq   0x000000011c054780
  0x000000011c06c6c4: mov    -0x40(%rbp),%r13
  0x000000011c06c6c8: mov    -0x38(%rbp),%r14
  0x000000011c06c6cc: retq   
  0x000000011c06c6cd: mov    0x1(%r13),%edx
  0x000000011c06c6d1: not    %edx
  0x000000011c06c6d3: mov    -0x30(%rbp),%rcx
  0x000000011c06c6d7: shl    $0x2,%edx
  0x000000011c06c6da: mov    0x30(%rcx,%rdx,8),%rbx
  0x000000011c06c6df: mov    0x38(%rcx,%rdx,8),%rax
  0x000000011c06c6e4: mov    0x40(%rcx,%rdx,8),%edx
  0x000000011c06c6e8: test   $0x1000000,%edx
  0x000000011c06c6ee: je     0x000000011c06c719
  0x000000011c06c6f4: push   %rbx
  0x000000011c06c6f5: mov    %rax,%rbx
  0x000000011c06c6f8: mov    -0x18(%rbp),%rax
  0x000000011c06c6fc: mov    0x8(%rax),%rax
  0x000000011c06c700: mov    0x8(%rax),%rax
  0x000000011c06c704: mov    0x10(%rax),%rax
  0x000000011c06c708: mov    0x10(%rax),%rax
  0x000000011c06c70c: mov    (%rax),%rax
  0x000000011c06c70f: mov    0x10(%rax,%rbx,4),%eax
  0x000000011c06c713: shl    $0x3,%rax
  0x000000011c06c717: pop    %rbx
  0x000000011c06c718: push   %rax
  0x000000011c06c719: shr    $0x1c,%edx
  0x000000011c06c71c: movabs $0x1109d87d0,%r10
  0x000000011c06c726: mov    (%r10,%rdx,8),%rdx
  0x000000011c06c72a: push   %rdx
  0x000000011c06c72b: lea    0x8(%rsp),%r13
  0x000000011c06c730: mov    %r13,-0x10(%rbp)
  0x000000011c06c734: jmpq   *0x48(%rbx)
  0x000000011c06c737: nop
  0x000000011c06c738: add    %al,(%rax)
  0x000000011c06c73a: add    %al,(%rax)
  0x000000011c06c73c: add    %al,(%rax)
  0x000000011c06c73e: add    %al,(%rax)

----------------------------------------------------------------------
new  187 new  [0x000000011c06c760, 0x000000011c06c980]  544 bytes

  0x000000011c06c760: push   %rax
  0x000000011c06c761: jmpq   0x000000011c06c79f
  0x000000011c06c766: sub    $0x8,%rsp
  0x000000011c06c76a: vmovss %xmm0,(%rsp)
  0x000000011c06c76f: jmpq   0x000000011c06c79f
  0x000000011c06c774: sub    $0x10,%rsp
  0x000000011c06c778: vmovsd %xmm0,(%rsp)
  0x000000011c06c77d: jmpq   0x000000011c06c79f
  0x000000011c06c782: sub    $0x10,%rsp
  0x000000011c06c786: mov    %rax,(%rsp)
  0x000000011c06c78a: movabs $0x0,%r10
  0x000000011c06c794: mov    %r10,0x8(%rsp)
  0x000000011c06c799: jmpq   0x000000011c06c79f
  0x000000011c06c79e: push   %rax
  0x000000011c06c79f: movzwl 0x1(%r13),%edx
  0x000000011c06c7a4: bswap  %edx
  0x000000011c06c7a6: shr    $0x10,%edx
  0x000000011c06c7a9: mov    -0x18(%rbp),%rcx
  0x000000011c06c7ad: mov    0x8(%rcx),%rcx
  0x000000011c06c7b1: mov    0x8(%rcx),%rcx
  0x000000011c06c7b5: mov    0x8(%rcx),%rax
  0x000000011c06c7b9: cmpb   $0x7,0x4(%rax,%rdx,1)
  0x000000011c06c7be: jne    0x000000011c06c88a
  0x000000011c06c7c4: mov    0x40(%rcx,%rdx,8),%dx
  0x000000011c06c7c9: mov    0x28(%rcx),%rcx
  0x000000011c06c7cd: mov    0x8(%rcx,%rdx,8),%rcx
  0x000000011c06c7d2: push   %rcx
  0x000000011c06c7d3: cmpb   $0x4,0x18a(%rcx)
  0x000000011c06c7da: jne    0x000000011c06c889
  0x000000011c06c7e0: mov    0x8(%rcx),%edx
  0x000000011c06c7e3: test   $0x1,%edx
  0x000000011c06c7e9: jne    0x000000011c06c889
  0x000000011c06c7ef: mov    0x118(%r15),%rax
  0x000000011c06c7f6: lea    (%rax,%rdx,1),%rbx
  0x000000011c06c7fa: cmp    0x128(%r15),%rbx
  0x000000011c06c801: ja     0x000000011c06c889
  0x000000011c06c807: mov    %rbx,0x118(%r15)
  0x000000011c06c80e: jmpq   0x000000011c06c813
  0x000000011c06c813: sub    $0x10,%rdx
  0x000000011c06c817: je     0x000000011c06c82c
  0x000000011c06c81d: xor    %ecx,%ecx
  0x000000011c06c81f: shr    $0x3,%edx
  0x000000011c06c822: mov    %rcx,0x8(%rax,%rdx,8)
  0x000000011c06c827: dec    %rdx
  0x000000011c06c82a: jne    0x000000011c06c822
  0x000000011c06c82c: pop    %rcx
  0x000000011c06c82d: mov    0xb8(%rcx),%rbx
  0x000000011c06c834: mov    %rbx,(%rax)
  0x000000011c06c837: xor    %esi,%esi
  0x000000011c06c839: mov    %esi,0xc(%rax)
  0x000000011c06c83c: movabs $0x800000000,%r12
  0x000000011c06c846: sub    %r12,%rcx
  0x000000011c06c849: xor    %r12,%r12
  0x000000011c06c84c: mov    %ecx,0x8(%rax)
  0x000000011c06c84f: cmpb   $0x0,-0xb6b277b(%rip)        # 0x00000001109ba0db = DTraceAllocProbes
  0x000000011c06c856: je     0x000000011c06c884
  0x000000011c06c85c: push   %rax
  0x000000011c06c85d: mov    %rax,%rdi
  0x000000011c06c860: test   $0xf,%esp
  0x000000011c06c866: je     0x000000011c06c87e
  0x000000011c06c86c: sub    $0x8,%rsp
  0x000000011c06c870: callq  0x00000001106978c2 = SharedRuntime::dtrace_object_alloc(oopDesc*, int)
  0x000000011c06c875: add    $0x8,%rsp
  0x000000011c06c879: jmpq   0x000000011c06c883
  0x000000011c06c87e: callq  0x00000001106978c2 = SharedRuntime::dtrace_object_alloc(oopDesc*, int)
  0x000000011c06c883: pop    %rax
  0x000000011c06c884: jmpq   0x000000011c06c954
  0x000000011c06c889: pop    %rcx
  0x000000011c06c88a: mov    -0x18(%rbp),%rsi
  0x000000011c06c88e: mov    0x8(%rsi),%rsi
  0x000000011c06c892: mov    0x8(%rsi),%rsi
  0x000000011c06c896: movzwl 0x1(%r13),%edx
  0x000000011c06c89b: bswap  %edx
  0x000000011c06c89d: shr    $0x10,%edx
  0x000000011c06c8a0: callq  0x000000011c06c8aa
  0x000000011c06c8a5: jmpq   0x000000011c06c954
  0x000000011c06c8aa: lea    0x8(%rsp),%rax
  0x000000011c06c8af: mov    %r13,-0x40(%rbp)
  0x000000011c06c8b3: mov    %r15,%rdi
  0x000000011c06c8b6: vzeroupper 
  0x000000011c06c8b9: mov    %rbp,0x330(%r15)
  0x000000011c06c8c0: mov    %rax,0x320(%r15)
  0x000000011c06c8c7: test   $0xf,%esp
  0x000000011c06c8cd: je     0x000000011c06c8e5
  0x000000011c06c8d3: sub    $0x8,%rsp
  0x000000011c06c8d7: callq  0x00000001103aa088 = InterpreterRuntime::_new(JavaThread*, ConstantPool*, int)
  0x000000011c06c8dc: add    $0x8,%rsp
  0x000000011c06c8e0: jmpq   0x000000011c06c8ea
  0x000000011c06c8e5: callq  0x00000001103aa088 = InterpreterRuntime::_new(JavaThread*, ConstantPool*, int)
  0x000000011c06c8ea: movabs $0x0,%r10
  0x000000011c06c8f4: mov    %r10,0x320(%r15)
  0x000000011c06c8fb: movabs $0x0,%r10
  0x000000011c06c905: mov    %r10,0x330(%r15)
  0x000000011c06c90c: movabs $0x0,%r10
  0x000000011c06c916: mov    %r10,0x328(%r15)
  0x000000011c06c91d: vzeroupper 
  0x000000011c06c920: cmpq   $0x0,0x8(%r15)
  0x000000011c06c928: je     0x000000011c06c933
  0x000000011c06c92e: jmpq   0x000000011c054780
  0x000000011c06c933: mov    0x380(%r15),%rax
  0x000000011c06c93a: movabs $0x0,%r10
  0x000000011c06c944: mov    %r10,0x380(%r15)
  0x000000011c06c94b: mov    -0x40(%rbp),%r13
  0x000000011c06c94f: mov    -0x38(%rbp),%r14
  0x000000011c06c953: retq   
  0x000000011c06c954: movzbl 0x3(%r13),%ebx
  0x000000011c06c959: add    $0x3,%r13
  0x000000011c06c95d: movabs $0x1109d7220,%r10
  0x000000011c06c967: jmpq   *(%r10,%rbx,8)
  0x000000011c06c96b: nopl   0x0(%rax,%rax,1)
  0x000000011c06c970: add    %al,(%rax)
  0x000000011c06c972: add    %al,(%rax)
  0x000000011c06c974: add    %al,(%rax)
  0x000000011c06c976: add    %al,(%rax)
  0x000000011c06c978: add    %al,(%rax)
  0x000000011c06c97a: add    %al,(%rax)
  0x000000011c06c97c: add    %al,(%rax)
  0x000000011c06c97e: add    %al,(%rax)

----------------------------------------------------------------------
newarray  188 newarray  [0x000000011c06c9a0, 0x000000011c06ca80]  224 bytes

  0x000000011c06c9a0: mov    (%rsp),%eax
  0x000000011c06c9a3: add    $0x8,%rsp
  0x000000011c06c9a7: movzbl 0x1(%r13),%esi
  0x000000011c06c9ac: callq  0x000000011c06c9b6
  0x000000011c06c9b1: jmpq   0x000000011c06ca63
  0x000000011c06c9b6: mov    %rax,%rdx
  0x000000011c06c9b9: lea    0x8(%rsp),%rax
  0x000000011c06c9be: mov    %r13,-0x40(%rbp)
  0x000000011c06c9c2: mov    %r15,%rdi
  0x000000011c06c9c5: vzeroupper 
  0x000000011c06c9c8: mov    %rbp,0x330(%r15)
  0x000000011c06c9cf: mov    %rax,0x320(%r15)
  0x000000011c06c9d6: test   $0xf,%esp
  0x000000011c06c9dc: je     0x000000011c06c9f4
  0x000000011c06c9e2: sub    $0x8,%rsp
  0x000000011c06c9e6: callq  0x00000001103aa15a = InterpreterRuntime::newarray(JavaThread*, BasicType, int)
  0x000000011c06c9eb: add    $0x8,%rsp
  0x000000011c06c9ef: jmpq   0x000000011c06c9f9
  0x000000011c06c9f4: callq  0x00000001103aa15a = InterpreterRuntime::newarray(JavaThread*, BasicType, int)
  0x000000011c06c9f9: movabs $0x0,%r10
  0x000000011c06ca03: mov    %r10,0x320(%r15)
  0x000000011c06ca0a: movabs $0x0,%r10
  0x000000011c06ca14: mov    %r10,0x330(%r15)
  0x000000011c06ca1b: movabs $0x0,%r10
  0x000000011c06ca25: mov    %r10,0x328(%r15)
  0x000000011c06ca2c: vzeroupper 
  0x000000011c06ca2f: cmpq   $0x0,0x8(%r15)
  0x000000011c06ca37: je     0x000000011c06ca42
  0x000000011c06ca3d: jmpq   0x000000011c054780
  0x000000011c06ca42: mov    0x380(%r15),%rax
  0x000000011c06ca49: movabs $0x0,%r10
  0x000000011c06ca53: mov    %r10,0x380(%r15)
  0x000000011c06ca5a: mov    -0x40(%rbp),%r13
  0x000000011c06ca5e: mov    -0x38(%rbp),%r14
  0x000000011c06ca62: retq   
  0x000000011c06ca63: movzbl 0x2(%r13),%ebx
  0x000000011c06ca68: add    $0x2,%r13
  0x000000011c06ca6c: movabs $0x1109d7220,%r10
  0x000000011c06ca76: jmpq   *(%r10,%rbx,8)
  0x000000011c06ca7a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
anewarray  189 anewarray  [0x000000011c06caa0, 0x000000011c06cba0]  256 bytes

  0x000000011c06caa0: mov    (%rsp),%eax
  0x000000011c06caa3: add    $0x8,%rsp
  0x000000011c06caa7: movzwl 0x1(%r13),%edx
  0x000000011c06caac: bswap  %edx
  0x000000011c06caae: shr    $0x10,%edx
  0x000000011c06cab1: mov    -0x18(%rbp),%rsi
  0x000000011c06cab5: mov    0x8(%rsi),%rsi
  0x000000011c06cab9: mov    0x8(%rsi),%rsi
  0x000000011c06cabd: callq  0x000000011c06cac7
  0x000000011c06cac2: jmpq   0x000000011c06cb74
  0x000000011c06cac7: mov    %rax,%rcx
  0x000000011c06caca: lea    0x8(%rsp),%rax
  0x000000011c06cacf: mov    %r13,-0x40(%rbp)
  0x000000011c06cad3: mov    %r15,%rdi
  0x000000011c06cad6: vzeroupper 
  0x000000011c06cad9: mov    %rbp,0x330(%r15)
  0x000000011c06cae0: mov    %rax,0x320(%r15)
  0x000000011c06cae7: test   $0xf,%esp
  0x000000011c06caed: je     0x000000011c06cb05
  0x000000011c06caf3: sub    $0x8,%rsp
  0x000000011c06caf7: callq  0x00000001103aa1e4 = InterpreterRuntime::anewarray(JavaThread*, ConstantPool*, int, int)
  0x000000011c06cafc: add    $0x8,%rsp
  0x000000011c06cb00: jmpq   0x000000011c06cb0a
  0x000000011c06cb05: callq  0x00000001103aa1e4 = InterpreterRuntime::anewarray(JavaThread*, ConstantPool*, int, int)
  0x000000011c06cb0a: movabs $0x0,%r10
  0x000000011c06cb14: mov    %r10,0x320(%r15)
  0x000000011c06cb1b: movabs $0x0,%r10
  0x000000011c06cb25: mov    %r10,0x330(%r15)
  0x000000011c06cb2c: movabs $0x0,%r10
  0x000000011c06cb36: mov    %r10,0x328(%r15)
  0x000000011c06cb3d: vzeroupper 
  0x000000011c06cb40: cmpq   $0x0,0x8(%r15)
  0x000000011c06cb48: je     0x000000011c06cb53
  0x000000011c06cb4e: jmpq   0x000000011c054780
  0x000000011c06cb53: mov    0x380(%r15),%rax
  0x000000011c06cb5a: movabs $0x0,%r10
  0x000000011c06cb64: mov    %r10,0x380(%r15)
  0x000000011c06cb6b: mov    -0x40(%rbp),%r13
  0x000000011c06cb6f: mov    -0x38(%rbp),%r14
  0x000000011c06cb73: retq   
  0x000000011c06cb74: movzbl 0x3(%r13),%ebx
  0x000000011c06cb79: add    $0x3,%r13
  0x000000011c06cb7d: movabs $0x1109d7220,%r10
  0x000000011c06cb87: jmpq   *(%r10,%rbx,8)
  0x000000011c06cb8b: nopl   0x0(%rax,%rax,1)
  0x000000011c06cb90: add    %al,(%rax)
  0x000000011c06cb92: add    %al,(%rax)
  0x000000011c06cb94: add    %al,(%rax)
  0x000000011c06cb96: add    %al,(%rax)
  0x000000011c06cb98: add    %al,(%rax)
  0x000000011c06cb9a: add    %al,(%rax)
  0x000000011c06cb9c: add    %al,(%rax)
  0x000000011c06cb9e: add    %al,(%rax)

----------------------------------------------------------------------
arraylength  190 arraylength  [0x000000011c06cbc0, 0x000000011c06cbe0]  32 bytes

  0x000000011c06cbc0: pop    %rax
  0x000000011c06cbc1: mov    0xc(%rax),%eax
  0x000000011c06cbc4: movzbl 0x1(%r13),%ebx
  0x000000011c06cbc9: inc    %r13
  0x000000011c06cbcc: movabs $0x1109d5220,%r10
  0x000000011c06cbd6: jmpq   *(%r10,%rbx,8)
  0x000000011c06cbda: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
athrow  191 athrow  [0x000000011c06cc00, 0x000000011c06cc20]  32 bytes

  0x000000011c06cc00: pop    %rax
  0x000000011c06cc01: cmp    (%rax),%rax
  0x000000011c06cc04: jmpq   0x000000011c060673
  0x000000011c06cc09: nopl   0x0(%rax)
  0x000000011c06cc10: add    %al,(%rax)
  0x000000011c06cc12: add    %al,(%rax)
  0x000000011c06cc14: add    %al,(%rax)
  0x000000011c06cc16: add    %al,(%rax)
  0x000000011c06cc18: add    %al,(%rax)
  0x000000011c06cc1a: add    %al,(%rax)
  0x000000011c06cc1c: add    %al,(%rax)
  0x000000011c06cc1e: add    %al,(%rax)

----------------------------------------------------------------------
checkcast  192 checkcast  [0x000000011c06cc40, 0x000000011c06cdc0]  384 bytes

  0x000000011c06cc40: pop    %rax
  0x000000011c06cc41: test   %rax,%rax
  0x000000011c06cc44: je     0x000000011c06cd95
  0x000000011c06cc4a: mov    -0x18(%rbp),%rcx
  0x000000011c06cc4e: mov    0x8(%rcx),%rcx
  0x000000011c06cc52: mov    0x8(%rcx),%rcx
  0x000000011c06cc56: mov    0x8(%rcx),%rdx
  0x000000011c06cc5a: movzwl 0x1(%r13),%ebx
  0x000000011c06cc5f: bswap  %ebx
  0x000000011c06cc61: shr    $0x10,%ebx
  0x000000011c06cc64: cmpb   $0x7,0x4(%rdx,%rbx,1)
  0x000000011c06cc69: je     0x000000011c06cd27
  0x000000011c06cc6f: push   %rax
  0x000000011c06cc70: callq  0x000000011c06cc7a
  0x000000011c06cc75: jmpq   0x000000011c06cd0c
  0x000000011c06cc7a: lea    0x8(%rsp),%rax
  0x000000011c06cc7f: mov    %r13,-0x40(%rbp)
  0x000000011c06cc83: mov    %r15,%rdi
  0x000000011c06cc86: vzeroupper 
  0x000000011c06cc89: mov    %rbp,0x330(%r15)
  0x000000011c06cc90: mov    %rax,0x320(%r15)
  0x000000011c06cc97: test   $0xf,%esp
  0x000000011c06cc9d: je     0x000000011c06ccb5
  0x000000011c06cca3: sub    $0x8,%rsp
  0x000000011c06cca7: callq  0x00000001103aa514 = InterpreterRuntime::quicken_io_cc(JavaThread*)
  0x000000011c06ccac: add    $0x8,%rsp
  0x000000011c06ccb0: jmpq   0x000000011c06ccba
  0x000000011c06ccb5: callq  0x00000001103aa514 = InterpreterRuntime::quicken_io_cc(JavaThread*)
  0x000000011c06ccba: movabs $0x0,%r10
  0x000000011c06ccc4: mov    %r10,0x320(%r15)
  0x000000011c06cccb: movabs $0x0,%r10
  0x000000011c06ccd5: mov    %r10,0x330(%r15)
  0x000000011c06ccdc: movabs $0x0,%r10
  0x000000011c06cce6: mov    %r10,0x328(%r15)
  0x000000011c06cced: vzeroupper 
  0x000000011c06ccf0: cmpq   $0x0,0x8(%r15)
  0x000000011c06ccf8: je     0x000000011c06cd03
  0x000000011c06ccfe: jmpq   0x000000011c054780
  0x000000011c06cd03: mov    -0x40(%rbp),%r13
  0x000000011c06cd07: mov    -0x38(%rbp),%r14
  0x000000011c06cd0b: retq   
  0x000000011c06cd0c: mov    0x388(%r15),%rax
  0x000000011c06cd13: movabs $0x0,%r10
  0x000000011c06cd1d: mov    %r10,0x388(%r15)
  0x000000011c06cd24: pop    %rdx
  0x000000011c06cd25: jmp    0x000000011c06cd38
  0x000000011c06cd27: mov    %rax,%rdx
  0x000000011c06cd2a: mov    0x40(%rcx,%rbx,8),%bx
  0x000000011c06cd2f: mov    0x28(%rcx),%rcx
  0x000000011c06cd33: mov    0x8(%rcx,%rbx,8),%rax
  0x000000011c06cd38: mov    0x8(%rdx),%ebx
  0x000000011c06cd3b: movabs $0x800000000,%r12
  0x000000011c06cd45: add    %r12,%rbx
  0x000000011c06cd48: xor    %r12,%r12
  0x000000011c06cd4b: cmp    %rax,%rbx
  0x000000011c06cd4e: je     0x000000011c06cd92
  0x000000011c06cd54: mov    0x10(%rax),%ecx
  0x000000011c06cd57: cmp    (%rbx,%rcx,1),%rax
  0x000000011c06cd5b: je     0x000000011c06cd92
  0x000000011c06cd61: cmp    $0x20,%ecx
  0x000000011c06cd64: jne    0x000000011c06cd8c
  0x000000011c06cd6a: push   %rax
  0x000000011c06cd6b: mov    %rax,%rax
  0x000000011c06cd6e: push   %rdi
  0x000000011c06cd6f: mov    0x28(%rbx),%rdi
  0x000000011c06cd73: mov    (%rdi),%ecx
  0x000000011c06cd75: add    $0x8,%rdi
  0x000000011c06cd79: test   %rax,%rax
  0x000000011c06cd7c: repnz scas %es:(%rdi),%rax
  0x000000011c06cd7f: pop    %rdi
  0x000000011c06cd80: pop    %rax
  0x000000011c06cd81: jne    0x000000011c06cd8c
  0x000000011c06cd83: mov    %rax,0x20(%rbx)
  0x000000011c06cd87: jmpq   0x000000011c06cd92
  0x000000011c06cd8c: push   %rdx
  0x000000011c06cd8d: jmpq   0x000000011c061794
  0x000000011c06cd92: mov    %rdx,%rax
  0x000000011c06cd95: movzbl 0x3(%r13),%ebx
  0x000000011c06cd9a: add    $0x3,%r13
  0x000000011c06cd9e: movabs $0x1109d7220,%r10
  0x000000011c06cda8: jmpq   *(%r10,%rbx,8)
  0x000000011c06cdac: nopl   0x0(%rax)
  0x000000011c06cdb0: add    %al,(%rax)
  0x000000011c06cdb2: add    %al,(%rax)
  0x000000011c06cdb4: add    %al,(%rax)
  0x000000011c06cdb6: add    %al,(%rax)
  0x000000011c06cdb8: add    %al,(%rax)
  0x000000011c06cdba: add    %al,(%rax)
  0x000000011c06cdbc: add    %al,(%rax)
  0x000000011c06cdbe: add    %al,(%rax)

----------------------------------------------------------------------
instanceof  193 instanceof  [0x000000011c06cde0, 0x000000011c06cf60]  384 bytes

  0x000000011c06cde0: pop    %rax
  0x000000011c06cde1: test   %rax,%rax
  0x000000011c06cde4: je     0x000000011c06cf45
  0x000000011c06cdea: mov    -0x18(%rbp),%rcx
  0x000000011c06cdee: mov    0x8(%rcx),%rcx
  0x000000011c06cdf2: mov    0x8(%rcx),%rcx
  0x000000011c06cdf6: mov    0x8(%rcx),%rdx
  0x000000011c06cdfa: movzwl 0x1(%r13),%ebx
  0x000000011c06cdff: bswap  %ebx
  0x000000011c06ce01: shr    $0x10,%ebx
  0x000000011c06ce04: cmpb   $0x7,0x4(%rdx,%rbx,1)
  0x000000011c06ce09: je     0x000000011c06ceda
  0x000000011c06ce0f: push   %rax
  0x000000011c06ce10: callq  0x000000011c06ce1a
  0x000000011c06ce15: jmpq   0x000000011c06ceac
  0x000000011c06ce1a: lea    0x8(%rsp),%rax
  0x000000011c06ce1f: mov    %r13,-0x40(%rbp)
  0x000000011c06ce23: mov    %r15,%rdi
  0x000000011c06ce26: vzeroupper 
  0x000000011c06ce29: mov    %rbp,0x330(%r15)
  0x000000011c06ce30: mov    %rax,0x320(%r15)
  0x000000011c06ce37: test   $0xf,%esp
  0x000000011c06ce3d: je     0x000000011c06ce55
  0x000000011c06ce43: sub    $0x8,%rsp
  0x000000011c06ce47: callq  0x00000001103aa514 = InterpreterRuntime::quicken_io_cc(JavaThread*)
  0x000000011c06ce4c: add    $0x8,%rsp
  0x000000011c06ce50: jmpq   0x000000011c06ce5a
  0x000000011c06ce55: callq  0x00000001103aa514 = InterpreterRuntime::quicken_io_cc(JavaThread*)
  0x000000011c06ce5a: movabs $0x0,%r10
  0x000000011c06ce64: mov    %r10,0x320(%r15)
  0x000000011c06ce6b: movabs $0x0,%r10
  0x000000011c06ce75: mov    %r10,0x330(%r15)
  0x000000011c06ce7c: movabs $0x0,%r10
  0x000000011c06ce86: mov    %r10,0x328(%r15)
  0x000000011c06ce8d: vzeroupper 
  0x000000011c06ce90: cmpq   $0x0,0x8(%r15)
  0x000000011c06ce98: je     0x000000011c06cea3
  0x000000011c06ce9e: jmpq   0x000000011c054780
  0x000000011c06cea3: mov    -0x40(%rbp),%r13
  0x000000011c06cea7: mov    -0x38(%rbp),%r14
  0x000000011c06ceab: retq   
  0x000000011c06ceac: mov    0x388(%r15),%rax
  0x000000011c06ceb3: movabs $0x0,%r10
  0x000000011c06cebd: mov    %r10,0x388(%r15)
  0x000000011c06cec4: pop    %rdx
  0x000000011c06cec5: mov    0x8(%rdx),%edx
  0x000000011c06cec8: movabs $0x800000000,%r12
  0x000000011c06ced2: add    %r12,%rdx
  0x000000011c06ced5: xor    %r12,%r12
  0x000000011c06ced8: jmp    0x000000011c06cefb
  0x000000011c06ceda: mov    0x8(%rax),%edx
  0x000000011c06cedd: movabs $0x800000000,%r12
  0x000000011c06cee7: add    %r12,%rdx
  0x000000011c06ceea: xor    %r12,%r12
  0x000000011c06ceed: mov    0x40(%rcx,%rbx,8),%bx
  0x000000011c06cef2: mov    0x28(%rcx),%rcx
  0x000000011c06cef6: mov    0x8(%rcx,%rbx,8),%rax
  0x000000011c06cefb: cmp    %rax,%rdx
  0x000000011c06cefe: je     0x000000011c06cf40
  0x000000011c06cf04: mov    0x10(%rax),%ecx
  0x000000011c06cf07: cmp    (%rdx,%rcx,1),%rax
  0x000000011c06cf0b: je     0x000000011c06cf40
  0x000000011c06cf11: cmp    $0x20,%ecx
  0x000000011c06cf14: jne    0x000000011c06cf3c
  0x000000011c06cf1a: push   %rax
  0x000000011c06cf1b: mov    %rax,%rax
  0x000000011c06cf1e: push   %rdi
  0x000000011c06cf1f: mov    0x28(%rdx),%rdi
  0x000000011c06cf23: mov    (%rdi),%ecx
  0x000000011c06cf25: add    $0x8,%rdi
  0x000000011c06cf29: test   %rax,%rax
  0x000000011c06cf2c: repnz scas %es:(%rdi),%rax
  0x000000011c06cf2f: pop    %rdi
  0x000000011c06cf30: pop    %rax
  0x000000011c06cf31: jne    0x000000011c06cf3c
  0x000000011c06cf33: mov    %rax,0x20(%rdx)
  0x000000011c06cf37: jmpq   0x000000011c06cf40
  0x000000011c06cf3c: xor    %eax,%eax
  0x000000011c06cf3e: jmp    0x000000011c06cf45
  0x000000011c06cf40: mov    $0x1,%eax
  0x000000011c06cf45: movzbl 0x3(%r13),%ebx
  0x000000011c06cf4a: add    $0x3,%r13
  0x000000011c06cf4e: movabs $0x1109d5220,%r10
  0x000000011c06cf58: jmpq   *(%r10,%rbx,8)
  0x000000011c06cf5c: nopl   0x0(%rax)

----------------------------------------------------------------------
monitorenter  194 monitorenter  [0x000000011c06cf80, 0x000000011c06d1a0]  544 bytes

  0x000000011c06cf80: pop    %rax
  0x000000011c06cf81: cmp    (%rax),%rax
  0x000000011c06cf84: xor    %esi,%esi
  0x000000011c06cf86: mov    -0x48(%rbp),%rcx
  0x000000011c06cf8a: lea    -0x48(%rbp),%rdx
  0x000000011c06cf8e: jmp    0x000000011c06cfa6
  0x000000011c06cf90: cmpq   $0x0,0x8(%rcx)
  0x000000011c06cf98: cmove  %rcx,%rsi
  0x000000011c06cf9c: cmp    0x8(%rcx),%rax
  0x000000011c06cfa0: je     0x000000011c06cfab
  0x000000011c06cfa2: add    $0x10,%rcx
  0x000000011c06cfa6: cmp    %rdx,%rcx
  0x000000011c06cfa9: jne    0x000000011c06cf90
  0x000000011c06cfab: test   %rsi,%rsi
  0x000000011c06cfae: jne    0x000000011c06cfdc
  0x000000011c06cfb4: mov    -0x48(%rbp),%rsi
  0x000000011c06cfb8: sub    $0x10,%rsp
  0x000000011c06cfbc: sub    $0x10,%rsi
  0x000000011c06cfc0: mov    %rsp,%rcx
  0x000000011c06cfc3: mov    %rsi,-0x48(%rbp)
  0x000000011c06cfc7: jmpq   0x000000011c06cfd7
  0x000000011c06cfcc: mov    0x10(%rcx),%rdx
  0x000000011c06cfd0: mov    %rdx,(%rcx)
  0x000000011c06cfd3: add    $0x8,%rcx
  0x000000011c06cfd7: cmp    %rsi,%rcx
  0x000000011c06cfda: jne    0x000000011c06cfcc
  0x000000011c06cfdc: inc    %r13
  0x000000011c06cfdf: mov    %rax,0x8(%rsi)
  0x000000011c06cfe3: mov    0x8(%rsi),%rcx
  0x000000011c06cfe7: mov    (%rcx),%rax
  0x000000011c06cfea: mov    %rax,%rbx
  0x000000011c06cfed: and    $0x7,%rbx
  0x000000011c06cff1: cmp    $0x5,%rbx
  0x000000011c06cff5: jne    0x000000011c06d0a0
  0x000000011c06cffb: mov    0x8(%rcx),%ebx
  0x000000011c06cffe: movabs $0x800000000,%r12
  0x000000011c06d008: add    %r12,%rbx
  0x000000011c06d00b: xor    %r12,%r12
  0x000000011c06d00e: mov    0xb8(%rbx),%rbx
  0x000000011c06d015: or     %r15,%rbx
  0x000000011c06d018: xor    %rax,%rbx
  0x000000011c06d01b: and    $0xffffffffffffff87,%rbx
  0x000000011c06d01f: je     0x000000011c06d165
  0x000000011c06d025: test   $0x7,%rbx
  0x000000011c06d02c: jne    0x000000011c06d081
  0x000000011c06d02e: test   $0x300,%rbx
  0x000000011c06d035: jne    0x000000011c06d054
  0x000000011c06d037: and    $0x37f,%rax
  0x000000011c06d03e: mov    %rax,%rbx
  0x000000011c06d041: or     %r15,%rbx
  0x000000011c06d044: lock cmpxchg %rbx,(%rcx)
  0x000000011c06d049: jne    0x000000011c06d0c9
  0x000000011c06d04f: jmpq   0x000000011c06d165
  0x000000011c06d054: mov    0x8(%rcx),%ebx
  0x000000011c06d057: movabs $0x800000000,%r12
  0x000000011c06d061: add    %r12,%rbx
  0x000000011c06d064: xor    %r12,%r12
  0x000000011c06d067: mov    0xb8(%rbx),%rbx
  0x000000011c06d06e: or     %r15,%rbx
  0x000000011c06d071: lock cmpxchg %rbx,(%rcx)
  0x000000011c06d076: jne    0x000000011c06d0c9
  0x000000011c06d07c: jmpq   0x000000011c06d165
  0x000000011c06d081: mov    0x8(%rcx),%ebx
  0x000000011c06d084: movabs $0x800000000,%r12
  0x000000011c06d08e: add    %r12,%rbx
  0x000000011c06d091: xor    %r12,%r12
  0x000000011c06d094: mov    0xb8(%rbx),%rbx
  0x000000011c06d09b: lock cmpxchg %rbx,(%rcx)
  0x000000011c06d0a0: mov    $0x1,%eax
  0x000000011c06d0a5: or     (%rcx),%rax
  0x000000011c06d0a8: mov    %rax,(%rsi)
  0x000000011c06d0ab: lock cmpxchg %rsi,(%rcx)
  0x000000011c06d0b0: je     0x000000011c06d165
  0x000000011c06d0b6: sub    %rsp,%rax
  0x000000011c06d0b9: and    $0xfffffffffffff007,%rax
  0x000000011c06d0c0: mov    %rax,(%rsi)
  0x000000011c06d0c3: je     0x000000011c06d165
  0x000000011c06d0c9: callq  0x000000011c06d0d3
  0x000000011c06d0ce: jmpq   0x000000011c06d165
  0x000000011c06d0d3: lea    0x8(%rsp),%rax
  0x000000011c06d0d8: mov    %r13,-0x40(%rbp)
  0x000000011c06d0dc: mov    %r15,%rdi
  0x000000011c06d0df: vzeroupper 
  0x000000011c06d0e2: mov    %rbp,0x330(%r15)
  0x000000011c06d0e9: mov    %rax,0x320(%r15)
  0x000000011c06d0f0: test   $0xf,%esp
  0x000000011c06d0f6: je     0x000000011c06d10e
  0x000000011c06d0fc: sub    $0x8,%rsp
  0x000000011c06d100: callq  0x00000001103abba4 = InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*)
  0x000000011c06d105: add    $0x8,%rsp
  0x000000011c06d109: jmpq   0x000000011c06d113
  0x000000011c06d10e: callq  0x00000001103abba4 = InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*)
  0x000000011c06d113: movabs $0x0,%r10
  0x000000011c06d11d: mov    %r10,0x320(%r15)
  0x000000011c06d124: movabs $0x0,%r10
  0x000000011c06d12e: mov    %r10,0x330(%r15)
  0x000000011c06d135: movabs $0x0,%r10
  0x000000011c06d13f: mov    %r10,0x328(%r15)
  0x000000011c06d146: vzeroupper 
  0x000000011c06d149: cmpq   $0x0,0x8(%r15)
  0x000000011c06d151: je     0x000000011c06d15c
  0x000000011c06d157: jmpq   0x000000011c054780
  0x000000011c06d15c: mov    -0x40(%rbp),%r13
  0x000000011c06d160: mov    -0x38(%rbp),%r14
  0x000000011c06d164: retq   
  0x000000011c06d165: mov    %r13,-0x40(%rbp)
  0x000000011c06d169: mov    %eax,-0x14000(%rsp)
  0x000000011c06d170: movzbl 0x0(%r13),%ebx
  0x000000011c06d175: movabs $0x1109d7a20,%r10
  0x000000011c06d17f: jmpq   *(%r10,%rbx,8)
  0x000000011c06d183: nopl   0x0(%rax,%rax,1)
  0x000000011c06d188: add    %al,(%rax)
  0x000000011c06d18a: add    %al,(%rax)
  0x000000011c06d18c: add    %al,(%rax)
  0x000000011c06d18e: add    %al,(%rax)
  0x000000011c06d190: add    %al,(%rax)
  0x000000011c06d192: add    %al,(%rax)
  0x000000011c06d194: add    %al,(%rax)
  0x000000011c06d196: add    %al,(%rax)
  0x000000011c06d198: add    %al,(%rax)
  0x000000011c06d19a: add    %al,(%rax)
  0x000000011c06d19c: add    %al,(%rax)
  0x000000011c06d19e: add    %al,(%rax)

----------------------------------------------------------------------
monitorexit  195 monitorexit  [0x000000011c06d1c0, 0x000000011c06d3a0]  480 bytes

  0x000000011c06d1c0: pop    %rax
  0x000000011c06d1c1: cmp    (%rax),%rax
  0x000000011c06d1c4: mov    -0x48(%rbp),%rsi
  0x000000011c06d1c8: lea    -0x48(%rbp),%rdx
  0x000000011c06d1cc: jmp    0x000000011c06d1dc
  0x000000011c06d1ce: cmp    0x8(%rsi),%rax
  0x000000011c06d1d2: je     0x000000011c06d291
  0x000000011c06d1d8: add    $0x10,%rsi
  0x000000011c06d1dc: cmp    %rdx,%rsi
  0x000000011c06d1df: jne    0x000000011c06d1ce
  0x000000011c06d1e1: callq  0x000000011c06d1eb
  0x000000011c06d1e6: jmpq   0x000000011c06d27d
  0x000000011c06d1eb: lea    0x8(%rsp),%rax
  0x000000011c06d1f0: mov    %r13,-0x40(%rbp)
  0x000000011c06d1f4: mov    %r15,%rdi
  0x000000011c06d1f7: vzeroupper 
  0x000000011c06d1fa: mov    %rbp,0x330(%r15)
  0x000000011c06d201: mov    %rax,0x320(%r15)
  0x000000011c06d208: test   $0xf,%esp
  0x000000011c06d20e: je     0x000000011c06d226
  0x000000011c06d214: sub    $0x8,%rsp
  0x000000011c06d218: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c06d21d: add    $0x8,%rsp
  0x000000011c06d221: jmpq   0x000000011c06d22b
  0x000000011c06d226: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c06d22b: movabs $0x0,%r10
  0x000000011c06d235: mov    %r10,0x320(%r15)
  0x000000011c06d23c: movabs $0x0,%r10
  0x000000011c06d246: mov    %r10,0x330(%r15)
  0x000000011c06d24d: movabs $0x0,%r10
  0x000000011c06d257: mov    %r10,0x328(%r15)
  0x000000011c06d25e: vzeroupper 
  0x000000011c06d261: cmpq   $0x0,0x8(%r15)
  0x000000011c06d269: je     0x000000011c06d274
  0x000000011c06d26f: jmpq   0x000000011c054780
  0x000000011c06d274: mov    -0x40(%rbp),%r13
  0x000000011c06d278: mov    -0x38(%rbp),%r14
  0x000000011c06d27c: retq   
  0x000000011c06d27d: movabs $0x1107f3493,%rdi
  0x000000011c06d287: and    $0xfffffffffffffff0,%rsp
  0x000000011c06d28b: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c06d290: hlt    
  0x000000011c06d291: push   %rax
  0x000000011c06d292: mov    %r13,-0x40(%rbp)
  0x000000011c06d296: lea    (%rsi),%rax
  0x000000011c06d299: mov    0x8(%rsi),%rcx
  0x000000011c06d29d: movq   $0x0,0x8(%rsi)
  0x000000011c06d2a5: mov    (%rcx),%rdx
  0x000000011c06d2a8: and    $0x7,%rdx
  0x000000011c06d2ac: cmp    $0x5,%rdx
  0x000000011c06d2b0: je     0x000000011c06d36d
  0x000000011c06d2b6: mov    (%rax),%rdx
  0x000000011c06d2b9: test   %rdx,%rdx
  0x000000011c06d2bc: je     0x000000011c06d36d
  0x000000011c06d2c2: lock cmpxchg %rdx,(%rcx)
  0x000000011c06d2c7: je     0x000000011c06d36d
  0x000000011c06d2cd: mov    %rcx,0x8(%rsi)
  0x000000011c06d2d1: callq  0x000000011c06d2db
  0x000000011c06d2d6: jmpq   0x000000011c06d36d
  0x000000011c06d2db: lea    0x8(%rsp),%rax
  0x000000011c06d2e0: mov    %r13,-0x40(%rbp)
  0x000000011c06d2e4: mov    %r15,%rdi
  0x000000011c06d2e7: vzeroupper 
  0x000000011c06d2ea: mov    %rbp,0x330(%r15)
  0x000000011c06d2f1: mov    %rax,0x320(%r15)
  0x000000011c06d2f8: test   $0xf,%esp
  0x000000011c06d2fe: je     0x000000011c06d316
  0x000000011c06d304: sub    $0x8,%rsp
  0x000000011c06d308: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c06d30d: add    $0x8,%rsp
  0x000000011c06d311: jmpq   0x000000011c06d31b
  0x000000011c06d316: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c06d31b: movabs $0x0,%r10
  0x000000011c06d325: mov    %r10,0x320(%r15)
  0x000000011c06d32c: movabs $0x0,%r10
  0x000000011c06d336: mov    %r10,0x330(%r15)
  0x000000011c06d33d: movabs $0x0,%r10
  0x000000011c06d347: mov    %r10,0x328(%r15)
  0x000000011c06d34e: vzeroupper 
  0x000000011c06d351: cmpq   $0x0,0x8(%r15)
  0x000000011c06d359: je     0x000000011c06d364
  0x000000011c06d35f: jmpq   0x000000011c054780
  0x000000011c06d364: mov    -0x40(%rbp),%r13
  0x000000011c06d368: mov    -0x38(%rbp),%r14
  0x000000011c06d36c: retq   
  0x000000011c06d36d: mov    -0x40(%rbp),%r13
  0x000000011c06d371: pop    %rax
  0x000000011c06d372: movzbl 0x1(%r13),%ebx
  0x000000011c06d377: inc    %r13
  0x000000011c06d37a: movabs $0x1109d7a20,%r10
  0x000000011c06d384: jmpq   *(%r10,%rbx,8)
  0x000000011c06d388: add    %al,(%rax)
  0x000000011c06d38a: add    %al,(%rax)
  0x000000011c06d38c: add    %al,(%rax)
  0x000000011c06d38e: add    %al,(%rax)
  0x000000011c06d390: add    %al,(%rax)
  0x000000011c06d392: add    %al,(%rax)
  0x000000011c06d394: add    %al,(%rax)
  0x000000011c06d396: add    %al,(%rax)
  0x000000011c06d398: add    %al,(%rax)
  0x000000011c06d39a: add    %al,(%rax)
  0x000000011c06d39c: add    %al,(%rax)
  0x000000011c06d39e: add    %al,(%rax)

----------------------------------------------------------------------
wide  196 wide  [0x000000011c06d3c0, 0x000000011c06d420]  96 bytes

  0x000000011c06d3c0: push   %rax
  0x000000011c06d3c1: jmpq   0x000000011c06d3ff
  0x000000011c06d3c6: sub    $0x8,%rsp
  0x000000011c06d3ca: vmovss %xmm0,(%rsp)
  0x000000011c06d3cf: jmpq   0x000000011c06d3ff
  0x000000011c06d3d4: sub    $0x10,%rsp
  0x000000011c06d3d8: vmovsd %xmm0,(%rsp)
  0x000000011c06d3dd: jmpq   0x000000011c06d3ff
  0x000000011c06d3e2: sub    $0x10,%rsp
  0x000000011c06d3e6: mov    %rax,(%rsp)
  0x000000011c06d3ea: movabs $0x0,%r10
  0x000000011c06d3f4: mov    %r10,0x8(%rsp)
  0x000000011c06d3f9: jmpq   0x000000011c06d3ff
  0x000000011c06d3fe: push   %rax
  0x000000011c06d3ff: movzbl 0x1(%r13),%ebx
  0x000000011c06d404: movabs $0x1109dd820,%r10
  0x000000011c06d40e: jmpq   *(%r10,%rbx,8)
  0x000000011c06d412: nopw   0x0(%rax,%rax,1)
  0x000000011c06d418: add    %al,(%rax)
  0x000000011c06d41a: add    %al,(%rax)
  0x000000011c06d41c: add    %al,(%rax)
  0x000000011c06d41e: add    %al,(%rax)

----------------------------------------------------------------------
multianewarray  197 multianewarray  [0x000000011c06d440, 0x000000011c06d560]  288 bytes

  0x000000011c06d440: push   %rax
  0x000000011c06d441: jmpq   0x000000011c06d47f
  0x000000011c06d446: sub    $0x8,%rsp
  0x000000011c06d44a: vmovss %xmm0,(%rsp)
  0x000000011c06d44f: jmpq   0x000000011c06d47f
  0x000000011c06d454: sub    $0x10,%rsp
  0x000000011c06d458: vmovsd %xmm0,(%rsp)
  0x000000011c06d45d: jmpq   0x000000011c06d47f
  0x000000011c06d462: sub    $0x10,%rsp
  0x000000011c06d466: mov    %rax,(%rsp)
  0x000000011c06d46a: movabs $0x0,%r10
  0x000000011c06d474: mov    %r10,0x8(%rsp)
  0x000000011c06d479: jmpq   0x000000011c06d47f
  0x000000011c06d47e: push   %rax
  0x000000011c06d47f: movzbl 0x3(%r13),%eax
  0x000000011c06d484: lea    -0x8(%rsp,%rax,8),%rsi
  0x000000011c06d489: callq  0x000000011c06d493
  0x000000011c06d48e: jmpq   0x000000011c06d53d
  0x000000011c06d493: lea    0x8(%rsp),%rax
  0x000000011c06d498: mov    %r13,-0x40(%rbp)
  0x000000011c06d49c: mov    %r15,%rdi
  0x000000011c06d49f: vzeroupper 
  0x000000011c06d4a2: mov    %rbp,0x330(%r15)
  0x000000011c06d4a9: mov    %rax,0x320(%r15)
  0x000000011c06d4b0: test   $0xf,%esp
  0x000000011c06d4b6: je     0x000000011c06d4ce
  0x000000011c06d4bc: sub    $0x8,%rsp
  0x000000011c06d4c0: callq  0x00000001103aa288 = InterpreterRuntime::multianewarray(JavaThread*, int*)
  0x000000011c06d4c5: add    $0x8,%rsp
  0x000000011c06d4c9: jmpq   0x000000011c06d4d3
  0x000000011c06d4ce: callq  0x00000001103aa288 = InterpreterRuntime::multianewarray(JavaThread*, int*)
  0x000000011c06d4d3: movabs $0x0,%r10
  0x000000011c06d4dd: mov    %r10,0x320(%r15)
  0x000000011c06d4e4: movabs $0x0,%r10
  0x000000011c06d4ee: mov    %r10,0x330(%r15)
  0x000000011c06d4f5: movabs $0x0,%r10
  0x000000011c06d4ff: mov    %r10,0x328(%r15)
  0x000000011c06d506: vzeroupper 
  0x000000011c06d509: cmpq   $0x0,0x8(%r15)
  0x000000011c06d511: je     0x000000011c06d51c
  0x000000011c06d517: jmpq   0x000000011c054780
  0x000000011c06d51c: mov    0x380(%r15),%rax
  0x000000011c06d523: movabs $0x0,%r10
  0x000000011c06d52d: mov    %r10,0x380(%r15)
  0x000000011c06d534: mov    -0x40(%rbp),%r13
  0x000000011c06d538: mov    -0x38(%rbp),%r14
  0x000000011c06d53c: retq   
  0x000000011c06d53d: movzbl 0x3(%r13),%ebx
  0x000000011c06d542: lea    (%rsp,%rbx,8),%rsp
  0x000000011c06d546: movzbl 0x4(%r13),%ebx
  0x000000011c06d54b: add    $0x4,%r13
  0x000000011c06d54f: movabs $0x1109d7220,%r10
  0x000000011c06d559: jmpq   *(%r10,%rbx,8)
  0x000000011c06d55d: data16 xchg %ax,%ax

----------------------------------------------------------------------
ifnull  198 ifnull  [0x000000011c06d580, 0x000000011c06d5e0]  96 bytes

  0x000000011c06d580: pop    %rax
  0x000000011c06d581: test   %rax,%rax
  0x000000011c06d584: jne    0x000000011c06d5c7
  0x000000011c06d58a: mov    -0x18(%rbp),%rcx
  0x000000011c06d58e: movswl 0x1(%r13),%edx
  0x000000011c06d593: bswap  %edx
  0x000000011c06d595: sar    $0x10,%edx
  0x000000011c06d598: movslq %edx,%rdx
  0x000000011c06d59b: add    %rdx,%r13
  0x000000011c06d59e: movzbl 0x0(%r13),%ebx
  0x000000011c06d5a3: testb  $0x8,0x108(%r15)
  0x000000011c06d5ab: je     0x000000011c06d5b9
  0x000000011c06d5ad: movabs $0x1109dd020,%r10
  0x000000011c06d5b7: jmp    0x000000011c06d5c3
  0x000000011c06d5b9: movabs $0x1109d7a20,%r10
  0x000000011c06d5c3: jmpq   *(%r10,%rbx,8)
  0x000000011c06d5c7: movzbl 0x3(%r13),%ebx
  0x000000011c06d5cc: add    $0x3,%r13
  0x000000011c06d5d0: movabs $0x1109d7a20,%r10
  0x000000011c06d5da: jmpq   *(%r10,%rbx,8)
  0x000000011c06d5de: xchg   %ax,%ax

----------------------------------------------------------------------
ifnonnull  199 ifnonnull  [0x000000011c06d600, 0x000000011c06d660]  96 bytes

  0x000000011c06d600: pop    %rax
  0x000000011c06d601: test   %rax,%rax
  0x000000011c06d604: je     0x000000011c06d647
  0x000000011c06d60a: mov    -0x18(%rbp),%rcx
  0x000000011c06d60e: movswl 0x1(%r13),%edx
  0x000000011c06d613: bswap  %edx
  0x000000011c06d615: sar    $0x10,%edx
  0x000000011c06d618: movslq %edx,%rdx
  0x000000011c06d61b: add    %rdx,%r13
  0x000000011c06d61e: movzbl 0x0(%r13),%ebx
  0x000000011c06d623: testb  $0x8,0x108(%r15)
  0x000000011c06d62b: je     0x000000011c06d639
  0x000000011c06d62d: movabs $0x1109dd020,%r10
  0x000000011c06d637: jmp    0x000000011c06d643
  0x000000011c06d639: movabs $0x1109d7a20,%r10
  0x000000011c06d643: jmpq   *(%r10,%rbx,8)
  0x000000011c06d647: movzbl 0x3(%r13),%ebx
  0x000000011c06d64c: add    $0x3,%r13
  0x000000011c06d650: movabs $0x1109d7a20,%r10
  0x000000011c06d65a: jmpq   *(%r10,%rbx,8)
  0x000000011c06d65e: xchg   %ax,%ax

----------------------------------------------------------------------
goto_w  200 goto_w  [0x000000011c06d680, 0x000000011c06d720]  160 bytes

  0x000000011c06d680: push   %rax
  0x000000011c06d681: jmpq   0x000000011c06d6bf
  0x000000011c06d686: sub    $0x8,%rsp
  0x000000011c06d68a: vmovss %xmm0,(%rsp)
  0x000000011c06d68f: jmpq   0x000000011c06d6bf
  0x000000011c06d694: sub    $0x10,%rsp
  0x000000011c06d698: vmovsd %xmm0,(%rsp)
  0x000000011c06d69d: jmpq   0x000000011c06d6bf
  0x000000011c06d6a2: sub    $0x10,%rsp
  0x000000011c06d6a6: mov    %rax,(%rsp)
  0x000000011c06d6aa: movabs $0x0,%r10
  0x000000011c06d6b4: mov    %r10,0x8(%rsp)
  0x000000011c06d6b9: jmpq   0x000000011c06d6bf
  0x000000011c06d6be: push   %rax
  0x000000011c06d6bf: mov    -0x18(%rbp),%rcx
  0x000000011c06d6c3: mov    0x1(%r13),%edx
  0x000000011c06d6c7: bswap  %edx
  0x000000011c06d6c9: movslq %edx,%rdx
  0x000000011c06d6cc: add    %rdx,%r13
  0x000000011c06d6cf: movzbl 0x0(%r13),%ebx
  0x000000011c06d6d4: testb  $0x8,0x108(%r15)
  0x000000011c06d6dc: je     0x000000011c06d6ea
  0x000000011c06d6de: movabs $0x1109dd020,%r10
  0x000000011c06d6e8: jmp    0x000000011c06d6f4
  0x000000011c06d6ea: movabs $0x1109d7a20,%r10
  0x000000011c06d6f4: jmpq   *(%r10,%rbx,8)
  0x000000011c06d6f8: movzbl 0x5(%r13),%ebx
  0x000000011c06d6fd: add    $0x5,%r13
  0x000000011c06d701: movabs $0x1109d7a20,%r10
  0x000000011c06d70b: jmpq   *(%r10,%rbx,8)
  0x000000011c06d70f: nop
  0x000000011c06d710: add    %al,(%rax)
  0x000000011c06d712: add    %al,(%rax)
  0x000000011c06d714: add    %al,(%rax)
  0x000000011c06d716: add    %al,(%rax)
  0x000000011c06d718: add    %al,(%rax)
  0x000000011c06d71a: add    %al,(%rax)
  0x000000011c06d71c: add    %al,(%rax)
  0x000000011c06d71e: add    %al,(%rax)

----------------------------------------------------------------------
jsr_w  201 jsr_w  [0x000000011c06d740, 0x000000011c06d7e0]  160 bytes

  0x000000011c06d740: push   %rax
  0x000000011c06d741: jmpq   0x000000011c06d77f
  0x000000011c06d746: sub    $0x8,%rsp
  0x000000011c06d74a: vmovss %xmm0,(%rsp)
  0x000000011c06d74f: jmpq   0x000000011c06d77f
  0x000000011c06d754: sub    $0x10,%rsp
  0x000000011c06d758: vmovsd %xmm0,(%rsp)
  0x000000011c06d75d: jmpq   0x000000011c06d77f
  0x000000011c06d762: sub    $0x10,%rsp
  0x000000011c06d766: mov    %rax,(%rsp)
  0x000000011c06d76a: movabs $0x0,%r10
  0x000000011c06d774: mov    %r10,0x8(%rsp)
  0x000000011c06d779: jmpq   0x000000011c06d77f
  0x000000011c06d77e: push   %rax
  0x000000011c06d77f: mov    -0x18(%rbp),%rcx
  0x000000011c06d783: mov    0x1(%r13),%edx
  0x000000011c06d787: bswap  %edx
  0x000000011c06d789: movslq %edx,%rdx
  0x000000011c06d78c: movzbl 0x0(%r13,%rdx,1),%ebx
  0x000000011c06d792: lea    -0x33(%r13),%rax
  0x000000011c06d796: sub    0x8(%rcx),%rax
  0x000000011c06d79a: add    %rdx,%r13
  0x000000011c06d79d: push   %rax
  0x000000011c06d79e: testb  $0x8,0x108(%r15)
  0x000000011c06d7a6: je     0x000000011c06d7b4
  0x000000011c06d7a8: movabs $0x1109dd020,%r10
  0x000000011c06d7b2: jmp    0x000000011c06d7be
  0x000000011c06d7b4: movabs $0x1109d7a20,%r10
  0x000000011c06d7be: jmpq   *(%r10,%rbx,8)
  0x000000011c06d7c2: movzbl 0x5(%r13),%ebx
  0x000000011c06d7c7: add    $0x5,%r13
  0x000000011c06d7cb: movabs $0x1109d7a20,%r10
  0x000000011c06d7d5: jmpq   *(%r10,%rbx,8)
  0x000000011c06d7d9: nopl   0x0(%rax)

----------------------------------------------------------------------
breakpoint  202 breakpoint  [0x000000011c06d800, 0x000000011c06d9a0]  416 bytes

  0x000000011c06d800: push   %rax
  0x000000011c06d801: jmpq   0x000000011c06d83f
  0x000000011c06d806: sub    $0x8,%rsp
  0x000000011c06d80a: vmovss %xmm0,(%rsp)
  0x000000011c06d80f: jmpq   0x000000011c06d83f
  0x000000011c06d814: sub    $0x10,%rsp
  0x000000011c06d818: vmovsd %xmm0,(%rsp)
  0x000000011c06d81d: jmpq   0x000000011c06d83f
  0x000000011c06d822: sub    $0x10,%rsp
  0x000000011c06d826: mov    %rax,(%rsp)
  0x000000011c06d82a: movabs $0x0,%r10
  0x000000011c06d834: mov    %r10,0x8(%rsp)
  0x000000011c06d839: jmpq   0x000000011c06d83f
  0x000000011c06d83e: push   %rax
  0x000000011c06d83f: mov    -0x18(%rbp),%rsi
  0x000000011c06d843: callq  0x000000011c06d84d
  0x000000011c06d848: jmpq   0x000000011c06d8e2
  0x000000011c06d84d: mov    %r13,%rdx
  0x000000011c06d850: lea    0x8(%rsp),%rax
  0x000000011c06d855: mov    %r13,-0x40(%rbp)
  0x000000011c06d859: mov    %r15,%rdi
  0x000000011c06d85c: vzeroupper 
  0x000000011c06d85f: mov    %rbp,0x330(%r15)
  0x000000011c06d866: mov    %rax,0x320(%r15)
  0x000000011c06d86d: test   $0xf,%esp
  0x000000011c06d873: je     0x000000011c06d88b
  0x000000011c06d879: sub    $0x8,%rsp
  0x000000011c06d87d: callq  0x00000001103abf5a = InterpreterRuntime::get_original_bytecode_at(JavaThread*, Method*, unsigned char*)
  0x000000011c06d882: add    $0x8,%rsp
  0x000000011c06d886: jmpq   0x000000011c06d890
  0x000000011c06d88b: callq  0x00000001103abf5a = InterpreterRuntime::get_original_bytecode_at(JavaThread*, Method*, unsigned char*)
  0x000000011c06d890: movabs $0x0,%r10
  0x000000011c06d89a: mov    %r10,0x320(%r15)
  0x000000011c06d8a1: movabs $0x0,%r10
  0x000000011c06d8ab: mov    %r10,0x330(%r15)
  0x000000011c06d8b2: movabs $0x0,%r10
  0x000000011c06d8bc: mov    %r10,0x328(%r15)
  0x000000011c06d8c3: vzeroupper 
  0x000000011c06d8c6: cmpq   $0x0,0x8(%r15)
  0x000000011c06d8ce: je     0x000000011c06d8d9
  0x000000011c06d8d4: jmpq   0x000000011c054780
  0x000000011c06d8d9: mov    -0x40(%rbp),%r13
  0x000000011c06d8dd: mov    -0x38(%rbp),%r14
  0x000000011c06d8e1: retq   
  0x000000011c06d8e2: mov    %rax,%rbx
  0x000000011c06d8e5: mov    -0x18(%rbp),%rsi
  0x000000011c06d8e9: callq  0x000000011c06d8f3
  0x000000011c06d8ee: jmpq   0x000000011c06d988
  0x000000011c06d8f3: mov    %r13,%rdx
  0x000000011c06d8f6: lea    0x8(%rsp),%rax
  0x000000011c06d8fb: mov    %r13,-0x40(%rbp)
  0x000000011c06d8ff: mov    %r15,%rdi
  0x000000011c06d902: vzeroupper 
  0x000000011c06d905: mov    %rbp,0x330(%r15)
  0x000000011c06d90c: mov    %rax,0x320(%r15)
  0x000000011c06d913: test   $0xf,%esp
  0x000000011c06d919: je     0x000000011c06d931
  0x000000011c06d91f: sub    $0x8,%rsp
  0x000000011c06d923: callq  0x00000001103ac07a = InterpreterRuntime::_breakpoint(JavaThread*, Method*, unsigned char*)
  0x000000011c06d928: add    $0x8,%rsp
  0x000000011c06d92c: jmpq   0x000000011c06d936
  0x000000011c06d931: callq  0x00000001103ac07a = InterpreterRuntime::_breakpoint(JavaThread*, Method*, unsigned char*)
  0x000000011c06d936: movabs $0x0,%r10
  0x000000011c06d940: mov    %r10,0x320(%r15)
  0x000000011c06d947: movabs $0x0,%r10
  0x000000011c06d951: mov    %r10,0x330(%r15)
  0x000000011c06d958: movabs $0x0,%r10
  0x000000011c06d962: mov    %r10,0x328(%r15)
  0x000000011c06d969: vzeroupper 
  0x000000011c06d96c: cmpq   $0x0,0x8(%r15)
  0x000000011c06d974: je     0x000000011c06d97f
  0x000000011c06d97a: jmpq   0x000000011c054780
  0x000000011c06d97f: mov    -0x40(%rbp),%r13
  0x000000011c06d983: mov    -0x38(%rbp),%r14
  0x000000011c06d987: retq   
  0x000000011c06d988: movabs $0x1109d2a20,%r10
  0x000000011c06d992: jmpq   *(%r10,%rbx,8)
  0x000000011c06d996: xchg   %ax,%ax
  0x000000011c06d998: add    %al,(%rax)
  0x000000011c06d99a: add    %al,(%rax)
  0x000000011c06d99c: add    %al,(%rax)
  0x000000011c06d99e: add    %al,(%rax)

----------------------------------------------------------------------
fast_agetfield  203 fast_agetfield  [0x000000011c06d9c0, 0x000000011c06da00]  64 bytes

  0x000000011c06d9c0: pop    %rax
  0x000000011c06d9c1: movzwl 0x1(%r13),%ebx
  0x000000011c06d9c6: mov    -0x30(%rbp),%rcx
  0x000000011c06d9ca: shl    $0x2,%ebx
  0x000000011c06d9cd: mov    0x38(%rcx,%rbx,8),%rbx
  0x000000011c06d9d2: cmp    (%rax),%rax
  0x000000011c06d9d5: mov    (%rax,%rbx,1),%eax
  0x000000011c06d9d8: shl    $0x3,%rax
  0x000000011c06d9dc: movzbl 0x3(%r13),%ebx
  0x000000011c06d9e1: add    $0x3,%r13
  0x000000011c06d9e5: movabs $0x1109d7220,%r10
  0x000000011c06d9ef: jmpq   *(%r10,%rbx,8)
  0x000000011c06d9f3: nopl   0x0(%rax,%rax,1)
  0x000000011c06d9f8: add    %al,(%rax)
  0x000000011c06d9fa: add    %al,(%rax)
  0x000000011c06d9fc: add    %al,(%rax)
  0x000000011c06d9fe: add    %al,(%rax)

----------------------------------------------------------------------
fast_bgetfield  204 fast_bgetfield  [0x000000011c06da20, 0x000000011c06da60]  64 bytes

  0x000000011c06da20: pop    %rax
  0x000000011c06da21: movzwl 0x1(%r13),%ebx
  0x000000011c06da26: mov    -0x30(%rbp),%rcx
  0x000000011c06da2a: shl    $0x2,%ebx
  0x000000011c06da2d: mov    0x38(%rcx,%rbx,8),%rbx
  0x000000011c06da32: cmp    (%rax),%rax
  0x000000011c06da35: movsbl (%rax,%rbx,1),%eax
  0x000000011c06da39: movzbl 0x3(%r13),%ebx
  0x000000011c06da3e: add    $0x3,%r13
  0x000000011c06da42: movabs $0x1109d5220,%r10
  0x000000011c06da4c: jmpq   *(%r10,%rbx,8)
  0x000000011c06da50: add    %al,(%rax)
  0x000000011c06da52: add    %al,(%rax)
  0x000000011c06da54: add    %al,(%rax)
  0x000000011c06da56: add    %al,(%rax)
  0x000000011c06da58: add    %al,(%rax)
  0x000000011c06da5a: add    %al,(%rax)
  0x000000011c06da5c: add    %al,(%rax)
  0x000000011c06da5e: add    %al,(%rax)

----------------------------------------------------------------------
fast_cgetfield  205 fast_cgetfield  [0x000000011c06da80, 0x000000011c06dac0]  64 bytes

  0x000000011c06da80: pop    %rax
  0x000000011c06da81: movzwl 0x1(%r13),%ebx
  0x000000011c06da86: mov    -0x30(%rbp),%rcx
  0x000000011c06da8a: shl    $0x2,%ebx
  0x000000011c06da8d: mov    0x38(%rcx,%rbx,8),%rbx
  0x000000011c06da92: cmp    (%rax),%rax
  0x000000011c06da95: movzwl (%rax,%rbx,1),%eax
  0x000000011c06da99: movzbl 0x3(%r13),%ebx
  0x000000011c06da9e: add    $0x3,%r13
  0x000000011c06daa2: movabs $0x1109d5220,%r10
  0x000000011c06daac: jmpq   *(%r10,%rbx,8)
  0x000000011c06dab0: add    %al,(%rax)
  0x000000011c06dab2: add    %al,(%rax)
  0x000000011c06dab4: add    %al,(%rax)
  0x000000011c06dab6: add    %al,(%rax)
  0x000000011c06dab8: add    %al,(%rax)
  0x000000011c06daba: add    %al,(%rax)
  0x000000011c06dabc: add    %al,(%rax)
  0x000000011c06dabe: add    %al,(%rax)

----------------------------------------------------------------------
fast_dgetfield  206 fast_dgetfield  [0x000000011c06dae0, 0x000000011c06db20]  64 bytes

  0x000000011c06dae0: pop    %rax
  0x000000011c06dae1: movzwl 0x1(%r13),%ebx
  0x000000011c06dae6: mov    -0x30(%rbp),%rcx
  0x000000011c06daea: shl    $0x2,%ebx
  0x000000011c06daed: mov    0x38(%rcx,%rbx,8),%rbx
  0x000000011c06daf2: cmp    (%rax),%rax
  0x000000011c06daf5: vmovsd (%rax,%rbx,1),%xmm0
  0x000000011c06dafa: movzbl 0x3(%r13),%ebx
  0x000000011c06daff: add    $0x3,%r13
  0x000000011c06db03: movabs $0x1109d6a20,%r10
  0x000000011c06db0d: jmpq   *(%r10,%rbx,8)
  0x000000011c06db11: nopl   0x0(%rax)
  0x000000011c06db18: add    %al,(%rax)
  0x000000011c06db1a: add    %al,(%rax)
  0x000000011c06db1c: add    %al,(%rax)
  0x000000011c06db1e: add    %al,(%rax)

----------------------------------------------------------------------
fast_fgetfield  207 fast_fgetfield  [0x000000011c06db40, 0x000000011c06db80]  64 bytes

  0x000000011c06db40: pop    %rax
  0x000000011c06db41: movzwl 0x1(%r13),%ebx
  0x000000011c06db46: mov    -0x30(%rbp),%rcx
  0x000000011c06db4a: shl    $0x2,%ebx
  0x000000011c06db4d: mov    0x38(%rcx,%rbx,8),%rbx
  0x000000011c06db52: cmp    (%rax),%rax
  0x000000011c06db55: vmovss (%rax,%rbx,1),%xmm0
  0x000000011c06db5a: movzbl 0x3(%r13),%ebx
  0x000000011c06db5f: add    $0x3,%r13
  0x000000011c06db63: movabs $0x1109d6220,%r10
  0x000000011c06db6d: jmpq   *(%r10,%rbx,8)
  0x000000011c06db71: nopl   0x0(%rax)
  0x000000011c06db78: add    %al,(%rax)
  0x000000011c06db7a: add    %al,(%rax)
  0x000000011c06db7c: add    %al,(%rax)
  0x000000011c06db7e: add    %al,(%rax)

----------------------------------------------------------------------
fast_igetfield  208 fast_igetfield  [0x000000011c06dba0, 0x000000011c06dbe0]  64 bytes

  0x000000011c06dba0: pop    %rax
  0x000000011c06dba1: movzwl 0x1(%r13),%ebx
  0x000000011c06dba6: mov    -0x30(%rbp),%rcx
  0x000000011c06dbaa: shl    $0x2,%ebx
  0x000000011c06dbad: mov    0x38(%rcx,%rbx,8),%rbx
  0x000000011c06dbb2: cmp    (%rax),%rax
  0x000000011c06dbb5: mov    (%rax,%rbx,1),%eax
  0x000000011c06dbb8: movzbl 0x3(%r13),%ebx
  0x000000011c06dbbd: add    $0x3,%r13
  0x000000011c06dbc1: movabs $0x1109d5220,%r10
  0x000000011c06dbcb: jmpq   *(%r10,%rbx,8)
  0x000000011c06dbcf: nop
  0x000000011c06dbd0: add    %al,(%rax)
  0x000000011c06dbd2: add    %al,(%rax)
  0x000000011c06dbd4: add    %al,(%rax)
  0x000000011c06dbd6: add    %al,(%rax)
  0x000000011c06dbd8: add    %al,(%rax)
  0x000000011c06dbda: add    %al,(%rax)
  0x000000011c06dbdc: add    %al,(%rax)
  0x000000011c06dbde: add    %al,(%rax)

----------------------------------------------------------------------
fast_lgetfield  209 fast_lgetfield  [0x000000011c06dc00, 0x000000011c06dc40]  64 bytes

  0x000000011c06dc00: pop    %rax
  0x000000011c06dc01: movzwl 0x1(%r13),%ebx
  0x000000011c06dc06: mov    -0x30(%rbp),%rcx
  0x000000011c06dc0a: shl    $0x2,%ebx
  0x000000011c06dc0d: mov    0x38(%rcx,%rbx,8),%rbx
  0x000000011c06dc12: cmp    (%rax),%rax
  0x000000011c06dc15: mov    (%rax,%rbx,1),%rax
  0x000000011c06dc19: movzbl 0x3(%r13),%ebx
  0x000000011c06dc1e: add    $0x3,%r13
  0x000000011c06dc22: movabs $0x1109d5a20,%r10
  0x000000011c06dc2c: jmpq   *(%r10,%rbx,8)
  0x000000011c06dc30: add    %al,(%rax)
  0x000000011c06dc32: add    %al,(%rax)
  0x000000011c06dc34: add    %al,(%rax)
  0x000000011c06dc36: add    %al,(%rax)
  0x000000011c06dc38: add    %al,(%rax)
  0x000000011c06dc3a: add    %al,(%rax)
  0x000000011c06dc3c: add    %al,(%rax)
  0x000000011c06dc3e: add    %al,(%rax)

----------------------------------------------------------------------
fast_sgetfield  210 fast_sgetfield  [0x000000011c06dc60, 0x000000011c06dca0]  64 bytes

  0x000000011c06dc60: pop    %rax
  0x000000011c06dc61: movzwl 0x1(%r13),%ebx
  0x000000011c06dc66: mov    -0x30(%rbp),%rcx
  0x000000011c06dc6a: shl    $0x2,%ebx
  0x000000011c06dc6d: mov    0x38(%rcx,%rbx,8),%rbx
  0x000000011c06dc72: cmp    (%rax),%rax
  0x000000011c06dc75: movswl (%rax,%rbx,1),%eax
  0x000000011c06dc79: movzbl 0x3(%r13),%ebx
  0x000000011c06dc7e: add    $0x3,%r13
  0x000000011c06dc82: movabs $0x1109d5220,%r10
  0x000000011c06dc8c: jmpq   *(%r10,%rbx,8)
  0x000000011c06dc90: add    %al,(%rax)
  0x000000011c06dc92: add    %al,(%rax)
  0x000000011c06dc94: add    %al,(%rax)
  0x000000011c06dc96: add    %al,(%rax)
  0x000000011c06dc98: add    %al,(%rax)
  0x000000011c06dc9a: add    %al,(%rax)
  0x000000011c06dc9c: add    %al,(%rax)
  0x000000011c06dc9e: add    %al,(%rax)

----------------------------------------------------------------------
fast_aputfield  211 fast_aputfield  [0x000000011c06dcc0, 0x000000011c06de20]  352 bytes

  0x000000011c06dcc0: pop    %rax
  0x000000011c06dcc1: movzwl 0x1(%r13),%ebx
  0x000000011c06dcc6: mov    -0x30(%rbp),%rcx
  0x000000011c06dcca: shl    $0x2,%ebx
  0x000000011c06dccd: mov    0x40(%rcx,%rbx,8),%edx
  0x000000011c06dcd1: mov    0x38(%rcx,%rbx,8),%rbx
  0x000000011c06dcd6: shr    $0x15,%edx
  0x000000011c06dcd9: and    $0x1,%edx
  0x000000011c06dcdc: pop    %rcx
  0x000000011c06dcdd: cmp    (%rcx),%rax
  0x000000011c06dce0: lea    (%rcx,%rbx,1),%rdx
  0x000000011c06dce4: cmpb   $0x0,0x30(%r15)
  0x000000011c06dce9: je     0x000000011c06dd50
  0x000000011c06dcef: mov    (%rdx),%ebx
  0x000000011c06dcf1: shl    $0x3,%rbx
  0x000000011c06dcf5: cmp    $0x0,%rbx
  0x000000011c06dcf9: je     0x000000011c06dd50
  0x000000011c06dcff: mov    0x38(%r15),%r8
  0x000000011c06dd03: cmp    $0x0,%r8
  0x000000011c06dd07: je     0x000000011c06dd21
  0x000000011c06dd0d: sub    $0x8,%r8
  0x000000011c06dd11: mov    %r8,0x38(%r15)
  0x000000011c06dd15: add    0x48(%r15),%r8
  0x000000011c06dd19: mov    %rbx,(%r8)
  0x000000011c06dd1c: jmpq   0x000000011c06dd50
  0x000000011c06dd21: push   %rax
  0x000000011c06dd22: push   %rdx
  0x000000011c06dd23: push   %rbx
  0x000000011c06dd24: mov    %r15,%rsi
  0x000000011c06dd27: mov    %rbx,%rdi
  0x000000011c06dd2a: test   $0xf,%esp
  0x000000011c06dd30: je     0x000000011c06dd48
  0x000000011c06dd36: sub    $0x8,%rsp
  0x000000011c06dd3a: callq  0x000000011030185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x000000011c06dd3f: add    $0x8,%rsp
  0x000000011c06dd43: jmpq   0x000000011c06dd4d
  0x000000011c06dd48: callq  0x000000011030185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x000000011c06dd4d: pop    %rbx
  0x000000011c06dd4e: pop    %rdx
  0x000000011c06dd4f: pop    %rax
  0x000000011c06dd50: mov    %rax,%rbx
  0x000000011c06dd53: shr    $0x3,%rax
  0x000000011c06dd57: mov    %eax,(%rdx)
  0x000000011c06dd59: mov    %rdx,%r8
  0x000000011c06dd5c: xor    %rbx,%r8
  0x000000011c06dd5f: shr    $0x16,%r8
  0x000000011c06dd63: je     0x000000011c06ddfb
  0x000000011c06dd69: cmp    $0x0,%rbx
  0x000000011c06dd6d: je     0x000000011c06ddfb
  0x000000011c06dd73: mov    %rdx,%r8
  0x000000011c06dd76: shr    $0x9,%r8
  0x000000011c06dd7a: movabs $0x11d054000,%rbx
  0x000000011c06dd84: add    %rbx,%r8
  0x000000011c06dd87: cmpb   $0x20,(%r8)
  0x000000011c06dd8b: je     0x000000011c06ddfb
  0x000000011c06dd91: lock addl $0x0,-0x40(%rsp)
  0x000000011c06dd97: cmpb   $0x0,(%r8)
  0x000000011c06dd9b: je     0x000000011c06ddfb
  0x000000011c06dda1: movb   $0x0,(%r8)
  0x000000011c06dda5: cmpl   $0x0,0x70(%r15)
  0x000000011c06ddad: je     0x000000011c06ddce
  0x000000011c06ddb3: subl   $0x8,0x70(%r15)
  0x000000011c06ddb8: mov    0x80(%r15),%rbx
  0x000000011c06ddbf: movslq 0x70(%r15),%r10
  0x000000011c06ddc3: add    %r10,%rbx
  0x000000011c06ddc6: mov    %r8,(%rbx)
  0x000000011c06ddc9: jmpq   0x000000011c06ddfb
  0x000000011c06ddce: push   %rdx
  0x000000011c06ddcf: push   %rbx
  0x000000011c06ddd0: mov    %r15,%rsi
  0x000000011c06ddd3: mov    %r8,%rdi
  0x000000011c06ddd6: test   $0xf,%esp
  0x000000011c06dddc: je     0x000000011c06ddf4
  0x000000011c06dde2: sub    $0x8,%rsp
  0x000000011c06dde6: callq  0x0000000110301882 = G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*)
  0x000000011c06ddeb: add    $0x8,%rsp
  0x000000011c06ddef: jmpq   0x000000011c06ddf9
  0x000000011c06ddf4: callq  0x0000000110301882 = G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*)
  0x000000011c06ddf9: pop    %rbx
  0x000000011c06ddfa: pop    %rdx
  0x000000011c06ddfb: test   %edx,%edx
  0x000000011c06ddfd: je     0x000000011c06de09
  0x000000011c06de03: lock addl $0x0,-0x40(%rsp)
  0x000000011c06de09: movzbl 0x3(%r13),%ebx
  0x000000011c06de0e: add    $0x3,%r13
  0x000000011c06de12: movabs $0x1109d7a20,%r10
  0x000000011c06de1c: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
fast_bputfield  212 fast_bputfield  [0x000000011c06de40, 0x000000011c06dea0]  96 bytes

  0x000000011c06de40: mov    (%rsp),%eax
  0x000000011c06de43: add    $0x8,%rsp
  0x000000011c06de47: movzwl 0x1(%r13),%ebx
  0x000000011c06de4c: mov    -0x30(%rbp),%rcx
  0x000000011c06de50: shl    $0x2,%ebx
  0x000000011c06de53: mov    0x40(%rcx,%rbx,8),%edx
  0x000000011c06de57: mov    0x38(%rcx,%rbx,8),%rbx
  0x000000011c06de5c: shr    $0x15,%edx
  0x000000011c06de5f: and    $0x1,%edx
  0x000000011c06de62: pop    %rcx
  0x000000011c06de63: cmp    (%rcx),%rax
  0x000000011c06de66: mov    %al,(%rcx,%rbx,1)
  0x000000011c06de69: test   %edx,%edx
  0x000000011c06de6b: je     0x000000011c06de77
  0x000000011c06de71: lock addl $0x0,-0x40(%rsp)
  0x000000011c06de77: movzbl 0x3(%r13),%ebx
  0x000000011c06de7c: add    $0x3,%r13
  0x000000011c06de80: movabs $0x1109d7a20,%r10
  0x000000011c06de8a: jmpq   *(%r10,%rbx,8)
  0x000000011c06de8e: xchg   %ax,%ax
  0x000000011c06de90: add    %al,(%rax)
  0x000000011c06de92: add    %al,(%rax)
  0x000000011c06de94: add    %al,(%rax)
  0x000000011c06de96: add    %al,(%rax)
  0x000000011c06de98: add    %al,(%rax)
  0x000000011c06de9a: add    %al,(%rax)
  0x000000011c06de9c: add    %al,(%rax)
  0x000000011c06de9e: add    %al,(%rax)

----------------------------------------------------------------------
fast_zputfield  213 fast_zputfield  [0x000000011c06dec0, 0x000000011c06df20]  96 bytes

  0x000000011c06dec0: mov    (%rsp),%eax
  0x000000011c06dec3: add    $0x8,%rsp
  0x000000011c06dec7: movzwl 0x1(%r13),%ebx
  0x000000011c06decc: mov    -0x30(%rbp),%rcx
  0x000000011c06ded0: shl    $0x2,%ebx
  0x000000011c06ded3: mov    0x40(%rcx,%rbx,8),%edx
  0x000000011c06ded7: mov    0x38(%rcx,%rbx,8),%rbx
  0x000000011c06dedc: shr    $0x15,%edx
  0x000000011c06dedf: and    $0x1,%edx
  0x000000011c06dee2: pop    %rcx
  0x000000011c06dee3: cmp    (%rcx),%rax
  0x000000011c06dee6: and    $0x1,%eax
  0x000000011c06dee9: mov    %al,(%rcx,%rbx,1)
  0x000000011c06deec: test   %edx,%edx
  0x000000011c06deee: je     0x000000011c06defa
  0x000000011c06def4: lock addl $0x0,-0x40(%rsp)
  0x000000011c06defa: movzbl 0x3(%r13),%ebx
  0x000000011c06deff: add    $0x3,%r13
  0x000000011c06df03: movabs $0x1109d7a20,%r10
  0x000000011c06df0d: jmpq   *(%r10,%rbx,8)
  0x000000011c06df11: nopl   0x0(%rax)
  0x000000011c06df18: add    %al,(%rax)
  0x000000011c06df1a: add    %al,(%rax)
  0x000000011c06df1c: add    %al,(%rax)
  0x000000011c06df1e: add    %al,(%rax)

----------------------------------------------------------------------
fast_cputfield  214 fast_cputfield  [0x000000011c06df40, 0x000000011c06dfa0]  96 bytes

  0x000000011c06df40: mov    (%rsp),%eax
  0x000000011c06df43: add    $0x8,%rsp
  0x000000011c06df47: movzwl 0x1(%r13),%ebx
  0x000000011c06df4c: mov    -0x30(%rbp),%rcx
  0x000000011c06df50: shl    $0x2,%ebx
  0x000000011c06df53: mov    0x40(%rcx,%rbx,8),%edx
  0x000000011c06df57: mov    0x38(%rcx,%rbx,8),%rbx
  0x000000011c06df5c: shr    $0x15,%edx
  0x000000011c06df5f: and    $0x1,%edx
  0x000000011c06df62: pop    %rcx
  0x000000011c06df63: cmp    (%rcx),%rax
  0x000000011c06df66: mov    %ax,(%rcx,%rbx,1)
  0x000000011c06df6a: test   %edx,%edx
  0x000000011c06df6c: je     0x000000011c06df78
  0x000000011c06df72: lock addl $0x0,-0x40(%rsp)
  0x000000011c06df78: movzbl 0x3(%r13),%ebx
  0x000000011c06df7d: add    $0x3,%r13
  0x000000011c06df81: movabs $0x1109d7a20,%r10
  0x000000011c06df8b: jmpq   *(%r10,%rbx,8)
  0x000000011c06df8f: nop
  0x000000011c06df90: add    %al,(%rax)
  0x000000011c06df92: add    %al,(%rax)
  0x000000011c06df94: add    %al,(%rax)
  0x000000011c06df96: add    %al,(%rax)
  0x000000011c06df98: add    %al,(%rax)
  0x000000011c06df9a: add    %al,(%rax)
  0x000000011c06df9c: add    %al,(%rax)
  0x000000011c06df9e: add    %al,(%rax)

----------------------------------------------------------------------
fast_dputfield  215 fast_dputfield  [0x000000011c06dfc0, 0x000000011c06e020]  96 bytes

  0x000000011c06dfc0: vmovsd (%rsp),%xmm0
  0x000000011c06dfc5: add    $0x10,%rsp
  0x000000011c06dfc9: movzwl 0x1(%r13),%ebx
  0x000000011c06dfce: mov    -0x30(%rbp),%rcx
  0x000000011c06dfd2: shl    $0x2,%ebx
  0x000000011c06dfd5: mov    0x40(%rcx,%rbx,8),%edx
  0x000000011c06dfd9: mov    0x38(%rcx,%rbx,8),%rbx
  0x000000011c06dfde: shr    $0x15,%edx
  0x000000011c06dfe1: and    $0x1,%edx
  0x000000011c06dfe4: pop    %rcx
  0x000000011c06dfe5: cmp    (%rcx),%rax
  0x000000011c06dfe8: vmovsd %xmm0,(%rcx,%rbx,1)
  0x000000011c06dfed: test   %edx,%edx
  0x000000011c06dfef: je     0x000000011c06dffb
  0x000000011c06dff5: lock addl $0x0,-0x40(%rsp)
  0x000000011c06dffb: movzbl 0x3(%r13),%ebx
  0x000000011c06e000: add    $0x3,%r13
  0x000000011c06e004: movabs $0x1109d7a20,%r10
  0x000000011c06e00e: jmpq   *(%r10,%rbx,8)
  0x000000011c06e012: nopw   0x0(%rax,%rax,1)
  0x000000011c06e018: add    %al,(%rax)
  0x000000011c06e01a: add    %al,(%rax)
  0x000000011c06e01c: add    %al,(%rax)
  0x000000011c06e01e: add    %al,(%rax)

----------------------------------------------------------------------
fast_fputfield  216 fast_fputfield  [0x000000011c06e040, 0x000000011c06e0a0]  96 bytes

  0x000000011c06e040: vmovss (%rsp),%xmm0
  0x000000011c06e045: add    $0x8,%rsp
  0x000000011c06e049: movzwl 0x1(%r13),%ebx
  0x000000011c06e04e: mov    -0x30(%rbp),%rcx
  0x000000011c06e052: shl    $0x2,%ebx
  0x000000011c06e055: mov    0x40(%rcx,%rbx,8),%edx
  0x000000011c06e059: mov    0x38(%rcx,%rbx,8),%rbx
  0x000000011c06e05e: shr    $0x15,%edx
  0x000000011c06e061: and    $0x1,%edx
  0x000000011c06e064: pop    %rcx
  0x000000011c06e065: cmp    (%rcx),%rax
  0x000000011c06e068: vmovss %xmm0,(%rcx,%rbx,1)
  0x000000011c06e06d: test   %edx,%edx
  0x000000011c06e06f: je     0x000000011c06e07b
  0x000000011c06e075: lock addl $0x0,-0x40(%rsp)
  0x000000011c06e07b: movzbl 0x3(%r13),%ebx
  0x000000011c06e080: add    $0x3,%r13
  0x000000011c06e084: movabs $0x1109d7a20,%r10
  0x000000011c06e08e: jmpq   *(%r10,%rbx,8)
  0x000000011c06e092: nopw   0x0(%rax,%rax,1)
  0x000000011c06e098: add    %al,(%rax)
  0x000000011c06e09a: add    %al,(%rax)
  0x000000011c06e09c: add    %al,(%rax)
  0x000000011c06e09e: add    %al,(%rax)

----------------------------------------------------------------------
fast_iputfield  217 fast_iputfield  [0x000000011c06e0c0, 0x000000011c06e120]  96 bytes

  0x000000011c06e0c0: mov    (%rsp),%eax
  0x000000011c06e0c3: add    $0x8,%rsp
  0x000000011c06e0c7: movzwl 0x1(%r13),%ebx
  0x000000011c06e0cc: mov    -0x30(%rbp),%rcx
  0x000000011c06e0d0: shl    $0x2,%ebx
  0x000000011c06e0d3: mov    0x40(%rcx,%rbx,8),%edx
  0x000000011c06e0d7: mov    0x38(%rcx,%rbx,8),%rbx
  0x000000011c06e0dc: shr    $0x15,%edx
  0x000000011c06e0df: and    $0x1,%edx
  0x000000011c06e0e2: pop    %rcx
  0x000000011c06e0e3: cmp    (%rcx),%rax
  0x000000011c06e0e6: mov    %eax,(%rcx,%rbx,1)
  0x000000011c06e0e9: test   %edx,%edx
  0x000000011c06e0eb: je     0x000000011c06e0f7
  0x000000011c06e0f1: lock addl $0x0,-0x40(%rsp)
  0x000000011c06e0f7: movzbl 0x3(%r13),%ebx
  0x000000011c06e0fc: add    $0x3,%r13
  0x000000011c06e100: movabs $0x1109d7a20,%r10
  0x000000011c06e10a: jmpq   *(%r10,%rbx,8)
  0x000000011c06e10e: xchg   %ax,%ax
  0x000000011c06e110: add    %al,(%rax)
  0x000000011c06e112: add    %al,(%rax)
  0x000000011c06e114: add    %al,(%rax)
  0x000000011c06e116: add    %al,(%rax)
  0x000000011c06e118: add    %al,(%rax)
  0x000000011c06e11a: add    %al,(%rax)
  0x000000011c06e11c: add    %al,(%rax)
  0x000000011c06e11e: add    %al,(%rax)

----------------------------------------------------------------------
fast_lputfield  218 fast_lputfield  [0x000000011c06e140, 0x000000011c06e1a0]  96 bytes

  0x000000011c06e140: mov    (%rsp),%rax
  0x000000011c06e144: add    $0x10,%rsp
  0x000000011c06e148: movzwl 0x1(%r13),%ebx
  0x000000011c06e14d: mov    -0x30(%rbp),%rcx
  0x000000011c06e151: shl    $0x2,%ebx
  0x000000011c06e154: mov    0x40(%rcx,%rbx,8),%edx
  0x000000011c06e158: mov    0x38(%rcx,%rbx,8),%rbx
  0x000000011c06e15d: shr    $0x15,%edx
  0x000000011c06e160: and    $0x1,%edx
  0x000000011c06e163: pop    %rcx
  0x000000011c06e164: cmp    (%rcx),%rax
  0x000000011c06e167: mov    %rax,(%rcx,%rbx,1)
  0x000000011c06e16b: test   %edx,%edx
  0x000000011c06e16d: je     0x000000011c06e179
  0x000000011c06e173: lock addl $0x0,-0x40(%rsp)
  0x000000011c06e179: movzbl 0x3(%r13),%ebx
  0x000000011c06e17e: add    $0x3,%r13
  0x000000011c06e182: movabs $0x1109d7a20,%r10
  0x000000011c06e18c: jmpq   *(%r10,%rbx,8)
  0x000000011c06e190: add    %al,(%rax)
  0x000000011c06e192: add    %al,(%rax)
  0x000000011c06e194: add    %al,(%rax)
  0x000000011c06e196: add    %al,(%rax)
  0x000000011c06e198: add    %al,(%rax)
  0x000000011c06e19a: add    %al,(%rax)
  0x000000011c06e19c: add    %al,(%rax)
  0x000000011c06e19e: add    %al,(%rax)

----------------------------------------------------------------------
fast_sputfield  219 fast_sputfield  [0x000000011c06e1c0, 0x000000011c06e220]  96 bytes

  0x000000011c06e1c0: mov    (%rsp),%eax
  0x000000011c06e1c3: add    $0x8,%rsp
  0x000000011c06e1c7: movzwl 0x1(%r13),%ebx
  0x000000011c06e1cc: mov    -0x30(%rbp),%rcx
  0x000000011c06e1d0: shl    $0x2,%ebx
  0x000000011c06e1d3: mov    0x40(%rcx,%rbx,8),%edx
  0x000000011c06e1d7: mov    0x38(%rcx,%rbx,8),%rbx
  0x000000011c06e1dc: shr    $0x15,%edx
  0x000000011c06e1df: and    $0x1,%edx
  0x000000011c06e1e2: pop    %rcx
  0x000000011c06e1e3: cmp    (%rcx),%rax
  0x000000011c06e1e6: mov    %ax,(%rcx,%rbx,1)
  0x000000011c06e1ea: test   %edx,%edx
  0x000000011c06e1ec: je     0x000000011c06e1f8
  0x000000011c06e1f2: lock addl $0x0,-0x40(%rsp)
  0x000000011c06e1f8: movzbl 0x3(%r13),%ebx
  0x000000011c06e1fd: add    $0x3,%r13
  0x000000011c06e201: movabs $0x1109d7a20,%r10
  0x000000011c06e20b: jmpq   *(%r10,%rbx,8)
  0x000000011c06e20f: nop
  0x000000011c06e210: add    %al,(%rax)
  0x000000011c06e212: add    %al,(%rax)
  0x000000011c06e214: add    %al,(%rax)
  0x000000011c06e216: add    %al,(%rax)
  0x000000011c06e218: add    %al,(%rax)
  0x000000011c06e21a: add    %al,(%rax)
  0x000000011c06e21c: add    %al,(%rax)
  0x000000011c06e21e: add    %al,(%rax)

----------------------------------------------------------------------
fast_aload_0  220 fast_aload_0  [0x000000011c06e240, 0x000000011c06e2a0]  96 bytes

  0x000000011c06e240: push   %rax
  0x000000011c06e241: jmpq   0x000000011c06e27f
  0x000000011c06e246: sub    $0x8,%rsp
  0x000000011c06e24a: vmovss %xmm0,(%rsp)
  0x000000011c06e24f: jmpq   0x000000011c06e27f
  0x000000011c06e254: sub    $0x10,%rsp
  0x000000011c06e258: vmovsd %xmm0,(%rsp)
  0x000000011c06e25d: jmpq   0x000000011c06e27f
  0x000000011c06e262: sub    $0x10,%rsp
  0x000000011c06e266: mov    %rax,(%rsp)
  0x000000011c06e26a: movabs $0x0,%r10
  0x000000011c06e274: mov    %r10,0x8(%rsp)
  0x000000011c06e279: jmpq   0x000000011c06e27f
  0x000000011c06e27e: push   %rax
  0x000000011c06e27f: mov    (%r14),%rax
  0x000000011c06e282: movzbl 0x1(%r13),%ebx
  0x000000011c06e287: inc    %r13
  0x000000011c06e28a: movabs $0x1109d7220,%r10
  0x000000011c06e294: jmpq   *(%r10,%rbx,8)
  0x000000011c06e298: add    %al,(%rax)
  0x000000011c06e29a: add    %al,(%rax)
  0x000000011c06e29c: add    %al,(%rax)
  0x000000011c06e29e: add    %al,(%rax)

----------------------------------------------------------------------
fast_iaccess_0  221 fast_iaccess_0  [0x000000011c06e2c0, 0x000000011c06e340]  128 bytes

  0x000000011c06e2c0: push   %rax
  0x000000011c06e2c1: jmpq   0x000000011c06e2ff
  0x000000011c06e2c6: sub    $0x8,%rsp
  0x000000011c06e2ca: vmovss %xmm0,(%rsp)
  0x000000011c06e2cf: jmpq   0x000000011c06e2ff
  0x000000011c06e2d4: sub    $0x10,%rsp
  0x000000011c06e2d8: vmovsd %xmm0,(%rsp)
  0x000000011c06e2dd: jmpq   0x000000011c06e2ff
  0x000000011c06e2e2: sub    $0x10,%rsp
  0x000000011c06e2e6: mov    %rax,(%rsp)
  0x000000011c06e2ea: movabs $0x0,%r10
  0x000000011c06e2f4: mov    %r10,0x8(%rsp)
  0x000000011c06e2f9: jmpq   0x000000011c06e2ff
  0x000000011c06e2fe: push   %rax
  0x000000011c06e2ff: mov    (%r14),%rax
  0x000000011c06e302: movzwl 0x2(%r13),%edx
  0x000000011c06e307: mov    -0x30(%rbp),%rcx
  0x000000011c06e30b: shl    $0x2,%edx
  0x000000011c06e30e: mov    0x38(%rcx,%rdx,8),%rbx
  0x000000011c06e313: inc    %r13
  0x000000011c06e316: cmp    (%rax),%rax
  0x000000011c06e319: mov    (%rax,%rbx,1),%eax
  0x000000011c06e31c: dec    %r13
  0x000000011c06e31f: movzbl 0x4(%r13),%ebx
  0x000000011c06e324: add    $0x4,%r13
  0x000000011c06e328: movabs $0x1109d5220,%r10
  0x000000011c06e332: jmpq   *(%r10,%rbx,8)
  0x000000011c06e336: xchg   %ax,%ax
  0x000000011c06e338: add    %al,(%rax)
  0x000000011c06e33a: add    %al,(%rax)
  0x000000011c06e33c: add    %al,(%rax)
  0x000000011c06e33e: add    %al,(%rax)

----------------------------------------------------------------------
fast_aaccess_0  222 fast_aaccess_0  [0x000000011c06e360, 0x000000011c06e3e0]  128 bytes

  0x000000011c06e360: push   %rax
  0x000000011c06e361: jmpq   0x000000011c06e39f
  0x000000011c06e366: sub    $0x8,%rsp
  0x000000011c06e36a: vmovss %xmm0,(%rsp)
  0x000000011c06e36f: jmpq   0x000000011c06e39f
  0x000000011c06e374: sub    $0x10,%rsp
  0x000000011c06e378: vmovsd %xmm0,(%rsp)
  0x000000011c06e37d: jmpq   0x000000011c06e39f
  0x000000011c06e382: sub    $0x10,%rsp
  0x000000011c06e386: mov    %rax,(%rsp)
  0x000000011c06e38a: movabs $0x0,%r10
  0x000000011c06e394: mov    %r10,0x8(%rsp)
  0x000000011c06e399: jmpq   0x000000011c06e39f
  0x000000011c06e39e: push   %rax
  0x000000011c06e39f: mov    (%r14),%rax
  0x000000011c06e3a2: movzwl 0x2(%r13),%edx
  0x000000011c06e3a7: mov    -0x30(%rbp),%rcx
  0x000000011c06e3ab: shl    $0x2,%edx
  0x000000011c06e3ae: mov    0x38(%rcx,%rdx,8),%rbx
  0x000000011c06e3b3: inc    %r13
  0x000000011c06e3b6: cmp    (%rax),%rax
  0x000000011c06e3b9: mov    (%rax,%rbx,1),%eax
  0x000000011c06e3bc: shl    $0x3,%rax
  0x000000011c06e3c0: dec    %r13
  0x000000011c06e3c3: movzbl 0x4(%r13),%ebx
  0x000000011c06e3c8: add    $0x4,%r13
  0x000000011c06e3cc: movabs $0x1109d7220,%r10
  0x000000011c06e3d6: jmpq   *(%r10,%rbx,8)
  0x000000011c06e3da: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
fast_faccess_0  223 fast_faccess_0  [0x000000011c06e400, 0x000000011c06e480]  128 bytes

  0x000000011c06e400: push   %rax
  0x000000011c06e401: jmpq   0x000000011c06e43f
  0x000000011c06e406: sub    $0x8,%rsp
  0x000000011c06e40a: vmovss %xmm0,(%rsp)
  0x000000011c06e40f: jmpq   0x000000011c06e43f
  0x000000011c06e414: sub    $0x10,%rsp
  0x000000011c06e418: vmovsd %xmm0,(%rsp)
  0x000000011c06e41d: jmpq   0x000000011c06e43f
  0x000000011c06e422: sub    $0x10,%rsp
  0x000000011c06e426: mov    %rax,(%rsp)
  0x000000011c06e42a: movabs $0x0,%r10
  0x000000011c06e434: mov    %r10,0x8(%rsp)
  0x000000011c06e439: jmpq   0x000000011c06e43f
  0x000000011c06e43e: push   %rax
  0x000000011c06e43f: mov    (%r14),%rax
  0x000000011c06e442: movzwl 0x2(%r13),%edx
  0x000000011c06e447: mov    -0x30(%rbp),%rcx
  0x000000011c06e44b: shl    $0x2,%edx
  0x000000011c06e44e: mov    0x38(%rcx,%rdx,8),%rbx
  0x000000011c06e453: inc    %r13
  0x000000011c06e456: cmp    (%rax),%rax
  0x000000011c06e459: vmovss (%rax,%rbx,1),%xmm0
  0x000000011c06e45e: dec    %r13
  0x000000011c06e461: movzbl 0x4(%r13),%ebx
  0x000000011c06e466: add    $0x4,%r13
  0x000000011c06e46a: movabs $0x1109d6220,%r10
  0x000000011c06e474: jmpq   *(%r10,%rbx,8)
  0x000000011c06e478: add    %al,(%rax)
  0x000000011c06e47a: add    %al,(%rax)
  0x000000011c06e47c: add    %al,(%rax)
  0x000000011c06e47e: add    %al,(%rax)

----------------------------------------------------------------------
fast_iload  224 fast_iload  [0x000000011c06e4a0, 0x000000011c06e520]  128 bytes

  0x000000011c06e4a0: push   %rax
  0x000000011c06e4a1: jmpq   0x000000011c06e4df
  0x000000011c06e4a6: sub    $0x8,%rsp
  0x000000011c06e4aa: vmovss %xmm0,(%rsp)
  0x000000011c06e4af: jmpq   0x000000011c06e4df
  0x000000011c06e4b4: sub    $0x10,%rsp
  0x000000011c06e4b8: vmovsd %xmm0,(%rsp)
  0x000000011c06e4bd: jmpq   0x000000011c06e4df
  0x000000011c06e4c2: sub    $0x10,%rsp
  0x000000011c06e4c6: mov    %rax,(%rsp)
  0x000000011c06e4ca: movabs $0x0,%r10
  0x000000011c06e4d4: mov    %r10,0x8(%rsp)
  0x000000011c06e4d9: jmpq   0x000000011c06e4df
  0x000000011c06e4de: push   %rax
  0x000000011c06e4df: movzbl 0x1(%r13),%ebx
  0x000000011c06e4e4: neg    %rbx
  0x000000011c06e4e7: mov    (%r14,%rbx,8),%eax
  0x000000011c06e4eb: movzbl 0x2(%r13),%ebx
  0x000000011c06e4f0: add    $0x2,%r13
  0x000000011c06e4f4: movabs $0x1109d5220,%r10
  0x000000011c06e4fe: jmpq   *(%r10,%rbx,8)
  0x000000011c06e502: nopw   0x0(%rax,%rax,1)
  0x000000011c06e508: add    %al,(%rax)
  0x000000011c06e50a: add    %al,(%rax)
  0x000000011c06e50c: add    %al,(%rax)
  0x000000011c06e50e: add    %al,(%rax)
  0x000000011c06e510: add    %al,(%rax)
  0x000000011c06e512: add    %al,(%rax)
  0x000000011c06e514: add    %al,(%rax)
  0x000000011c06e516: add    %al,(%rax)
  0x000000011c06e518: add    %al,(%rax)
  0x000000011c06e51a: add    %al,(%rax)
  0x000000011c06e51c: add    %al,(%rax)
  0x000000011c06e51e: add    %al,(%rax)

----------------------------------------------------------------------
fast_iload2  225 fast_iload2  [0x000000011c06e540, 0x000000011c06e5c0]  128 bytes

  0x000000011c06e540: push   %rax
  0x000000011c06e541: jmpq   0x000000011c06e57f
  0x000000011c06e546: sub    $0x8,%rsp
  0x000000011c06e54a: vmovss %xmm0,(%rsp)
  0x000000011c06e54f: jmpq   0x000000011c06e57f
  0x000000011c06e554: sub    $0x10,%rsp
  0x000000011c06e558: vmovsd %xmm0,(%rsp)
  0x000000011c06e55d: jmpq   0x000000011c06e57f
  0x000000011c06e562: sub    $0x10,%rsp
  0x000000011c06e566: mov    %rax,(%rsp)
  0x000000011c06e56a: movabs $0x0,%r10
  0x000000011c06e574: mov    %r10,0x8(%rsp)
  0x000000011c06e579: jmpq   0x000000011c06e57f
  0x000000011c06e57e: push   %rax
  0x000000011c06e57f: movzbl 0x1(%r13),%ebx
  0x000000011c06e584: neg    %rbx
  0x000000011c06e587: mov    (%r14,%rbx,8),%eax
  0x000000011c06e58b: push   %rax
  0x000000011c06e58c: movzbl 0x3(%r13),%ebx
  0x000000011c06e591: neg    %rbx
  0x000000011c06e594: mov    (%r14,%rbx,8),%eax
  0x000000011c06e598: movzbl 0x4(%r13),%ebx
  0x000000011c06e59d: add    $0x4,%r13
  0x000000011c06e5a1: movabs $0x1109d5220,%r10
  0x000000011c06e5ab: jmpq   *(%r10,%rbx,8)
  0x000000011c06e5af: nop
  0x000000011c06e5b0: add    %al,(%rax)
  0x000000011c06e5b2: add    %al,(%rax)
  0x000000011c06e5b4: add    %al,(%rax)
  0x000000011c06e5b6: add    %al,(%rax)
  0x000000011c06e5b8: add    %al,(%rax)
  0x000000011c06e5ba: add    %al,(%rax)
  0x000000011c06e5bc: add    %al,(%rax)
  0x000000011c06e5be: add    %al,(%rax)

----------------------------------------------------------------------
fast_icaload  226 fast_icaload  [0x000000011c06e5e0, 0x000000011c06e660]  128 bytes

  0x000000011c06e5e0: push   %rax
  0x000000011c06e5e1: jmpq   0x000000011c06e61f
  0x000000011c06e5e6: sub    $0x8,%rsp
  0x000000011c06e5ea: vmovss %xmm0,(%rsp)
  0x000000011c06e5ef: jmpq   0x000000011c06e61f
  0x000000011c06e5f4: sub    $0x10,%rsp
  0x000000011c06e5f8: vmovsd %xmm0,(%rsp)
  0x000000011c06e5fd: jmpq   0x000000011c06e61f
  0x000000011c06e602: sub    $0x10,%rsp
  0x000000011c06e606: mov    %rax,(%rsp)
  0x000000011c06e60a: movabs $0x0,%r10
  0x000000011c06e614: mov    %r10,0x8(%rsp)
  0x000000011c06e619: jmpq   0x000000011c06e61f
  0x000000011c06e61e: push   %rax
  0x000000011c06e61f: movzbl 0x1(%r13),%ebx
  0x000000011c06e624: neg    %rbx
  0x000000011c06e627: mov    (%r14,%rbx,8),%eax
  0x000000011c06e62b: pop    %rdx
  0x000000011c06e62c: movslq %eax,%rax
  0x000000011c06e62f: cmp    0xc(%rdx),%eax
  0x000000011c06e632: mov    %eax,%ebx
  0x000000011c06e634: jb     0x000000011c06e63e
  0x000000011c06e636: mov    %rdx,%rsi
  0x000000011c06e639: jmpq   0x000000011c061540
  0x000000011c06e63e: movzwl 0x10(%rdx,%rax,2),%eax
  0x000000011c06e643: movzbl 0x3(%r13),%ebx
  0x000000011c06e648: add    $0x3,%r13
  0x000000011c06e64c: movabs $0x1109d5220,%r10
  0x000000011c06e656: jmpq   *(%r10,%rbx,8)
  0x000000011c06e65a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
fast_invokevfinal  227 fast_invokevfinal  [0x000000011c06e680, 0x000000011c06e6e0]  96 bytes

  0x000000011c06e680: push   %rax
  0x000000011c06e681: jmpq   0x000000011c06e6bf
  0x000000011c06e686: sub    $0x8,%rsp
  0x000000011c06e68a: vmovss %xmm0,(%rsp)
  0x000000011c06e68f: jmpq   0x000000011c06e6bf
  0x000000011c06e694: sub    $0x10,%rsp
  0x000000011c06e698: vmovsd %xmm0,(%rsp)
  0x000000011c06e69d: jmpq   0x000000011c06e6bf
  0x000000011c06e6a2: sub    $0x10,%rsp
  0x000000011c06e6a6: mov    %rax,(%rsp)
  0x000000011c06e6aa: movabs $0x0,%r10
  0x000000011c06e6b4: mov    %r10,0x8(%rsp)
  0x000000011c06e6b9: jmpq   0x000000011c06e6bf
  0x000000011c06e6be: push   %rax
  0x000000011c06e6bf: movabs $0x110851c83,%rdi
  0x000000011c06e6c9: and    $0xfffffffffffffff0,%rsp
  0x000000011c06e6cd: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c06e6d2: hlt    
  0x000000011c06e6d3: nopl   0x0(%rax,%rax,1)
  0x000000011c06e6d8: add    %al,(%rax)
  0x000000011c06e6da: add    %al,(%rax)
  0x000000011c06e6dc: add    %al,(%rax)
  0x000000011c06e6de: add    %al,(%rax)

----------------------------------------------------------------------
fast_linearswitch  228 fast_linearswitch  [0x000000011c06e700, 0x000000011c06e780]  128 bytes

  0x000000011c06e700: mov    (%rsp),%eax
  0x000000011c06e703: add    $0x8,%rsp
  0x000000011c06e707: bswap  %eax
  0x000000011c06e709: lea    0x4(%r13),%rbx
  0x000000011c06e70d: and    $0xfffffffffffffffc,%rbx
  0x000000011c06e711: mov    0x4(%rbx),%ecx
  0x000000011c06e714: bswap  %ecx
  0x000000011c06e716: jmp    0x000000011c06e722
  0x000000011c06e718: cmp    0x8(%rbx,%rcx,8),%eax
  0x000000011c06e71c: je     0x000000011c06e72d
  0x000000011c06e722: dec    %ecx
  0x000000011c06e724: jge    0x000000011c06e718
  0x000000011c06e726: mov    (%rbx),%edx
  0x000000011c06e728: jmpq   0x000000011c06e731
  0x000000011c06e72d: mov    0xc(%rbx,%rcx,8),%edx
  0x000000011c06e731: bswap  %edx
  0x000000011c06e733: movslq %edx,%rdx
  0x000000011c06e736: movzbl 0x0(%r13,%rdx,1),%ebx
  0x000000011c06e73c: add    %rdx,%r13
  0x000000011c06e73f: testb  $0x8,0x108(%r15)
  0x000000011c06e747: je     0x000000011c06e755
  0x000000011c06e749: movabs $0x1109dd020,%r10
  0x000000011c06e753: jmp    0x000000011c06e75f
  0x000000011c06e755: movabs $0x1109d7a20,%r10
  0x000000011c06e75f: jmpq   *(%r10,%rbx,8)
  0x000000011c06e763: nopl   0x0(%rax,%rax,1)
  0x000000011c06e768: add    %al,(%rax)
  0x000000011c06e76a: add    %al,(%rax)
  0x000000011c06e76c: add    %al,(%rax)
  0x000000011c06e76e: add    %al,(%rax)
  0x000000011c06e770: add    %al,(%rax)
  0x000000011c06e772: add    %al,(%rax)
  0x000000011c06e774: add    %al,(%rax)
  0x000000011c06e776: add    %al,(%rax)
  0x000000011c06e778: add    %al,(%rax)
  0x000000011c06e77a: add    %al,(%rax)
  0x000000011c06e77c: add    %al,(%rax)
  0x000000011c06e77e: add    %al,(%rax)

----------------------------------------------------------------------
fast_binaryswitch  229 fast_binaryswitch  [0x000000011c06e7a0, 0x000000011c06e860]  192 bytes

  0x000000011c06e7a0: mov    (%rsp),%eax
  0x000000011c06e7a3: add    $0x8,%rsp
  0x000000011c06e7a7: lea    0xc(%r13),%rbx
  0x000000011c06e7ab: and    $0xfffffffffffffffc,%rbx
  0x000000011c06e7af: xor    %ecx,%ecx
  0x000000011c06e7b1: mov    -0x4(%rbx),%edx
  0x000000011c06e7b4: bswap  %edx
  0x000000011c06e7b6: jmpq   0x000000011c06e7ce
  0x000000011c06e7bb: lea    (%ecx,%edx,1),%edi
  0x000000011c06e7bf: sar    %edi
  0x000000011c06e7c1: mov    (%rbx,%rdi,8),%esi
  0x000000011c06e7c4: bswap  %esi
  0x000000011c06e7c6: cmp    %esi,%eax
  0x000000011c06e7c8: cmovl  %edi,%edx
  0x000000011c06e7cb: cmovge %edi,%ecx
  0x000000011c06e7ce: lea    0x1(%ecx),%edi
  0x000000011c06e7d2: cmp    %edx,%edi
  0x000000011c06e7d4: jl     0x000000011c06e7bb
  0x000000011c06e7d6: mov    (%rbx,%rcx,8),%esi
  0x000000011c06e7d9: bswap  %esi
  0x000000011c06e7db: cmp    %esi,%eax
  0x000000011c06e7dd: jne    0x000000011c06e819
  0x000000011c06e7e3: mov    0x4(%rbx,%rcx,8),%edx
  0x000000011c06e7e7: bswap  %edx
  0x000000011c06e7e9: movslq %edx,%rdx
  0x000000011c06e7ec: movzbl 0x0(%r13,%rdx,1),%ebx
  0x000000011c06e7f2: add    %rdx,%r13
  0x000000011c06e7f5: testb  $0x8,0x108(%r15)
  0x000000011c06e7fd: je     0x000000011c06e80b
  0x000000011c06e7ff: movabs $0x1109dd020,%r10
  0x000000011c06e809: jmp    0x000000011c06e815
  0x000000011c06e80b: movabs $0x1109d7a20,%r10
  0x000000011c06e815: jmpq   *(%r10,%rbx,8)
  0x000000011c06e819: mov    -0x8(%rbx),%edx
  0x000000011c06e81c: bswap  %edx
  0x000000011c06e81e: movslq %edx,%rdx
  0x000000011c06e821: movzbl 0x0(%r13,%rdx,1),%ebx
  0x000000011c06e827: add    %rdx,%r13
  0x000000011c06e82a: testb  $0x8,0x108(%r15)
  0x000000011c06e832: je     0x000000011c06e840
  0x000000011c06e834: movabs $0x1109dd020,%r10
  0x000000011c06e83e: jmp    0x000000011c06e84a
  0x000000011c06e840: movabs $0x1109d7a20,%r10
  0x000000011c06e84a: jmpq   *(%r10,%rbx,8)
  0x000000011c06e84e: xchg   %ax,%ax
  0x000000011c06e850: add    %al,(%rax)
  0x000000011c06e852: add    %al,(%rax)
  0x000000011c06e854: add    %al,(%rax)
  0x000000011c06e856: add    %al,(%rax)
  0x000000011c06e858: add    %al,(%rax)
  0x000000011c06e85a: add    %al,(%rax)
  0x000000011c06e85c: add    %al,(%rax)
  0x000000011c06e85e: add    %al,(%rax)

----------------------------------------------------------------------
fast_aldc  230 fast_aldc  [0x000000011c06e880, 0x000000011c06e9e0]  352 bytes

  0x000000011c06e880: push   %rax
  0x000000011c06e881: jmpq   0x000000011c06e8bf
  0x000000011c06e886: sub    $0x8,%rsp
  0x000000011c06e88a: vmovss %xmm0,(%rsp)
  0x000000011c06e88f: jmpq   0x000000011c06e8bf
  0x000000011c06e894: sub    $0x10,%rsp
  0x000000011c06e898: vmovsd %xmm0,(%rsp)
  0x000000011c06e89d: jmpq   0x000000011c06e8bf
  0x000000011c06e8a2: sub    $0x10,%rsp
  0x000000011c06e8a6: mov    %rax,(%rsp)
  0x000000011c06e8aa: movabs $0x0,%r10
  0x000000011c06e8b4: mov    %r10,0x8(%rsp)
  0x000000011c06e8b9: jmpq   0x000000011c06e8bf
  0x000000011c06e8be: push   %rax
  0x000000011c06e8bf: movzbl 0x1(%r13),%edx
  0x000000011c06e8c4: mov    -0x18(%rbp),%rax
  0x000000011c06e8c8: mov    0x8(%rax),%rax
  0x000000011c06e8cc: mov    0x8(%rax),%rax
  0x000000011c06e8d0: mov    0x10(%rax),%rax
  0x000000011c06e8d4: mov    0x10(%rax),%rax
  0x000000011c06e8d8: mov    (%rax),%rax
  0x000000011c06e8db: mov    0x10(%rax,%rdx,4),%eax
  0x000000011c06e8df: shl    $0x3,%rax
  0x000000011c06e8e3: test   %rax,%rax
  0x000000011c06e8e6: jne    0x000000011c06e9a5
  0x000000011c06e8ec: mov    $0xe6,%esi
  0x000000011c06e8f1: callq  0x000000011c06e8fb
  0x000000011c06e8f6: jmpq   0x000000011c06e9a5
  0x000000011c06e8fb: lea    0x8(%rsp),%rax
  0x000000011c06e900: mov    %r13,-0x40(%rbp)
  0x000000011c06e904: mov    %r15,%rdi
  0x000000011c06e907: vzeroupper 
  0x000000011c06e90a: mov    %rbp,0x330(%r15)
  0x000000011c06e911: mov    %rax,0x320(%r15)
  0x000000011c06e918: test   $0xf,%esp
  0x000000011c06e91e: je     0x000000011c06e936
  0x000000011c06e924: sub    $0x8,%rsp
  0x000000011c06e928: callq  0x00000001103a9de6 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0x000000011c06e92d: add    $0x8,%rsp
  0x000000011c06e931: jmpq   0x000000011c06e93b
  0x000000011c06e936: callq  0x00000001103a9de6 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0x000000011c06e93b: movabs $0x0,%r10
  0x000000011c06e945: mov    %r10,0x320(%r15)
  0x000000011c06e94c: movabs $0x0,%r10
  0x000000011c06e956: mov    %r10,0x330(%r15)
  0x000000011c06e95d: movabs $0x0,%r10
  0x000000011c06e967: mov    %r10,0x328(%r15)
  0x000000011c06e96e: vzeroupper 
  0x000000011c06e971: cmpq   $0x0,0x8(%r15)
  0x000000011c06e979: je     0x000000011c06e984
  0x000000011c06e97f: jmpq   0x000000011c054780
  0x000000011c06e984: mov    0x380(%r15),%rax
  0x000000011c06e98b: movabs $0x0,%r10
  0x000000011c06e995: mov    %r10,0x380(%r15)
  0x000000011c06e99c: mov    -0x40(%rbp),%r13
  0x000000011c06e9a0: mov    -0x38(%rbp),%r14
  0x000000011c06e9a4: retq   
  0x000000011c06e9a5: mov    -0xb68bfb4(%rip),%rdx        # 0x00000001109e29f8 = Universe::_the_null_sentinel
  0x000000011c06e9ac: cmp    %rax,%rdx
  0x000000011c06e9af: jne    0x000000011c06e9b4
  0x000000011c06e9b1: xor    %rax,%rax
  0x000000011c06e9b4: movzbl 0x2(%r13),%ebx
  0x000000011c06e9b9: add    $0x2,%r13
  0x000000011c06e9bd: movabs $0x1109d7220,%r10
  0x000000011c06e9c7: jmpq   *(%r10,%rbx,8)
  0x000000011c06e9cb: nopl   0x0(%rax,%rax,1)
  0x000000011c06e9d0: add    %al,(%rax)
  0x000000011c06e9d2: add    %al,(%rax)
  0x000000011c06e9d4: add    %al,(%rax)
  0x000000011c06e9d6: add    %al,(%rax)
  0x000000011c06e9d8: add    %al,(%rax)
  0x000000011c06e9da: add    %al,(%rax)
  0x000000011c06e9dc: add    %al,(%rax)
  0x000000011c06e9de: add    %al,(%rax)

----------------------------------------------------------------------
fast_aldc_w  231 fast_aldc_w  [0x000000011c06ea00, 0x000000011c06eb60]  352 bytes

  0x000000011c06ea00: push   %rax
  0x000000011c06ea01: jmpq   0x000000011c06ea3f
  0x000000011c06ea06: sub    $0x8,%rsp
  0x000000011c06ea0a: vmovss %xmm0,(%rsp)
  0x000000011c06ea0f: jmpq   0x000000011c06ea3f
  0x000000011c06ea14: sub    $0x10,%rsp
  0x000000011c06ea18: vmovsd %xmm0,(%rsp)
  0x000000011c06ea1d: jmpq   0x000000011c06ea3f
  0x000000011c06ea22: sub    $0x10,%rsp
  0x000000011c06ea26: mov    %rax,(%rsp)
  0x000000011c06ea2a: movabs $0x0,%r10
  0x000000011c06ea34: mov    %r10,0x8(%rsp)
  0x000000011c06ea39: jmpq   0x000000011c06ea3f
  0x000000011c06ea3e: push   %rax
  0x000000011c06ea3f: movzwl 0x1(%r13),%edx
  0x000000011c06ea44: mov    -0x18(%rbp),%rax
  0x000000011c06ea48: mov    0x8(%rax),%rax
  0x000000011c06ea4c: mov    0x8(%rax),%rax
  0x000000011c06ea50: mov    0x10(%rax),%rax
  0x000000011c06ea54: mov    0x10(%rax),%rax
  0x000000011c06ea58: mov    (%rax),%rax
  0x000000011c06ea5b: mov    0x10(%rax,%rdx,4),%eax
  0x000000011c06ea5f: shl    $0x3,%rax
  0x000000011c06ea63: test   %rax,%rax
  0x000000011c06ea66: jne    0x000000011c06eb25
  0x000000011c06ea6c: mov    $0xe7,%esi
  0x000000011c06ea71: callq  0x000000011c06ea7b
  0x000000011c06ea76: jmpq   0x000000011c06eb25
  0x000000011c06ea7b: lea    0x8(%rsp),%rax
  0x000000011c06ea80: mov    %r13,-0x40(%rbp)
  0x000000011c06ea84: mov    %r15,%rdi
  0x000000011c06ea87: vzeroupper 
  0x000000011c06ea8a: mov    %rbp,0x330(%r15)
  0x000000011c06ea91: mov    %rax,0x320(%r15)
  0x000000011c06ea98: test   $0xf,%esp
  0x000000011c06ea9e: je     0x000000011c06eab6
  0x000000011c06eaa4: sub    $0x8,%rsp
  0x000000011c06eaa8: callq  0x00000001103a9de6 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0x000000011c06eaad: add    $0x8,%rsp
  0x000000011c06eab1: jmpq   0x000000011c06eabb
  0x000000011c06eab6: callq  0x00000001103a9de6 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0x000000011c06eabb: movabs $0x0,%r10
  0x000000011c06eac5: mov    %r10,0x320(%r15)
  0x000000011c06eacc: movabs $0x0,%r10
  0x000000011c06ead6: mov    %r10,0x330(%r15)
  0x000000011c06eadd: movabs $0x0,%r10
  0x000000011c06eae7: mov    %r10,0x328(%r15)
  0x000000011c06eaee: vzeroupper 
  0x000000011c06eaf1: cmpq   $0x0,0x8(%r15)
  0x000000011c06eaf9: je     0x000000011c06eb04
  0x000000011c06eaff: jmpq   0x000000011c054780
  0x000000011c06eb04: mov    0x380(%r15),%rax
  0x000000011c06eb0b: movabs $0x0,%r10
  0x000000011c06eb15: mov    %r10,0x380(%r15)
  0x000000011c06eb1c: mov    -0x40(%rbp),%r13
  0x000000011c06eb20: mov    -0x38(%rbp),%r14
  0x000000011c06eb24: retq   
  0x000000011c06eb25: mov    -0xb68c134(%rip),%rdx        # 0x00000001109e29f8 = Universe::_the_null_sentinel
  0x000000011c06eb2c: cmp    %rax,%rdx
  0x000000011c06eb2f: jne    0x000000011c06eb34
  0x000000011c06eb31: xor    %rax,%rax
  0x000000011c06eb34: movzbl 0x3(%r13),%ebx
  0x000000011c06eb39: add    $0x3,%r13
  0x000000011c06eb3d: movabs $0x1109d7220,%r10
  0x000000011c06eb47: jmpq   *(%r10,%rbx,8)
  0x000000011c06eb4b: nopl   0x0(%rax,%rax,1)
  0x000000011c06eb50: add    %al,(%rax)
  0x000000011c06eb52: add    %al,(%rax)
  0x000000011c06eb54: add    %al,(%rax)
  0x000000011c06eb56: add    %al,(%rax)
  0x000000011c06eb58: add    %al,(%rax)
  0x000000011c06eb5a: add    %al,(%rax)
  0x000000011c06eb5c: add    %al,(%rax)
  0x000000011c06eb5e: add    %al,(%rax)

----------------------------------------------------------------------
return_register_finalizer  232 return_register_finalizer  [0x000000011c06eb80, 0x000000011c06f060]  1248 bytes

  0x000000011c06eb80: push   %rax
  0x000000011c06eb81: jmpq   0x000000011c06ebbf
  0x000000011c06eb86: sub    $0x8,%rsp
  0x000000011c06eb8a: vmovss %xmm0,(%rsp)
  0x000000011c06eb8f: jmpq   0x000000011c06ebbf
  0x000000011c06eb94: sub    $0x10,%rsp
  0x000000011c06eb98: vmovsd %xmm0,(%rsp)
  0x000000011c06eb9d: jmpq   0x000000011c06ebbf
  0x000000011c06eba2: sub    $0x10,%rsp
  0x000000011c06eba6: mov    %rax,(%rsp)
  0x000000011c06ebaa: movabs $0x0,%r10
  0x000000011c06ebb4: mov    %r10,0x8(%rsp)
  0x000000011c06ebb9: jmpq   0x000000011c06ebbf
  0x000000011c06ebbe: push   %rax
  0x000000011c06ebbf: mov    (%r14),%rsi
  0x000000011c06ebc2: mov    0x8(%rsi),%edi
  0x000000011c06ebc5: movabs $0x800000000,%r12
  0x000000011c06ebcf: add    %r12,%rdi
  0x000000011c06ebd2: xor    %r12,%r12
  0x000000011c06ebd5: mov    0xa4(%rdi),%edi
  0x000000011c06ebdb: test   $0x40000000,%edi
  0x000000011c06ebe1: je     0x000000011c06ec83
  0x000000011c06ebe7: callq  0x000000011c06ebf1
  0x000000011c06ebec: jmpq   0x000000011c06ec83
  0x000000011c06ebf1: lea    0x8(%rsp),%rax
  0x000000011c06ebf6: mov    %r13,-0x40(%rbp)
  0x000000011c06ebfa: mov    %r15,%rdi
  0x000000011c06ebfd: vzeroupper 
  0x000000011c06ec00: mov    %rbp,0x330(%r15)
  0x000000011c06ec07: mov    %rax,0x320(%r15)
  0x000000011c06ec0e: test   $0xf,%esp
  0x000000011c06ec14: je     0x000000011c06ec2c
  0x000000011c06ec1a: sub    $0x8,%rsp
  0x000000011c06ec1e: callq  0x00000001103aa498 = InterpreterRuntime::register_finalizer(JavaThread*, oopDesc*)
  0x000000011c06ec23: add    $0x8,%rsp
  0x000000011c06ec27: jmpq   0x000000011c06ec31
  0x000000011c06ec2c: callq  0x00000001103aa498 = InterpreterRuntime::register_finalizer(JavaThread*, oopDesc*)
  0x000000011c06ec31: movabs $0x0,%r10
  0x000000011c06ec3b: mov    %r10,0x320(%r15)
  0x000000011c06ec42: movabs $0x0,%r10
  0x000000011c06ec4c: mov    %r10,0x330(%r15)
  0x000000011c06ec53: movabs $0x0,%r10
  0x000000011c06ec5d: mov    %r10,0x328(%r15)
  0x000000011c06ec64: vzeroupper 
  0x000000011c06ec67: cmpq   $0x0,0x8(%r15)
  0x000000011c06ec6f: je     0x000000011c06ec7a
  0x000000011c06ec75: jmpq   0x000000011c054780
  0x000000011c06ec7a: mov    -0x40(%rbp),%r13
  0x000000011c06ec7e: mov    -0x38(%rbp),%r14
  0x000000011c06ec82: retq   
  0x000000011c06ec83: mov    0x3dd(%r15),%bl
  0x000000011c06ec8a: movb   $0x0,0x3dd(%r15)
  0x000000011c06ec92: mov    -0x18(%rbp),%rcx
  0x000000011c06ec96: mov    0x20(%rcx),%ecx
  0x000000011c06ec99: test   $0x20,%ecx
  0x000000011c06ec9f: je     0x000000011c06ee4e
  0x000000011c06eca5: test   $0xff,%bl
  0x000000011c06eca8: jne    0x000000011c06ef22
  0x000000011c06ecae: lea    -0x58(%rbp),%rsi
  0x000000011c06ecb2: mov    0x8(%rsi),%rax
  0x000000011c06ecb6: test   %rax,%rax
  0x000000011c06ecb9: jne    0x000000011c06ed6f
  0x000000011c06ecbf: callq  0x000000011c06ecc9
  0x000000011c06ecc4: jmpq   0x000000011c06ed5b
  0x000000011c06ecc9: lea    0x8(%rsp),%rax
  0x000000011c06ecce: mov    %r13,-0x40(%rbp)
  0x000000011c06ecd2: mov    %r15,%rdi
  0x000000011c06ecd5: vzeroupper 
  0x000000011c06ecd8: mov    %rbp,0x330(%r15)
  0x000000011c06ecdf: mov    %rax,0x320(%r15)
  0x000000011c06ece6: test   $0xf,%esp
  0x000000011c06ecec: je     0x000000011c06ed04
  0x000000011c06ecf2: sub    $0x8,%rsp
  0x000000011c06ecf6: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c06ecfb: add    $0x8,%rsp
  0x000000011c06ecff: jmpq   0x000000011c06ed09
  0x000000011c06ed04: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c06ed09: movabs $0x0,%r10
  0x000000011c06ed13: mov    %r10,0x320(%r15)
  0x000000011c06ed1a: movabs $0x0,%r10
  0x000000011c06ed24: mov    %r10,0x330(%r15)
  0x000000011c06ed2b: movabs $0x0,%r10
  0x000000011c06ed35: mov    %r10,0x328(%r15)
  0x000000011c06ed3c: vzeroupper 
  0x000000011c06ed3f: cmpq   $0x0,0x8(%r15)
  0x000000011c06ed47: je     0x000000011c06ed52
  0x000000011c06ed4d: jmpq   0x000000011c054780
  0x000000011c06ed52: mov    -0x40(%rbp),%r13
  0x000000011c06ed56: mov    -0x38(%rbp),%r14
  0x000000011c06ed5a: retq   
  0x000000011c06ed5b: movabs $0x1107f3493,%rdi
  0x000000011c06ed65: and    $0xfffffffffffffff0,%rsp
  0x000000011c06ed69: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c06ed6e: hlt    
  0x000000011c06ed6f: mov    %r13,-0x40(%rbp)
  0x000000011c06ed73: lea    (%rsi),%rax
  0x000000011c06ed76: mov    0x8(%rsi),%rcx
  0x000000011c06ed7a: movq   $0x0,0x8(%rsi)
  0x000000011c06ed82: mov    (%rcx),%rdx
  0x000000011c06ed85: and    $0x7,%rdx
  0x000000011c06ed89: cmp    $0x5,%rdx
  0x000000011c06ed8d: je     0x000000011c06ee4a
  0x000000011c06ed93: mov    (%rax),%rdx
  0x000000011c06ed96: test   %rdx,%rdx
  0x000000011c06ed99: je     0x000000011c06ee4a
  0x000000011c06ed9f: lock cmpxchg %rdx,(%rcx)
  0x000000011c06eda4: je     0x000000011c06ee4a
  0x000000011c06edaa: mov    %rcx,0x8(%rsi)
  0x000000011c06edae: callq  0x000000011c06edb8
  0x000000011c06edb3: jmpq   0x000000011c06ee4a
  0x000000011c06edb8: lea    0x8(%rsp),%rax
  0x000000011c06edbd: mov    %r13,-0x40(%rbp)
  0x000000011c06edc1: mov    %r15,%rdi
  0x000000011c06edc4: vzeroupper 
  0x000000011c06edc7: mov    %rbp,0x330(%r15)
  0x000000011c06edce: mov    %rax,0x320(%r15)
  0x000000011c06edd5: test   $0xf,%esp
  0x000000011c06eddb: je     0x000000011c06edf3
  0x000000011c06ede1: sub    $0x8,%rsp
  0x000000011c06ede5: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c06edea: add    $0x8,%rsp
  0x000000011c06edee: jmpq   0x000000011c06edf8
  0x000000011c06edf3: callq  0x00000001103abc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000011c06edf8: movabs $0x0,%r10
  0x000000011c06ee02: mov    %r10,0x320(%r15)
  0x000000011c06ee09: movabs $0x0,%r10
  0x000000011c06ee13: mov    %r10,0x330(%r15)
  0x000000011c06ee1a: movabs $0x0,%r10
  0x000000011c06ee24: mov    %r10,0x328(%r15)
  0x000000011c06ee2b: vzeroupper 
  0x000000011c06ee2e: cmpq   $0x0,0x8(%r15)
  0x000000011c06ee36: je     0x000000011c06ee41
  0x000000011c06ee3c: jmpq   0x000000011c054780
  0x000000011c06ee41: mov    -0x40(%rbp),%r13
  0x000000011c06ee45: mov    -0x38(%rbp),%r14
  0x000000011c06ee49: retq   
  0x000000011c06ee4a: mov    -0x40(%rbp),%r13
  0x000000011c06ee4e: mov    -0x48(%rbp),%rsi
  0x000000011c06ee52: lea    -0x48(%rbp),%rbx
  0x000000011c06ee56: jmpq   0x000000011c06ef1d
  0x000000011c06ee5b: callq  0x000000011c06ee65
  0x000000011c06ee60: jmpq   0x000000011c06eef7
  0x000000011c06ee65: lea    0x8(%rsp),%rax
  0x000000011c06ee6a: mov    %r13,-0x40(%rbp)
  0x000000011c06ee6e: mov    %r15,%rdi
  0x000000011c06ee71: vzeroupper 
  0x000000011c06ee74: mov    %rbp,0x330(%r15)
  0x000000011c06ee7b: mov    %rax,0x320(%r15)
  0x000000011c06ee82: test   $0xf,%esp
  0x000000011c06ee88: je     0x000000011c06eea0
  0x000000011c06ee8e: sub    $0x8,%rsp
  0x000000011c06ee92: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c06ee97: add    $0x8,%rsp
  0x000000011c06ee9b: jmpq   0x000000011c06eea5
  0x000000011c06eea0: callq  0x00000001103abd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000011c06eea5: movabs $0x0,%r10
  0x000000011c06eeaf: mov    %r10,0x320(%r15)
  0x000000011c06eeb6: movabs $0x0,%r10
  0x000000011c06eec0: mov    %r10,0x330(%r15)
  0x000000011c06eec7: movabs $0x0,%r10
  0x000000011c06eed1: mov    %r10,0x328(%r15)
  0x000000011c06eed8: vzeroupper 
  0x000000011c06eedb: cmpq   $0x0,0x8(%r15)
  0x000000011c06eee3: je     0x000000011c06eeee
  0x000000011c06eee9: jmpq   0x000000011c054780
  0x000000011c06eeee: mov    -0x40(%rbp),%r13
  0x000000011c06eef2: mov    -0x38(%rbp),%r14
  0x000000011c06eef6: retq   
  0x000000011c06eef7: movabs $0x1107f3493,%rdi
  0x000000011c06ef01: and    $0xfffffffffffffff0,%rsp
  0x000000011c06ef05: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c06ef0a: hlt    
  0x000000011c06ef0b: cmpq   $0x0,0x8(%rsi)
  0x000000011c06ef13: jne    0x000000011c06ee5b
  0x000000011c06ef19: add    $0x10,%rsi
  0x000000011c06ef1d: cmp    %rbx,%rsi
  0x000000011c06ef20: jne    0x000000011c06ef0b
  0x000000011c06ef22: cmpb   $0x0,-0xb6b4e4f(%rip)        # 0x00000001109ba0da = DTraceMethodProbes
  0x000000011c06ef29: je     0x000000011c06ef59
  0x000000011c06ef2f: mov    -0x18(%rbp),%rsi
  0x000000011c06ef33: mov    %r15,%rdi
  0x000000011c06ef36: test   $0xf,%esp
  0x000000011c06ef3c: je     0x000000011c06ef54
  0x000000011c06ef42: sub    $0x8,%rsp
  0x000000011c06ef46: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c06ef4b: add    $0x8,%rsp
  0x000000011c06ef4f: jmpq   0x000000011c06ef59
  0x000000011c06ef54: callq  0x00000001106979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000011c06ef59: mov    -0x8(%rbp),%rbx
  0x000000011c06ef5d: cmpl   $0x3,0x408(%r15)
  0x000000011c06ef68: je     0x000000011c06f051
  0x000000011c06ef6e: cmp    0x418(%r15),%rbx
  0x000000011c06ef75: jle    0x000000011c06f051
  0x000000011c06ef7b: mov    %r15,%rdi
  0x000000011c06ef7e: test   $0xf,%esp
  0x000000011c06ef84: je     0x000000011c06ef9c
  0x000000011c06ef8a: sub    $0x8,%rsp
  0x000000011c06ef8e: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c06ef93: add    $0x8,%rsp
  0x000000011c06ef97: jmpq   0x000000011c06efa1
  0x000000011c06ef9c: callq  0x000000011069aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000011c06efa1: callq  0x000000011c06efab
  0x000000011c06efa6: jmpq   0x000000011c06f03d
  0x000000011c06efab: lea    0x8(%rsp),%rax
  0x000000011c06efb0: mov    %r13,-0x40(%rbp)
  0x000000011c06efb4: mov    %r15,%rdi
  0x000000011c06efb7: vzeroupper 
  0x000000011c06efba: mov    %rbp,0x330(%r15)
  0x000000011c06efc1: mov    %rax,0x320(%r15)
  0x000000011c06efc8: test   $0xf,%esp
  0x000000011c06efce: je     0x000000011c06efe6
  0x000000011c06efd4: sub    $0x8,%rsp
  0x000000011c06efd8: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c06efdd: add    $0x8,%rsp
  0x000000011c06efe1: jmpq   0x000000011c06efeb
  0x000000011c06efe6: callq  0x00000001103aa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000011c06efeb: movabs $0x0,%r10
  0x000000011c06eff5: mov    %r10,0x320(%r15)
  0x000000011c06effc: movabs $0x0,%r10
  0x000000011c06f006: mov    %r10,0x330(%r15)
  0x000000011c06f00d: movabs $0x0,%r10
  0x000000011c06f017: mov    %r10,0x328(%r15)
  0x000000011c06f01e: vzeroupper 
  0x000000011c06f021: cmpq   $0x0,0x8(%r15)
  0x000000011c06f029: je     0x000000011c06f034
  0x000000011c06f02f: jmpq   0x000000011c054780
  0x000000011c06f034: mov    -0x40(%rbp),%r13
  0x000000011c06f038: mov    -0x38(%rbp),%r14
  0x000000011c06f03c: retq   
  0x000000011c06f03d: movabs $0x1107f3493,%rdi
  0x000000011c06f047: and    $0xfffffffffffffff0,%rsp
  0x000000011c06f04b: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c06f050: hlt    
  0x000000011c06f051: leaveq 
  0x000000011c06f052: pop    %r13
  0x000000011c06f054: mov    %rbx,%rsp
  0x000000011c06f057: jmpq   *%r13
  0x000000011c06f05a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
invokehandle  233 invokehandle  [0x000000011c06f080, 0x000000011c06f220]  416 bytes

  0x000000011c06f080: push   %rax
  0x000000011c06f081: jmpq   0x000000011c06f0bf
  0x000000011c06f086: sub    $0x8,%rsp
  0x000000011c06f08a: vmovss %xmm0,(%rsp)
  0x000000011c06f08f: jmpq   0x000000011c06f0bf
  0x000000011c06f094: sub    $0x10,%rsp
  0x000000011c06f098: vmovsd %xmm0,(%rsp)
  0x000000011c06f09d: jmpq   0x000000011c06f0bf
  0x000000011c06f0a2: sub    $0x10,%rsp
  0x000000011c06f0a6: mov    %rax,(%rsp)
  0x000000011c06f0aa: movabs $0x0,%r10
  0x000000011c06f0b4: mov    %r10,0x8(%rsp)
  0x000000011c06f0b9: jmpq   0x000000011c06f0bf
  0x000000011c06f0be: push   %rax
  0x000000011c06f0bf: mov    %r13,-0x40(%rbp)
  0x000000011c06f0c3: movzwl 0x1(%r13),%edx
  0x000000011c06f0c8: mov    -0x30(%rbp),%rcx
  0x000000011c06f0cc: shl    $0x2,%edx
  0x000000011c06f0cf: mov    0x28(%rcx,%rdx,8),%ebx
  0x000000011c06f0d3: shr    $0x10,%ebx
  0x000000011c06f0d6: and    $0xff,%ebx
  0x000000011c06f0dc: cmp    $0xe9,%ebx
  0x000000011c06f0e2: je     0x000000011c06f198
  0x000000011c06f0e8: mov    $0xe9,%ebx
  0x000000011c06f0ed: callq  0x000000011c06f0f7
  0x000000011c06f0f2: jmpq   0x000000011c06f18c
  0x000000011c06f0f7: mov    %rbx,%rsi
  0x000000011c06f0fa: lea    0x8(%rsp),%rax
  0x000000011c06f0ff: mov    %r13,-0x40(%rbp)
  0x000000011c06f103: mov    %r15,%rdi
  0x000000011c06f106: vzeroupper 
  0x000000011c06f109: mov    %rbp,0x330(%r15)
  0x000000011c06f110: mov    %rax,0x320(%r15)
  0x000000011c06f117: test   $0xf,%esp
  0x000000011c06f11d: je     0x000000011c06f135
  0x000000011c06f123: sub    $0x8,%rsp
  0x000000011c06f127: callq  0x00000001103ac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x000000011c06f12c: add    $0x8,%rsp
  0x000000011c06f130: jmpq   0x000000011c06f13a
  0x000000011c06f135: callq  0x00000001103ac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x000000011c06f13a: movabs $0x0,%r10
  0x000000011c06f144: mov    %r10,0x320(%r15)
  0x000000011c06f14b: movabs $0x0,%r10
  0x000000011c06f155: mov    %r10,0x330(%r15)
  0x000000011c06f15c: movabs $0x0,%r10
  0x000000011c06f166: mov    %r10,0x328(%r15)
  0x000000011c06f16d: vzeroupper 
  0x000000011c06f170: cmpq   $0x0,0x8(%r15)
  0x000000011c06f178: je     0x000000011c06f183
  0x000000011c06f17e: jmpq   0x000000011c054780
  0x000000011c06f183: mov    -0x40(%rbp),%r13
  0x000000011c06f187: mov    -0x38(%rbp),%r14
  0x000000011c06f18b: retq   
  0x000000011c06f18c: movzwl 0x1(%r13),%edx
  0x000000011c06f191: mov    -0x30(%rbp),%rcx
  0x000000011c06f195: shl    $0x2,%edx
  0x000000011c06f198: mov    0x30(%rcx,%rdx,8),%rbx
  0x000000011c06f19d: mov    0x38(%rcx,%rdx,8),%rax
  0x000000011c06f1a2: mov    0x40(%rcx,%rdx,8),%edx
  0x000000011c06f1a6: test   $0x1000000,%edx
  0x000000011c06f1ac: je     0x000000011c06f1d7
  0x000000011c06f1b2: push   %rbx
  0x000000011c06f1b3: mov    %rax,%rbx
  0x000000011c06f1b6: mov    -0x18(%rbp),%rax
  0x000000011c06f1ba: mov    0x8(%rax),%rax
  0x000000011c06f1be: mov    0x8(%rax),%rax
  0x000000011c06f1c2: mov    0x10(%rax),%rax
  0x000000011c06f1c6: mov    0x10(%rax),%rax
  0x000000011c06f1ca: mov    (%rax),%rax
  0x000000011c06f1cd: mov    0x10(%rax,%rbx,4),%eax
  0x000000011c06f1d1: shl    $0x3,%rax
  0x000000011c06f1d5: pop    %rbx
  0x000000011c06f1d6: push   %rax
  0x000000011c06f1d7: mov    %edx,%ecx
  0x000000011c06f1d9: and    $0xff,%ecx
  0x000000011c06f1df: mov    -0x8(%rsp,%rcx,8),%rcx
  0x000000011c06f1e4: shr    $0x1c,%edx
  0x000000011c06f1e7: movabs $0x1109d8730,%r10
  0x000000011c06f1f1: mov    (%r10,%rdx,8),%rdx
  0x000000011c06f1f5: push   %rdx
  0x000000011c06f1f6: cmp    (%rcx),%rax
  0x000000011c06f1f9: lea    0x8(%rsp),%r13
  0x000000011c06f1fe: mov    %r13,-0x10(%rbp)
  0x000000011c06f202: jmpq   *0x48(%rbx)
  0x000000011c06f205: data16 xchg %ax,%ax
  0x000000011c06f208: add    %al,(%rax)
  0x000000011c06f20a: add    %al,(%rax)
  0x000000011c06f20c: add    %al,(%rax)
  0x000000011c06f20e: add    %al,(%rax)
  0x000000011c06f210: add    %al,(%rax)
  0x000000011c06f212: add    %al,(%rax)
  0x000000011c06f214: add    %al,(%rax)
  0x000000011c06f216: add    %al,(%rax)
  0x000000011c06f218: add    %al,(%rax)
  0x000000011c06f21a: add    %al,(%rax)
  0x000000011c06f21c: add    %al,(%rax)
  0x000000011c06f21e: add    %al,(%rax)

----------------------------------------------------------------------
nofast_getfield  234 nofast_getfield  [0x000000011c06f240, 0x000000011c06f460]  544 bytes

  0x000000011c06f240: push   %rax
  0x000000011c06f241: jmpq   0x000000011c06f27f
  0x000000011c06f246: sub    $0x8,%rsp
  0x000000011c06f24a: vmovss %xmm0,(%rsp)
  0x000000011c06f24f: jmpq   0x000000011c06f27f
  0x000000011c06f254: sub    $0x10,%rsp
  0x000000011c06f258: vmovsd %xmm0,(%rsp)
  0x000000011c06f25d: jmpq   0x000000011c06f27f
  0x000000011c06f262: sub    $0x10,%rsp
  0x000000011c06f266: mov    %rax,(%rsp)
  0x000000011c06f26a: movabs $0x0,%r10
  0x000000011c06f274: mov    %r10,0x8(%rsp)
  0x000000011c06f279: jmpq   0x000000011c06f27f
  0x000000011c06f27e: push   %rax
  0x000000011c06f27f: movzwl 0x1(%r13),%edx
  0x000000011c06f284: mov    -0x30(%rbp),%rcx
  0x000000011c06f288: shl    $0x2,%edx
  0x000000011c06f28b: mov    0x28(%rcx,%rdx,8),%ebx
  0x000000011c06f28f: shr    $0x10,%ebx
  0x000000011c06f292: and    $0xff,%ebx
  0x000000011c06f298: cmp    $0xb4,%ebx
  0x000000011c06f29e: je     0x000000011c06f354
  0x000000011c06f2a4: mov    $0xb4,%ebx
  0x000000011c06f2a9: callq  0x000000011c06f2b3
  0x000000011c06f2ae: jmpq   0x000000011c06f348
  0x000000011c06f2b3: mov    %rbx,%rsi
  0x000000011c06f2b6: lea    0x8(%rsp),%rax
  0x000000011c06f2bb: mov    %r13,-0x40(%rbp)
  0x000000011c06f2bf: mov    %r15,%rdi
  0x000000011c06f2c2: vzeroupper 
  0x000000011c06f2c5: mov    %rbp,0x330(%r15)
  0x000000011c06f2cc: mov    %rax,0x320(%r15)
  0x000000011c06f2d3: test   $0xf,%esp
  0x000000011c06f2d9: je     0x000000011c06f2f1
  0x000000011c06f2df: sub    $0x8,%rsp
  0x000000011c06f2e3: callq  0x00000001103ac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x000000011c06f2e8: add    $0x8,%rsp
  0x000000011c06f2ec: jmpq   0x000000011c06f2f6
  0x000000011c06f2f1: callq  0x00000001103ac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x000000011c06f2f6: movabs $0x0,%r10
  0x000000011c06f300: mov    %r10,0x320(%r15)
  0x000000011c06f307: movabs $0x0,%r10
  0x000000011c06f311: mov    %r10,0x330(%r15)
  0x000000011c06f318: movabs $0x0,%r10
  0x000000011c06f322: mov    %r10,0x328(%r15)
  0x000000011c06f329: vzeroupper 
  0x000000011c06f32c: cmpq   $0x0,0x8(%r15)
  0x000000011c06f334: je     0x000000011c06f33f
  0x000000011c06f33a: jmpq   0x000000011c054780
  0x000000011c06f33f: mov    -0x40(%rbp),%r13
  0x000000011c06f343: mov    -0x38(%rbp),%r14
  0x000000011c06f347: retq   
  0x000000011c06f348: movzwl 0x1(%r13),%edx
  0x000000011c06f34d: mov    -0x30(%rbp),%rcx
  0x000000011c06f351: shl    $0x2,%edx
  0x000000011c06f354: mov    0x38(%rcx,%rdx,8),%rbx
  0x000000011c06f359: mov    0x40(%rcx,%rdx,8),%eax
  0x000000011c06f35d: pop    %rcx
  0x000000011c06f35e: cmp    (%rcx),%rax
  0x000000011c06f361: shr    $0x1c,%eax
  0x000000011c06f364: and    $0xf,%eax
  0x000000011c06f367: jne    0x000000011c06f377
  0x000000011c06f36d: movsbl (%rcx,%rbx,1),%eax
  0x000000011c06f371: push   %rax
  0x000000011c06f372: jmpq   0x000000011c06f42b
  0x000000011c06f377: cmp    $0x1,%eax
  0x000000011c06f37a: jne    0x000000011c06f38a
  0x000000011c06f380: movzbl (%rcx,%rbx,1),%eax
  0x000000011c06f384: push   %rax
  0x000000011c06f385: jmpq   0x000000011c06f42b
  0x000000011c06f38a: cmp    $0x8,%eax
  0x000000011c06f38d: jne    0x000000011c06f3a0
  0x000000011c06f393: mov    (%rcx,%rbx,1),%eax
  0x000000011c06f396: shl    $0x3,%rax
  0x000000011c06f39a: push   %rax
  0x000000011c06f39b: jmpq   0x000000011c06f42b
  0x000000011c06f3a0: cmp    $0x4,%eax
  0x000000011c06f3a3: jne    0x000000011c06f3b2
  0x000000011c06f3a9: mov    (%rcx,%rbx,1),%eax
  0x000000011c06f3ac: push   %rax
  0x000000011c06f3ad: jmpq   0x000000011c06f42b
  0x000000011c06f3b2: cmp    $0x2,%eax
  0x000000011c06f3b5: jne    0x000000011c06f3c5
  0x000000011c06f3bb: movzwl (%rcx,%rbx,1),%eax
  0x000000011c06f3bf: push   %rax
  0x000000011c06f3c0: jmpq   0x000000011c06f42b
  0x000000011c06f3c5: cmp    $0x3,%eax
  0x000000011c06f3c8: jne    0x000000011c06f3d8
  0x000000011c06f3ce: movswl (%rcx,%rbx,1),%eax
  0x000000011c06f3d2: push   %rax
  0x000000011c06f3d3: jmpq   0x000000011c06f42b
  0x000000011c06f3d8: cmp    $0x5,%eax
  0x000000011c06f3db: jne    0x000000011c06f401
  0x000000011c06f3e1: mov    (%rcx,%rbx,1),%rax
  0x000000011c06f3e5: sub    $0x10,%rsp
  0x000000011c06f3e9: mov    %rax,(%rsp)
  0x000000011c06f3ed: movabs $0x0,%r10
  0x000000011c06f3f7: mov    %r10,0x8(%rsp)
  0x000000011c06f3fc: jmpq   0x000000011c06f42b
  0x000000011c06f401: cmp    $0x6,%eax
  0x000000011c06f404: jne    0x000000011c06f41d
  0x000000011c06f40a: vmovss (%rcx,%rbx,1),%xmm0
  0x000000011c06f40f: sub    $0x8,%rsp
  0x000000011c06f413: vmovss %xmm0,(%rsp)
  0x000000011c06f418: jmpq   0x000000011c06f42b
  0x000000011c06f41d: vmovsd (%rcx,%rbx,1),%xmm0
  0x000000011c06f422: sub    $0x10,%rsp
  0x000000011c06f426: vmovsd %xmm0,(%rsp)
  0x000000011c06f42b: movzbl 0x3(%r13),%ebx
  0x000000011c06f430: add    $0x3,%r13
  0x000000011c06f434: movabs $0x1109d7a20,%r10
  0x000000011c06f43e: jmpq   *(%r10,%rbx,8)
  0x000000011c06f442: nopw   0x0(%rax,%rax,1)
  0x000000011c06f448: add    %al,(%rax)
  0x000000011c06f44a: add    %al,(%rax)
  0x000000011c06f44c: add    %al,(%rax)
  0x000000011c06f44e: add    %al,(%rax)
  0x000000011c06f450: add    %al,(%rax)
  0x000000011c06f452: add    %al,(%rax)
  0x000000011c06f454: add    %al,(%rax)
  0x000000011c06f456: add    %al,(%rax)
  0x000000011c06f458: add    %al,(%rax)
  0x000000011c06f45a: add    %al,(%rax)
  0x000000011c06f45c: add    %al,(%rax)
  0x000000011c06f45e: add    %al,(%rax)

----------------------------------------------------------------------
nofast_putfield  235 nofast_putfield  [0x000000011c06f480, 0x000000011c06f7e0]  864 bytes

  0x000000011c06f480: push   %rax
  0x000000011c06f481: jmpq   0x000000011c06f4bf
  0x000000011c06f486: sub    $0x8,%rsp
  0x000000011c06f48a: vmovss %xmm0,(%rsp)
  0x000000011c06f48f: jmpq   0x000000011c06f4bf
  0x000000011c06f494: sub    $0x10,%rsp
  0x000000011c06f498: vmovsd %xmm0,(%rsp)
  0x000000011c06f49d: jmpq   0x000000011c06f4bf
  0x000000011c06f4a2: sub    $0x10,%rsp
  0x000000011c06f4a6: mov    %rax,(%rsp)
  0x000000011c06f4aa: movabs $0x0,%r10
  0x000000011c06f4b4: mov    %r10,0x8(%rsp)
  0x000000011c06f4b9: jmpq   0x000000011c06f4bf
  0x000000011c06f4be: push   %rax
  0x000000011c06f4bf: movzwl 0x1(%r13),%edx
  0x000000011c06f4c4: mov    -0x30(%rbp),%rcx
  0x000000011c06f4c8: shl    $0x2,%edx
  0x000000011c06f4cb: mov    0x28(%rcx,%rdx,8),%ebx
  0x000000011c06f4cf: shr    $0x18,%ebx
  0x000000011c06f4d2: and    $0xff,%ebx
  0x000000011c06f4d8: cmp    $0xb5,%ebx
  0x000000011c06f4de: je     0x000000011c06f594
  0x000000011c06f4e4: mov    $0xb5,%ebx
  0x000000011c06f4e9: callq  0x000000011c06f4f3
  0x000000011c06f4ee: jmpq   0x000000011c06f588
  0x000000011c06f4f3: mov    %rbx,%rsi
  0x000000011c06f4f6: lea    0x8(%rsp),%rax
  0x000000011c06f4fb: mov    %r13,-0x40(%rbp)
  0x000000011c06f4ff: mov    %r15,%rdi
  0x000000011c06f502: vzeroupper 
  0x000000011c06f505: mov    %rbp,0x330(%r15)
  0x000000011c06f50c: mov    %rax,0x320(%r15)
  0x000000011c06f513: test   $0xf,%esp
  0x000000011c06f519: je     0x000000011c06f531
  0x000000011c06f51f: sub    $0x8,%rsp
  0x000000011c06f523: callq  0x00000001103ac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x000000011c06f528: add    $0x8,%rsp
  0x000000011c06f52c: jmpq   0x000000011c06f536
  0x000000011c06f531: callq  0x00000001103ac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x000000011c06f536: movabs $0x0,%r10
  0x000000011c06f540: mov    %r10,0x320(%r15)
  0x000000011c06f547: movabs $0x0,%r10
  0x000000011c06f551: mov    %r10,0x330(%r15)
  0x000000011c06f558: movabs $0x0,%r10
  0x000000011c06f562: mov    %r10,0x328(%r15)
  0x000000011c06f569: vzeroupper 
  0x000000011c06f56c: cmpq   $0x0,0x8(%r15)
  0x000000011c06f574: je     0x000000011c06f57f
  0x000000011c06f57a: jmpq   0x000000011c054780
  0x000000011c06f57f: mov    -0x40(%rbp),%r13
  0x000000011c06f583: mov    -0x38(%rbp),%r14
  0x000000011c06f587: retq   
  0x000000011c06f588: movzwl 0x1(%r13),%edx
  0x000000011c06f58d: mov    -0x30(%rbp),%rcx
  0x000000011c06f591: shl    $0x2,%edx
  0x000000011c06f594: mov    0x38(%rcx,%rdx,8),%rbx
  0x000000011c06f599: mov    0x40(%rcx,%rdx,8),%eax
  0x000000011c06f59d: mov    %eax,%edx
  0x000000011c06f59f: shr    $0x15,%edx
  0x000000011c06f5a2: and    $0x1,%edx
  0x000000011c06f5a5: shr    $0x1c,%eax
  0x000000011c06f5a8: and    $0xf,%eax
  0x000000011c06f5ab: jne    0x000000011c06f5c4
  0x000000011c06f5b1: mov    (%rsp),%eax
  0x000000011c06f5b4: add    $0x8,%rsp
  0x000000011c06f5b8: pop    %rcx
  0x000000011c06f5b9: cmp    (%rcx),%rax
  0x000000011c06f5bc: mov    %al,(%rcx,%rbx,1)
  0x000000011c06f5bf: jmpq   0x000000011c06f7b7
  0x000000011c06f5c4: cmp    $0x1,%eax
  0x000000011c06f5c7: jne    0x000000011c06f5e3
  0x000000011c06f5cd: mov    (%rsp),%eax
  0x000000011c06f5d0: add    $0x8,%rsp
  0x000000011c06f5d4: pop    %rcx
  0x000000011c06f5d5: cmp    (%rcx),%rax
  0x000000011c06f5d8: and    $0x1,%eax
  0x000000011c06f5db: mov    %al,(%rcx,%rbx,1)
  0x000000011c06f5de: jmpq   0x000000011c06f7b7
  0x000000011c06f5e3: cmp    $0x8,%eax
  0x000000011c06f5e6: jne    0x000000011c06f711
  0x000000011c06f5ec: pop    %rax
  0x000000011c06f5ed: pop    %rcx
  0x000000011c06f5ee: cmp    (%rcx),%rax
  0x000000011c06f5f1: lea    (%rcx,%rbx,1),%rdx
  0x000000011c06f5f5: cmpb   $0x0,0x30(%r15)
  0x000000011c06f5fa: je     0x000000011c06f661
  0x000000011c06f600: mov    (%rdx),%ebx
  0x000000011c06f602: shl    $0x3,%rbx
  0x000000011c06f606: cmp    $0x0,%rbx
  0x000000011c06f60a: je     0x000000011c06f661
  0x000000011c06f610: mov    0x38(%r15),%r8
  0x000000011c06f614: cmp    $0x0,%r8
  0x000000011c06f618: je     0x000000011c06f632
  0x000000011c06f61e: sub    $0x8,%r8
  0x000000011c06f622: mov    %r8,0x38(%r15)
  0x000000011c06f626: add    0x48(%r15),%r8
  0x000000011c06f62a: mov    %rbx,(%r8)
  0x000000011c06f62d: jmpq   0x000000011c06f661
  0x000000011c06f632: push   %rax
  0x000000011c06f633: push   %rdx
  0x000000011c06f634: push   %rbx
  0x000000011c06f635: mov    %r15,%rsi
  0x000000011c06f638: mov    %rbx,%rdi
  0x000000011c06f63b: test   $0xf,%esp
  0x000000011c06f641: je     0x000000011c06f659
  0x000000011c06f647: sub    $0x8,%rsp
  0x000000011c06f64b: callq  0x000000011030185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x000000011c06f650: add    $0x8,%rsp
  0x000000011c06f654: jmpq   0x000000011c06f65e
  0x000000011c06f659: callq  0x000000011030185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x000000011c06f65e: pop    %rbx
  0x000000011c06f65f: pop    %rdx
  0x000000011c06f660: pop    %rax
  0x000000011c06f661: mov    %rax,%rbx
  0x000000011c06f664: shr    $0x3,%rax
  0x000000011c06f668: mov    %eax,(%rdx)
  0x000000011c06f66a: mov    %rdx,%r8
  0x000000011c06f66d: xor    %rbx,%r8
  0x000000011c06f670: shr    $0x16,%r8
  0x000000011c06f674: je     0x000000011c06f70c
  0x000000011c06f67a: cmp    $0x0,%rbx
  0x000000011c06f67e: je     0x000000011c06f70c
  0x000000011c06f684: mov    %rdx,%r8
  0x000000011c06f687: shr    $0x9,%r8
  0x000000011c06f68b: movabs $0x11d054000,%rbx
  0x000000011c06f695: add    %rbx,%r8
  0x000000011c06f698: cmpb   $0x20,(%r8)
  0x000000011c06f69c: je     0x000000011c06f70c
  0x000000011c06f6a2: lock addl $0x0,-0x40(%rsp)
  0x000000011c06f6a8: cmpb   $0x0,(%r8)
  0x000000011c06f6ac: je     0x000000011c06f70c
  0x000000011c06f6b2: movb   $0x0,(%r8)
  0x000000011c06f6b6: cmpl   $0x0,0x70(%r15)
  0x000000011c06f6be: je     0x000000011c06f6df
  0x000000011c06f6c4: subl   $0x8,0x70(%r15)
  0x000000011c06f6c9: mov    0x80(%r15),%rbx
  0x000000011c06f6d0: movslq 0x70(%r15),%r10
  0x000000011c06f6d4: add    %r10,%rbx
  0x000000011c06f6d7: mov    %r8,(%rbx)
  0x000000011c06f6da: jmpq   0x000000011c06f70c
  0x000000011c06f6df: push   %rdx
  0x000000011c06f6e0: push   %rbx
  0x000000011c06f6e1: mov    %r15,%rsi
  0x000000011c06f6e4: mov    %r8,%rdi
  0x000000011c06f6e7: test   $0xf,%esp
  0x000000011c06f6ed: je     0x000000011c06f705
  0x000000011c06f6f3: sub    $0x8,%rsp
  0x000000011c06f6f7: callq  0x0000000110301882 = G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*)
  0x000000011c06f6fc: add    $0x8,%rsp
  0x000000011c06f700: jmpq   0x000000011c06f70a
  0x000000011c06f705: callq  0x0000000110301882 = G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*)
  0x000000011c06f70a: pop    %rbx
  0x000000011c06f70b: pop    %rdx
  0x000000011c06f70c: jmpq   0x000000011c06f7b7
  0x000000011c06f711: cmp    $0x4,%eax
  0x000000011c06f714: jne    0x000000011c06f72d
  0x000000011c06f71a: mov    (%rsp),%eax
  0x000000011c06f71d: add    $0x8,%rsp
  0x000000011c06f721: pop    %rcx
  0x000000011c06f722: cmp    (%rcx),%rax
  0x000000011c06f725: mov    %eax,(%rcx,%rbx,1)
  0x000000011c06f728: jmpq   0x000000011c06f7b7
  0x000000011c06f72d: cmp    $0x2,%eax
  0x000000011c06f730: jne    0x000000011c06f74a
  0x000000011c06f736: mov    (%rsp),%eax
  0x000000011c06f739: add    $0x8,%rsp
  0x000000011c06f73d: pop    %rcx
  0x000000011c06f73e: cmp    (%rcx),%rax
  0x000000011c06f741: mov    %ax,(%rcx,%rbx,1)
  0x000000011c06f745: jmpq   0x000000011c06f7b7
  0x000000011c06f74a: cmp    $0x3,%eax
  0x000000011c06f74d: jne    0x000000011c06f767
  0x000000011c06f753: mov    (%rsp),%eax
  0x000000011c06f756: add    $0x8,%rsp
  0x000000011c06f75a: pop    %rcx
  0x000000011c06f75b: cmp    (%rcx),%rax
  0x000000011c06f75e: mov    %ax,(%rcx,%rbx,1)
  0x000000011c06f762: jmpq   0x000000011c06f7b7
  0x000000011c06f767: cmp    $0x5,%eax
  0x000000011c06f76a: jne    0x000000011c06f785
  0x000000011c06f770: mov    (%rsp),%rax
  0x000000011c06f774: add    $0x10,%rsp
  0x000000011c06f778: pop    %rcx
  0x000000011c06f779: cmp    (%rcx),%rax
  0x000000011c06f77c: mov    %rax,(%rcx,%rbx,1)
  0x000000011c06f780: jmpq   0x000000011c06f7b7
  0x000000011c06f785: cmp    $0x6,%eax
  0x000000011c06f788: jne    0x000000011c06f7a5
  0x000000011c06f78e: vmovss (%rsp),%xmm0
  0x000000011c06f793: add    $0x8,%rsp
  0x000000011c06f797: pop    %rcx
  0x000000011c06f798: cmp    (%rcx),%rax
  0x000000011c06f79b: vmovss %xmm0,(%rcx,%rbx,1)
  0x000000011c06f7a0: jmpq   0x000000011c06f7b7
  0x000000011c06f7a5: vmovsd (%rsp),%xmm0
  0x000000011c06f7aa: add    $0x10,%rsp
  0x000000011c06f7ae: pop    %rcx
  0x000000011c06f7af: cmp    (%rcx),%rax
  0x000000011c06f7b2: vmovsd %xmm0,(%rcx,%rbx,1)
  0x000000011c06f7b7: test   %edx,%edx
  0x000000011c06f7b9: je     0x000000011c06f7c5
  0x000000011c06f7bf: lock addl $0x0,-0x40(%rsp)
  0x000000011c06f7c5: movzbl 0x3(%r13),%ebx
  0x000000011c06f7ca: add    $0x3,%r13
  0x000000011c06f7ce: movabs $0x1109d7a20,%r10
  0x000000011c06f7d8: jmpq   *(%r10,%rbx,8)
  0x000000011c06f7dc: nopl   0x0(%rax)

----------------------------------------------------------------------
nofast_aload_0  236 nofast_aload_0  [0x000000011c06f800, 0x000000011c06f860]  96 bytes

  0x000000011c06f800: push   %rax
  0x000000011c06f801: jmpq   0x000000011c06f83f
  0x000000011c06f806: sub    $0x8,%rsp
  0x000000011c06f80a: vmovss %xmm0,(%rsp)
  0x000000011c06f80f: jmpq   0x000000011c06f83f
  0x000000011c06f814: sub    $0x10,%rsp
  0x000000011c06f818: vmovsd %xmm0,(%rsp)
  0x000000011c06f81d: jmpq   0x000000011c06f83f
  0x000000011c06f822: sub    $0x10,%rsp
  0x000000011c06f826: mov    %rax,(%rsp)
  0x000000011c06f82a: movabs $0x0,%r10
  0x000000011c06f834: mov    %r10,0x8(%rsp)
  0x000000011c06f839: jmpq   0x000000011c06f83f
  0x000000011c06f83e: push   %rax
  0x000000011c06f83f: mov    (%r14),%rax
  0x000000011c06f842: movzbl 0x1(%r13),%ebx
  0x000000011c06f847: inc    %r13
  0x000000011c06f84a: movabs $0x1109d7220,%r10
  0x000000011c06f854: jmpq   *(%r10,%rbx,8)
  0x000000011c06f858: add    %al,(%rax)
  0x000000011c06f85a: add    %al,(%rax)
  0x000000011c06f85c: add    %al,(%rax)
  0x000000011c06f85e: add    %al,(%rax)

----------------------------------------------------------------------
nofast_iload  237 nofast_iload  [0x000000011c06f880, 0x000000011c06f900]  128 bytes

  0x000000011c06f880: push   %rax
  0x000000011c06f881: jmpq   0x000000011c06f8bf
  0x000000011c06f886: sub    $0x8,%rsp
  0x000000011c06f88a: vmovss %xmm0,(%rsp)
  0x000000011c06f88f: jmpq   0x000000011c06f8bf
  0x000000011c06f894: sub    $0x10,%rsp
  0x000000011c06f898: vmovsd %xmm0,(%rsp)
  0x000000011c06f89d: jmpq   0x000000011c06f8bf
  0x000000011c06f8a2: sub    $0x10,%rsp
  0x000000011c06f8a6: mov    %rax,(%rsp)
  0x000000011c06f8aa: movabs $0x0,%r10
  0x000000011c06f8b4: mov    %r10,0x8(%rsp)
  0x000000011c06f8b9: jmpq   0x000000011c06f8bf
  0x000000011c06f8be: push   %rax
  0x000000011c06f8bf: movzbl 0x1(%r13),%ebx
  0x000000011c06f8c4: neg    %rbx
  0x000000011c06f8c7: mov    (%r14,%rbx,8),%eax
  0x000000011c06f8cb: movzbl 0x2(%r13),%ebx
  0x000000011c06f8d0: add    $0x2,%r13
  0x000000011c06f8d4: movabs $0x1109d5220,%r10
  0x000000011c06f8de: jmpq   *(%r10,%rbx,8)
  0x000000011c06f8e2: nopw   0x0(%rax,%rax,1)
  0x000000011c06f8e8: add    %al,(%rax)
  0x000000011c06f8ea: add    %al,(%rax)
  0x000000011c06f8ec: add    %al,(%rax)
  0x000000011c06f8ee: add    %al,(%rax)
  0x000000011c06f8f0: add    %al,(%rax)
  0x000000011c06f8f2: add    %al,(%rax)
  0x000000011c06f8f4: add    %al,(%rax)
  0x000000011c06f8f6: add    %al,(%rax)
  0x000000011c06f8f8: add    %al,(%rax)
  0x000000011c06f8fa: add    %al,(%rax)
  0x000000011c06f8fc: add    %al,(%rax)
  0x000000011c06f8fe: add    %al,(%rax)

----------------------------------------------------------------------
_shouldnotreachhere  238 _shouldnotreachhere  [0x000000011c06f920, 0x000000011c06f9a0]  128 bytes

  0x000000011c06f920: push   %rax
  0x000000011c06f921: jmpq   0x000000011c06f95f
  0x000000011c06f926: sub    $0x8,%rsp
  0x000000011c06f92a: vmovss %xmm0,(%rsp)
  0x000000011c06f92f: jmpq   0x000000011c06f95f
  0x000000011c06f934: sub    $0x10,%rsp
  0x000000011c06f938: vmovsd %xmm0,(%rsp)
  0x000000011c06f93d: jmpq   0x000000011c06f95f
  0x000000011c06f942: sub    $0x10,%rsp
  0x000000011c06f946: mov    %rax,(%rsp)
  0x000000011c06f94a: movabs $0x0,%r10
  0x000000011c06f954: mov    %r10,0x8(%rsp)
  0x000000011c06f959: jmpq   0x000000011c06f95f
  0x000000011c06f95e: push   %rax
  0x000000011c06f95f: movabs $0x110851bfc,%rdi
  0x000000011c06f969: and    $0xfffffffffffffff0,%rsp
  0x000000011c06f96d: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c06f972: hlt    
  0x000000011c06f973: movzbl 0x1(%r13),%ebx
  0x000000011c06f978: inc    %r13
  0x000000011c06f97b: movabs $0x1109d7a20,%r10
  0x000000011c06f985: jmpq   *(%r10,%rbx,8)
  0x000000011c06f989: nopl   0x0(%rax)
  0x000000011c06f990: add    %al,(%rax)
  0x000000011c06f992: add    %al,(%rax)
  0x000000011c06f994: add    %al,(%rax)
  0x000000011c06f996: add    %al,(%rax)
  0x000000011c06f998: add    %al,(%rax)
  0x000000011c06f99a: add    %al,(%rax)
  0x000000011c06f99c: add    %al,(%rax)
  0x000000011c06f99e: add    %al,(%rax)

----------------------------------------------------------------------
deoptimization entry points  [0x000000011c06f9c0, 0x000000011c071bc0]  8704 bytes

  0x000000011c06f9c0: movq   $0x0,-0x10(%rbp)
  0x000000011c06f9c8: mov    -0x40(%rbp),%r13
  0x000000011c06f9cc: mov    -0x38(%rbp),%r14
  0x000000011c06f9d0: cmpq   $0x0,0x8(%r15)
  0x000000011c06f9d8: je     0x000000011c06fa8e
  0x000000011c06f9de: callq  0x000000011c06f9e8
  0x000000011c06f9e3: jmpq   0x000000011c06fa7a
  0x000000011c06f9e8: lea    0x8(%rsp),%rax
  0x000000011c06f9ed: mov    %r13,-0x40(%rbp)
  0x000000011c06f9f1: mov    %r15,%rdi
  0x000000011c06f9f4: vzeroupper 
  0x000000011c06f9f7: mov    %rbp,0x330(%r15)
  0x000000011c06f9fe: mov    %rax,0x320(%r15)
  0x000000011c06fa05: test   $0xf,%esp
  0x000000011c06fa0b: je     0x000000011c06fa23
  0x000000011c06fa11: sub    $0x8,%rsp
  0x000000011c06fa15: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c06fa1a: add    $0x8,%rsp
  0x000000011c06fa1e: jmpq   0x000000011c06fa28
  0x000000011c06fa23: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c06fa28: movabs $0x0,%r10
  0x000000011c06fa32: mov    %r10,0x320(%r15)
  0x000000011c06fa39: movabs $0x0,%r10
  0x000000011c06fa43: mov    %r10,0x330(%r15)
  0x000000011c06fa4a: movabs $0x0,%r10
  0x000000011c06fa54: mov    %r10,0x328(%r15)
  0x000000011c06fa5b: vzeroupper 
  0x000000011c06fa5e: cmpq   $0x0,0x8(%r15)
  0x000000011c06fa66: je     0x000000011c06fa71
  0x000000011c06fa6c: jmpq   0x000000011c054780
  0x000000011c06fa71: mov    -0x40(%rbp),%r13
  0x000000011c06fa75: mov    -0x38(%rbp),%r14
  0x000000011c06fa79: retq   
  0x000000011c06fa7a: movabs $0x1107f3493,%rdi
  0x000000011c06fa84: and    $0xfffffffffffffff0,%rsp
  0x000000011c06fa88: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c06fa8d: hlt    
  0x000000011c06fa8e: movzbl 0x0(%r13),%ebx
  0x000000011c06fa93: movabs $0x1109d7a20,%r10
  0x000000011c06fa9d: jmpq   *(%r10,%rbx,8)
  0x000000011c06faa1: movq   $0x0,-0x10(%rbp)
  0x000000011c06faa9: mov    -0x40(%rbp),%r13
  0x000000011c06faad: mov    -0x38(%rbp),%r14
  0x000000011c06fab1: cmpq   $0x0,0x8(%r15)
  0x000000011c06fab9: je     0x000000011c06fb6f
  0x000000011c06fabf: callq  0x000000011c06fac9
  0x000000011c06fac4: jmpq   0x000000011c06fb5b
  0x000000011c06fac9: lea    0x8(%rsp),%rax
  0x000000011c06face: mov    %r13,-0x40(%rbp)
  0x000000011c06fad2: mov    %r15,%rdi
  0x000000011c06fad5: vzeroupper 
  0x000000011c06fad8: mov    %rbp,0x330(%r15)
  0x000000011c06fadf: mov    %rax,0x320(%r15)
  0x000000011c06fae6: test   $0xf,%esp
  0x000000011c06faec: je     0x000000011c06fb04
  0x000000011c06faf2: sub    $0x8,%rsp
  0x000000011c06faf6: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c06fafb: add    $0x8,%rsp
  0x000000011c06faff: jmpq   0x000000011c06fb09
  0x000000011c06fb04: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c06fb09: movabs $0x0,%r10
  0x000000011c06fb13: mov    %r10,0x320(%r15)
  0x000000011c06fb1a: movabs $0x0,%r10
  0x000000011c06fb24: mov    %r10,0x330(%r15)
  0x000000011c06fb2b: movabs $0x0,%r10
  0x000000011c06fb35: mov    %r10,0x328(%r15)
  0x000000011c06fb3c: vzeroupper 
  0x000000011c06fb3f: cmpq   $0x0,0x8(%r15)
  0x000000011c06fb47: je     0x000000011c06fb52
  0x000000011c06fb4d: jmpq   0x000000011c054780
  0x000000011c06fb52: mov    -0x40(%rbp),%r13
  0x000000011c06fb56: mov    -0x38(%rbp),%r14
  0x000000011c06fb5a: retq   
  0x000000011c06fb5b: movabs $0x1107f3493,%rdi
  0x000000011c06fb65: and    $0xfffffffffffffff0,%rsp
  0x000000011c06fb69: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c06fb6e: hlt    
  0x000000011c06fb6f: movzbl 0x1(%r13),%ebx
  0x000000011c06fb74: inc    %r13
  0x000000011c06fb77: movabs $0x1109d5220,%r10
  0x000000011c06fb81: jmpq   *(%r10,%rbx,8)
  0x000000011c06fb85: movq   $0x0,-0x10(%rbp)
  0x000000011c06fb8d: mov    -0x40(%rbp),%r13
  0x000000011c06fb91: mov    -0x38(%rbp),%r14
  0x000000011c06fb95: cmpq   $0x0,0x8(%r15)
  0x000000011c06fb9d: je     0x000000011c06fc53
  0x000000011c06fba3: callq  0x000000011c06fbad
  0x000000011c06fba8: jmpq   0x000000011c06fc3f
  0x000000011c06fbad: lea    0x8(%rsp),%rax
  0x000000011c06fbb2: mov    %r13,-0x40(%rbp)
  0x000000011c06fbb6: mov    %r15,%rdi
  0x000000011c06fbb9: vzeroupper 
  0x000000011c06fbbc: mov    %rbp,0x330(%r15)
  0x000000011c06fbc3: mov    %rax,0x320(%r15)
  0x000000011c06fbca: test   $0xf,%esp
  0x000000011c06fbd0: je     0x000000011c06fbe8
  0x000000011c06fbd6: sub    $0x8,%rsp
  0x000000011c06fbda: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c06fbdf: add    $0x8,%rsp
  0x000000011c06fbe3: jmpq   0x000000011c06fbed
  0x000000011c06fbe8: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c06fbed: movabs $0x0,%r10
  0x000000011c06fbf7: mov    %r10,0x320(%r15)
  0x000000011c06fbfe: movabs $0x0,%r10
  0x000000011c06fc08: mov    %r10,0x330(%r15)
  0x000000011c06fc0f: movabs $0x0,%r10
  0x000000011c06fc19: mov    %r10,0x328(%r15)
  0x000000011c06fc20: vzeroupper 
  0x000000011c06fc23: cmpq   $0x0,0x8(%r15)
  0x000000011c06fc2b: je     0x000000011c06fc36
  0x000000011c06fc31: jmpq   0x000000011c054780
  0x000000011c06fc36: mov    -0x40(%rbp),%r13
  0x000000011c06fc3a: mov    -0x38(%rbp),%r14
  0x000000011c06fc3e: retq   
  0x000000011c06fc3f: movabs $0x1107f3493,%rdi
  0x000000011c06fc49: and    $0xfffffffffffffff0,%rsp
  0x000000011c06fc4d: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c06fc52: hlt    
  0x000000011c06fc53: movzbl 0x1(%r13),%ebx
  0x000000011c06fc58: inc    %r13
  0x000000011c06fc5b: movabs $0x1109d7220,%r10
  0x000000011c06fc65: jmpq   *(%r10,%rbx,8)
  0x000000011c06fc69: movq   $0x0,-0x10(%rbp)
  0x000000011c06fc71: mov    -0x40(%rbp),%r13
  0x000000011c06fc75: mov    -0x38(%rbp),%r14
  0x000000011c06fc79: cmpq   $0x0,0x8(%r15)
  0x000000011c06fc81: je     0x000000011c06fd37
  0x000000011c06fc87: callq  0x000000011c06fc91
  0x000000011c06fc8c: jmpq   0x000000011c06fd23
  0x000000011c06fc91: lea    0x8(%rsp),%rax
  0x000000011c06fc96: mov    %r13,-0x40(%rbp)
  0x000000011c06fc9a: mov    %r15,%rdi
  0x000000011c06fc9d: vzeroupper 
  0x000000011c06fca0: mov    %rbp,0x330(%r15)
  0x000000011c06fca7: mov    %rax,0x320(%r15)
  0x000000011c06fcae: test   $0xf,%esp
  0x000000011c06fcb4: je     0x000000011c06fccc
  0x000000011c06fcba: sub    $0x8,%rsp
  0x000000011c06fcbe: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c06fcc3: add    $0x8,%rsp
  0x000000011c06fcc7: jmpq   0x000000011c06fcd1
  0x000000011c06fccc: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c06fcd1: movabs $0x0,%r10
  0x000000011c06fcdb: mov    %r10,0x320(%r15)
  0x000000011c06fce2: movabs $0x0,%r10
  0x000000011c06fcec: mov    %r10,0x330(%r15)
  0x000000011c06fcf3: movabs $0x0,%r10
  0x000000011c06fcfd: mov    %r10,0x328(%r15)
  0x000000011c06fd04: vzeroupper 
  0x000000011c06fd07: cmpq   $0x0,0x8(%r15)
  0x000000011c06fd0f: je     0x000000011c06fd1a
  0x000000011c06fd15: jmpq   0x000000011c054780
  0x000000011c06fd1a: mov    -0x40(%rbp),%r13
  0x000000011c06fd1e: mov    -0x38(%rbp),%r14
  0x000000011c06fd22: retq   
  0x000000011c06fd23: movabs $0x1107f3493,%rdi
  0x000000011c06fd2d: and    $0xfffffffffffffff0,%rsp
  0x000000011c06fd31: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c06fd36: hlt    
  0x000000011c06fd37: movzbl 0x1(%r13),%ebx
  0x000000011c06fd3c: inc    %r13
  0x000000011c06fd3f: movabs $0x1109d5a20,%r10
  0x000000011c06fd49: jmpq   *(%r10,%rbx,8)
  0x000000011c06fd4d: movq   $0x0,-0x10(%rbp)
  0x000000011c06fd55: mov    -0x40(%rbp),%r13
  0x000000011c06fd59: mov    -0x38(%rbp),%r14
  0x000000011c06fd5d: cmpq   $0x0,0x8(%r15)
  0x000000011c06fd65: je     0x000000011c06fe1b
  0x000000011c06fd6b: callq  0x000000011c06fd75
  0x000000011c06fd70: jmpq   0x000000011c06fe07
  0x000000011c06fd75: lea    0x8(%rsp),%rax
  0x000000011c06fd7a: mov    %r13,-0x40(%rbp)
  0x000000011c06fd7e: mov    %r15,%rdi
  0x000000011c06fd81: vzeroupper 
  0x000000011c06fd84: mov    %rbp,0x330(%r15)
  0x000000011c06fd8b: mov    %rax,0x320(%r15)
  0x000000011c06fd92: test   $0xf,%esp
  0x000000011c06fd98: je     0x000000011c06fdb0
  0x000000011c06fd9e: sub    $0x8,%rsp
  0x000000011c06fda2: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c06fda7: add    $0x8,%rsp
  0x000000011c06fdab: jmpq   0x000000011c06fdb5
  0x000000011c06fdb0: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c06fdb5: movabs $0x0,%r10
  0x000000011c06fdbf: mov    %r10,0x320(%r15)
  0x000000011c06fdc6: movabs $0x0,%r10
  0x000000011c06fdd0: mov    %r10,0x330(%r15)
  0x000000011c06fdd7: movabs $0x0,%r10
  0x000000011c06fde1: mov    %r10,0x328(%r15)
  0x000000011c06fde8: vzeroupper 
  0x000000011c06fdeb: cmpq   $0x0,0x8(%r15)
  0x000000011c06fdf3: je     0x000000011c06fdfe
  0x000000011c06fdf9: jmpq   0x000000011c054780
  0x000000011c06fdfe: mov    -0x40(%rbp),%r13
  0x000000011c06fe02: mov    -0x38(%rbp),%r14
  0x000000011c06fe06: retq   
  0x000000011c06fe07: movabs $0x1107f3493,%rdi
  0x000000011c06fe11: and    $0xfffffffffffffff0,%rsp
  0x000000011c06fe15: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c06fe1a: hlt    
  0x000000011c06fe1b: movzbl 0x1(%r13),%ebx
  0x000000011c06fe20: inc    %r13
  0x000000011c06fe23: movabs $0x1109d6220,%r10
  0x000000011c06fe2d: jmpq   *(%r10,%rbx,8)
  0x000000011c06fe31: movq   $0x0,-0x10(%rbp)
  0x000000011c06fe39: mov    -0x40(%rbp),%r13
  0x000000011c06fe3d: mov    -0x38(%rbp),%r14
  0x000000011c06fe41: cmpq   $0x0,0x8(%r15)
  0x000000011c06fe49: je     0x000000011c06feff
  0x000000011c06fe4f: callq  0x000000011c06fe59
  0x000000011c06fe54: jmpq   0x000000011c06feeb
  0x000000011c06fe59: lea    0x8(%rsp),%rax
  0x000000011c06fe5e: mov    %r13,-0x40(%rbp)
  0x000000011c06fe62: mov    %r15,%rdi
  0x000000011c06fe65: vzeroupper 
  0x000000011c06fe68: mov    %rbp,0x330(%r15)
  0x000000011c06fe6f: mov    %rax,0x320(%r15)
  0x000000011c06fe76: test   $0xf,%esp
  0x000000011c06fe7c: je     0x000000011c06fe94
  0x000000011c06fe82: sub    $0x8,%rsp
  0x000000011c06fe86: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c06fe8b: add    $0x8,%rsp
  0x000000011c06fe8f: jmpq   0x000000011c06fe99
  0x000000011c06fe94: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c06fe99: movabs $0x0,%r10
  0x000000011c06fea3: mov    %r10,0x320(%r15)
  0x000000011c06feaa: movabs $0x0,%r10
  0x000000011c06feb4: mov    %r10,0x330(%r15)
  0x000000011c06febb: movabs $0x0,%r10
  0x000000011c06fec5: mov    %r10,0x328(%r15)
  0x000000011c06fecc: vzeroupper 
  0x000000011c06fecf: cmpq   $0x0,0x8(%r15)
  0x000000011c06fed7: je     0x000000011c06fee2
  0x000000011c06fedd: jmpq   0x000000011c054780
  0x000000011c06fee2: mov    -0x40(%rbp),%r13
  0x000000011c06fee6: mov    -0x38(%rbp),%r14
  0x000000011c06feea: retq   
  0x000000011c06feeb: movabs $0x1107f3493,%rdi
  0x000000011c06fef5: and    $0xfffffffffffffff0,%rsp
  0x000000011c06fef9: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c06fefe: hlt    
  0x000000011c06feff: movzbl 0x1(%r13),%ebx
  0x000000011c06ff04: inc    %r13
  0x000000011c06ff07: movabs $0x1109d6a20,%r10
  0x000000011c06ff11: jmpq   *(%r10,%rbx,8)
  0x000000011c06ff15: movq   $0x0,-0x10(%rbp)
  0x000000011c06ff1d: mov    -0x40(%rbp),%r13
  0x000000011c06ff21: mov    -0x38(%rbp),%r14
  0x000000011c06ff25: cmpq   $0x0,0x8(%r15)
  0x000000011c06ff2d: je     0x000000011c06ffe3
  0x000000011c06ff33: callq  0x000000011c06ff3d
  0x000000011c06ff38: jmpq   0x000000011c06ffcf
  0x000000011c06ff3d: lea    0x8(%rsp),%rax
  0x000000011c06ff42: mov    %r13,-0x40(%rbp)
  0x000000011c06ff46: mov    %r15,%rdi
  0x000000011c06ff49: vzeroupper 
  0x000000011c06ff4c: mov    %rbp,0x330(%r15)
  0x000000011c06ff53: mov    %rax,0x320(%r15)
  0x000000011c06ff5a: test   $0xf,%esp
  0x000000011c06ff60: je     0x000000011c06ff78
  0x000000011c06ff66: sub    $0x8,%rsp
  0x000000011c06ff6a: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c06ff6f: add    $0x8,%rsp
  0x000000011c06ff73: jmpq   0x000000011c06ff7d
  0x000000011c06ff78: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c06ff7d: movabs $0x0,%r10
  0x000000011c06ff87: mov    %r10,0x320(%r15)
  0x000000011c06ff8e: movabs $0x0,%r10
  0x000000011c06ff98: mov    %r10,0x330(%r15)
  0x000000011c06ff9f: movabs $0x0,%r10
  0x000000011c06ffa9: mov    %r10,0x328(%r15)
  0x000000011c06ffb0: vzeroupper 
  0x000000011c06ffb3: cmpq   $0x0,0x8(%r15)
  0x000000011c06ffbb: je     0x000000011c06ffc6
  0x000000011c06ffc1: jmpq   0x000000011c054780
  0x000000011c06ffc6: mov    -0x40(%rbp),%r13
  0x000000011c06ffca: mov    -0x38(%rbp),%r14
  0x000000011c06ffce: retq   
  0x000000011c06ffcf: movabs $0x1107f3493,%rdi
  0x000000011c06ffd9: and    $0xfffffffffffffff0,%rsp
  0x000000011c06ffdd: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c06ffe2: hlt    
  0x000000011c06ffe3: movzbl 0x1(%r13),%ebx
  0x000000011c06ffe8: inc    %r13
  0x000000011c06ffeb: movabs $0x1109d7a20,%r10
  0x000000011c06fff5: jmpq   *(%r10,%rbx,8)
  0x000000011c06fff9: movq   $0x0,-0x10(%rbp)
  0x000000011c070001: mov    -0x40(%rbp),%r13
  0x000000011c070005: mov    -0x38(%rbp),%r14
  0x000000011c070009: cmpq   $0x0,0x8(%r15)
  0x000000011c070011: je     0x000000011c0700c7
  0x000000011c070017: callq  0x000000011c070021
  0x000000011c07001c: jmpq   0x000000011c0700b3
  0x000000011c070021: lea    0x8(%rsp),%rax
  0x000000011c070026: mov    %r13,-0x40(%rbp)
  0x000000011c07002a: mov    %r15,%rdi
  0x000000011c07002d: vzeroupper 
  0x000000011c070030: mov    %rbp,0x330(%r15)
  0x000000011c070037: mov    %rax,0x320(%r15)
  0x000000011c07003e: test   $0xf,%esp
  0x000000011c070044: je     0x000000011c07005c
  0x000000011c07004a: sub    $0x8,%rsp
  0x000000011c07004e: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c070053: add    $0x8,%rsp
  0x000000011c070057: jmpq   0x000000011c070061
  0x000000011c07005c: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c070061: movabs $0x0,%r10
  0x000000011c07006b: mov    %r10,0x320(%r15)
  0x000000011c070072: movabs $0x0,%r10
  0x000000011c07007c: mov    %r10,0x330(%r15)
  0x000000011c070083: movabs $0x0,%r10
  0x000000011c07008d: mov    %r10,0x328(%r15)
  0x000000011c070094: vzeroupper 
  0x000000011c070097: cmpq   $0x0,0x8(%r15)
  0x000000011c07009f: je     0x000000011c0700aa
  0x000000011c0700a5: jmpq   0x000000011c054780
  0x000000011c0700aa: mov    -0x40(%rbp),%r13
  0x000000011c0700ae: mov    -0x38(%rbp),%r14
  0x000000011c0700b2: retq   
  0x000000011c0700b3: movabs $0x1107f3493,%rdi
  0x000000011c0700bd: and    $0xfffffffffffffff0,%rsp
  0x000000011c0700c1: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c0700c6: hlt    
  0x000000011c0700c7: movzbl 0x2(%r13),%ebx
  0x000000011c0700cc: add    $0x2,%r13
  0x000000011c0700d0: movabs $0x1109d5220,%r10
  0x000000011c0700da: jmpq   *(%r10,%rbx,8)
  0x000000011c0700de: movq   $0x0,-0x10(%rbp)
  0x000000011c0700e6: mov    -0x40(%rbp),%r13
  0x000000011c0700ea: mov    -0x38(%rbp),%r14
  0x000000011c0700ee: cmpq   $0x0,0x8(%r15)
  0x000000011c0700f6: je     0x000000011c0701ac
  0x000000011c0700fc: callq  0x000000011c070106
  0x000000011c070101: jmpq   0x000000011c070198
  0x000000011c070106: lea    0x8(%rsp),%rax
  0x000000011c07010b: mov    %r13,-0x40(%rbp)
  0x000000011c07010f: mov    %r15,%rdi
  0x000000011c070112: vzeroupper 
  0x000000011c070115: mov    %rbp,0x330(%r15)
  0x000000011c07011c: mov    %rax,0x320(%r15)
  0x000000011c070123: test   $0xf,%esp
  0x000000011c070129: je     0x000000011c070141
  0x000000011c07012f: sub    $0x8,%rsp
  0x000000011c070133: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c070138: add    $0x8,%rsp
  0x000000011c07013c: jmpq   0x000000011c070146
  0x000000011c070141: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c070146: movabs $0x0,%r10
  0x000000011c070150: mov    %r10,0x320(%r15)
  0x000000011c070157: movabs $0x0,%r10
  0x000000011c070161: mov    %r10,0x330(%r15)
  0x000000011c070168: movabs $0x0,%r10
  0x000000011c070172: mov    %r10,0x328(%r15)
  0x000000011c070179: vzeroupper 
  0x000000011c07017c: cmpq   $0x0,0x8(%r15)
  0x000000011c070184: je     0x000000011c07018f
  0x000000011c07018a: jmpq   0x000000011c054780
  0x000000011c07018f: mov    -0x40(%rbp),%r13
  0x000000011c070193: mov    -0x38(%rbp),%r14
  0x000000011c070197: retq   
  0x000000011c070198: movabs $0x1107f3493,%rdi
  0x000000011c0701a2: and    $0xfffffffffffffff0,%rsp
  0x000000011c0701a6: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c0701ab: hlt    
  0x000000011c0701ac: movzbl 0x2(%r13),%ebx
  0x000000011c0701b1: add    $0x2,%r13
  0x000000011c0701b5: movabs $0x1109d7220,%r10
  0x000000011c0701bf: jmpq   *(%r10,%rbx,8)
  0x000000011c0701c3: movq   $0x0,-0x10(%rbp)
  0x000000011c0701cb: mov    -0x40(%rbp),%r13
  0x000000011c0701cf: mov    -0x38(%rbp),%r14
  0x000000011c0701d3: cmpq   $0x0,0x8(%r15)
  0x000000011c0701db: je     0x000000011c070291
  0x000000011c0701e1: callq  0x000000011c0701eb
  0x000000011c0701e6: jmpq   0x000000011c07027d
  0x000000011c0701eb: lea    0x8(%rsp),%rax
  0x000000011c0701f0: mov    %r13,-0x40(%rbp)
  0x000000011c0701f4: mov    %r15,%rdi
  0x000000011c0701f7: vzeroupper 
  0x000000011c0701fa: mov    %rbp,0x330(%r15)
  0x000000011c070201: mov    %rax,0x320(%r15)
  0x000000011c070208: test   $0xf,%esp
  0x000000011c07020e: je     0x000000011c070226
  0x000000011c070214: sub    $0x8,%rsp
  0x000000011c070218: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c07021d: add    $0x8,%rsp
  0x000000011c070221: jmpq   0x000000011c07022b
  0x000000011c070226: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c07022b: movabs $0x0,%r10
  0x000000011c070235: mov    %r10,0x320(%r15)
  0x000000011c07023c: movabs $0x0,%r10
  0x000000011c070246: mov    %r10,0x330(%r15)
  0x000000011c07024d: movabs $0x0,%r10
  0x000000011c070257: mov    %r10,0x328(%r15)
  0x000000011c07025e: vzeroupper 
  0x000000011c070261: cmpq   $0x0,0x8(%r15)
  0x000000011c070269: je     0x000000011c070274
  0x000000011c07026f: jmpq   0x000000011c054780
  0x000000011c070274: mov    -0x40(%rbp),%r13
  0x000000011c070278: mov    -0x38(%rbp),%r14
  0x000000011c07027c: retq   
  0x000000011c07027d: movabs $0x1107f3493,%rdi
  0x000000011c070287: and    $0xfffffffffffffff0,%rsp
  0x000000011c07028b: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c070290: hlt    
  0x000000011c070291: movzbl 0x2(%r13),%ebx
  0x000000011c070296: add    $0x2,%r13
  0x000000011c07029a: movabs $0x1109d5a20,%r10
  0x000000011c0702a4: jmpq   *(%r10,%rbx,8)
  0x000000011c0702a8: movq   $0x0,-0x10(%rbp)
  0x000000011c0702b0: mov    -0x40(%rbp),%r13
  0x000000011c0702b4: mov    -0x38(%rbp),%r14
  0x000000011c0702b8: cmpq   $0x0,0x8(%r15)
  0x000000011c0702c0: je     0x000000011c070376
  0x000000011c0702c6: callq  0x000000011c0702d0
  0x000000011c0702cb: jmpq   0x000000011c070362
  0x000000011c0702d0: lea    0x8(%rsp),%rax
  0x000000011c0702d5: mov    %r13,-0x40(%rbp)
  0x000000011c0702d9: mov    %r15,%rdi
  0x000000011c0702dc: vzeroupper 
  0x000000011c0702df: mov    %rbp,0x330(%r15)
  0x000000011c0702e6: mov    %rax,0x320(%r15)
  0x000000011c0702ed: test   $0xf,%esp
  0x000000011c0702f3: je     0x000000011c07030b
  0x000000011c0702f9: sub    $0x8,%rsp
  0x000000011c0702fd: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c070302: add    $0x8,%rsp
  0x000000011c070306: jmpq   0x000000011c070310
  0x000000011c07030b: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c070310: movabs $0x0,%r10
  0x000000011c07031a: mov    %r10,0x320(%r15)
  0x000000011c070321: movabs $0x0,%r10
  0x000000011c07032b: mov    %r10,0x330(%r15)
  0x000000011c070332: movabs $0x0,%r10
  0x000000011c07033c: mov    %r10,0x328(%r15)
  0x000000011c070343: vzeroupper 
  0x000000011c070346: cmpq   $0x0,0x8(%r15)
  0x000000011c07034e: je     0x000000011c070359
  0x000000011c070354: jmpq   0x000000011c054780
  0x000000011c070359: mov    -0x40(%rbp),%r13
  0x000000011c07035d: mov    -0x38(%rbp),%r14
  0x000000011c070361: retq   
  0x000000011c070362: movabs $0x1107f3493,%rdi
  0x000000011c07036c: and    $0xfffffffffffffff0,%rsp
  0x000000011c070370: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c070375: hlt    
  0x000000011c070376: movzbl 0x2(%r13),%ebx
  0x000000011c07037b: add    $0x2,%r13
  0x000000011c07037f: movabs $0x1109d6220,%r10
  0x000000011c070389: jmpq   *(%r10,%rbx,8)
  0x000000011c07038d: movq   $0x0,-0x10(%rbp)
  0x000000011c070395: mov    -0x40(%rbp),%r13
  0x000000011c070399: mov    -0x38(%rbp),%r14
  0x000000011c07039d: cmpq   $0x0,0x8(%r15)
  0x000000011c0703a5: je     0x000000011c07045b
  0x000000011c0703ab: callq  0x000000011c0703b5
  0x000000011c0703b0: jmpq   0x000000011c070447
  0x000000011c0703b5: lea    0x8(%rsp),%rax
  0x000000011c0703ba: mov    %r13,-0x40(%rbp)
  0x000000011c0703be: mov    %r15,%rdi
  0x000000011c0703c1: vzeroupper 
  0x000000011c0703c4: mov    %rbp,0x330(%r15)
  0x000000011c0703cb: mov    %rax,0x320(%r15)
  0x000000011c0703d2: test   $0xf,%esp
  0x000000011c0703d8: je     0x000000011c0703f0
  0x000000011c0703de: sub    $0x8,%rsp
  0x000000011c0703e2: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c0703e7: add    $0x8,%rsp
  0x000000011c0703eb: jmpq   0x000000011c0703f5
  0x000000011c0703f0: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c0703f5: movabs $0x0,%r10
  0x000000011c0703ff: mov    %r10,0x320(%r15)
  0x000000011c070406: movabs $0x0,%r10
  0x000000011c070410: mov    %r10,0x330(%r15)
  0x000000011c070417: movabs $0x0,%r10
  0x000000011c070421: mov    %r10,0x328(%r15)
  0x000000011c070428: vzeroupper 
  0x000000011c07042b: cmpq   $0x0,0x8(%r15)
  0x000000011c070433: je     0x000000011c07043e
  0x000000011c070439: jmpq   0x000000011c054780
  0x000000011c07043e: mov    -0x40(%rbp),%r13
  0x000000011c070442: mov    -0x38(%rbp),%r14
  0x000000011c070446: retq   
  0x000000011c070447: movabs $0x1107f3493,%rdi
  0x000000011c070451: and    $0xfffffffffffffff0,%rsp
  0x000000011c070455: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c07045a: hlt    
  0x000000011c07045b: movzbl 0x2(%r13),%ebx
  0x000000011c070460: add    $0x2,%r13
  0x000000011c070464: movabs $0x1109d6a20,%r10
  0x000000011c07046e: jmpq   *(%r10,%rbx,8)
  0x000000011c070472: movq   $0x0,-0x10(%rbp)
  0x000000011c07047a: mov    -0x40(%rbp),%r13
  0x000000011c07047e: mov    -0x38(%rbp),%r14
  0x000000011c070482: cmpq   $0x0,0x8(%r15)
  0x000000011c07048a: je     0x000000011c070540
  0x000000011c070490: callq  0x000000011c07049a
  0x000000011c070495: jmpq   0x000000011c07052c
  0x000000011c07049a: lea    0x8(%rsp),%rax
  0x000000011c07049f: mov    %r13,-0x40(%rbp)
  0x000000011c0704a3: mov    %r15,%rdi
  0x000000011c0704a6: vzeroupper 
  0x000000011c0704a9: mov    %rbp,0x330(%r15)
  0x000000011c0704b0: mov    %rax,0x320(%r15)
  0x000000011c0704b7: test   $0xf,%esp
  0x000000011c0704bd: je     0x000000011c0704d5
  0x000000011c0704c3: sub    $0x8,%rsp
  0x000000011c0704c7: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c0704cc: add    $0x8,%rsp
  0x000000011c0704d0: jmpq   0x000000011c0704da
  0x000000011c0704d5: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c0704da: movabs $0x0,%r10
  0x000000011c0704e4: mov    %r10,0x320(%r15)
  0x000000011c0704eb: movabs $0x0,%r10
  0x000000011c0704f5: mov    %r10,0x330(%r15)
  0x000000011c0704fc: movabs $0x0,%r10
  0x000000011c070506: mov    %r10,0x328(%r15)
  0x000000011c07050d: vzeroupper 
  0x000000011c070510: cmpq   $0x0,0x8(%r15)
  0x000000011c070518: je     0x000000011c070523
  0x000000011c07051e: jmpq   0x000000011c054780
  0x000000011c070523: mov    -0x40(%rbp),%r13
  0x000000011c070527: mov    -0x38(%rbp),%r14
  0x000000011c07052b: retq   
  0x000000011c07052c: movabs $0x1107f3493,%rdi
  0x000000011c070536: and    $0xfffffffffffffff0,%rsp
  0x000000011c07053a: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c07053f: hlt    
  0x000000011c070540: movzbl 0x2(%r13),%ebx
  0x000000011c070545: add    $0x2,%r13
  0x000000011c070549: movabs $0x1109d7a20,%r10
  0x000000011c070553: jmpq   *(%r10,%rbx,8)
  0x000000011c070557: movq   $0x0,-0x10(%rbp)
  0x000000011c07055f: mov    -0x40(%rbp),%r13
  0x000000011c070563: mov    -0x38(%rbp),%r14
  0x000000011c070567: cmpq   $0x0,0x8(%r15)
  0x000000011c07056f: je     0x000000011c070625
  0x000000011c070575: callq  0x000000011c07057f
  0x000000011c07057a: jmpq   0x000000011c070611
  0x000000011c07057f: lea    0x8(%rsp),%rax
  0x000000011c070584: mov    %r13,-0x40(%rbp)
  0x000000011c070588: mov    %r15,%rdi
  0x000000011c07058b: vzeroupper 
  0x000000011c07058e: mov    %rbp,0x330(%r15)
  0x000000011c070595: mov    %rax,0x320(%r15)
  0x000000011c07059c: test   $0xf,%esp
  0x000000011c0705a2: je     0x000000011c0705ba
  0x000000011c0705a8: sub    $0x8,%rsp
  0x000000011c0705ac: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c0705b1: add    $0x8,%rsp
  0x000000011c0705b5: jmpq   0x000000011c0705bf
  0x000000011c0705ba: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c0705bf: movabs $0x0,%r10
  0x000000011c0705c9: mov    %r10,0x320(%r15)
  0x000000011c0705d0: movabs $0x0,%r10
  0x000000011c0705da: mov    %r10,0x330(%r15)
  0x000000011c0705e1: movabs $0x0,%r10
  0x000000011c0705eb: mov    %r10,0x328(%r15)
  0x000000011c0705f2: vzeroupper 
  0x000000011c0705f5: cmpq   $0x0,0x8(%r15)
  0x000000011c0705fd: je     0x000000011c070608
  0x000000011c070603: jmpq   0x000000011c054780
  0x000000011c070608: mov    -0x40(%rbp),%r13
  0x000000011c07060c: mov    -0x38(%rbp),%r14
  0x000000011c070610: retq   
  0x000000011c070611: movabs $0x1107f3493,%rdi
  0x000000011c07061b: and    $0xfffffffffffffff0,%rsp
  0x000000011c07061f: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c070624: hlt    
  0x000000011c070625: movzbl 0x3(%r13),%ebx
  0x000000011c07062a: add    $0x3,%r13
  0x000000011c07062e: movabs $0x1109d5220,%r10
  0x000000011c070638: jmpq   *(%r10,%rbx,8)
  0x000000011c07063c: movq   $0x0,-0x10(%rbp)
  0x000000011c070644: mov    -0x40(%rbp),%r13
  0x000000011c070648: mov    -0x38(%rbp),%r14
  0x000000011c07064c: cmpq   $0x0,0x8(%r15)
  0x000000011c070654: je     0x000000011c07070a
  0x000000011c07065a: callq  0x000000011c070664
  0x000000011c07065f: jmpq   0x000000011c0706f6
  0x000000011c070664: lea    0x8(%rsp),%rax
  0x000000011c070669: mov    %r13,-0x40(%rbp)
  0x000000011c07066d: mov    %r15,%rdi
  0x000000011c070670: vzeroupper 
  0x000000011c070673: mov    %rbp,0x330(%r15)
  0x000000011c07067a: mov    %rax,0x320(%r15)
  0x000000011c070681: test   $0xf,%esp
  0x000000011c070687: je     0x000000011c07069f
  0x000000011c07068d: sub    $0x8,%rsp
  0x000000011c070691: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c070696: add    $0x8,%rsp
  0x000000011c07069a: jmpq   0x000000011c0706a4
  0x000000011c07069f: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c0706a4: movabs $0x0,%r10
  0x000000011c0706ae: mov    %r10,0x320(%r15)
  0x000000011c0706b5: movabs $0x0,%r10
  0x000000011c0706bf: mov    %r10,0x330(%r15)
  0x000000011c0706c6: movabs $0x0,%r10
  0x000000011c0706d0: mov    %r10,0x328(%r15)
  0x000000011c0706d7: vzeroupper 
  0x000000011c0706da: cmpq   $0x0,0x8(%r15)
  0x000000011c0706e2: je     0x000000011c0706ed
  0x000000011c0706e8: jmpq   0x000000011c054780
  0x000000011c0706ed: mov    -0x40(%rbp),%r13
  0x000000011c0706f1: mov    -0x38(%rbp),%r14
  0x000000011c0706f5: retq   
  0x000000011c0706f6: movabs $0x1107f3493,%rdi
  0x000000011c070700: and    $0xfffffffffffffff0,%rsp
  0x000000011c070704: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c070709: hlt    
  0x000000011c07070a: movzbl 0x3(%r13),%ebx
  0x000000011c07070f: add    $0x3,%r13
  0x000000011c070713: movabs $0x1109d7220,%r10
  0x000000011c07071d: jmpq   *(%r10,%rbx,8)
  0x000000011c070721: movq   $0x0,-0x10(%rbp)
  0x000000011c070729: mov    -0x40(%rbp),%r13
  0x000000011c07072d: mov    -0x38(%rbp),%r14
  0x000000011c070731: cmpq   $0x0,0x8(%r15)
  0x000000011c070739: je     0x000000011c0707ef
  0x000000011c07073f: callq  0x000000011c070749
  0x000000011c070744: jmpq   0x000000011c0707db
  0x000000011c070749: lea    0x8(%rsp),%rax
  0x000000011c07074e: mov    %r13,-0x40(%rbp)
  0x000000011c070752: mov    %r15,%rdi
  0x000000011c070755: vzeroupper 
  0x000000011c070758: mov    %rbp,0x330(%r15)
  0x000000011c07075f: mov    %rax,0x320(%r15)
  0x000000011c070766: test   $0xf,%esp
  0x000000011c07076c: je     0x000000011c070784
  0x000000011c070772: sub    $0x8,%rsp
  0x000000011c070776: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c07077b: add    $0x8,%rsp
  0x000000011c07077f: jmpq   0x000000011c070789
  0x000000011c070784: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c070789: movabs $0x0,%r10
  0x000000011c070793: mov    %r10,0x320(%r15)
  0x000000011c07079a: movabs $0x0,%r10
  0x000000011c0707a4: mov    %r10,0x330(%r15)
  0x000000011c0707ab: movabs $0x0,%r10
  0x000000011c0707b5: mov    %r10,0x328(%r15)
  0x000000011c0707bc: vzeroupper 
  0x000000011c0707bf: cmpq   $0x0,0x8(%r15)
  0x000000011c0707c7: je     0x000000011c0707d2
  0x000000011c0707cd: jmpq   0x000000011c054780
  0x000000011c0707d2: mov    -0x40(%rbp),%r13
  0x000000011c0707d6: mov    -0x38(%rbp),%r14
  0x000000011c0707da: retq   
  0x000000011c0707db: movabs $0x1107f3493,%rdi
  0x000000011c0707e5: and    $0xfffffffffffffff0,%rsp
  0x000000011c0707e9: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c0707ee: hlt    
  0x000000011c0707ef: movzbl 0x3(%r13),%ebx
  0x000000011c0707f4: add    $0x3,%r13
  0x000000011c0707f8: movabs $0x1109d5a20,%r10
  0x000000011c070802: jmpq   *(%r10,%rbx,8)
  0x000000011c070806: movq   $0x0,-0x10(%rbp)
  0x000000011c07080e: mov    -0x40(%rbp),%r13
  0x000000011c070812: mov    -0x38(%rbp),%r14
  0x000000011c070816: cmpq   $0x0,0x8(%r15)
  0x000000011c07081e: je     0x000000011c0708d4
  0x000000011c070824: callq  0x000000011c07082e
  0x000000011c070829: jmpq   0x000000011c0708c0
  0x000000011c07082e: lea    0x8(%rsp),%rax
  0x000000011c070833: mov    %r13,-0x40(%rbp)
  0x000000011c070837: mov    %r15,%rdi
  0x000000011c07083a: vzeroupper 
  0x000000011c07083d: mov    %rbp,0x330(%r15)
  0x000000011c070844: mov    %rax,0x320(%r15)
  0x000000011c07084b: test   $0xf,%esp
  0x000000011c070851: je     0x000000011c070869
  0x000000011c070857: sub    $0x8,%rsp
  0x000000011c07085b: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c070860: add    $0x8,%rsp
  0x000000011c070864: jmpq   0x000000011c07086e
  0x000000011c070869: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c07086e: movabs $0x0,%r10
  0x000000011c070878: mov    %r10,0x320(%r15)
  0x000000011c07087f: movabs $0x0,%r10
  0x000000011c070889: mov    %r10,0x330(%r15)
  0x000000011c070890: movabs $0x0,%r10
  0x000000011c07089a: mov    %r10,0x328(%r15)
  0x000000011c0708a1: vzeroupper 
  0x000000011c0708a4: cmpq   $0x0,0x8(%r15)
  0x000000011c0708ac: je     0x000000011c0708b7
  0x000000011c0708b2: jmpq   0x000000011c054780
  0x000000011c0708b7: mov    -0x40(%rbp),%r13
  0x000000011c0708bb: mov    -0x38(%rbp),%r14
  0x000000011c0708bf: retq   
  0x000000011c0708c0: movabs $0x1107f3493,%rdi
  0x000000011c0708ca: and    $0xfffffffffffffff0,%rsp
  0x000000011c0708ce: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c0708d3: hlt    
  0x000000011c0708d4: movzbl 0x3(%r13),%ebx
  0x000000011c0708d9: add    $0x3,%r13
  0x000000011c0708dd: movabs $0x1109d6220,%r10
  0x000000011c0708e7: jmpq   *(%r10,%rbx,8)
  0x000000011c0708eb: movq   $0x0,-0x10(%rbp)
  0x000000011c0708f3: mov    -0x40(%rbp),%r13
  0x000000011c0708f7: mov    -0x38(%rbp),%r14
  0x000000011c0708fb: cmpq   $0x0,0x8(%r15)
  0x000000011c070903: je     0x000000011c0709b9
  0x000000011c070909: callq  0x000000011c070913
  0x000000011c07090e: jmpq   0x000000011c0709a5
  0x000000011c070913: lea    0x8(%rsp),%rax
  0x000000011c070918: mov    %r13,-0x40(%rbp)
  0x000000011c07091c: mov    %r15,%rdi
  0x000000011c07091f: vzeroupper 
  0x000000011c070922: mov    %rbp,0x330(%r15)
  0x000000011c070929: mov    %rax,0x320(%r15)
  0x000000011c070930: test   $0xf,%esp
  0x000000011c070936: je     0x000000011c07094e
  0x000000011c07093c: sub    $0x8,%rsp
  0x000000011c070940: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c070945: add    $0x8,%rsp
  0x000000011c070949: jmpq   0x000000011c070953
  0x000000011c07094e: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c070953: movabs $0x0,%r10
  0x000000011c07095d: mov    %r10,0x320(%r15)
  0x000000011c070964: movabs $0x0,%r10
  0x000000011c07096e: mov    %r10,0x330(%r15)
  0x000000011c070975: movabs $0x0,%r10
  0x000000011c07097f: mov    %r10,0x328(%r15)
  0x000000011c070986: vzeroupper 
  0x000000011c070989: cmpq   $0x0,0x8(%r15)
  0x000000011c070991: je     0x000000011c07099c
  0x000000011c070997: jmpq   0x000000011c054780
  0x000000011c07099c: mov    -0x40(%rbp),%r13
  0x000000011c0709a0: mov    -0x38(%rbp),%r14
  0x000000011c0709a4: retq   
  0x000000011c0709a5: movabs $0x1107f3493,%rdi
  0x000000011c0709af: and    $0xfffffffffffffff0,%rsp
  0x000000011c0709b3: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c0709b8: hlt    
  0x000000011c0709b9: movzbl 0x3(%r13),%ebx
  0x000000011c0709be: add    $0x3,%r13
  0x000000011c0709c2: movabs $0x1109d6a20,%r10
  0x000000011c0709cc: jmpq   *(%r10,%rbx,8)
  0x000000011c0709d0: movq   $0x0,-0x10(%rbp)
  0x000000011c0709d8: mov    -0x40(%rbp),%r13
  0x000000011c0709dc: mov    -0x38(%rbp),%r14
  0x000000011c0709e0: cmpq   $0x0,0x8(%r15)
  0x000000011c0709e8: je     0x000000011c070a9e
  0x000000011c0709ee: callq  0x000000011c0709f8
  0x000000011c0709f3: jmpq   0x000000011c070a8a
  0x000000011c0709f8: lea    0x8(%rsp),%rax
  0x000000011c0709fd: mov    %r13,-0x40(%rbp)
  0x000000011c070a01: mov    %r15,%rdi
  0x000000011c070a04: vzeroupper 
  0x000000011c070a07: mov    %rbp,0x330(%r15)
  0x000000011c070a0e: mov    %rax,0x320(%r15)
  0x000000011c070a15: test   $0xf,%esp
  0x000000011c070a1b: je     0x000000011c070a33
  0x000000011c070a21: sub    $0x8,%rsp
  0x000000011c070a25: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c070a2a: add    $0x8,%rsp
  0x000000011c070a2e: jmpq   0x000000011c070a38
  0x000000011c070a33: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c070a38: movabs $0x0,%r10
  0x000000011c070a42: mov    %r10,0x320(%r15)
  0x000000011c070a49: movabs $0x0,%r10
  0x000000011c070a53: mov    %r10,0x330(%r15)
  0x000000011c070a5a: movabs $0x0,%r10
  0x000000011c070a64: mov    %r10,0x328(%r15)
  0x000000011c070a6b: vzeroupper 
  0x000000011c070a6e: cmpq   $0x0,0x8(%r15)
  0x000000011c070a76: je     0x000000011c070a81
  0x000000011c070a7c: jmpq   0x000000011c054780
  0x000000011c070a81: mov    -0x40(%rbp),%r13
  0x000000011c070a85: mov    -0x38(%rbp),%r14
  0x000000011c070a89: retq   
  0x000000011c070a8a: movabs $0x1107f3493,%rdi
  0x000000011c070a94: and    $0xfffffffffffffff0,%rsp
  0x000000011c070a98: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c070a9d: hlt    
  0x000000011c070a9e: movzbl 0x3(%r13),%ebx
  0x000000011c070aa3: add    $0x3,%r13
  0x000000011c070aa7: movabs $0x1109d7a20,%r10
  0x000000011c070ab1: jmpq   *(%r10,%rbx,8)
  0x000000011c070ab5: movq   $0x0,-0x10(%rbp)
  0x000000011c070abd: mov    -0x40(%rbp),%r13
  0x000000011c070ac1: mov    -0x38(%rbp),%r14
  0x000000011c070ac5: cmpq   $0x0,0x8(%r15)
  0x000000011c070acd: je     0x000000011c070b83
  0x000000011c070ad3: callq  0x000000011c070add
  0x000000011c070ad8: jmpq   0x000000011c070b6f
  0x000000011c070add: lea    0x8(%rsp),%rax
  0x000000011c070ae2: mov    %r13,-0x40(%rbp)
  0x000000011c070ae6: mov    %r15,%rdi
  0x000000011c070ae9: vzeroupper 
  0x000000011c070aec: mov    %rbp,0x330(%r15)
  0x000000011c070af3: mov    %rax,0x320(%r15)
  0x000000011c070afa: test   $0xf,%esp
  0x000000011c070b00: je     0x000000011c070b18
  0x000000011c070b06: sub    $0x8,%rsp
  0x000000011c070b0a: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c070b0f: add    $0x8,%rsp
  0x000000011c070b13: jmpq   0x000000011c070b1d
  0x000000011c070b18: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c070b1d: movabs $0x0,%r10
  0x000000011c070b27: mov    %r10,0x320(%r15)
  0x000000011c070b2e: movabs $0x0,%r10
  0x000000011c070b38: mov    %r10,0x330(%r15)
  0x000000011c070b3f: movabs $0x0,%r10
  0x000000011c070b49: mov    %r10,0x328(%r15)
  0x000000011c070b50: vzeroupper 
  0x000000011c070b53: cmpq   $0x0,0x8(%r15)
  0x000000011c070b5b: je     0x000000011c070b66
  0x000000011c070b61: jmpq   0x000000011c054780
  0x000000011c070b66: mov    -0x40(%rbp),%r13
  0x000000011c070b6a: mov    -0x38(%rbp),%r14
  0x000000011c070b6e: retq   
  0x000000011c070b6f: movabs $0x1107f3493,%rdi
  0x000000011c070b79: and    $0xfffffffffffffff0,%rsp
  0x000000011c070b7d: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c070b82: hlt    
  0x000000011c070b83: movzbl 0x4(%r13),%ebx
  0x000000011c070b88: add    $0x4,%r13
  0x000000011c070b8c: movabs $0x1109d5220,%r10
  0x000000011c070b96: jmpq   *(%r10,%rbx,8)
  0x000000011c070b9a: movq   $0x0,-0x10(%rbp)
  0x000000011c070ba2: mov    -0x40(%rbp),%r13
  0x000000011c070ba6: mov    -0x38(%rbp),%r14
  0x000000011c070baa: cmpq   $0x0,0x8(%r15)
  0x000000011c070bb2: je     0x000000011c070c68
  0x000000011c070bb8: callq  0x000000011c070bc2
  0x000000011c070bbd: jmpq   0x000000011c070c54
  0x000000011c070bc2: lea    0x8(%rsp),%rax
  0x000000011c070bc7: mov    %r13,-0x40(%rbp)
  0x000000011c070bcb: mov    %r15,%rdi
  0x000000011c070bce: vzeroupper 
  0x000000011c070bd1: mov    %rbp,0x330(%r15)
  0x000000011c070bd8: mov    %rax,0x320(%r15)
  0x000000011c070bdf: test   $0xf,%esp
  0x000000011c070be5: je     0x000000011c070bfd
  0x000000011c070beb: sub    $0x8,%rsp
  0x000000011c070bef: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c070bf4: add    $0x8,%rsp
  0x000000011c070bf8: jmpq   0x000000011c070c02
  0x000000011c070bfd: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c070c02: movabs $0x0,%r10
  0x000000011c070c0c: mov    %r10,0x320(%r15)
  0x000000011c070c13: movabs $0x0,%r10
  0x000000011c070c1d: mov    %r10,0x330(%r15)
  0x000000011c070c24: movabs $0x0,%r10
  0x000000011c070c2e: mov    %r10,0x328(%r15)
  0x000000011c070c35: vzeroupper 
  0x000000011c070c38: cmpq   $0x0,0x8(%r15)
  0x000000011c070c40: je     0x000000011c070c4b
  0x000000011c070c46: jmpq   0x000000011c054780
  0x000000011c070c4b: mov    -0x40(%rbp),%r13
  0x000000011c070c4f: mov    -0x38(%rbp),%r14
  0x000000011c070c53: retq   
  0x000000011c070c54: movabs $0x1107f3493,%rdi
  0x000000011c070c5e: and    $0xfffffffffffffff0,%rsp
  0x000000011c070c62: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c070c67: hlt    
  0x000000011c070c68: movzbl 0x4(%r13),%ebx
  0x000000011c070c6d: add    $0x4,%r13
  0x000000011c070c71: movabs $0x1109d7220,%r10
  0x000000011c070c7b: jmpq   *(%r10,%rbx,8)
  0x000000011c070c7f: movq   $0x0,-0x10(%rbp)
  0x000000011c070c87: mov    -0x40(%rbp),%r13
  0x000000011c070c8b: mov    -0x38(%rbp),%r14
  0x000000011c070c8f: cmpq   $0x0,0x8(%r15)
  0x000000011c070c97: je     0x000000011c070d4d
  0x000000011c070c9d: callq  0x000000011c070ca7
  0x000000011c070ca2: jmpq   0x000000011c070d39
  0x000000011c070ca7: lea    0x8(%rsp),%rax
  0x000000011c070cac: mov    %r13,-0x40(%rbp)
  0x000000011c070cb0: mov    %r15,%rdi
  0x000000011c070cb3: vzeroupper 
  0x000000011c070cb6: mov    %rbp,0x330(%r15)
  0x000000011c070cbd: mov    %rax,0x320(%r15)
  0x000000011c070cc4: test   $0xf,%esp
  0x000000011c070cca: je     0x000000011c070ce2
  0x000000011c070cd0: sub    $0x8,%rsp
  0x000000011c070cd4: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c070cd9: add    $0x8,%rsp
  0x000000011c070cdd: jmpq   0x000000011c070ce7
  0x000000011c070ce2: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c070ce7: movabs $0x0,%r10
  0x000000011c070cf1: mov    %r10,0x320(%r15)
  0x000000011c070cf8: movabs $0x0,%r10
  0x000000011c070d02: mov    %r10,0x330(%r15)
  0x000000011c070d09: movabs $0x0,%r10
  0x000000011c070d13: mov    %r10,0x328(%r15)
  0x000000011c070d1a: vzeroupper 
  0x000000011c070d1d: cmpq   $0x0,0x8(%r15)
  0x000000011c070d25: je     0x000000011c070d30
  0x000000011c070d2b: jmpq   0x000000011c054780
  0x000000011c070d30: mov    -0x40(%rbp),%r13
  0x000000011c070d34: mov    -0x38(%rbp),%r14
  0x000000011c070d38: retq   
  0x000000011c070d39: movabs $0x1107f3493,%rdi
  0x000000011c070d43: and    $0xfffffffffffffff0,%rsp
  0x000000011c070d47: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c070d4c: hlt    
  0x000000011c070d4d: movzbl 0x4(%r13),%ebx
  0x000000011c070d52: add    $0x4,%r13
  0x000000011c070d56: movabs $0x1109d5a20,%r10
  0x000000011c070d60: jmpq   *(%r10,%rbx,8)
  0x000000011c070d64: movq   $0x0,-0x10(%rbp)
  0x000000011c070d6c: mov    -0x40(%rbp),%r13
  0x000000011c070d70: mov    -0x38(%rbp),%r14
  0x000000011c070d74: cmpq   $0x0,0x8(%r15)
  0x000000011c070d7c: je     0x000000011c070e32
  0x000000011c070d82: callq  0x000000011c070d8c
  0x000000011c070d87: jmpq   0x000000011c070e1e
  0x000000011c070d8c: lea    0x8(%rsp),%rax
  0x000000011c070d91: mov    %r13,-0x40(%rbp)
  0x000000011c070d95: mov    %r15,%rdi
  0x000000011c070d98: vzeroupper 
  0x000000011c070d9b: mov    %rbp,0x330(%r15)
  0x000000011c070da2: mov    %rax,0x320(%r15)
  0x000000011c070da9: test   $0xf,%esp
  0x000000011c070daf: je     0x000000011c070dc7
  0x000000011c070db5: sub    $0x8,%rsp
  0x000000011c070db9: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c070dbe: add    $0x8,%rsp
  0x000000011c070dc2: jmpq   0x000000011c070dcc
  0x000000011c070dc7: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c070dcc: movabs $0x0,%r10
  0x000000011c070dd6: mov    %r10,0x320(%r15)
  0x000000011c070ddd: movabs $0x0,%r10
  0x000000011c070de7: mov    %r10,0x330(%r15)
  0x000000011c070dee: movabs $0x0,%r10
  0x000000011c070df8: mov    %r10,0x328(%r15)
  0x000000011c070dff: vzeroupper 
  0x000000011c070e02: cmpq   $0x0,0x8(%r15)
  0x000000011c070e0a: je     0x000000011c070e15
  0x000000011c070e10: jmpq   0x000000011c054780
  0x000000011c070e15: mov    -0x40(%rbp),%r13
  0x000000011c070e19: mov    -0x38(%rbp),%r14
  0x000000011c070e1d: retq   
  0x000000011c070e1e: movabs $0x1107f3493,%rdi
  0x000000011c070e28: and    $0xfffffffffffffff0,%rsp
  0x000000011c070e2c: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c070e31: hlt    
  0x000000011c070e32: movzbl 0x4(%r13),%ebx
  0x000000011c070e37: add    $0x4,%r13
  0x000000011c070e3b: movabs $0x1109d6220,%r10
  0x000000011c070e45: jmpq   *(%r10,%rbx,8)
  0x000000011c070e49: movq   $0x0,-0x10(%rbp)
  0x000000011c070e51: mov    -0x40(%rbp),%r13
  0x000000011c070e55: mov    -0x38(%rbp),%r14
  0x000000011c070e59: cmpq   $0x0,0x8(%r15)
  0x000000011c070e61: je     0x000000011c070f17
  0x000000011c070e67: callq  0x000000011c070e71
  0x000000011c070e6c: jmpq   0x000000011c070f03
  0x000000011c070e71: lea    0x8(%rsp),%rax
  0x000000011c070e76: mov    %r13,-0x40(%rbp)
  0x000000011c070e7a: mov    %r15,%rdi
  0x000000011c070e7d: vzeroupper 
  0x000000011c070e80: mov    %rbp,0x330(%r15)
  0x000000011c070e87: mov    %rax,0x320(%r15)
  0x000000011c070e8e: test   $0xf,%esp
  0x000000011c070e94: je     0x000000011c070eac
  0x000000011c070e9a: sub    $0x8,%rsp
  0x000000011c070e9e: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c070ea3: add    $0x8,%rsp
  0x000000011c070ea7: jmpq   0x000000011c070eb1
  0x000000011c070eac: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c070eb1: movabs $0x0,%r10
  0x000000011c070ebb: mov    %r10,0x320(%r15)
  0x000000011c070ec2: movabs $0x0,%r10
  0x000000011c070ecc: mov    %r10,0x330(%r15)
  0x000000011c070ed3: movabs $0x0,%r10
  0x000000011c070edd: mov    %r10,0x328(%r15)
  0x000000011c070ee4: vzeroupper 
  0x000000011c070ee7: cmpq   $0x0,0x8(%r15)
  0x000000011c070eef: je     0x000000011c070efa
  0x000000011c070ef5: jmpq   0x000000011c054780
  0x000000011c070efa: mov    -0x40(%rbp),%r13
  0x000000011c070efe: mov    -0x38(%rbp),%r14
  0x000000011c070f02: retq   
  0x000000011c070f03: movabs $0x1107f3493,%rdi
  0x000000011c070f0d: and    $0xfffffffffffffff0,%rsp
  0x000000011c070f11: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c070f16: hlt    
  0x000000011c070f17: movzbl 0x4(%r13),%ebx
  0x000000011c070f1c: add    $0x4,%r13
  0x000000011c070f20: movabs $0x1109d6a20,%r10
  0x000000011c070f2a: jmpq   *(%r10,%rbx,8)
  0x000000011c070f2e: movq   $0x0,-0x10(%rbp)
  0x000000011c070f36: mov    -0x40(%rbp),%r13
  0x000000011c070f3a: mov    -0x38(%rbp),%r14
  0x000000011c070f3e: cmpq   $0x0,0x8(%r15)
  0x000000011c070f46: je     0x000000011c070ffc
  0x000000011c070f4c: callq  0x000000011c070f56
  0x000000011c070f51: jmpq   0x000000011c070fe8
  0x000000011c070f56: lea    0x8(%rsp),%rax
  0x000000011c070f5b: mov    %r13,-0x40(%rbp)
  0x000000011c070f5f: mov    %r15,%rdi
  0x000000011c070f62: vzeroupper 
  0x000000011c070f65: mov    %rbp,0x330(%r15)
  0x000000011c070f6c: mov    %rax,0x320(%r15)
  0x000000011c070f73: test   $0xf,%esp
  0x000000011c070f79: je     0x000000011c070f91
  0x000000011c070f7f: sub    $0x8,%rsp
  0x000000011c070f83: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c070f88: add    $0x8,%rsp
  0x000000011c070f8c: jmpq   0x000000011c070f96
  0x000000011c070f91: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c070f96: movabs $0x0,%r10
  0x000000011c070fa0: mov    %r10,0x320(%r15)
  0x000000011c070fa7: movabs $0x0,%r10
  0x000000011c070fb1: mov    %r10,0x330(%r15)
  0x000000011c070fb8: movabs $0x0,%r10
  0x000000011c070fc2: mov    %r10,0x328(%r15)
  0x000000011c070fc9: vzeroupper 
  0x000000011c070fcc: cmpq   $0x0,0x8(%r15)
  0x000000011c070fd4: je     0x000000011c070fdf
  0x000000011c070fda: jmpq   0x000000011c054780
  0x000000011c070fdf: mov    -0x40(%rbp),%r13
  0x000000011c070fe3: mov    -0x38(%rbp),%r14
  0x000000011c070fe7: retq   
  0x000000011c070fe8: movabs $0x1107f3493,%rdi
  0x000000011c070ff2: and    $0xfffffffffffffff0,%rsp
  0x000000011c070ff6: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c070ffb: hlt    
  0x000000011c070ffc: movzbl 0x4(%r13),%ebx
  0x000000011c071001: add    $0x4,%r13
  0x000000011c071005: movabs $0x1109d7a20,%r10
  0x000000011c07100f: jmpq   *(%r10,%rbx,8)
  0x000000011c071013: movq   $0x0,-0x10(%rbp)
  0x000000011c07101b: mov    -0x40(%rbp),%r13
  0x000000011c07101f: mov    -0x38(%rbp),%r14
  0x000000011c071023: cmpq   $0x0,0x8(%r15)
  0x000000011c07102b: je     0x000000011c0710e1
  0x000000011c071031: callq  0x000000011c07103b
  0x000000011c071036: jmpq   0x000000011c0710cd
  0x000000011c07103b: lea    0x8(%rsp),%rax
  0x000000011c071040: mov    %r13,-0x40(%rbp)
  0x000000011c071044: mov    %r15,%rdi
  0x000000011c071047: vzeroupper 
  0x000000011c07104a: mov    %rbp,0x330(%r15)
  0x000000011c071051: mov    %rax,0x320(%r15)
  0x000000011c071058: test   $0xf,%esp
  0x000000011c07105e: je     0x000000011c071076
  0x000000011c071064: sub    $0x8,%rsp
  0x000000011c071068: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c07106d: add    $0x8,%rsp
  0x000000011c071071: jmpq   0x000000011c07107b
  0x000000011c071076: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c07107b: movabs $0x0,%r10
  0x000000011c071085: mov    %r10,0x320(%r15)
  0x000000011c07108c: movabs $0x0,%r10
  0x000000011c071096: mov    %r10,0x330(%r15)
  0x000000011c07109d: movabs $0x0,%r10
  0x000000011c0710a7: mov    %r10,0x328(%r15)
  0x000000011c0710ae: vzeroupper 
  0x000000011c0710b1: cmpq   $0x0,0x8(%r15)
  0x000000011c0710b9: je     0x000000011c0710c4
  0x000000011c0710bf: jmpq   0x000000011c054780
  0x000000011c0710c4: mov    -0x40(%rbp),%r13
  0x000000011c0710c8: mov    -0x38(%rbp),%r14
  0x000000011c0710cc: retq   
  0x000000011c0710cd: movabs $0x1107f3493,%rdi
  0x000000011c0710d7: and    $0xfffffffffffffff0,%rsp
  0x000000011c0710db: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c0710e0: hlt    
  0x000000011c0710e1: movzbl 0x5(%r13),%ebx
  0x000000011c0710e6: add    $0x5,%r13
  0x000000011c0710ea: movabs $0x1109d5220,%r10
  0x000000011c0710f4: jmpq   *(%r10,%rbx,8)
  0x000000011c0710f8: movq   $0x0,-0x10(%rbp)
  0x000000011c071100: mov    -0x40(%rbp),%r13
  0x000000011c071104: mov    -0x38(%rbp),%r14
  0x000000011c071108: cmpq   $0x0,0x8(%r15)
  0x000000011c071110: je     0x000000011c0711c6
  0x000000011c071116: callq  0x000000011c071120
  0x000000011c07111b: jmpq   0x000000011c0711b2
  0x000000011c071120: lea    0x8(%rsp),%rax
  0x000000011c071125: mov    %r13,-0x40(%rbp)
  0x000000011c071129: mov    %r15,%rdi
  0x000000011c07112c: vzeroupper 
  0x000000011c07112f: mov    %rbp,0x330(%r15)
  0x000000011c071136: mov    %rax,0x320(%r15)
  0x000000011c07113d: test   $0xf,%esp
  0x000000011c071143: je     0x000000011c07115b
  0x000000011c071149: sub    $0x8,%rsp
  0x000000011c07114d: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c071152: add    $0x8,%rsp
  0x000000011c071156: jmpq   0x000000011c071160
  0x000000011c07115b: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c071160: movabs $0x0,%r10
  0x000000011c07116a: mov    %r10,0x320(%r15)
  0x000000011c071171: movabs $0x0,%r10
  0x000000011c07117b: mov    %r10,0x330(%r15)
  0x000000011c071182: movabs $0x0,%r10
  0x000000011c07118c: mov    %r10,0x328(%r15)
  0x000000011c071193: vzeroupper 
  0x000000011c071196: cmpq   $0x0,0x8(%r15)
  0x000000011c07119e: je     0x000000011c0711a9
  0x000000011c0711a4: jmpq   0x000000011c054780
  0x000000011c0711a9: mov    -0x40(%rbp),%r13
  0x000000011c0711ad: mov    -0x38(%rbp),%r14
  0x000000011c0711b1: retq   
  0x000000011c0711b2: movabs $0x1107f3493,%rdi
  0x000000011c0711bc: and    $0xfffffffffffffff0,%rsp
  0x000000011c0711c0: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c0711c5: hlt    
  0x000000011c0711c6: movzbl 0x5(%r13),%ebx
  0x000000011c0711cb: add    $0x5,%r13
  0x000000011c0711cf: movabs $0x1109d7220,%r10
  0x000000011c0711d9: jmpq   *(%r10,%rbx,8)
  0x000000011c0711dd: movq   $0x0,-0x10(%rbp)
  0x000000011c0711e5: mov    -0x40(%rbp),%r13
  0x000000011c0711e9: mov    -0x38(%rbp),%r14
  0x000000011c0711ed: cmpq   $0x0,0x8(%r15)
  0x000000011c0711f5: je     0x000000011c0712ab
  0x000000011c0711fb: callq  0x000000011c071205
  0x000000011c071200: jmpq   0x000000011c071297
  0x000000011c071205: lea    0x8(%rsp),%rax
  0x000000011c07120a: mov    %r13,-0x40(%rbp)
  0x000000011c07120e: mov    %r15,%rdi
  0x000000011c071211: vzeroupper 
  0x000000011c071214: mov    %rbp,0x330(%r15)
  0x000000011c07121b: mov    %rax,0x320(%r15)
  0x000000011c071222: test   $0xf,%esp
  0x000000011c071228: je     0x000000011c071240
  0x000000011c07122e: sub    $0x8,%rsp
  0x000000011c071232: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c071237: add    $0x8,%rsp
  0x000000011c07123b: jmpq   0x000000011c071245
  0x000000011c071240: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c071245: movabs $0x0,%r10
  0x000000011c07124f: mov    %r10,0x320(%r15)
  0x000000011c071256: movabs $0x0,%r10
  0x000000011c071260: mov    %r10,0x330(%r15)
  0x000000011c071267: movabs $0x0,%r10
  0x000000011c071271: mov    %r10,0x328(%r15)
  0x000000011c071278: vzeroupper 
  0x000000011c07127b: cmpq   $0x0,0x8(%r15)
  0x000000011c071283: je     0x000000011c07128e
  0x000000011c071289: jmpq   0x000000011c054780
  0x000000011c07128e: mov    -0x40(%rbp),%r13
  0x000000011c071292: mov    -0x38(%rbp),%r14
  0x000000011c071296: retq   
  0x000000011c071297: movabs $0x1107f3493,%rdi
  0x000000011c0712a1: and    $0xfffffffffffffff0,%rsp
  0x000000011c0712a5: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c0712aa: hlt    
  0x000000011c0712ab: movzbl 0x5(%r13),%ebx
  0x000000011c0712b0: add    $0x5,%r13
  0x000000011c0712b4: movabs $0x1109d5a20,%r10
  0x000000011c0712be: jmpq   *(%r10,%rbx,8)
  0x000000011c0712c2: movq   $0x0,-0x10(%rbp)
  0x000000011c0712ca: mov    -0x40(%rbp),%r13
  0x000000011c0712ce: mov    -0x38(%rbp),%r14
  0x000000011c0712d2: cmpq   $0x0,0x8(%r15)
  0x000000011c0712da: je     0x000000011c071390
  0x000000011c0712e0: callq  0x000000011c0712ea
  0x000000011c0712e5: jmpq   0x000000011c07137c
  0x000000011c0712ea: lea    0x8(%rsp),%rax
  0x000000011c0712ef: mov    %r13,-0x40(%rbp)
  0x000000011c0712f3: mov    %r15,%rdi
  0x000000011c0712f6: vzeroupper 
  0x000000011c0712f9: mov    %rbp,0x330(%r15)
  0x000000011c071300: mov    %rax,0x320(%r15)
  0x000000011c071307: test   $0xf,%esp
  0x000000011c07130d: je     0x000000011c071325
  0x000000011c071313: sub    $0x8,%rsp
  0x000000011c071317: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c07131c: add    $0x8,%rsp
  0x000000011c071320: jmpq   0x000000011c07132a
  0x000000011c071325: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c07132a: movabs $0x0,%r10
  0x000000011c071334: mov    %r10,0x320(%r15)
  0x000000011c07133b: movabs $0x0,%r10
  0x000000011c071345: mov    %r10,0x330(%r15)
  0x000000011c07134c: movabs $0x0,%r10
  0x000000011c071356: mov    %r10,0x328(%r15)
  0x000000011c07135d: vzeroupper 
  0x000000011c071360: cmpq   $0x0,0x8(%r15)
  0x000000011c071368: je     0x000000011c071373
  0x000000011c07136e: jmpq   0x000000011c054780
  0x000000011c071373: mov    -0x40(%rbp),%r13
  0x000000011c071377: mov    -0x38(%rbp),%r14
  0x000000011c07137b: retq   
  0x000000011c07137c: movabs $0x1107f3493,%rdi
  0x000000011c071386: and    $0xfffffffffffffff0,%rsp
  0x000000011c07138a: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c07138f: hlt    
  0x000000011c071390: movzbl 0x5(%r13),%ebx
  0x000000011c071395: add    $0x5,%r13
  0x000000011c071399: movabs $0x1109d6220,%r10
  0x000000011c0713a3: jmpq   *(%r10,%rbx,8)
  0x000000011c0713a7: movq   $0x0,-0x10(%rbp)
  0x000000011c0713af: mov    -0x40(%rbp),%r13
  0x000000011c0713b3: mov    -0x38(%rbp),%r14
  0x000000011c0713b7: cmpq   $0x0,0x8(%r15)
  0x000000011c0713bf: je     0x000000011c071475
  0x000000011c0713c5: callq  0x000000011c0713cf
  0x000000011c0713ca: jmpq   0x000000011c071461
  0x000000011c0713cf: lea    0x8(%rsp),%rax
  0x000000011c0713d4: mov    %r13,-0x40(%rbp)
  0x000000011c0713d8: mov    %r15,%rdi
  0x000000011c0713db: vzeroupper 
  0x000000011c0713de: mov    %rbp,0x330(%r15)
  0x000000011c0713e5: mov    %rax,0x320(%r15)
  0x000000011c0713ec: test   $0xf,%esp
  0x000000011c0713f2: je     0x000000011c07140a
  0x000000011c0713f8: sub    $0x8,%rsp
  0x000000011c0713fc: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c071401: add    $0x8,%rsp
  0x000000011c071405: jmpq   0x000000011c07140f
  0x000000011c07140a: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c07140f: movabs $0x0,%r10
  0x000000011c071419: mov    %r10,0x320(%r15)
  0x000000011c071420: movabs $0x0,%r10
  0x000000011c07142a: mov    %r10,0x330(%r15)
  0x000000011c071431: movabs $0x0,%r10
  0x000000011c07143b: mov    %r10,0x328(%r15)
  0x000000011c071442: vzeroupper 
  0x000000011c071445: cmpq   $0x0,0x8(%r15)
  0x000000011c07144d: je     0x000000011c071458
  0x000000011c071453: jmpq   0x000000011c054780
  0x000000011c071458: mov    -0x40(%rbp),%r13
  0x000000011c07145c: mov    -0x38(%rbp),%r14
  0x000000011c071460: retq   
  0x000000011c071461: movabs $0x1107f3493,%rdi
  0x000000011c07146b: and    $0xfffffffffffffff0,%rsp
  0x000000011c07146f: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c071474: hlt    
  0x000000011c071475: movzbl 0x5(%r13),%ebx
  0x000000011c07147a: add    $0x5,%r13
  0x000000011c07147e: movabs $0x1109d6a20,%r10
  0x000000011c071488: jmpq   *(%r10,%rbx,8)
  0x000000011c07148c: movq   $0x0,-0x10(%rbp)
  0x000000011c071494: mov    -0x40(%rbp),%r13
  0x000000011c071498: mov    -0x38(%rbp),%r14
  0x000000011c07149c: cmpq   $0x0,0x8(%r15)
  0x000000011c0714a4: je     0x000000011c07155a
  0x000000011c0714aa: callq  0x000000011c0714b4
  0x000000011c0714af: jmpq   0x000000011c071546
  0x000000011c0714b4: lea    0x8(%rsp),%rax
  0x000000011c0714b9: mov    %r13,-0x40(%rbp)
  0x000000011c0714bd: mov    %r15,%rdi
  0x000000011c0714c0: vzeroupper 
  0x000000011c0714c3: mov    %rbp,0x330(%r15)
  0x000000011c0714ca: mov    %rax,0x320(%r15)
  0x000000011c0714d1: test   $0xf,%esp
  0x000000011c0714d7: je     0x000000011c0714ef
  0x000000011c0714dd: sub    $0x8,%rsp
  0x000000011c0714e1: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c0714e6: add    $0x8,%rsp
  0x000000011c0714ea: jmpq   0x000000011c0714f4
  0x000000011c0714ef: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c0714f4: movabs $0x0,%r10
  0x000000011c0714fe: mov    %r10,0x320(%r15)
  0x000000011c071505: movabs $0x0,%r10
  0x000000011c07150f: mov    %r10,0x330(%r15)
  0x000000011c071516: movabs $0x0,%r10
  0x000000011c071520: mov    %r10,0x328(%r15)
  0x000000011c071527: vzeroupper 
  0x000000011c07152a: cmpq   $0x0,0x8(%r15)
  0x000000011c071532: je     0x000000011c07153d
  0x000000011c071538: jmpq   0x000000011c054780
  0x000000011c07153d: mov    -0x40(%rbp),%r13
  0x000000011c071541: mov    -0x38(%rbp),%r14
  0x000000011c071545: retq   
  0x000000011c071546: movabs $0x1107f3493,%rdi
  0x000000011c071550: and    $0xfffffffffffffff0,%rsp
  0x000000011c071554: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c071559: hlt    
  0x000000011c07155a: movzbl 0x5(%r13),%ebx
  0x000000011c07155f: add    $0x5,%r13
  0x000000011c071563: movabs $0x1109d7a20,%r10
  0x000000011c07156d: jmpq   *(%r10,%rbx,8)
  0x000000011c071571: movq   $0x0,-0x10(%rbp)
  0x000000011c071579: mov    -0x40(%rbp),%r13
  0x000000011c07157d: mov    -0x38(%rbp),%r14
  0x000000011c071581: cmpq   $0x0,0x8(%r15)
  0x000000011c071589: je     0x000000011c07163f
  0x000000011c07158f: callq  0x000000011c071599
  0x000000011c071594: jmpq   0x000000011c07162b
  0x000000011c071599: lea    0x8(%rsp),%rax
  0x000000011c07159e: mov    %r13,-0x40(%rbp)
  0x000000011c0715a2: mov    %r15,%rdi
  0x000000011c0715a5: vzeroupper 
  0x000000011c0715a8: mov    %rbp,0x330(%r15)
  0x000000011c0715af: mov    %rax,0x320(%r15)
  0x000000011c0715b6: test   $0xf,%esp
  0x000000011c0715bc: je     0x000000011c0715d4
  0x000000011c0715c2: sub    $0x8,%rsp
  0x000000011c0715c6: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c0715cb: add    $0x8,%rsp
  0x000000011c0715cf: jmpq   0x000000011c0715d9
  0x000000011c0715d4: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c0715d9: movabs $0x0,%r10
  0x000000011c0715e3: mov    %r10,0x320(%r15)
  0x000000011c0715ea: movabs $0x0,%r10
  0x000000011c0715f4: mov    %r10,0x330(%r15)
  0x000000011c0715fb: movabs $0x0,%r10
  0x000000011c071605: mov    %r10,0x328(%r15)
  0x000000011c07160c: vzeroupper 
  0x000000011c07160f: cmpq   $0x0,0x8(%r15)
  0x000000011c071617: je     0x000000011c071622
  0x000000011c07161d: jmpq   0x000000011c054780
  0x000000011c071622: mov    -0x40(%rbp),%r13
  0x000000011c071626: mov    -0x38(%rbp),%r14
  0x000000011c07162a: retq   
  0x000000011c07162b: movabs $0x1107f3493,%rdi
  0x000000011c071635: and    $0xfffffffffffffff0,%rsp
  0x000000011c071639: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c07163e: hlt    
  0x000000011c07163f: movzbl 0x6(%r13),%ebx
  0x000000011c071644: add    $0x6,%r13
  0x000000011c071648: movabs $0x1109d5220,%r10
  0x000000011c071652: jmpq   *(%r10,%rbx,8)
  0x000000011c071656: movq   $0x0,-0x10(%rbp)
  0x000000011c07165e: mov    -0x40(%rbp),%r13
  0x000000011c071662: mov    -0x38(%rbp),%r14
  0x000000011c071666: cmpq   $0x0,0x8(%r15)
  0x000000011c07166e: je     0x000000011c071724
  0x000000011c071674: callq  0x000000011c07167e
  0x000000011c071679: jmpq   0x000000011c071710
  0x000000011c07167e: lea    0x8(%rsp),%rax
  0x000000011c071683: mov    %r13,-0x40(%rbp)
  0x000000011c071687: mov    %r15,%rdi
  0x000000011c07168a: vzeroupper 
  0x000000011c07168d: mov    %rbp,0x330(%r15)
  0x000000011c071694: mov    %rax,0x320(%r15)
  0x000000011c07169b: test   $0xf,%esp
  0x000000011c0716a1: je     0x000000011c0716b9
  0x000000011c0716a7: sub    $0x8,%rsp
  0x000000011c0716ab: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c0716b0: add    $0x8,%rsp
  0x000000011c0716b4: jmpq   0x000000011c0716be
  0x000000011c0716b9: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c0716be: movabs $0x0,%r10
  0x000000011c0716c8: mov    %r10,0x320(%r15)
  0x000000011c0716cf: movabs $0x0,%r10
  0x000000011c0716d9: mov    %r10,0x330(%r15)
  0x000000011c0716e0: movabs $0x0,%r10
  0x000000011c0716ea: mov    %r10,0x328(%r15)
  0x000000011c0716f1: vzeroupper 
  0x000000011c0716f4: cmpq   $0x0,0x8(%r15)
  0x000000011c0716fc: je     0x000000011c071707
  0x000000011c071702: jmpq   0x000000011c054780
  0x000000011c071707: mov    -0x40(%rbp),%r13
  0x000000011c07170b: mov    -0x38(%rbp),%r14
  0x000000011c07170f: retq   
  0x000000011c071710: movabs $0x1107f3493,%rdi
  0x000000011c07171a: and    $0xfffffffffffffff0,%rsp
  0x000000011c07171e: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c071723: hlt    
  0x000000011c071724: movzbl 0x6(%r13),%ebx
  0x000000011c071729: add    $0x6,%r13
  0x000000011c07172d: movabs $0x1109d7220,%r10
  0x000000011c071737: jmpq   *(%r10,%rbx,8)
  0x000000011c07173b: movq   $0x0,-0x10(%rbp)
  0x000000011c071743: mov    -0x40(%rbp),%r13
  0x000000011c071747: mov    -0x38(%rbp),%r14
  0x000000011c07174b: cmpq   $0x0,0x8(%r15)
  0x000000011c071753: je     0x000000011c071809
  0x000000011c071759: callq  0x000000011c071763
  0x000000011c07175e: jmpq   0x000000011c0717f5
  0x000000011c071763: lea    0x8(%rsp),%rax
  0x000000011c071768: mov    %r13,-0x40(%rbp)
  0x000000011c07176c: mov    %r15,%rdi
  0x000000011c07176f: vzeroupper 
  0x000000011c071772: mov    %rbp,0x330(%r15)
  0x000000011c071779: mov    %rax,0x320(%r15)
  0x000000011c071780: test   $0xf,%esp
  0x000000011c071786: je     0x000000011c07179e
  0x000000011c07178c: sub    $0x8,%rsp
  0x000000011c071790: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c071795: add    $0x8,%rsp
  0x000000011c071799: jmpq   0x000000011c0717a3
  0x000000011c07179e: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c0717a3: movabs $0x0,%r10
  0x000000011c0717ad: mov    %r10,0x320(%r15)
  0x000000011c0717b4: movabs $0x0,%r10
  0x000000011c0717be: mov    %r10,0x330(%r15)
  0x000000011c0717c5: movabs $0x0,%r10
  0x000000011c0717cf: mov    %r10,0x328(%r15)
  0x000000011c0717d6: vzeroupper 
  0x000000011c0717d9: cmpq   $0x0,0x8(%r15)
  0x000000011c0717e1: je     0x000000011c0717ec
  0x000000011c0717e7: jmpq   0x000000011c054780
  0x000000011c0717ec: mov    -0x40(%rbp),%r13
  0x000000011c0717f0: mov    -0x38(%rbp),%r14
  0x000000011c0717f4: retq   
  0x000000011c0717f5: movabs $0x1107f3493,%rdi
  0x000000011c0717ff: and    $0xfffffffffffffff0,%rsp
  0x000000011c071803: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c071808: hlt    
  0x000000011c071809: movzbl 0x6(%r13),%ebx
  0x000000011c07180e: add    $0x6,%r13
  0x000000011c071812: movabs $0x1109d5a20,%r10
  0x000000011c07181c: jmpq   *(%r10,%rbx,8)
  0x000000011c071820: movq   $0x0,-0x10(%rbp)
  0x000000011c071828: mov    -0x40(%rbp),%r13
  0x000000011c07182c: mov    -0x38(%rbp),%r14
  0x000000011c071830: cmpq   $0x0,0x8(%r15)
  0x000000011c071838: je     0x000000011c0718ee
  0x000000011c07183e: callq  0x000000011c071848
  0x000000011c071843: jmpq   0x000000011c0718da
  0x000000011c071848: lea    0x8(%rsp),%rax
  0x000000011c07184d: mov    %r13,-0x40(%rbp)
  0x000000011c071851: mov    %r15,%rdi
  0x000000011c071854: vzeroupper 
  0x000000011c071857: mov    %rbp,0x330(%r15)
  0x000000011c07185e: mov    %rax,0x320(%r15)
  0x000000011c071865: test   $0xf,%esp
  0x000000011c07186b: je     0x000000011c071883
  0x000000011c071871: sub    $0x8,%rsp
  0x000000011c071875: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c07187a: add    $0x8,%rsp
  0x000000011c07187e: jmpq   0x000000011c071888
  0x000000011c071883: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c071888: movabs $0x0,%r10
  0x000000011c071892: mov    %r10,0x320(%r15)
  0x000000011c071899: movabs $0x0,%r10
  0x000000011c0718a3: mov    %r10,0x330(%r15)
  0x000000011c0718aa: movabs $0x0,%r10
  0x000000011c0718b4: mov    %r10,0x328(%r15)
  0x000000011c0718bb: vzeroupper 
  0x000000011c0718be: cmpq   $0x0,0x8(%r15)
  0x000000011c0718c6: je     0x000000011c0718d1
  0x000000011c0718cc: jmpq   0x000000011c054780
  0x000000011c0718d1: mov    -0x40(%rbp),%r13
  0x000000011c0718d5: mov    -0x38(%rbp),%r14
  0x000000011c0718d9: retq   
  0x000000011c0718da: movabs $0x1107f3493,%rdi
  0x000000011c0718e4: and    $0xfffffffffffffff0,%rsp
  0x000000011c0718e8: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c0718ed: hlt    
  0x000000011c0718ee: movzbl 0x6(%r13),%ebx
  0x000000011c0718f3: add    $0x6,%r13
  0x000000011c0718f7: movabs $0x1109d6220,%r10
  0x000000011c071901: jmpq   *(%r10,%rbx,8)
  0x000000011c071905: movq   $0x0,-0x10(%rbp)
  0x000000011c07190d: mov    -0x40(%rbp),%r13
  0x000000011c071911: mov    -0x38(%rbp),%r14
  0x000000011c071915: cmpq   $0x0,0x8(%r15)
  0x000000011c07191d: je     0x000000011c0719d3
  0x000000011c071923: callq  0x000000011c07192d
  0x000000011c071928: jmpq   0x000000011c0719bf
  0x000000011c07192d: lea    0x8(%rsp),%rax
  0x000000011c071932: mov    %r13,-0x40(%rbp)
  0x000000011c071936: mov    %r15,%rdi
  0x000000011c071939: vzeroupper 
  0x000000011c07193c: mov    %rbp,0x330(%r15)
  0x000000011c071943: mov    %rax,0x320(%r15)
  0x000000011c07194a: test   $0xf,%esp
  0x000000011c071950: je     0x000000011c071968
  0x000000011c071956: sub    $0x8,%rsp
  0x000000011c07195a: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c07195f: add    $0x8,%rsp
  0x000000011c071963: jmpq   0x000000011c07196d
  0x000000011c071968: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c07196d: movabs $0x0,%r10
  0x000000011c071977: mov    %r10,0x320(%r15)
  0x000000011c07197e: movabs $0x0,%r10
  0x000000011c071988: mov    %r10,0x330(%r15)
  0x000000011c07198f: movabs $0x0,%r10
  0x000000011c071999: mov    %r10,0x328(%r15)
  0x000000011c0719a0: vzeroupper 
  0x000000011c0719a3: cmpq   $0x0,0x8(%r15)
  0x000000011c0719ab: je     0x000000011c0719b6
  0x000000011c0719b1: jmpq   0x000000011c054780
  0x000000011c0719b6: mov    -0x40(%rbp),%r13
  0x000000011c0719ba: mov    -0x38(%rbp),%r14
  0x000000011c0719be: retq   
  0x000000011c0719bf: movabs $0x1107f3493,%rdi
  0x000000011c0719c9: and    $0xfffffffffffffff0,%rsp
  0x000000011c0719cd: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c0719d2: hlt    
  0x000000011c0719d3: movzbl 0x6(%r13),%ebx
  0x000000011c0719d8: add    $0x6,%r13
  0x000000011c0719dc: movabs $0x1109d6a20,%r10
  0x000000011c0719e6: jmpq   *(%r10,%rbx,8)
  0x000000011c0719ea: movq   $0x0,-0x10(%rbp)
  0x000000011c0719f2: mov    -0x40(%rbp),%r13
  0x000000011c0719f6: mov    -0x38(%rbp),%r14
  0x000000011c0719fa: cmpq   $0x0,0x8(%r15)
  0x000000011c071a02: je     0x000000011c071ab8
  0x000000011c071a08: callq  0x000000011c071a12
  0x000000011c071a0d: jmpq   0x000000011c071aa4
  0x000000011c071a12: lea    0x8(%rsp),%rax
  0x000000011c071a17: mov    %r13,-0x40(%rbp)
  0x000000011c071a1b: mov    %r15,%rdi
  0x000000011c071a1e: vzeroupper 
  0x000000011c071a21: mov    %rbp,0x330(%r15)
  0x000000011c071a28: mov    %rax,0x320(%r15)
  0x000000011c071a2f: test   $0xf,%esp
  0x000000011c071a35: je     0x000000011c071a4d
  0x000000011c071a3b: sub    $0x8,%rsp
  0x000000011c071a3f: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c071a44: add    $0x8,%rsp
  0x000000011c071a48: jmpq   0x000000011c071a52
  0x000000011c071a4d: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c071a52: movabs $0x0,%r10
  0x000000011c071a5c: mov    %r10,0x320(%r15)
  0x000000011c071a63: movabs $0x0,%r10
  0x000000011c071a6d: mov    %r10,0x330(%r15)
  0x000000011c071a74: movabs $0x0,%r10
  0x000000011c071a7e: mov    %r10,0x328(%r15)
  0x000000011c071a85: vzeroupper 
  0x000000011c071a88: cmpq   $0x0,0x8(%r15)
  0x000000011c071a90: je     0x000000011c071a9b
  0x000000011c071a96: jmpq   0x000000011c054780
  0x000000011c071a9b: mov    -0x40(%rbp),%r13
  0x000000011c071a9f: mov    -0x38(%rbp),%r14
  0x000000011c071aa3: retq   
  0x000000011c071aa4: movabs $0x1107f3493,%rdi
  0x000000011c071aae: and    $0xfffffffffffffff0,%rsp
  0x000000011c071ab2: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c071ab7: hlt    
  0x000000011c071ab8: movzbl 0x6(%r13),%ebx
  0x000000011c071abd: add    $0x6,%r13
  0x000000011c071ac1: movabs $0x1109d7a20,%r10
  0x000000011c071acb: jmpq   *(%r10,%rbx,8)
  0x000000011c071acf: movq   $0x0,-0x10(%rbp)
  0x000000011c071ad7: mov    -0x40(%rbp),%r13
  0x000000011c071adb: mov    -0x38(%rbp),%r14
  0x000000011c071adf: cmpq   $0x0,0x8(%r15)
  0x000000011c071ae7: je     0x000000011c071b9d
  0x000000011c071aed: callq  0x000000011c071af7
  0x000000011c071af2: jmpq   0x000000011c071b89
  0x000000011c071af7: lea    0x8(%rsp),%rax
  0x000000011c071afc: mov    %r13,-0x40(%rbp)
  0x000000011c071b00: mov    %r15,%rdi
  0x000000011c071b03: vzeroupper 
  0x000000011c071b06: mov    %rbp,0x330(%r15)
  0x000000011c071b0d: mov    %rax,0x320(%r15)
  0x000000011c071b14: test   $0xf,%esp
  0x000000011c071b1a: je     0x000000011c071b32
  0x000000011c071b20: sub    $0x8,%rsp
  0x000000011c071b24: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c071b29: add    $0x8,%rsp
  0x000000011c071b2d: jmpq   0x000000011c071b37
  0x000000011c071b32: callq  0x00000001103ab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000011c071b37: movabs $0x0,%r10
  0x000000011c071b41: mov    %r10,0x320(%r15)
  0x000000011c071b48: movabs $0x0,%r10
  0x000000011c071b52: mov    %r10,0x330(%r15)
  0x000000011c071b59: movabs $0x0,%r10
  0x000000011c071b63: mov    %r10,0x328(%r15)
  0x000000011c071b6a: vzeroupper 
  0x000000011c071b6d: cmpq   $0x0,0x8(%r15)
  0x000000011c071b75: je     0x000000011c071b80
  0x000000011c071b7b: jmpq   0x000000011c054780
  0x000000011c071b80: mov    -0x40(%rbp),%r13
  0x000000011c071b84: mov    -0x38(%rbp),%r14
  0x000000011c071b88: retq   
  0x000000011c071b89: movabs $0x1107f3493,%rdi
  0x000000011c071b93: and    $0xfffffffffffffff0,%rsp
  0x000000011c071b97: callq  0x0000000110557808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000011c071b9c: hlt    
  0x000000011c071b9d: jmpq   0x000000011c06aa9f
  0x000000011c071ba2: nopw   0x0(%rax,%rax,1)
  0x000000011c071ba8: add    %al,(%rax)
  0x000000011c071baa: add    %al,(%rax)
  0x000000011c071bac: add    %al,(%rax)
  0x000000011c071bae: add    %al,(%rax)
  0x000000011c071bb0: add    %al,(%rax)
  0x000000011c071bb2: add    %al,(%rax)
  0x000000011c071bb4: add    %al,(%rax)
  0x000000011c071bb6: add    %al,(%rax)
  0x000000011c071bb8: add    %al,(%rax)
  0x000000011c071bba: add    %al,(%rax)
  0x000000011c071bbc: add    %al,(%rax)
  0x000000011c071bbe: add    %al,(%rax)
----------------------------------------------------------------------

55
