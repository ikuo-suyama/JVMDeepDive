
----------------------------------------------------------------------
Interpreter

code size        =    111K bytes
total space      =    111K bytes
wasted space     =      0K bytes

# of codelets    =    271
avg codelet size =    420 bytes


----------------------------------------------------------------------
slow signature handler  [0x000000012497d520, 0x000000012497d6e0]  448 bytes

Loaded disassembler from /Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home/lib/server/hsdis-amd64.dylib
[Disassembling for mach='i386:x86-64']
  0x000000012497d520: mov    %rsp,%rcx
  0x000000012497d523: sub    $0x70,%rsp
  0x000000012497d527: callq  0x000000012497d531
  0x000000012497d52c: jmpq   0x000000012497d5c9
  0x000000012497d531: mov    %r14,%rdx
  0x000000012497d534: mov    %rbx,%rsi
  0x000000012497d537: lea    0x8(%rsp),%rax
  0x000000012497d53c: mov    %r13,-0x40(%rbp)
  0x000000012497d540: mov    %r15,%rdi
  0x000000012497d543: vzeroupper 
  0x000000012497d546: mov    %rbp,0x330(%r15)
  0x000000012497d54d: mov    %rax,0x320(%r15)
  0x000000012497d554: test   $0xf,%esp
  0x000000012497d55a: je     0x000000012497d572
  0x000000012497d560: sub    $0x8,%rsp
  0x000000012497d564: callq  0x0000000114ba9588 = InterpreterRuntime::slow_signature_handler(JavaThread*, Method*, long*, long*)
  0x000000012497d569: add    $0x8,%rsp
  0x000000012497d56d: jmpq   0x000000012497d577
  0x000000012497d572: callq  0x0000000114ba9588 = InterpreterRuntime::slow_signature_handler(JavaThread*, Method*, long*, long*)
  0x000000012497d577: movabs $0x0,%r10
  0x000000012497d581: mov    %r10,0x320(%r15)
  0x000000012497d588: movabs $0x0,%r10
  0x000000012497d592: mov    %r10,0x330(%r15)
  0x000000012497d599: movabs $0x0,%r10
  0x000000012497d5a3: mov    %r10,0x328(%r15)
  0x000000012497d5aa: vzeroupper 
  0x000000012497d5ad: cmpq   $0x0,0x8(%r15)
  0x000000012497d5b5: je     0x000000012497d5c0
  0x000000012497d5bb: jmpq   0x0000000124975780
  0x000000012497d5c0: mov    -0x40(%rbp),%r13
  0x000000012497d5c4: mov    -0x38(%rbp),%r14
  0x000000012497d5c8: retq   
  0x000000012497d5c9: mov    0x28(%rsp),%ecx
  0x000000012497d5cd: test   $0x1,%ecx
  0x000000012497d5d3: jne    0x000000012497d5e4
  0x000000012497d5d9: vmovss 0x30(%rsp),%xmm0
  0x000000012497d5df: jmpq   0x000000012497d5ea
  0x000000012497d5e4: vmovsd 0x30(%rsp),%xmm0
  0x000000012497d5ea: test   $0x2,%ecx
  0x000000012497d5f0: jne    0x000000012497d601
  0x000000012497d5f6: vmovss 0x38(%rsp),%xmm1
  0x000000012497d5fc: jmpq   0x000000012497d607
  0x000000012497d601: vmovsd 0x38(%rsp),%xmm1
  0x000000012497d607: test   $0x4,%ecx
  0x000000012497d60d: jne    0x000000012497d61e
  0x000000012497d613: vmovss 0x40(%rsp),%xmm2
  0x000000012497d619: jmpq   0x000000012497d624
  0x000000012497d61e: vmovsd 0x40(%rsp),%xmm2
  0x000000012497d624: test   $0x8,%ecx
  0x000000012497d62a: jne    0x000000012497d63b
  0x000000012497d630: vmovss 0x48(%rsp),%xmm3
  0x000000012497d636: jmpq   0x000000012497d641
  0x000000012497d63b: vmovsd 0x48(%rsp),%xmm3
  0x000000012497d641: test   $0x10,%ecx
  0x000000012497d647: jne    0x000000012497d658
  0x000000012497d64d: vmovss 0x50(%rsp),%xmm4
  0x000000012497d653: jmpq   0x000000012497d65e
  0x000000012497d658: vmovsd 0x50(%rsp),%xmm4
  0x000000012497d65e: test   $0x20,%ecx
  0x000000012497d664: jne    0x000000012497d675
  0x000000012497d66a: vmovss 0x58(%rsp),%xmm5
  0x000000012497d670: jmpq   0x000000012497d67b
  0x000000012497d675: vmovsd 0x58(%rsp),%xmm5
  0x000000012497d67b: test   $0x40,%ecx
  0x000000012497d681: jne    0x000000012497d692
  0x000000012497d687: vmovss 0x60(%rsp),%xmm6
  0x000000012497d68d: jmpq   0x000000012497d698
  0x000000012497d692: vmovsd 0x60(%rsp),%xmm6
  0x000000012497d698: test   $0x80,%ecx
  0x000000012497d69e: jne    0x000000012497d6af
  0x000000012497d6a4: vmovss 0x68(%rsp),%xmm7
  0x000000012497d6aa: jmpq   0x000000012497d6b5
  0x000000012497d6af: vmovsd 0x68(%rsp),%xmm7
  0x000000012497d6b5: mov    0x20(%rbx),%ecx
  0x000000012497d6b8: test   $0x8,%ecx
  0x000000012497d6be: cmove  (%rsp),%rsi
  0x000000012497d6c3: mov    0x8(%rsp),%rdx
  0x000000012497d6c8: mov    0x10(%rsp),%rcx
  0x000000012497d6cd: mov    0x18(%rsp),%r8
  0x000000012497d6d2: mov    0x20(%rsp),%r9
  0x000000012497d6d7: add    $0x70,%rsp
  0x000000012497d6db: retq   
  0x000000012497d6dc: nopl   0x0(%rax)

----------------------------------------------------------------------
error exits  [0x000000012497d700, 0x000000012497d740]  64 bytes

  0x000000012497d700: movabs $0x115051413,%rdi
  0x000000012497d70a: and    $0xfffffffffffffff0,%rsp
  0x000000012497d70e: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000012497d713: hlt    
  0x000000012497d714: movabs $0x11505142a,%rdi
  0x000000012497d71e: and    $0xfffffffffffffff0,%rsp
  0x000000012497d722: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000012497d727: hlt    
  0x000000012497d728: add    %al,(%rax)
  0x000000012497d72a: add    %al,(%rax)
  0x000000012497d72c: add    %al,(%rax)
  0x000000012497d72e: add    %al,(%rax)
  0x000000012497d730: add    %al,(%rax)
  0x000000012497d732: add    %al,(%rax)
  0x000000012497d734: add    %al,(%rax)
  0x000000012497d736: add    %al,(%rax)
  0x000000012497d738: add    %al,(%rax)
  0x000000012497d73a: add    %al,(%rax)
  0x000000012497d73c: add    %al,(%rax)
  0x000000012497d73e: add    %al,(%rax)

----------------------------------------------------------------------
return entry points  [0x000000012497d760, 0x000000012497e2a0]  2880 bytes

  0x000000012497d760: mov    -0x10(%rbp),%rsp
  0x000000012497d764: movq   $0x0,-0x10(%rbp)
  0x000000012497d76c: mov    -0x40(%rbp),%r13
  0x000000012497d770: mov    -0x38(%rbp),%r14
  0x000000012497d774: movzwl 0x1(%r13),%ecx
  0x000000012497d779: mov    -0x30(%rbp),%rbx
  0x000000012497d77d: shl    $0x2,%ecx
  0x000000012497d780: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497d784: and    $0xff,%ebx
  0x000000012497d78a: lea    (%rsp,%rbx,8),%rsp
  0x000000012497d78e: movzbl 0x1(%r13),%ebx
  0x000000012497d793: inc    %r13
  0x000000012497d796: movabs $0x1151d5220,%r10
  0x000000012497d7a0: jmpq   *(%r10,%rbx,8)
  0x000000012497d7a4: mov    -0x10(%rbp),%rsp
  0x000000012497d7a8: movq   $0x0,-0x10(%rbp)
  0x000000012497d7b0: mov    -0x40(%rbp),%r13
  0x000000012497d7b4: mov    -0x38(%rbp),%r14
  0x000000012497d7b8: mov    -0x28(%rbp),%rbx
  0x000000012497d7bc: test   %rbx,%rbx
  0x000000012497d7bf: je     0x000000012497d855
  0x000000012497d7c5: cmpb   $0xba,0x0(%r13)
  0x000000012497d7ca: je     0x000000012497d7eb
  0x000000012497d7d0: cmpb   $0xe9,0x0(%r13)
  0x000000012497d7d5: je     0x000000012497d7eb
  0x000000012497d7db: mov    -0x18(%rbp),%rcx
  0x000000012497d7df: cmpw   $0x12a,0x28(%rcx)
  0x000000012497d7e5: jne    0x000000012497d855
  0x000000012497d7eb: mov    %rax,%rcx
  0x000000012497d7ee: test   %rcx,%rcx
  0x000000012497d7f1: jne    0x000000012497d7fd
  0x000000012497d7f3: orq    $0x1,-0x8(%rbx)
  0x000000012497d7fb: jmp    0x000000012497d855
  0x000000012497d7fd: mov    0x8(%rcx),%ecx
  0x000000012497d800: movabs $0x800000000,%r12
  0x000000012497d80a: add    %r12,%rcx
  0x000000012497d80d: xor    %r12,%r12
  0x000000012497d810: xor    -0x8(%rbx),%rcx
  0x000000012497d814: test   $0xfffffffffffffffc,%rcx
  0x000000012497d81b: je     0x000000012497d855
  0x000000012497d81d: test   $0x2,%rcx
  0x000000012497d824: jne    0x000000012497d855
  0x000000012497d826: cmpq   $0x0,-0x8(%rbx)
  0x000000012497d82e: je     0x000000012497d851
  0x000000012497d830: cmpq   $0x1,-0x8(%rbx)
  0x000000012497d838: je     0x000000012497d851
  0x000000012497d83a: xor    -0x8(%rbx),%rcx
  0x000000012497d83e: test   $0xfffffffffffffffc,%rcx
  0x000000012497d845: je     0x000000012497d855
  0x000000012497d847: orq    $0x2,-0x8(%rbx)
  0x000000012497d84f: jmp    0x000000012497d855
  0x000000012497d851: mov    %rcx,-0x8(%rbx)
  0x000000012497d855: movzwl 0x1(%r13),%ecx
  0x000000012497d85a: mov    -0x30(%rbp),%rbx
  0x000000012497d85e: shl    $0x2,%ecx
  0x000000012497d861: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497d865: and    $0xff,%ebx
  0x000000012497d86b: lea    (%rsp,%rbx,8),%rsp
  0x000000012497d86f: movzbl 0x1(%r13),%ebx
  0x000000012497d874: inc    %r13
  0x000000012497d877: movabs $0x1151d7220,%r10
  0x000000012497d881: jmpq   *(%r10,%rbx,8)
  0x000000012497d885: mov    -0x10(%rbp),%rsp
  0x000000012497d889: movq   $0x0,-0x10(%rbp)
  0x000000012497d891: mov    -0x40(%rbp),%r13
  0x000000012497d895: mov    -0x38(%rbp),%r14
  0x000000012497d899: movzwl 0x1(%r13),%ecx
  0x000000012497d89e: mov    -0x30(%rbp),%rbx
  0x000000012497d8a2: shl    $0x2,%ecx
  0x000000012497d8a5: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497d8a9: and    $0xff,%ebx
  0x000000012497d8af: lea    (%rsp,%rbx,8),%rsp
  0x000000012497d8b3: movzbl 0x1(%r13),%ebx
  0x000000012497d8b8: inc    %r13
  0x000000012497d8bb: movabs $0x1151d5a20,%r10
  0x000000012497d8c5: jmpq   *(%r10,%rbx,8)
  0x000000012497d8c9: mov    -0x10(%rbp),%rsp
  0x000000012497d8cd: movq   $0x0,-0x10(%rbp)
  0x000000012497d8d5: mov    -0x40(%rbp),%r13
  0x000000012497d8d9: mov    -0x38(%rbp),%r14
  0x000000012497d8dd: movzwl 0x1(%r13),%ecx
  0x000000012497d8e2: mov    -0x30(%rbp),%rbx
  0x000000012497d8e6: shl    $0x2,%ecx
  0x000000012497d8e9: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497d8ed: and    $0xff,%ebx
  0x000000012497d8f3: lea    (%rsp,%rbx,8),%rsp
  0x000000012497d8f7: movzbl 0x1(%r13),%ebx
  0x000000012497d8fc: inc    %r13
  0x000000012497d8ff: movabs $0x1151d6220,%r10
  0x000000012497d909: jmpq   *(%r10,%rbx,8)
  0x000000012497d90d: mov    -0x10(%rbp),%rsp
  0x000000012497d911: movq   $0x0,-0x10(%rbp)
  0x000000012497d919: mov    -0x40(%rbp),%r13
  0x000000012497d91d: mov    -0x38(%rbp),%r14
  0x000000012497d921: movzwl 0x1(%r13),%ecx
  0x000000012497d926: mov    -0x30(%rbp),%rbx
  0x000000012497d92a: shl    $0x2,%ecx
  0x000000012497d92d: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497d931: and    $0xff,%ebx
  0x000000012497d937: lea    (%rsp,%rbx,8),%rsp
  0x000000012497d93b: movzbl 0x1(%r13),%ebx
  0x000000012497d940: inc    %r13
  0x000000012497d943: movabs $0x1151d6a20,%r10
  0x000000012497d94d: jmpq   *(%r10,%rbx,8)
  0x000000012497d951: mov    -0x10(%rbp),%rsp
  0x000000012497d955: movq   $0x0,-0x10(%rbp)
  0x000000012497d95d: mov    -0x40(%rbp),%r13
  0x000000012497d961: mov    -0x38(%rbp),%r14
  0x000000012497d965: movzwl 0x1(%r13),%ecx
  0x000000012497d96a: mov    -0x30(%rbp),%rbx
  0x000000012497d96e: shl    $0x2,%ecx
  0x000000012497d971: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497d975: and    $0xff,%ebx
  0x000000012497d97b: lea    (%rsp,%rbx,8),%rsp
  0x000000012497d97f: movzbl 0x1(%r13),%ebx
  0x000000012497d984: inc    %r13
  0x000000012497d987: movabs $0x1151d7a20,%r10
  0x000000012497d991: jmpq   *(%r10,%rbx,8)
  0x000000012497d995: mov    -0x10(%rbp),%rsp
  0x000000012497d999: movq   $0x0,-0x10(%rbp)
  0x000000012497d9a1: mov    -0x40(%rbp),%r13
  0x000000012497d9a5: mov    -0x38(%rbp),%r14
  0x000000012497d9a9: movzwl 0x1(%r13),%ecx
  0x000000012497d9ae: mov    -0x30(%rbp),%rbx
  0x000000012497d9b2: shl    $0x2,%ecx
  0x000000012497d9b5: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497d9b9: and    $0xff,%ebx
  0x000000012497d9bf: lea    (%rsp,%rbx,8),%rsp
  0x000000012497d9c3: movzbl 0x2(%r13),%ebx
  0x000000012497d9c8: add    $0x2,%r13
  0x000000012497d9cc: movabs $0x1151d5220,%r10
  0x000000012497d9d6: jmpq   *(%r10,%rbx,8)
  0x000000012497d9da: mov    -0x10(%rbp),%rsp
  0x000000012497d9de: movq   $0x0,-0x10(%rbp)
  0x000000012497d9e6: mov    -0x40(%rbp),%r13
  0x000000012497d9ea: mov    -0x38(%rbp),%r14
  0x000000012497d9ee: mov    -0x28(%rbp),%rbx
  0x000000012497d9f2: test   %rbx,%rbx
  0x000000012497d9f5: je     0x000000012497da8b
  0x000000012497d9fb: cmpb   $0xba,0x0(%r13)
  0x000000012497da00: je     0x000000012497da21
  0x000000012497da06: cmpb   $0xe9,0x0(%r13)
  0x000000012497da0b: je     0x000000012497da21
  0x000000012497da11: mov    -0x18(%rbp),%rcx
  0x000000012497da15: cmpw   $0x12a,0x28(%rcx)
  0x000000012497da1b: jne    0x000000012497da8b
  0x000000012497da21: mov    %rax,%rcx
  0x000000012497da24: test   %rcx,%rcx
  0x000000012497da27: jne    0x000000012497da33
  0x000000012497da29: orq    $0x1,-0x8(%rbx)
  0x000000012497da31: jmp    0x000000012497da8b
  0x000000012497da33: mov    0x8(%rcx),%ecx
  0x000000012497da36: movabs $0x800000000,%r12
  0x000000012497da40: add    %r12,%rcx
  0x000000012497da43: xor    %r12,%r12
  0x000000012497da46: xor    -0x8(%rbx),%rcx
  0x000000012497da4a: test   $0xfffffffffffffffc,%rcx
  0x000000012497da51: je     0x000000012497da8b
  0x000000012497da53: test   $0x2,%rcx
  0x000000012497da5a: jne    0x000000012497da8b
  0x000000012497da5c: cmpq   $0x0,-0x8(%rbx)
  0x000000012497da64: je     0x000000012497da87
  0x000000012497da66: cmpq   $0x1,-0x8(%rbx)
  0x000000012497da6e: je     0x000000012497da87
  0x000000012497da70: xor    -0x8(%rbx),%rcx
  0x000000012497da74: test   $0xfffffffffffffffc,%rcx
  0x000000012497da7b: je     0x000000012497da8b
  0x000000012497da7d: orq    $0x2,-0x8(%rbx)
  0x000000012497da85: jmp    0x000000012497da8b
  0x000000012497da87: mov    %rcx,-0x8(%rbx)
  0x000000012497da8b: movzwl 0x1(%r13),%ecx
  0x000000012497da90: mov    -0x30(%rbp),%rbx
  0x000000012497da94: shl    $0x2,%ecx
  0x000000012497da97: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497da9b: and    $0xff,%ebx
  0x000000012497daa1: lea    (%rsp,%rbx,8),%rsp
  0x000000012497daa5: movzbl 0x2(%r13),%ebx
  0x000000012497daaa: add    $0x2,%r13
  0x000000012497daae: movabs $0x1151d7220,%r10
  0x000000012497dab8: jmpq   *(%r10,%rbx,8)
  0x000000012497dabc: mov    -0x10(%rbp),%rsp
  0x000000012497dac0: movq   $0x0,-0x10(%rbp)
  0x000000012497dac8: mov    -0x40(%rbp),%r13
  0x000000012497dacc: mov    -0x38(%rbp),%r14
  0x000000012497dad0: movzwl 0x1(%r13),%ecx
  0x000000012497dad5: mov    -0x30(%rbp),%rbx
  0x000000012497dad9: shl    $0x2,%ecx
  0x000000012497dadc: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497dae0: and    $0xff,%ebx
  0x000000012497dae6: lea    (%rsp,%rbx,8),%rsp
  0x000000012497daea: movzbl 0x2(%r13),%ebx
  0x000000012497daef: add    $0x2,%r13
  0x000000012497daf3: movabs $0x1151d5a20,%r10
  0x000000012497dafd: jmpq   *(%r10,%rbx,8)
  0x000000012497db01: mov    -0x10(%rbp),%rsp
  0x000000012497db05: movq   $0x0,-0x10(%rbp)
  0x000000012497db0d: mov    -0x40(%rbp),%r13
  0x000000012497db11: mov    -0x38(%rbp),%r14
  0x000000012497db15: movzwl 0x1(%r13),%ecx
  0x000000012497db1a: mov    -0x30(%rbp),%rbx
  0x000000012497db1e: shl    $0x2,%ecx
  0x000000012497db21: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497db25: and    $0xff,%ebx
  0x000000012497db2b: lea    (%rsp,%rbx,8),%rsp
  0x000000012497db2f: movzbl 0x2(%r13),%ebx
  0x000000012497db34: add    $0x2,%r13
  0x000000012497db38: movabs $0x1151d6220,%r10
  0x000000012497db42: jmpq   *(%r10,%rbx,8)
  0x000000012497db46: mov    -0x10(%rbp),%rsp
  0x000000012497db4a: movq   $0x0,-0x10(%rbp)
  0x000000012497db52: mov    -0x40(%rbp),%r13
  0x000000012497db56: mov    -0x38(%rbp),%r14
  0x000000012497db5a: movzwl 0x1(%r13),%ecx
  0x000000012497db5f: mov    -0x30(%rbp),%rbx
  0x000000012497db63: shl    $0x2,%ecx
  0x000000012497db66: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497db6a: and    $0xff,%ebx
  0x000000012497db70: lea    (%rsp,%rbx,8),%rsp
  0x000000012497db74: movzbl 0x2(%r13),%ebx
  0x000000012497db79: add    $0x2,%r13
  0x000000012497db7d: movabs $0x1151d6a20,%r10
  0x000000012497db87: jmpq   *(%r10,%rbx,8)
  0x000000012497db8b: mov    -0x10(%rbp),%rsp
  0x000000012497db8f: movq   $0x0,-0x10(%rbp)
  0x000000012497db97: mov    -0x40(%rbp),%r13
  0x000000012497db9b: mov    -0x38(%rbp),%r14
  0x000000012497db9f: movzwl 0x1(%r13),%ecx
  0x000000012497dba4: mov    -0x30(%rbp),%rbx
  0x000000012497dba8: shl    $0x2,%ecx
  0x000000012497dbab: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497dbaf: and    $0xff,%ebx
  0x000000012497dbb5: lea    (%rsp,%rbx,8),%rsp
  0x000000012497dbb9: movzbl 0x2(%r13),%ebx
  0x000000012497dbbe: add    $0x2,%r13
  0x000000012497dbc2: movabs $0x1151d7a20,%r10
  0x000000012497dbcc: jmpq   *(%r10,%rbx,8)
  0x000000012497dbd0: mov    -0x10(%rbp),%rsp
  0x000000012497dbd4: movq   $0x0,-0x10(%rbp)
  0x000000012497dbdc: mov    -0x40(%rbp),%r13
  0x000000012497dbe0: mov    -0x38(%rbp),%r14
  0x000000012497dbe4: movzwl 0x1(%r13),%ecx
  0x000000012497dbe9: mov    -0x30(%rbp),%rbx
  0x000000012497dbed: shl    $0x2,%ecx
  0x000000012497dbf0: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497dbf4: and    $0xff,%ebx
  0x000000012497dbfa: lea    (%rsp,%rbx,8),%rsp
  0x000000012497dbfe: movzbl 0x3(%r13),%ebx
  0x000000012497dc03: add    $0x3,%r13
  0x000000012497dc07: movabs $0x1151d5220,%r10
  0x000000012497dc11: jmpq   *(%r10,%rbx,8)
  0x000000012497dc15: mov    -0x10(%rbp),%rsp
  0x000000012497dc19: movq   $0x0,-0x10(%rbp)
  0x000000012497dc21: mov    -0x40(%rbp),%r13
  0x000000012497dc25: mov    -0x38(%rbp),%r14
  0x000000012497dc29: mov    -0x28(%rbp),%rbx
  0x000000012497dc2d: test   %rbx,%rbx
  0x000000012497dc30: je     0x000000012497dcc6
  0x000000012497dc36: cmpb   $0xba,0x0(%r13)
  0x000000012497dc3b: je     0x000000012497dc5c
  0x000000012497dc41: cmpb   $0xe9,0x0(%r13)
  0x000000012497dc46: je     0x000000012497dc5c
  0x000000012497dc4c: mov    -0x18(%rbp),%rcx
  0x000000012497dc50: cmpw   $0x12a,0x28(%rcx)
  0x000000012497dc56: jne    0x000000012497dcc6
  0x000000012497dc5c: mov    %rax,%rcx
  0x000000012497dc5f: test   %rcx,%rcx
  0x000000012497dc62: jne    0x000000012497dc6e
  0x000000012497dc64: orq    $0x1,-0x8(%rbx)
  0x000000012497dc6c: jmp    0x000000012497dcc6
  0x000000012497dc6e: mov    0x8(%rcx),%ecx
  0x000000012497dc71: movabs $0x800000000,%r12
  0x000000012497dc7b: add    %r12,%rcx
  0x000000012497dc7e: xor    %r12,%r12
  0x000000012497dc81: xor    -0x8(%rbx),%rcx
  0x000000012497dc85: test   $0xfffffffffffffffc,%rcx
  0x000000012497dc8c: je     0x000000012497dcc6
  0x000000012497dc8e: test   $0x2,%rcx
  0x000000012497dc95: jne    0x000000012497dcc6
  0x000000012497dc97: cmpq   $0x0,-0x8(%rbx)
  0x000000012497dc9f: je     0x000000012497dcc2
  0x000000012497dca1: cmpq   $0x1,-0x8(%rbx)
  0x000000012497dca9: je     0x000000012497dcc2
  0x000000012497dcab: xor    -0x8(%rbx),%rcx
  0x000000012497dcaf: test   $0xfffffffffffffffc,%rcx
  0x000000012497dcb6: je     0x000000012497dcc6
  0x000000012497dcb8: orq    $0x2,-0x8(%rbx)
  0x000000012497dcc0: jmp    0x000000012497dcc6
  0x000000012497dcc2: mov    %rcx,-0x8(%rbx)
  0x000000012497dcc6: movzwl 0x1(%r13),%ecx
  0x000000012497dccb: mov    -0x30(%rbp),%rbx
  0x000000012497dccf: shl    $0x2,%ecx
  0x000000012497dcd2: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497dcd6: and    $0xff,%ebx
  0x000000012497dcdc: lea    (%rsp,%rbx,8),%rsp
  0x000000012497dce0: movzbl 0x3(%r13),%ebx
  0x000000012497dce5: add    $0x3,%r13
  0x000000012497dce9: movabs $0x1151d7220,%r10
  0x000000012497dcf3: jmpq   *(%r10,%rbx,8)
  0x000000012497dcf7: mov    -0x10(%rbp),%rsp
  0x000000012497dcfb: movq   $0x0,-0x10(%rbp)
  0x000000012497dd03: mov    -0x40(%rbp),%r13
  0x000000012497dd07: mov    -0x38(%rbp),%r14
  0x000000012497dd0b: movzwl 0x1(%r13),%ecx
  0x000000012497dd10: mov    -0x30(%rbp),%rbx
  0x000000012497dd14: shl    $0x2,%ecx
  0x000000012497dd17: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497dd1b: and    $0xff,%ebx
  0x000000012497dd21: lea    (%rsp,%rbx,8),%rsp
  0x000000012497dd25: movzbl 0x3(%r13),%ebx
  0x000000012497dd2a: add    $0x3,%r13
  0x000000012497dd2e: movabs $0x1151d5a20,%r10
  0x000000012497dd38: jmpq   *(%r10,%rbx,8)
  0x000000012497dd3c: mov    -0x10(%rbp),%rsp
  0x000000012497dd40: movq   $0x0,-0x10(%rbp)
  0x000000012497dd48: mov    -0x40(%rbp),%r13
  0x000000012497dd4c: mov    -0x38(%rbp),%r14
  0x000000012497dd50: movzwl 0x1(%r13),%ecx
  0x000000012497dd55: mov    -0x30(%rbp),%rbx
  0x000000012497dd59: shl    $0x2,%ecx
  0x000000012497dd5c: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497dd60: and    $0xff,%ebx
  0x000000012497dd66: lea    (%rsp,%rbx,8),%rsp
  0x000000012497dd6a: movzbl 0x3(%r13),%ebx
  0x000000012497dd6f: add    $0x3,%r13
  0x000000012497dd73: movabs $0x1151d6220,%r10
  0x000000012497dd7d: jmpq   *(%r10,%rbx,8)
  0x000000012497dd81: mov    -0x10(%rbp),%rsp
  0x000000012497dd85: movq   $0x0,-0x10(%rbp)
  0x000000012497dd8d: mov    -0x40(%rbp),%r13
  0x000000012497dd91: mov    -0x38(%rbp),%r14
  0x000000012497dd95: movzwl 0x1(%r13),%ecx
  0x000000012497dd9a: mov    -0x30(%rbp),%rbx
  0x000000012497dd9e: shl    $0x2,%ecx
  0x000000012497dda1: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497dda5: and    $0xff,%ebx
  0x000000012497ddab: lea    (%rsp,%rbx,8),%rsp
  0x000000012497ddaf: movzbl 0x3(%r13),%ebx
  0x000000012497ddb4: add    $0x3,%r13
  0x000000012497ddb8: movabs $0x1151d6a20,%r10
  0x000000012497ddc2: jmpq   *(%r10,%rbx,8)
  0x000000012497ddc6: mov    -0x10(%rbp),%rsp
  0x000000012497ddca: movq   $0x0,-0x10(%rbp)
  0x000000012497ddd2: mov    -0x40(%rbp),%r13
  0x000000012497ddd6: mov    -0x38(%rbp),%r14
  0x000000012497ddda: movzwl 0x1(%r13),%ecx
  0x000000012497dddf: mov    -0x30(%rbp),%rbx
  0x000000012497dde3: shl    $0x2,%ecx
  0x000000012497dde6: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497ddea: and    $0xff,%ebx
  0x000000012497ddf0: lea    (%rsp,%rbx,8),%rsp
  0x000000012497ddf4: movzbl 0x3(%r13),%ebx
  0x000000012497ddf9: add    $0x3,%r13
  0x000000012497ddfd: movabs $0x1151d7a20,%r10
  0x000000012497de07: jmpq   *(%r10,%rbx,8)
  0x000000012497de0b: mov    -0x10(%rbp),%rsp
  0x000000012497de0f: movq   $0x0,-0x10(%rbp)
  0x000000012497de17: mov    -0x40(%rbp),%r13
  0x000000012497de1b: mov    -0x38(%rbp),%r14
  0x000000012497de1f: movzwl 0x1(%r13),%ecx
  0x000000012497de24: mov    -0x30(%rbp),%rbx
  0x000000012497de28: shl    $0x2,%ecx
  0x000000012497de2b: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497de2f: and    $0xff,%ebx
  0x000000012497de35: lea    (%rsp,%rbx,8),%rsp
  0x000000012497de39: movzbl 0x4(%r13),%ebx
  0x000000012497de3e: add    $0x4,%r13
  0x000000012497de42: movabs $0x1151d5220,%r10
  0x000000012497de4c: jmpq   *(%r10,%rbx,8)
  0x000000012497de50: mov    -0x10(%rbp),%rsp
  0x000000012497de54: movq   $0x0,-0x10(%rbp)
  0x000000012497de5c: mov    -0x40(%rbp),%r13
  0x000000012497de60: mov    -0x38(%rbp),%r14
  0x000000012497de64: mov    -0x28(%rbp),%rbx
  0x000000012497de68: test   %rbx,%rbx
  0x000000012497de6b: je     0x000000012497df01
  0x000000012497de71: cmpb   $0xba,0x0(%r13)
  0x000000012497de76: je     0x000000012497de97
  0x000000012497de7c: cmpb   $0xe9,0x0(%r13)
  0x000000012497de81: je     0x000000012497de97
  0x000000012497de87: mov    -0x18(%rbp),%rcx
  0x000000012497de8b: cmpw   $0x12a,0x28(%rcx)
  0x000000012497de91: jne    0x000000012497df01
  0x000000012497de97: mov    %rax,%rcx
  0x000000012497de9a: test   %rcx,%rcx
  0x000000012497de9d: jne    0x000000012497dea9
  0x000000012497de9f: orq    $0x1,-0x8(%rbx)
  0x000000012497dea7: jmp    0x000000012497df01
  0x000000012497dea9: mov    0x8(%rcx),%ecx
  0x000000012497deac: movabs $0x800000000,%r12
  0x000000012497deb6: add    %r12,%rcx
  0x000000012497deb9: xor    %r12,%r12
  0x000000012497debc: xor    -0x8(%rbx),%rcx
  0x000000012497dec0: test   $0xfffffffffffffffc,%rcx
  0x000000012497dec7: je     0x000000012497df01
  0x000000012497dec9: test   $0x2,%rcx
  0x000000012497ded0: jne    0x000000012497df01
  0x000000012497ded2: cmpq   $0x0,-0x8(%rbx)
  0x000000012497deda: je     0x000000012497defd
  0x000000012497dedc: cmpq   $0x1,-0x8(%rbx)
  0x000000012497dee4: je     0x000000012497defd
  0x000000012497dee6: xor    -0x8(%rbx),%rcx
  0x000000012497deea: test   $0xfffffffffffffffc,%rcx
  0x000000012497def1: je     0x000000012497df01
  0x000000012497def3: orq    $0x2,-0x8(%rbx)
  0x000000012497defb: jmp    0x000000012497df01
  0x000000012497defd: mov    %rcx,-0x8(%rbx)
  0x000000012497df01: movzwl 0x1(%r13),%ecx
  0x000000012497df06: mov    -0x30(%rbp),%rbx
  0x000000012497df0a: shl    $0x2,%ecx
  0x000000012497df0d: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497df11: and    $0xff,%ebx
  0x000000012497df17: lea    (%rsp,%rbx,8),%rsp
  0x000000012497df1b: movzbl 0x4(%r13),%ebx
  0x000000012497df20: add    $0x4,%r13
  0x000000012497df24: movabs $0x1151d7220,%r10
  0x000000012497df2e: jmpq   *(%r10,%rbx,8)
  0x000000012497df32: mov    -0x10(%rbp),%rsp
  0x000000012497df36: movq   $0x0,-0x10(%rbp)
  0x000000012497df3e: mov    -0x40(%rbp),%r13
  0x000000012497df42: mov    -0x38(%rbp),%r14
  0x000000012497df46: movzwl 0x1(%r13),%ecx
  0x000000012497df4b: mov    -0x30(%rbp),%rbx
  0x000000012497df4f: shl    $0x2,%ecx
  0x000000012497df52: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497df56: and    $0xff,%ebx
  0x000000012497df5c: lea    (%rsp,%rbx,8),%rsp
  0x000000012497df60: movzbl 0x4(%r13),%ebx
  0x000000012497df65: add    $0x4,%r13
  0x000000012497df69: movabs $0x1151d5a20,%r10
  0x000000012497df73: jmpq   *(%r10,%rbx,8)
  0x000000012497df77: mov    -0x10(%rbp),%rsp
  0x000000012497df7b: movq   $0x0,-0x10(%rbp)
  0x000000012497df83: mov    -0x40(%rbp),%r13
  0x000000012497df87: mov    -0x38(%rbp),%r14
  0x000000012497df8b: movzwl 0x1(%r13),%ecx
  0x000000012497df90: mov    -0x30(%rbp),%rbx
  0x000000012497df94: shl    $0x2,%ecx
  0x000000012497df97: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497df9b: and    $0xff,%ebx
  0x000000012497dfa1: lea    (%rsp,%rbx,8),%rsp
  0x000000012497dfa5: movzbl 0x4(%r13),%ebx
  0x000000012497dfaa: add    $0x4,%r13
  0x000000012497dfae: movabs $0x1151d6220,%r10
  0x000000012497dfb8: jmpq   *(%r10,%rbx,8)
  0x000000012497dfbc: mov    -0x10(%rbp),%rsp
  0x000000012497dfc0: movq   $0x0,-0x10(%rbp)
  0x000000012497dfc8: mov    -0x40(%rbp),%r13
  0x000000012497dfcc: mov    -0x38(%rbp),%r14
  0x000000012497dfd0: movzwl 0x1(%r13),%ecx
  0x000000012497dfd5: mov    -0x30(%rbp),%rbx
  0x000000012497dfd9: shl    $0x2,%ecx
  0x000000012497dfdc: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497dfe0: and    $0xff,%ebx
  0x000000012497dfe6: lea    (%rsp,%rbx,8),%rsp
  0x000000012497dfea: movzbl 0x4(%r13),%ebx
  0x000000012497dfef: add    $0x4,%r13
  0x000000012497dff3: movabs $0x1151d6a20,%r10
  0x000000012497dffd: jmpq   *(%r10,%rbx,8)
  0x000000012497e001: mov    -0x10(%rbp),%rsp
  0x000000012497e005: movq   $0x0,-0x10(%rbp)
  0x000000012497e00d: mov    -0x40(%rbp),%r13
  0x000000012497e011: mov    -0x38(%rbp),%r14
  0x000000012497e015: movzwl 0x1(%r13),%ecx
  0x000000012497e01a: mov    -0x30(%rbp),%rbx
  0x000000012497e01e: shl    $0x2,%ecx
  0x000000012497e021: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497e025: and    $0xff,%ebx
  0x000000012497e02b: lea    (%rsp,%rbx,8),%rsp
  0x000000012497e02f: movzbl 0x4(%r13),%ebx
  0x000000012497e034: add    $0x4,%r13
  0x000000012497e038: movabs $0x1151d7a20,%r10
  0x000000012497e042: jmpq   *(%r10,%rbx,8)
  0x000000012497e046: mov    -0x10(%rbp),%rsp
  0x000000012497e04a: movq   $0x0,-0x10(%rbp)
  0x000000012497e052: mov    -0x40(%rbp),%r13
  0x000000012497e056: mov    -0x38(%rbp),%r14
  0x000000012497e05a: movzwl 0x1(%r13),%ecx
  0x000000012497e05f: mov    -0x30(%rbp),%rbx
  0x000000012497e063: shl    $0x2,%ecx
  0x000000012497e066: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497e06a: and    $0xff,%ebx
  0x000000012497e070: lea    (%rsp,%rbx,8),%rsp
  0x000000012497e074: movzbl 0x5(%r13),%ebx
  0x000000012497e079: add    $0x5,%r13
  0x000000012497e07d: movabs $0x1151d5220,%r10
  0x000000012497e087: jmpq   *(%r10,%rbx,8)
  0x000000012497e08b: mov    -0x10(%rbp),%rsp
  0x000000012497e08f: movq   $0x0,-0x10(%rbp)
  0x000000012497e097: mov    -0x40(%rbp),%r13
  0x000000012497e09b: mov    -0x38(%rbp),%r14
  0x000000012497e09f: mov    -0x28(%rbp),%rbx
  0x000000012497e0a3: test   %rbx,%rbx
  0x000000012497e0a6: je     0x000000012497e13c
  0x000000012497e0ac: cmpb   $0xba,0x0(%r13)
  0x000000012497e0b1: je     0x000000012497e0d2
  0x000000012497e0b7: cmpb   $0xe9,0x0(%r13)
  0x000000012497e0bc: je     0x000000012497e0d2
  0x000000012497e0c2: mov    -0x18(%rbp),%rcx
  0x000000012497e0c6: cmpw   $0x12a,0x28(%rcx)
  0x000000012497e0cc: jne    0x000000012497e13c
  0x000000012497e0d2: mov    %rax,%rcx
  0x000000012497e0d5: test   %rcx,%rcx
  0x000000012497e0d8: jne    0x000000012497e0e4
  0x000000012497e0da: orq    $0x1,-0x8(%rbx)
  0x000000012497e0e2: jmp    0x000000012497e13c
  0x000000012497e0e4: mov    0x8(%rcx),%ecx
  0x000000012497e0e7: movabs $0x800000000,%r12
  0x000000012497e0f1: add    %r12,%rcx
  0x000000012497e0f4: xor    %r12,%r12
  0x000000012497e0f7: xor    -0x8(%rbx),%rcx
  0x000000012497e0fb: test   $0xfffffffffffffffc,%rcx
  0x000000012497e102: je     0x000000012497e13c
  0x000000012497e104: test   $0x2,%rcx
  0x000000012497e10b: jne    0x000000012497e13c
  0x000000012497e10d: cmpq   $0x0,-0x8(%rbx)
  0x000000012497e115: je     0x000000012497e138
  0x000000012497e117: cmpq   $0x1,-0x8(%rbx)
  0x000000012497e11f: je     0x000000012497e138
  0x000000012497e121: xor    -0x8(%rbx),%rcx
  0x000000012497e125: test   $0xfffffffffffffffc,%rcx
  0x000000012497e12c: je     0x000000012497e13c
  0x000000012497e12e: orq    $0x2,-0x8(%rbx)
  0x000000012497e136: jmp    0x000000012497e13c
  0x000000012497e138: mov    %rcx,-0x8(%rbx)
  0x000000012497e13c: movzwl 0x1(%r13),%ecx
  0x000000012497e141: mov    -0x30(%rbp),%rbx
  0x000000012497e145: shl    $0x2,%ecx
  0x000000012497e148: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497e14c: and    $0xff,%ebx
  0x000000012497e152: lea    (%rsp,%rbx,8),%rsp
  0x000000012497e156: movzbl 0x5(%r13),%ebx
  0x000000012497e15b: add    $0x5,%r13
  0x000000012497e15f: movabs $0x1151d7220,%r10
  0x000000012497e169: jmpq   *(%r10,%rbx,8)
  0x000000012497e16d: mov    -0x10(%rbp),%rsp
  0x000000012497e171: movq   $0x0,-0x10(%rbp)
  0x000000012497e179: mov    -0x40(%rbp),%r13
  0x000000012497e17d: mov    -0x38(%rbp),%r14
  0x000000012497e181: movzwl 0x1(%r13),%ecx
  0x000000012497e186: mov    -0x30(%rbp),%rbx
  0x000000012497e18a: shl    $0x2,%ecx
  0x000000012497e18d: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497e191: and    $0xff,%ebx
  0x000000012497e197: lea    (%rsp,%rbx,8),%rsp
  0x000000012497e19b: movzbl 0x5(%r13),%ebx
  0x000000012497e1a0: add    $0x5,%r13
  0x000000012497e1a4: movabs $0x1151d5a20,%r10
  0x000000012497e1ae: jmpq   *(%r10,%rbx,8)
  0x000000012497e1b2: mov    -0x10(%rbp),%rsp
  0x000000012497e1b6: movq   $0x0,-0x10(%rbp)
  0x000000012497e1be: mov    -0x40(%rbp),%r13
  0x000000012497e1c2: mov    -0x38(%rbp),%r14
  0x000000012497e1c6: movzwl 0x1(%r13),%ecx
  0x000000012497e1cb: mov    -0x30(%rbp),%rbx
  0x000000012497e1cf: shl    $0x2,%ecx
  0x000000012497e1d2: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497e1d6: and    $0xff,%ebx
  0x000000012497e1dc: lea    (%rsp,%rbx,8),%rsp
  0x000000012497e1e0: movzbl 0x5(%r13),%ebx
  0x000000012497e1e5: add    $0x5,%r13
  0x000000012497e1e9: movabs $0x1151d6220,%r10
  0x000000012497e1f3: jmpq   *(%r10,%rbx,8)
  0x000000012497e1f7: mov    -0x10(%rbp),%rsp
  0x000000012497e1fb: movq   $0x0,-0x10(%rbp)
  0x000000012497e203: mov    -0x40(%rbp),%r13
  0x000000012497e207: mov    -0x38(%rbp),%r14
  0x000000012497e20b: movzwl 0x1(%r13),%ecx
  0x000000012497e210: mov    -0x30(%rbp),%rbx
  0x000000012497e214: shl    $0x2,%ecx
  0x000000012497e217: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497e21b: and    $0xff,%ebx
  0x000000012497e221: lea    (%rsp,%rbx,8),%rsp
  0x000000012497e225: movzbl 0x5(%r13),%ebx
  0x000000012497e22a: add    $0x5,%r13
  0x000000012497e22e: movabs $0x1151d6a20,%r10
  0x000000012497e238: jmpq   *(%r10,%rbx,8)
  0x000000012497e23c: mov    -0x10(%rbp),%rsp
  0x000000012497e240: movq   $0x0,-0x10(%rbp)
  0x000000012497e248: mov    -0x40(%rbp),%r13
  0x000000012497e24c: mov    -0x38(%rbp),%r14
  0x000000012497e250: movzwl 0x1(%r13),%ecx
  0x000000012497e255: mov    -0x30(%rbp),%rbx
  0x000000012497e259: shl    $0x2,%ecx
  0x000000012497e25c: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497e260: and    $0xff,%ebx
  0x000000012497e266: lea    (%rsp,%rbx,8),%rsp
  0x000000012497e26a: movzbl 0x5(%r13),%ebx
  0x000000012497e26f: add    $0x5,%r13
  0x000000012497e273: movabs $0x1151d7a20,%r10
  0x000000012497e27d: jmpq   *(%r10,%rbx,8)
  0x000000012497e281: nopl   0x0(%rax)
  0x000000012497e288: add    %al,(%rax)
  0x000000012497e28a: add    %al,(%rax)
  0x000000012497e28c: add    %al,(%rax)
  0x000000012497e28e: add    %al,(%rax)
  0x000000012497e290: add    %al,(%rax)
  0x000000012497e292: add    %al,(%rax)
  0x000000012497e294: add    %al,(%rax)
  0x000000012497e296: add    %al,(%rax)
  0x000000012497e298: add    %al,(%rax)
  0x000000012497e29a: add    %al,(%rax)
  0x000000012497e29c: add    %al,(%rax)
  0x000000012497e29e: add    %al,(%rax)

----------------------------------------------------------------------
invoke return entry points  [0x000000012497e2c0, 0x000000012497ecc0]  2560 bytes

  0x000000012497e2c0: mov    -0x10(%rbp),%rsp
  0x000000012497e2c4: movq   $0x0,-0x10(%rbp)
  0x000000012497e2cc: mov    -0x40(%rbp),%r13
  0x000000012497e2d0: mov    -0x38(%rbp),%r14
  0x000000012497e2d4: movzwl 0x1(%r13),%ecx
  0x000000012497e2d9: mov    -0x30(%rbp),%rbx
  0x000000012497e2dd: shl    $0x2,%ecx
  0x000000012497e2e0: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497e2e4: and    $0xff,%ebx
  0x000000012497e2ea: lea    (%rsp,%rbx,8),%rsp
  0x000000012497e2ee: movzbl 0x3(%r13),%ebx
  0x000000012497e2f3: add    $0x3,%r13
  0x000000012497e2f7: movabs $0x1151d5220,%r10
  0x000000012497e301: jmpq   *(%r10,%rbx,8)
  0x000000012497e305: mov    -0x10(%rbp),%rsp
  0x000000012497e309: movq   $0x0,-0x10(%rbp)
  0x000000012497e311: mov    -0x40(%rbp),%r13
  0x000000012497e315: mov    -0x38(%rbp),%r14
  0x000000012497e319: movzwl 0x1(%r13),%ecx
  0x000000012497e31e: mov    -0x30(%rbp),%rbx
  0x000000012497e322: shl    $0x2,%ecx
  0x000000012497e325: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497e329: and    $0xff,%ebx
  0x000000012497e32f: lea    (%rsp,%rbx,8),%rsp
  0x000000012497e333: movzbl 0x5(%r13),%ebx
  0x000000012497e338: add    $0x5,%r13
  0x000000012497e33c: movabs $0x1151d5220,%r10
  0x000000012497e346: jmpq   *(%r10,%rbx,8)
  0x000000012497e34a: mov    -0x10(%rbp),%rsp
  0x000000012497e34e: movq   $0x0,-0x10(%rbp)
  0x000000012497e356: mov    -0x40(%rbp),%r13
  0x000000012497e35a: mov    -0x38(%rbp),%r14
  0x000000012497e35e: mov    0x1(%r13),%ecx
  0x000000012497e362: not    %ecx
  0x000000012497e364: mov    -0x30(%rbp),%rbx
  0x000000012497e368: shl    $0x2,%ecx
  0x000000012497e36b: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497e36f: and    $0xff,%ebx
  0x000000012497e375: lea    (%rsp,%rbx,8),%rsp
  0x000000012497e379: movzbl 0x5(%r13),%ebx
  0x000000012497e37e: add    $0x5,%r13
  0x000000012497e382: movabs $0x1151d5220,%r10
  0x000000012497e38c: jmpq   *(%r10,%rbx,8)
  0x000000012497e390: mov    -0x10(%rbp),%rsp
  0x000000012497e394: movq   $0x0,-0x10(%rbp)
  0x000000012497e39c: mov    -0x40(%rbp),%r13
  0x000000012497e3a0: mov    -0x38(%rbp),%r14
  0x000000012497e3a4: movzwl 0x1(%r13),%ecx
  0x000000012497e3a9: mov    -0x30(%rbp),%rbx
  0x000000012497e3ad: shl    $0x2,%ecx
  0x000000012497e3b0: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497e3b4: and    $0xff,%ebx
  0x000000012497e3ba: lea    (%rsp,%rbx,8),%rsp
  0x000000012497e3be: movzbl 0x3(%r13),%ebx
  0x000000012497e3c3: add    $0x3,%r13
  0x000000012497e3c7: movabs $0x1151d5220,%r10
  0x000000012497e3d1: jmpq   *(%r10,%rbx,8)
  0x000000012497e3d5: mov    -0x10(%rbp),%rsp
  0x000000012497e3d9: movq   $0x0,-0x10(%rbp)
  0x000000012497e3e1: mov    -0x40(%rbp),%r13
  0x000000012497e3e5: mov    -0x38(%rbp),%r14
  0x000000012497e3e9: movzwl 0x1(%r13),%ecx
  0x000000012497e3ee: mov    -0x30(%rbp),%rbx
  0x000000012497e3f2: shl    $0x2,%ecx
  0x000000012497e3f5: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497e3f9: and    $0xff,%ebx
  0x000000012497e3ff: lea    (%rsp,%rbx,8),%rsp
  0x000000012497e403: movzbl 0x5(%r13),%ebx
  0x000000012497e408: add    $0x5,%r13
  0x000000012497e40c: movabs $0x1151d5220,%r10
  0x000000012497e416: jmpq   *(%r10,%rbx,8)
  0x000000012497e41a: mov    -0x10(%rbp),%rsp
  0x000000012497e41e: movq   $0x0,-0x10(%rbp)
  0x000000012497e426: mov    -0x40(%rbp),%r13
  0x000000012497e42a: mov    -0x38(%rbp),%r14
  0x000000012497e42e: mov    0x1(%r13),%ecx
  0x000000012497e432: not    %ecx
  0x000000012497e434: mov    -0x30(%rbp),%rbx
  0x000000012497e438: shl    $0x2,%ecx
  0x000000012497e43b: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497e43f: and    $0xff,%ebx
  0x000000012497e445: lea    (%rsp,%rbx,8),%rsp
  0x000000012497e449: movzbl 0x5(%r13),%ebx
  0x000000012497e44e: add    $0x5,%r13
  0x000000012497e452: movabs $0x1151d5220,%r10
  0x000000012497e45c: jmpq   *(%r10,%rbx,8)
  0x000000012497e460: mov    -0x10(%rbp),%rsp
  0x000000012497e464: movq   $0x0,-0x10(%rbp)
  0x000000012497e46c: mov    -0x40(%rbp),%r13
  0x000000012497e470: mov    -0x38(%rbp),%r14
  0x000000012497e474: movzwl 0x1(%r13),%ecx
  0x000000012497e479: mov    -0x30(%rbp),%rbx
  0x000000012497e47d: shl    $0x2,%ecx
  0x000000012497e480: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497e484: and    $0xff,%ebx
  0x000000012497e48a: lea    (%rsp,%rbx,8),%rsp
  0x000000012497e48e: movzbl 0x3(%r13),%ebx
  0x000000012497e493: add    $0x3,%r13
  0x000000012497e497: movabs $0x1151d5220,%r10
  0x000000012497e4a1: jmpq   *(%r10,%rbx,8)
  0x000000012497e4a5: mov    -0x10(%rbp),%rsp
  0x000000012497e4a9: movq   $0x0,-0x10(%rbp)
  0x000000012497e4b1: mov    -0x40(%rbp),%r13
  0x000000012497e4b5: mov    -0x38(%rbp),%r14
  0x000000012497e4b9: movzwl 0x1(%r13),%ecx
  0x000000012497e4be: mov    -0x30(%rbp),%rbx
  0x000000012497e4c2: shl    $0x2,%ecx
  0x000000012497e4c5: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497e4c9: and    $0xff,%ebx
  0x000000012497e4cf: lea    (%rsp,%rbx,8),%rsp
  0x000000012497e4d3: movzbl 0x5(%r13),%ebx
  0x000000012497e4d8: add    $0x5,%r13
  0x000000012497e4dc: movabs $0x1151d5220,%r10
  0x000000012497e4e6: jmpq   *(%r10,%rbx,8)
  0x000000012497e4ea: mov    -0x10(%rbp),%rsp
  0x000000012497e4ee: movq   $0x0,-0x10(%rbp)
  0x000000012497e4f6: mov    -0x40(%rbp),%r13
  0x000000012497e4fa: mov    -0x38(%rbp),%r14
  0x000000012497e4fe: mov    0x1(%r13),%ecx
  0x000000012497e502: not    %ecx
  0x000000012497e504: mov    -0x30(%rbp),%rbx
  0x000000012497e508: shl    $0x2,%ecx
  0x000000012497e50b: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497e50f: and    $0xff,%ebx
  0x000000012497e515: lea    (%rsp,%rbx,8),%rsp
  0x000000012497e519: movzbl 0x5(%r13),%ebx
  0x000000012497e51e: add    $0x5,%r13
  0x000000012497e522: movabs $0x1151d5220,%r10
  0x000000012497e52c: jmpq   *(%r10,%rbx,8)
  0x000000012497e530: mov    -0x10(%rbp),%rsp
  0x000000012497e534: movq   $0x0,-0x10(%rbp)
  0x000000012497e53c: mov    -0x40(%rbp),%r13
  0x000000012497e540: mov    -0x38(%rbp),%r14
  0x000000012497e544: movzwl 0x1(%r13),%ecx
  0x000000012497e549: mov    -0x30(%rbp),%rbx
  0x000000012497e54d: shl    $0x2,%ecx
  0x000000012497e550: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497e554: and    $0xff,%ebx
  0x000000012497e55a: lea    (%rsp,%rbx,8),%rsp
  0x000000012497e55e: movzbl 0x3(%r13),%ebx
  0x000000012497e563: add    $0x3,%r13
  0x000000012497e567: movabs $0x1151d5220,%r10
  0x000000012497e571: jmpq   *(%r10,%rbx,8)
  0x000000012497e575: mov    -0x10(%rbp),%rsp
  0x000000012497e579: movq   $0x0,-0x10(%rbp)
  0x000000012497e581: mov    -0x40(%rbp),%r13
  0x000000012497e585: mov    -0x38(%rbp),%r14
  0x000000012497e589: movzwl 0x1(%r13),%ecx
  0x000000012497e58e: mov    -0x30(%rbp),%rbx
  0x000000012497e592: shl    $0x2,%ecx
  0x000000012497e595: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497e599: and    $0xff,%ebx
  0x000000012497e59f: lea    (%rsp,%rbx,8),%rsp
  0x000000012497e5a3: movzbl 0x5(%r13),%ebx
  0x000000012497e5a8: add    $0x5,%r13
  0x000000012497e5ac: movabs $0x1151d5220,%r10
  0x000000012497e5b6: jmpq   *(%r10,%rbx,8)
  0x000000012497e5ba: mov    -0x10(%rbp),%rsp
  0x000000012497e5be: movq   $0x0,-0x10(%rbp)
  0x000000012497e5c6: mov    -0x40(%rbp),%r13
  0x000000012497e5ca: mov    -0x38(%rbp),%r14
  0x000000012497e5ce: mov    0x1(%r13),%ecx
  0x000000012497e5d2: not    %ecx
  0x000000012497e5d4: mov    -0x30(%rbp),%rbx
  0x000000012497e5d8: shl    $0x2,%ecx
  0x000000012497e5db: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497e5df: and    $0xff,%ebx
  0x000000012497e5e5: lea    (%rsp,%rbx,8),%rsp
  0x000000012497e5e9: movzbl 0x5(%r13),%ebx
  0x000000012497e5ee: add    $0x5,%r13
  0x000000012497e5f2: movabs $0x1151d5220,%r10
  0x000000012497e5fc: jmpq   *(%r10,%rbx,8)
  0x000000012497e600: mov    -0x10(%rbp),%rsp
  0x000000012497e604: movq   $0x0,-0x10(%rbp)
  0x000000012497e60c: mov    -0x40(%rbp),%r13
  0x000000012497e610: mov    -0x38(%rbp),%r14
  0x000000012497e614: movzwl 0x1(%r13),%ecx
  0x000000012497e619: mov    -0x30(%rbp),%rbx
  0x000000012497e61d: shl    $0x2,%ecx
  0x000000012497e620: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497e624: and    $0xff,%ebx
  0x000000012497e62a: lea    (%rsp,%rbx,8),%rsp
  0x000000012497e62e: movzbl 0x3(%r13),%ebx
  0x000000012497e633: add    $0x3,%r13
  0x000000012497e637: movabs $0x1151d5220,%r10
  0x000000012497e641: jmpq   *(%r10,%rbx,8)
  0x000000012497e645: mov    -0x10(%rbp),%rsp
  0x000000012497e649: movq   $0x0,-0x10(%rbp)
  0x000000012497e651: mov    -0x40(%rbp),%r13
  0x000000012497e655: mov    -0x38(%rbp),%r14
  0x000000012497e659: movzwl 0x1(%r13),%ecx
  0x000000012497e65e: mov    -0x30(%rbp),%rbx
  0x000000012497e662: shl    $0x2,%ecx
  0x000000012497e665: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497e669: and    $0xff,%ebx
  0x000000012497e66f: lea    (%rsp,%rbx,8),%rsp
  0x000000012497e673: movzbl 0x5(%r13),%ebx
  0x000000012497e678: add    $0x5,%r13
  0x000000012497e67c: movabs $0x1151d5220,%r10
  0x000000012497e686: jmpq   *(%r10,%rbx,8)
  0x000000012497e68a: mov    -0x10(%rbp),%rsp
  0x000000012497e68e: movq   $0x0,-0x10(%rbp)
  0x000000012497e696: mov    -0x40(%rbp),%r13
  0x000000012497e69a: mov    -0x38(%rbp),%r14
  0x000000012497e69e: mov    0x1(%r13),%ecx
  0x000000012497e6a2: not    %ecx
  0x000000012497e6a4: mov    -0x30(%rbp),%rbx
  0x000000012497e6a8: shl    $0x2,%ecx
  0x000000012497e6ab: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497e6af: and    $0xff,%ebx
  0x000000012497e6b5: lea    (%rsp,%rbx,8),%rsp
  0x000000012497e6b9: movzbl 0x5(%r13),%ebx
  0x000000012497e6be: add    $0x5,%r13
  0x000000012497e6c2: movabs $0x1151d5220,%r10
  0x000000012497e6cc: jmpq   *(%r10,%rbx,8)
  0x000000012497e6d0: mov    -0x10(%rbp),%rsp
  0x000000012497e6d4: movq   $0x0,-0x10(%rbp)
  0x000000012497e6dc: mov    -0x40(%rbp),%r13
  0x000000012497e6e0: mov    -0x38(%rbp),%r14
  0x000000012497e6e4: movzwl 0x1(%r13),%ecx
  0x000000012497e6e9: mov    -0x30(%rbp),%rbx
  0x000000012497e6ed: shl    $0x2,%ecx
  0x000000012497e6f0: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497e6f4: and    $0xff,%ebx
  0x000000012497e6fa: lea    (%rsp,%rbx,8),%rsp
  0x000000012497e6fe: movzbl 0x3(%r13),%ebx
  0x000000012497e703: add    $0x3,%r13
  0x000000012497e707: movabs $0x1151d5a20,%r10
  0x000000012497e711: jmpq   *(%r10,%rbx,8)
  0x000000012497e715: mov    -0x10(%rbp),%rsp
  0x000000012497e719: movq   $0x0,-0x10(%rbp)
  0x000000012497e721: mov    -0x40(%rbp),%r13
  0x000000012497e725: mov    -0x38(%rbp),%r14
  0x000000012497e729: movzwl 0x1(%r13),%ecx
  0x000000012497e72e: mov    -0x30(%rbp),%rbx
  0x000000012497e732: shl    $0x2,%ecx
  0x000000012497e735: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497e739: and    $0xff,%ebx
  0x000000012497e73f: lea    (%rsp,%rbx,8),%rsp
  0x000000012497e743: movzbl 0x5(%r13),%ebx
  0x000000012497e748: add    $0x5,%r13
  0x000000012497e74c: movabs $0x1151d5a20,%r10
  0x000000012497e756: jmpq   *(%r10,%rbx,8)
  0x000000012497e75a: mov    -0x10(%rbp),%rsp
  0x000000012497e75e: movq   $0x0,-0x10(%rbp)
  0x000000012497e766: mov    -0x40(%rbp),%r13
  0x000000012497e76a: mov    -0x38(%rbp),%r14
  0x000000012497e76e: mov    0x1(%r13),%ecx
  0x000000012497e772: not    %ecx
  0x000000012497e774: mov    -0x30(%rbp),%rbx
  0x000000012497e778: shl    $0x2,%ecx
  0x000000012497e77b: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497e77f: and    $0xff,%ebx
  0x000000012497e785: lea    (%rsp,%rbx,8),%rsp
  0x000000012497e789: movzbl 0x5(%r13),%ebx
  0x000000012497e78e: add    $0x5,%r13
  0x000000012497e792: movabs $0x1151d5a20,%r10
  0x000000012497e79c: jmpq   *(%r10,%rbx,8)
  0x000000012497e7a0: mov    -0x10(%rbp),%rsp
  0x000000012497e7a4: movq   $0x0,-0x10(%rbp)
  0x000000012497e7ac: mov    -0x40(%rbp),%r13
  0x000000012497e7b0: mov    -0x38(%rbp),%r14
  0x000000012497e7b4: movzwl 0x1(%r13),%ecx
  0x000000012497e7b9: mov    -0x30(%rbp),%rbx
  0x000000012497e7bd: shl    $0x2,%ecx
  0x000000012497e7c0: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497e7c4: and    $0xff,%ebx
  0x000000012497e7ca: lea    (%rsp,%rbx,8),%rsp
  0x000000012497e7ce: movzbl 0x3(%r13),%ebx
  0x000000012497e7d3: add    $0x3,%r13
  0x000000012497e7d7: movabs $0x1151d6220,%r10
  0x000000012497e7e1: jmpq   *(%r10,%rbx,8)
  0x000000012497e7e5: mov    -0x10(%rbp),%rsp
  0x000000012497e7e9: movq   $0x0,-0x10(%rbp)
  0x000000012497e7f1: mov    -0x40(%rbp),%r13
  0x000000012497e7f5: mov    -0x38(%rbp),%r14
  0x000000012497e7f9: movzwl 0x1(%r13),%ecx
  0x000000012497e7fe: mov    -0x30(%rbp),%rbx
  0x000000012497e802: shl    $0x2,%ecx
  0x000000012497e805: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497e809: and    $0xff,%ebx
  0x000000012497e80f: lea    (%rsp,%rbx,8),%rsp
  0x000000012497e813: movzbl 0x5(%r13),%ebx
  0x000000012497e818: add    $0x5,%r13
  0x000000012497e81c: movabs $0x1151d6220,%r10
  0x000000012497e826: jmpq   *(%r10,%rbx,8)
  0x000000012497e82a: mov    -0x10(%rbp),%rsp
  0x000000012497e82e: movq   $0x0,-0x10(%rbp)
  0x000000012497e836: mov    -0x40(%rbp),%r13
  0x000000012497e83a: mov    -0x38(%rbp),%r14
  0x000000012497e83e: mov    0x1(%r13),%ecx
  0x000000012497e842: not    %ecx
  0x000000012497e844: mov    -0x30(%rbp),%rbx
  0x000000012497e848: shl    $0x2,%ecx
  0x000000012497e84b: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497e84f: and    $0xff,%ebx
  0x000000012497e855: lea    (%rsp,%rbx,8),%rsp
  0x000000012497e859: movzbl 0x5(%r13),%ebx
  0x000000012497e85e: add    $0x5,%r13
  0x000000012497e862: movabs $0x1151d6220,%r10
  0x000000012497e86c: jmpq   *(%r10,%rbx,8)
  0x000000012497e870: mov    -0x10(%rbp),%rsp
  0x000000012497e874: movq   $0x0,-0x10(%rbp)
  0x000000012497e87c: mov    -0x40(%rbp),%r13
  0x000000012497e880: mov    -0x38(%rbp),%r14
  0x000000012497e884: movzwl 0x1(%r13),%ecx
  0x000000012497e889: mov    -0x30(%rbp),%rbx
  0x000000012497e88d: shl    $0x2,%ecx
  0x000000012497e890: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497e894: and    $0xff,%ebx
  0x000000012497e89a: lea    (%rsp,%rbx,8),%rsp
  0x000000012497e89e: movzbl 0x3(%r13),%ebx
  0x000000012497e8a3: add    $0x3,%r13
  0x000000012497e8a7: movabs $0x1151d6a20,%r10
  0x000000012497e8b1: jmpq   *(%r10,%rbx,8)
  0x000000012497e8b5: mov    -0x10(%rbp),%rsp
  0x000000012497e8b9: movq   $0x0,-0x10(%rbp)
  0x000000012497e8c1: mov    -0x40(%rbp),%r13
  0x000000012497e8c5: mov    -0x38(%rbp),%r14
  0x000000012497e8c9: movzwl 0x1(%r13),%ecx
  0x000000012497e8ce: mov    -0x30(%rbp),%rbx
  0x000000012497e8d2: shl    $0x2,%ecx
  0x000000012497e8d5: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497e8d9: and    $0xff,%ebx
  0x000000012497e8df: lea    (%rsp,%rbx,8),%rsp
  0x000000012497e8e3: movzbl 0x5(%r13),%ebx
  0x000000012497e8e8: add    $0x5,%r13
  0x000000012497e8ec: movabs $0x1151d6a20,%r10
  0x000000012497e8f6: jmpq   *(%r10,%rbx,8)
  0x000000012497e8fa: mov    -0x10(%rbp),%rsp
  0x000000012497e8fe: movq   $0x0,-0x10(%rbp)
  0x000000012497e906: mov    -0x40(%rbp),%r13
  0x000000012497e90a: mov    -0x38(%rbp),%r14
  0x000000012497e90e: mov    0x1(%r13),%ecx
  0x000000012497e912: not    %ecx
  0x000000012497e914: mov    -0x30(%rbp),%rbx
  0x000000012497e918: shl    $0x2,%ecx
  0x000000012497e91b: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497e91f: and    $0xff,%ebx
  0x000000012497e925: lea    (%rsp,%rbx,8),%rsp
  0x000000012497e929: movzbl 0x5(%r13),%ebx
  0x000000012497e92e: add    $0x5,%r13
  0x000000012497e932: movabs $0x1151d6a20,%r10
  0x000000012497e93c: jmpq   *(%r10,%rbx,8)
  0x000000012497e940: mov    -0x10(%rbp),%rsp
  0x000000012497e944: movq   $0x0,-0x10(%rbp)
  0x000000012497e94c: mov    -0x40(%rbp),%r13
  0x000000012497e950: mov    -0x38(%rbp),%r14
  0x000000012497e954: mov    -0x28(%rbp),%rbx
  0x000000012497e958: test   %rbx,%rbx
  0x000000012497e95b: je     0x000000012497e9f1
  0x000000012497e961: cmpb   $0xba,0x0(%r13)
  0x000000012497e966: je     0x000000012497e987
  0x000000012497e96c: cmpb   $0xe9,0x0(%r13)
  0x000000012497e971: je     0x000000012497e987
  0x000000012497e977: mov    -0x18(%rbp),%rcx
  0x000000012497e97b: cmpw   $0x12a,0x28(%rcx)
  0x000000012497e981: jne    0x000000012497e9f1
  0x000000012497e987: mov    %rax,%rcx
  0x000000012497e98a: test   %rcx,%rcx
  0x000000012497e98d: jne    0x000000012497e999
  0x000000012497e98f: orq    $0x1,-0x8(%rbx)
  0x000000012497e997: jmp    0x000000012497e9f1
  0x000000012497e999: mov    0x8(%rcx),%ecx
  0x000000012497e99c: movabs $0x800000000,%r12
  0x000000012497e9a6: add    %r12,%rcx
  0x000000012497e9a9: xor    %r12,%r12
  0x000000012497e9ac: xor    -0x8(%rbx),%rcx
  0x000000012497e9b0: test   $0xfffffffffffffffc,%rcx
  0x000000012497e9b7: je     0x000000012497e9f1
  0x000000012497e9b9: test   $0x2,%rcx
  0x000000012497e9c0: jne    0x000000012497e9f1
  0x000000012497e9c2: cmpq   $0x0,-0x8(%rbx)
  0x000000012497e9ca: je     0x000000012497e9ed
  0x000000012497e9cc: cmpq   $0x1,-0x8(%rbx)
  0x000000012497e9d4: je     0x000000012497e9ed
  0x000000012497e9d6: xor    -0x8(%rbx),%rcx
  0x000000012497e9da: test   $0xfffffffffffffffc,%rcx
  0x000000012497e9e1: je     0x000000012497e9f1
  0x000000012497e9e3: orq    $0x2,-0x8(%rbx)
  0x000000012497e9eb: jmp    0x000000012497e9f1
  0x000000012497e9ed: mov    %rcx,-0x8(%rbx)
  0x000000012497e9f1: movzwl 0x1(%r13),%ecx
  0x000000012497e9f6: mov    -0x30(%rbp),%rbx
  0x000000012497e9fa: shl    $0x2,%ecx
  0x000000012497e9fd: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497ea01: and    $0xff,%ebx
  0x000000012497ea07: lea    (%rsp,%rbx,8),%rsp
  0x000000012497ea0b: movzbl 0x3(%r13),%ebx
  0x000000012497ea10: add    $0x3,%r13
  0x000000012497ea14: movabs $0x1151d7220,%r10
  0x000000012497ea1e: jmpq   *(%r10,%rbx,8)
  0x000000012497ea22: mov    -0x10(%rbp),%rsp
  0x000000012497ea26: movq   $0x0,-0x10(%rbp)
  0x000000012497ea2e: mov    -0x40(%rbp),%r13
  0x000000012497ea32: mov    -0x38(%rbp),%r14
  0x000000012497ea36: mov    -0x28(%rbp),%rbx
  0x000000012497ea3a: test   %rbx,%rbx
  0x000000012497ea3d: je     0x000000012497ead3
  0x000000012497ea43: cmpb   $0xba,0x0(%r13)
  0x000000012497ea48: je     0x000000012497ea69
  0x000000012497ea4e: cmpb   $0xe9,0x0(%r13)
  0x000000012497ea53: je     0x000000012497ea69
  0x000000012497ea59: mov    -0x18(%rbp),%rcx
  0x000000012497ea5d: cmpw   $0x12a,0x28(%rcx)
  0x000000012497ea63: jne    0x000000012497ead3
  0x000000012497ea69: mov    %rax,%rcx
  0x000000012497ea6c: test   %rcx,%rcx
  0x000000012497ea6f: jne    0x000000012497ea7b
  0x000000012497ea71: orq    $0x1,-0x8(%rbx)
  0x000000012497ea79: jmp    0x000000012497ead3
  0x000000012497ea7b: mov    0x8(%rcx),%ecx
  0x000000012497ea7e: movabs $0x800000000,%r12
  0x000000012497ea88: add    %r12,%rcx
  0x000000012497ea8b: xor    %r12,%r12
  0x000000012497ea8e: xor    -0x8(%rbx),%rcx
  0x000000012497ea92: test   $0xfffffffffffffffc,%rcx
  0x000000012497ea99: je     0x000000012497ead3
  0x000000012497ea9b: test   $0x2,%rcx
  0x000000012497eaa2: jne    0x000000012497ead3
  0x000000012497eaa4: cmpq   $0x0,-0x8(%rbx)
  0x000000012497eaac: je     0x000000012497eacf
  0x000000012497eaae: cmpq   $0x1,-0x8(%rbx)
  0x000000012497eab6: je     0x000000012497eacf
  0x000000012497eab8: xor    -0x8(%rbx),%rcx
  0x000000012497eabc: test   $0xfffffffffffffffc,%rcx
  0x000000012497eac3: je     0x000000012497ead3
  0x000000012497eac5: orq    $0x2,-0x8(%rbx)
  0x000000012497eacd: jmp    0x000000012497ead3
  0x000000012497eacf: mov    %rcx,-0x8(%rbx)
  0x000000012497ead3: movzwl 0x1(%r13),%ecx
  0x000000012497ead8: mov    -0x30(%rbp),%rbx
  0x000000012497eadc: shl    $0x2,%ecx
  0x000000012497eadf: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497eae3: and    $0xff,%ebx
  0x000000012497eae9: lea    (%rsp,%rbx,8),%rsp
  0x000000012497eaed: movzbl 0x5(%r13),%ebx
  0x000000012497eaf2: add    $0x5,%r13
  0x000000012497eaf6: movabs $0x1151d7220,%r10
  0x000000012497eb00: jmpq   *(%r10,%rbx,8)
  0x000000012497eb04: mov    -0x10(%rbp),%rsp
  0x000000012497eb08: movq   $0x0,-0x10(%rbp)
  0x000000012497eb10: mov    -0x40(%rbp),%r13
  0x000000012497eb14: mov    -0x38(%rbp),%r14
  0x000000012497eb18: mov    -0x28(%rbp),%rbx
  0x000000012497eb1c: test   %rbx,%rbx
  0x000000012497eb1f: je     0x000000012497ebb5
  0x000000012497eb25: cmpb   $0xba,0x0(%r13)
  0x000000012497eb2a: je     0x000000012497eb4b
  0x000000012497eb30: cmpb   $0xe9,0x0(%r13)
  0x000000012497eb35: je     0x000000012497eb4b
  0x000000012497eb3b: mov    -0x18(%rbp),%rcx
  0x000000012497eb3f: cmpw   $0x12a,0x28(%rcx)
  0x000000012497eb45: jne    0x000000012497ebb5
  0x000000012497eb4b: mov    %rax,%rcx
  0x000000012497eb4e: test   %rcx,%rcx
  0x000000012497eb51: jne    0x000000012497eb5d
  0x000000012497eb53: orq    $0x1,-0x8(%rbx)
  0x000000012497eb5b: jmp    0x000000012497ebb5
  0x000000012497eb5d: mov    0x8(%rcx),%ecx
  0x000000012497eb60: movabs $0x800000000,%r12
  0x000000012497eb6a: add    %r12,%rcx
  0x000000012497eb6d: xor    %r12,%r12
  0x000000012497eb70: xor    -0x8(%rbx),%rcx
  0x000000012497eb74: test   $0xfffffffffffffffc,%rcx
  0x000000012497eb7b: je     0x000000012497ebb5
  0x000000012497eb7d: test   $0x2,%rcx
  0x000000012497eb84: jne    0x000000012497ebb5
  0x000000012497eb86: cmpq   $0x0,-0x8(%rbx)
  0x000000012497eb8e: je     0x000000012497ebb1
  0x000000012497eb90: cmpq   $0x1,-0x8(%rbx)
  0x000000012497eb98: je     0x000000012497ebb1
  0x000000012497eb9a: xor    -0x8(%rbx),%rcx
  0x000000012497eb9e: test   $0xfffffffffffffffc,%rcx
  0x000000012497eba5: je     0x000000012497ebb5
  0x000000012497eba7: orq    $0x2,-0x8(%rbx)
  0x000000012497ebaf: jmp    0x000000012497ebb5
  0x000000012497ebb1: mov    %rcx,-0x8(%rbx)
  0x000000012497ebb5: mov    0x1(%r13),%ecx
  0x000000012497ebb9: not    %ecx
  0x000000012497ebbb: mov    -0x30(%rbp),%rbx
  0x000000012497ebbf: shl    $0x2,%ecx
  0x000000012497ebc2: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497ebc6: and    $0xff,%ebx
  0x000000012497ebcc: lea    (%rsp,%rbx,8),%rsp
  0x000000012497ebd0: movzbl 0x5(%r13),%ebx
  0x000000012497ebd5: add    $0x5,%r13
  0x000000012497ebd9: movabs $0x1151d7220,%r10
  0x000000012497ebe3: jmpq   *(%r10,%rbx,8)
  0x000000012497ebe7: mov    -0x10(%rbp),%rsp
  0x000000012497ebeb: movq   $0x0,-0x10(%rbp)
  0x000000012497ebf3: mov    -0x40(%rbp),%r13
  0x000000012497ebf7: mov    -0x38(%rbp),%r14
  0x000000012497ebfb: movzwl 0x1(%r13),%ecx
  0x000000012497ec00: mov    -0x30(%rbp),%rbx
  0x000000012497ec04: shl    $0x2,%ecx
  0x000000012497ec07: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497ec0b: and    $0xff,%ebx
  0x000000012497ec11: lea    (%rsp,%rbx,8),%rsp
  0x000000012497ec15: movzbl 0x3(%r13),%ebx
  0x000000012497ec1a: add    $0x3,%r13
  0x000000012497ec1e: movabs $0x1151d7a20,%r10
  0x000000012497ec28: jmpq   *(%r10,%rbx,8)
  0x000000012497ec2c: mov    -0x10(%rbp),%rsp
  0x000000012497ec30: movq   $0x0,-0x10(%rbp)
  0x000000012497ec38: mov    -0x40(%rbp),%r13
  0x000000012497ec3c: mov    -0x38(%rbp),%r14
  0x000000012497ec40: movzwl 0x1(%r13),%ecx
  0x000000012497ec45: mov    -0x30(%rbp),%rbx
  0x000000012497ec49: shl    $0x2,%ecx
  0x000000012497ec4c: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497ec50: and    $0xff,%ebx
  0x000000012497ec56: lea    (%rsp,%rbx,8),%rsp
  0x000000012497ec5a: movzbl 0x5(%r13),%ebx
  0x000000012497ec5f: add    $0x5,%r13
  0x000000012497ec63: movabs $0x1151d7a20,%r10
  0x000000012497ec6d: jmpq   *(%r10,%rbx,8)
  0x000000012497ec71: mov    -0x10(%rbp),%rsp
  0x000000012497ec75: movq   $0x0,-0x10(%rbp)
  0x000000012497ec7d: mov    -0x40(%rbp),%r13
  0x000000012497ec81: mov    -0x38(%rbp),%r14
  0x000000012497ec85: mov    0x1(%r13),%ecx
  0x000000012497ec89: not    %ecx
  0x000000012497ec8b: mov    -0x30(%rbp),%rbx
  0x000000012497ec8f: shl    $0x2,%ecx
  0x000000012497ec92: mov    0x40(%rbx,%rcx,8),%ebx
  0x000000012497ec96: and    $0xff,%ebx
  0x000000012497ec9c: lea    (%rsp,%rbx,8),%rsp
  0x000000012497eca0: movzbl 0x5(%r13),%ebx
  0x000000012497eca5: add    $0x5,%r13
  0x000000012497eca9: movabs $0x1151d7a20,%r10
  0x000000012497ecb3: jmpq   *(%r10,%rbx,8)
  0x000000012497ecb7: nop
  0x000000012497ecb8: add    %al,(%rax)
  0x000000012497ecba: add    %al,(%rax)
  0x000000012497ecbc: add    %al,(%rax)
  0x000000012497ecbe: add    %al,(%rax)

----------------------------------------------------------------------
earlyret entry points  [0x000000012497ece0, 0x00000001249813c0]  9952 bytes

  0x000000012497ece0: mov    -0x40(%rbp),%r13
  0x000000012497ece4: mov    -0x38(%rbp),%r14
  0x000000012497ece8: mov    -0x48(%rbp),%rsp
  0x000000012497ecec: movq   $0x0,-0x10(%rbp)
  0x000000012497ecf4: mov    0x488(%r15),%rcx
  0x000000012497ecfb: mov    0x80(%rcx),%eax
  0x000000012497ed01: movl   $0xb,0x78(%rcx)
  0x000000012497ed08: movl   $0x0,0x80(%rcx)
  0x000000012497ed12: movl   $0xb,0x78(%rcx)
  0x000000012497ed19: movabs $0x0,%r10
  0x000000012497ed23: mov    %r10,0x80(%rcx)
  0x000000012497ed2a: mov    0x488(%r15),%rcx
  0x000000012497ed31: movl   $0x0,0x74(%rcx)
  0x000000012497ed38: mov    0x3dd(%r15),%bl
  0x000000012497ed3f: movb   $0x0,0x3dd(%r15)
  0x000000012497ed47: mov    -0x18(%rbp),%rcx
  0x000000012497ed4b: mov    0x20(%rcx),%ecx
  0x000000012497ed4e: test   $0x20,%ecx
  0x000000012497ed54: je     0x000000012497ee67
  0x000000012497ed5a: test   $0xff,%bl
  0x000000012497ed5d: jne    0x000000012497ef7a
  0x000000012497ed63: push   %rax
  0x000000012497ed64: lea    -0x58(%rbp),%rsi
  0x000000012497ed68: mov    0x8(%rsi),%rax
  0x000000012497ed6c: test   %rax,%rax
  0x000000012497ed6f: jne    0x000000012497ed81
  0x000000012497ed75: mov    (%rsp),%eax
  0x000000012497ed78: add    $0x8,%rsp
  0x000000012497ed7c: jmpq   0x000000012497ee67
  0x000000012497ed81: mov    %r13,-0x40(%rbp)
  0x000000012497ed85: lea    (%rsi),%rax
  0x000000012497ed88: mov    0x8(%rsi),%rcx
  0x000000012497ed8c: movq   $0x0,0x8(%rsi)
  0x000000012497ed94: mov    (%rcx),%rdx
  0x000000012497ed97: and    $0x7,%rdx
  0x000000012497ed9b: cmp    $0x5,%rdx
  0x000000012497ed9f: je     0x000000012497ee5c
  0x000000012497eda5: mov    (%rax),%rdx
  0x000000012497eda8: test   %rdx,%rdx
  0x000000012497edab: je     0x000000012497ee5c
  0x000000012497edb1: lock cmpxchg %rdx,(%rcx)
  0x000000012497edb6: je     0x000000012497ee5c
  0x000000012497edbc: mov    %rcx,0x8(%rsi)
  0x000000012497edc0: callq  0x000000012497edca
  0x000000012497edc5: jmpq   0x000000012497ee5c
  0x000000012497edca: lea    0x8(%rsp),%rax
  0x000000012497edcf: mov    %r13,-0x40(%rbp)
  0x000000012497edd3: mov    %r15,%rdi
  0x000000012497edd6: vzeroupper 
  0x000000012497edd9: mov    %rbp,0x330(%r15)
  0x000000012497ede0: mov    %rax,0x320(%r15)
  0x000000012497ede7: test   $0xf,%esp
  0x000000012497eded: je     0x000000012497ee05
  0x000000012497edf3: sub    $0x8,%rsp
  0x000000012497edf7: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012497edfc: add    $0x8,%rsp
  0x000000012497ee00: jmpq   0x000000012497ee0a
  0x000000012497ee05: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012497ee0a: movabs $0x0,%r10
  0x000000012497ee14: mov    %r10,0x320(%r15)
  0x000000012497ee1b: movabs $0x0,%r10
  0x000000012497ee25: mov    %r10,0x330(%r15)
  0x000000012497ee2c: movabs $0x0,%r10
  0x000000012497ee36: mov    %r10,0x328(%r15)
  0x000000012497ee3d: vzeroupper 
  0x000000012497ee40: cmpq   $0x0,0x8(%r15)
  0x000000012497ee48: je     0x000000012497ee53
  0x000000012497ee4e: jmpq   0x0000000124975780
  0x000000012497ee53: mov    -0x40(%rbp),%r13
  0x000000012497ee57: mov    -0x38(%rbp),%r14
  0x000000012497ee5b: retq   
  0x000000012497ee5c: mov    -0x40(%rbp),%r13
  0x000000012497ee60: mov    (%rsp),%eax
  0x000000012497ee63: add    $0x8,%rsp
  0x000000012497ee67: mov    -0x48(%rbp),%rsi
  0x000000012497ee6b: lea    -0x48(%rbp),%rbx
  0x000000012497ee6f: jmpq   0x000000012497ef75
  0x000000012497ee74: push   %rax
  0x000000012497ee75: mov    %rsi,%rsi
  0x000000012497ee78: mov    %r13,-0x40(%rbp)
  0x000000012497ee7c: lea    (%rsi),%rax
  0x000000012497ee7f: mov    0x8(%rsi),%rcx
  0x000000012497ee83: movq   $0x0,0x8(%rsi)
  0x000000012497ee8b: mov    (%rcx),%rdx
  0x000000012497ee8e: and    $0x7,%rdx
  0x000000012497ee92: cmp    $0x5,%rdx
  0x000000012497ee96: je     0x000000012497ef53
  0x000000012497ee9c: mov    (%rax),%rdx
  0x000000012497ee9f: test   %rdx,%rdx
  0x000000012497eea2: je     0x000000012497ef53
  0x000000012497eea8: lock cmpxchg %rdx,(%rcx)
  0x000000012497eead: je     0x000000012497ef53
  0x000000012497eeb3: mov    %rcx,0x8(%rsi)
  0x000000012497eeb7: callq  0x000000012497eec1
  0x000000012497eebc: jmpq   0x000000012497ef53
  0x000000012497eec1: lea    0x8(%rsp),%rax
  0x000000012497eec6: mov    %r13,-0x40(%rbp)
  0x000000012497eeca: mov    %r15,%rdi
  0x000000012497eecd: vzeroupper 
  0x000000012497eed0: mov    %rbp,0x330(%r15)
  0x000000012497eed7: mov    %rax,0x320(%r15)
  0x000000012497eede: test   $0xf,%esp
  0x000000012497eee4: je     0x000000012497eefc
  0x000000012497eeea: sub    $0x8,%rsp
  0x000000012497eeee: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012497eef3: add    $0x8,%rsp
  0x000000012497eef7: jmpq   0x000000012497ef01
  0x000000012497eefc: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012497ef01: movabs $0x0,%r10
  0x000000012497ef0b: mov    %r10,0x320(%r15)
  0x000000012497ef12: movabs $0x0,%r10
  0x000000012497ef1c: mov    %r10,0x330(%r15)
  0x000000012497ef23: movabs $0x0,%r10
  0x000000012497ef2d: mov    %r10,0x328(%r15)
  0x000000012497ef34: vzeroupper 
  0x000000012497ef37: cmpq   $0x0,0x8(%r15)
  0x000000012497ef3f: je     0x000000012497ef4a
  0x000000012497ef45: jmpq   0x0000000124975780
  0x000000012497ef4a: mov    -0x40(%rbp),%r13
  0x000000012497ef4e: mov    -0x38(%rbp),%r14
  0x000000012497ef52: retq   
  0x000000012497ef53: mov    -0x40(%rbp),%r13
  0x000000012497ef57: mov    (%rsp),%eax
  0x000000012497ef5a: add    $0x8,%rsp
  0x000000012497ef5e: jmpq   0x000000012497ee67
  0x000000012497ef63: cmpq   $0x0,0x8(%rsi)
  0x000000012497ef6b: jne    0x000000012497ee74
  0x000000012497ef71: add    $0x10,%rsi
  0x000000012497ef75: cmp    %rbx,%rsi
  0x000000012497ef78: jne    0x000000012497ef63
  0x000000012497ef7a: cmpb   $0x0,-0xf7c4ea7(%rip)        # 0x00000001151ba0da = DTraceMethodProbes
  0x000000012497ef81: je     0x000000012497efb9
  0x000000012497ef87: push   %rax
  0x000000012497ef88: mov    -0x18(%rbp),%rsi
  0x000000012497ef8c: mov    %r15,%rdi
  0x000000012497ef8f: test   $0xf,%esp
  0x000000012497ef95: je     0x000000012497efad
  0x000000012497ef9b: sub    $0x8,%rsp
  0x000000012497ef9f: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000012497efa4: add    $0x8,%rsp
  0x000000012497efa8: jmpq   0x000000012497efb2
  0x000000012497efad: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000012497efb2: mov    (%rsp),%eax
  0x000000012497efb5: add    $0x8,%rsp
  0x000000012497efb9: mov    -0x8(%rbp),%rbx
  0x000000012497efbd: cmpl   $0x3,0x408(%r15)
  0x000000012497efc8: je     0x000000012497f0b1
  0x000000012497efce: cmp    0x418(%r15),%rbx
  0x000000012497efd5: jle    0x000000012497f0b1
  0x000000012497efdb: mov    %r15,%rdi
  0x000000012497efde: test   $0xf,%esp
  0x000000012497efe4: je     0x000000012497effc
  0x000000012497efea: sub    $0x8,%rsp
  0x000000012497efee: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000012497eff3: add    $0x8,%rsp
  0x000000012497eff7: jmpq   0x000000012497f001
  0x000000012497effc: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000012497f001: callq  0x000000012497f00b
  0x000000012497f006: jmpq   0x000000012497f09d
  0x000000012497f00b: lea    0x8(%rsp),%rax
  0x000000012497f010: mov    %r13,-0x40(%rbp)
  0x000000012497f014: mov    %r15,%rdi
  0x000000012497f017: vzeroupper 
  0x000000012497f01a: mov    %rbp,0x330(%r15)
  0x000000012497f021: mov    %rax,0x320(%r15)
  0x000000012497f028: test   $0xf,%esp
  0x000000012497f02e: je     0x000000012497f046
  0x000000012497f034: sub    $0x8,%rsp
  0x000000012497f038: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000012497f03d: add    $0x8,%rsp
  0x000000012497f041: jmpq   0x000000012497f04b
  0x000000012497f046: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000012497f04b: movabs $0x0,%r10
  0x000000012497f055: mov    %r10,0x320(%r15)
  0x000000012497f05c: movabs $0x0,%r10
  0x000000012497f066: mov    %r10,0x330(%r15)
  0x000000012497f06d: movabs $0x0,%r10
  0x000000012497f077: mov    %r10,0x328(%r15)
  0x000000012497f07e: vzeroupper 
  0x000000012497f081: cmpq   $0x0,0x8(%r15)
  0x000000012497f089: je     0x000000012497f094
  0x000000012497f08f: jmpq   0x0000000124975780
  0x000000012497f094: mov    -0x40(%rbp),%r13
  0x000000012497f098: mov    -0x38(%rbp),%r14
  0x000000012497f09c: retq   
  0x000000012497f09d: movabs $0x114ff3493,%rdi
  0x000000012497f0a7: and    $0xfffffffffffffff0,%rsp
  0x000000012497f0ab: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000012497f0b0: hlt    
  0x000000012497f0b1: leaveq 
  0x000000012497f0b2: pop    %rsi
  0x000000012497f0b3: mov    %rbx,%rsp
  0x000000012497f0b6: jmpq   *%rsi
  0x000000012497f0b8: mov    -0x40(%rbp),%r13
  0x000000012497f0bc: mov    -0x38(%rbp),%r14
  0x000000012497f0c0: mov    -0x48(%rbp),%rsp
  0x000000012497f0c4: movq   $0x0,-0x10(%rbp)
  0x000000012497f0cc: mov    0x488(%r15),%rcx
  0x000000012497f0d3: mov    0x80(%rcx),%eax
  0x000000012497f0d9: movl   $0xb,0x78(%rcx)
  0x000000012497f0e0: movl   $0x0,0x80(%rcx)
  0x000000012497f0ea: movl   $0xb,0x78(%rcx)
  0x000000012497f0f1: movabs $0x0,%r10
  0x000000012497f0fb: mov    %r10,0x80(%rcx)
  0x000000012497f102: mov    0x488(%r15),%rcx
  0x000000012497f109: movl   $0x0,0x74(%rcx)
  0x000000012497f110: mov    0x3dd(%r15),%bl
  0x000000012497f117: movb   $0x0,0x3dd(%r15)
  0x000000012497f11f: mov    -0x18(%rbp),%rcx
  0x000000012497f123: mov    0x20(%rcx),%ecx
  0x000000012497f126: test   $0x20,%ecx
  0x000000012497f12c: je     0x000000012497f23f
  0x000000012497f132: test   $0xff,%bl
  0x000000012497f135: jne    0x000000012497f352
  0x000000012497f13b: push   %rax
  0x000000012497f13c: lea    -0x58(%rbp),%rsi
  0x000000012497f140: mov    0x8(%rsi),%rax
  0x000000012497f144: test   %rax,%rax
  0x000000012497f147: jne    0x000000012497f159
  0x000000012497f14d: mov    (%rsp),%eax
  0x000000012497f150: add    $0x8,%rsp
  0x000000012497f154: jmpq   0x000000012497f23f
  0x000000012497f159: mov    %r13,-0x40(%rbp)
  0x000000012497f15d: lea    (%rsi),%rax
  0x000000012497f160: mov    0x8(%rsi),%rcx
  0x000000012497f164: movq   $0x0,0x8(%rsi)
  0x000000012497f16c: mov    (%rcx),%rdx
  0x000000012497f16f: and    $0x7,%rdx
  0x000000012497f173: cmp    $0x5,%rdx
  0x000000012497f177: je     0x000000012497f234
  0x000000012497f17d: mov    (%rax),%rdx
  0x000000012497f180: test   %rdx,%rdx
  0x000000012497f183: je     0x000000012497f234
  0x000000012497f189: lock cmpxchg %rdx,(%rcx)
  0x000000012497f18e: je     0x000000012497f234
  0x000000012497f194: mov    %rcx,0x8(%rsi)
  0x000000012497f198: callq  0x000000012497f1a2
  0x000000012497f19d: jmpq   0x000000012497f234
  0x000000012497f1a2: lea    0x8(%rsp),%rax
  0x000000012497f1a7: mov    %r13,-0x40(%rbp)
  0x000000012497f1ab: mov    %r15,%rdi
  0x000000012497f1ae: vzeroupper 
  0x000000012497f1b1: mov    %rbp,0x330(%r15)
  0x000000012497f1b8: mov    %rax,0x320(%r15)
  0x000000012497f1bf: test   $0xf,%esp
  0x000000012497f1c5: je     0x000000012497f1dd
  0x000000012497f1cb: sub    $0x8,%rsp
  0x000000012497f1cf: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012497f1d4: add    $0x8,%rsp
  0x000000012497f1d8: jmpq   0x000000012497f1e2
  0x000000012497f1dd: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012497f1e2: movabs $0x0,%r10
  0x000000012497f1ec: mov    %r10,0x320(%r15)
  0x000000012497f1f3: movabs $0x0,%r10
  0x000000012497f1fd: mov    %r10,0x330(%r15)
  0x000000012497f204: movabs $0x0,%r10
  0x000000012497f20e: mov    %r10,0x328(%r15)
  0x000000012497f215: vzeroupper 
  0x000000012497f218: cmpq   $0x0,0x8(%r15)
  0x000000012497f220: je     0x000000012497f22b
  0x000000012497f226: jmpq   0x0000000124975780
  0x000000012497f22b: mov    -0x40(%rbp),%r13
  0x000000012497f22f: mov    -0x38(%rbp),%r14
  0x000000012497f233: retq   
  0x000000012497f234: mov    -0x40(%rbp),%r13
  0x000000012497f238: mov    (%rsp),%eax
  0x000000012497f23b: add    $0x8,%rsp
  0x000000012497f23f: mov    -0x48(%rbp),%rsi
  0x000000012497f243: lea    -0x48(%rbp),%rbx
  0x000000012497f247: jmpq   0x000000012497f34d
  0x000000012497f24c: push   %rax
  0x000000012497f24d: mov    %rsi,%rsi
  0x000000012497f250: mov    %r13,-0x40(%rbp)
  0x000000012497f254: lea    (%rsi),%rax
  0x000000012497f257: mov    0x8(%rsi),%rcx
  0x000000012497f25b: movq   $0x0,0x8(%rsi)
  0x000000012497f263: mov    (%rcx),%rdx
  0x000000012497f266: and    $0x7,%rdx
  0x000000012497f26a: cmp    $0x5,%rdx
  0x000000012497f26e: je     0x000000012497f32b
  0x000000012497f274: mov    (%rax),%rdx
  0x000000012497f277: test   %rdx,%rdx
  0x000000012497f27a: je     0x000000012497f32b
  0x000000012497f280: lock cmpxchg %rdx,(%rcx)
  0x000000012497f285: je     0x000000012497f32b
  0x000000012497f28b: mov    %rcx,0x8(%rsi)
  0x000000012497f28f: callq  0x000000012497f299
  0x000000012497f294: jmpq   0x000000012497f32b
  0x000000012497f299: lea    0x8(%rsp),%rax
  0x000000012497f29e: mov    %r13,-0x40(%rbp)
  0x000000012497f2a2: mov    %r15,%rdi
  0x000000012497f2a5: vzeroupper 
  0x000000012497f2a8: mov    %rbp,0x330(%r15)
  0x000000012497f2af: mov    %rax,0x320(%r15)
  0x000000012497f2b6: test   $0xf,%esp
  0x000000012497f2bc: je     0x000000012497f2d4
  0x000000012497f2c2: sub    $0x8,%rsp
  0x000000012497f2c6: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012497f2cb: add    $0x8,%rsp
  0x000000012497f2cf: jmpq   0x000000012497f2d9
  0x000000012497f2d4: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012497f2d9: movabs $0x0,%r10
  0x000000012497f2e3: mov    %r10,0x320(%r15)
  0x000000012497f2ea: movabs $0x0,%r10
  0x000000012497f2f4: mov    %r10,0x330(%r15)
  0x000000012497f2fb: movabs $0x0,%r10
  0x000000012497f305: mov    %r10,0x328(%r15)
  0x000000012497f30c: vzeroupper 
  0x000000012497f30f: cmpq   $0x0,0x8(%r15)
  0x000000012497f317: je     0x000000012497f322
  0x000000012497f31d: jmpq   0x0000000124975780
  0x000000012497f322: mov    -0x40(%rbp),%r13
  0x000000012497f326: mov    -0x38(%rbp),%r14
  0x000000012497f32a: retq   
  0x000000012497f32b: mov    -0x40(%rbp),%r13
  0x000000012497f32f: mov    (%rsp),%eax
  0x000000012497f332: add    $0x8,%rsp
  0x000000012497f336: jmpq   0x000000012497f23f
  0x000000012497f33b: cmpq   $0x0,0x8(%rsi)
  0x000000012497f343: jne    0x000000012497f24c
  0x000000012497f349: add    $0x10,%rsi
  0x000000012497f34d: cmp    %rbx,%rsi
  0x000000012497f350: jne    0x000000012497f33b
  0x000000012497f352: cmpb   $0x0,-0xf7c527f(%rip)        # 0x00000001151ba0da = DTraceMethodProbes
  0x000000012497f359: je     0x000000012497f391
  0x000000012497f35f: push   %rax
  0x000000012497f360: mov    -0x18(%rbp),%rsi
  0x000000012497f364: mov    %r15,%rdi
  0x000000012497f367: test   $0xf,%esp
  0x000000012497f36d: je     0x000000012497f385
  0x000000012497f373: sub    $0x8,%rsp
  0x000000012497f377: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000012497f37c: add    $0x8,%rsp
  0x000000012497f380: jmpq   0x000000012497f38a
  0x000000012497f385: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000012497f38a: mov    (%rsp),%eax
  0x000000012497f38d: add    $0x8,%rsp
  0x000000012497f391: mov    -0x8(%rbp),%rbx
  0x000000012497f395: cmpl   $0x3,0x408(%r15)
  0x000000012497f3a0: je     0x000000012497f489
  0x000000012497f3a6: cmp    0x418(%r15),%rbx
  0x000000012497f3ad: jle    0x000000012497f489
  0x000000012497f3b3: mov    %r15,%rdi
  0x000000012497f3b6: test   $0xf,%esp
  0x000000012497f3bc: je     0x000000012497f3d4
  0x000000012497f3c2: sub    $0x8,%rsp
  0x000000012497f3c6: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000012497f3cb: add    $0x8,%rsp
  0x000000012497f3cf: jmpq   0x000000012497f3d9
  0x000000012497f3d4: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000012497f3d9: callq  0x000000012497f3e3
  0x000000012497f3de: jmpq   0x000000012497f475
  0x000000012497f3e3: lea    0x8(%rsp),%rax
  0x000000012497f3e8: mov    %r13,-0x40(%rbp)
  0x000000012497f3ec: mov    %r15,%rdi
  0x000000012497f3ef: vzeroupper 
  0x000000012497f3f2: mov    %rbp,0x330(%r15)
  0x000000012497f3f9: mov    %rax,0x320(%r15)
  0x000000012497f400: test   $0xf,%esp
  0x000000012497f406: je     0x000000012497f41e
  0x000000012497f40c: sub    $0x8,%rsp
  0x000000012497f410: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000012497f415: add    $0x8,%rsp
  0x000000012497f419: jmpq   0x000000012497f423
  0x000000012497f41e: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000012497f423: movabs $0x0,%r10
  0x000000012497f42d: mov    %r10,0x320(%r15)
  0x000000012497f434: movabs $0x0,%r10
  0x000000012497f43e: mov    %r10,0x330(%r15)
  0x000000012497f445: movabs $0x0,%r10
  0x000000012497f44f: mov    %r10,0x328(%r15)
  0x000000012497f456: vzeroupper 
  0x000000012497f459: cmpq   $0x0,0x8(%r15)
  0x000000012497f461: je     0x000000012497f46c
  0x000000012497f467: jmpq   0x0000000124975780
  0x000000012497f46c: mov    -0x40(%rbp),%r13
  0x000000012497f470: mov    -0x38(%rbp),%r14
  0x000000012497f474: retq   
  0x000000012497f475: movabs $0x114ff3493,%rdi
  0x000000012497f47f: and    $0xfffffffffffffff0,%rsp
  0x000000012497f483: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000012497f488: hlt    
  0x000000012497f489: leaveq 
  0x000000012497f48a: pop    %rsi
  0x000000012497f48b: mov    %rbx,%rsp
  0x000000012497f48e: jmpq   *%rsi
  0x000000012497f490: mov    -0x40(%rbp),%r13
  0x000000012497f494: mov    -0x38(%rbp),%r14
  0x000000012497f498: mov    -0x48(%rbp),%rsp
  0x000000012497f49c: movq   $0x0,-0x10(%rbp)
  0x000000012497f4a4: mov    0x488(%r15),%rcx
  0x000000012497f4ab: mov    0x80(%rcx),%eax
  0x000000012497f4b1: movl   $0xb,0x78(%rcx)
  0x000000012497f4b8: movl   $0x0,0x80(%rcx)
  0x000000012497f4c2: movl   $0xb,0x78(%rcx)
  0x000000012497f4c9: movabs $0x0,%r10
  0x000000012497f4d3: mov    %r10,0x80(%rcx)
  0x000000012497f4da: mov    0x488(%r15),%rcx
  0x000000012497f4e1: movl   $0x0,0x74(%rcx)
  0x000000012497f4e8: mov    0x3dd(%r15),%bl
  0x000000012497f4ef: movb   $0x0,0x3dd(%r15)
  0x000000012497f4f7: mov    -0x18(%rbp),%rcx
  0x000000012497f4fb: mov    0x20(%rcx),%ecx
  0x000000012497f4fe: test   $0x20,%ecx
  0x000000012497f504: je     0x000000012497f617
  0x000000012497f50a: test   $0xff,%bl
  0x000000012497f50d: jne    0x000000012497f72a
  0x000000012497f513: push   %rax
  0x000000012497f514: lea    -0x58(%rbp),%rsi
  0x000000012497f518: mov    0x8(%rsi),%rax
  0x000000012497f51c: test   %rax,%rax
  0x000000012497f51f: jne    0x000000012497f531
  0x000000012497f525: mov    (%rsp),%eax
  0x000000012497f528: add    $0x8,%rsp
  0x000000012497f52c: jmpq   0x000000012497f617
  0x000000012497f531: mov    %r13,-0x40(%rbp)
  0x000000012497f535: lea    (%rsi),%rax
  0x000000012497f538: mov    0x8(%rsi),%rcx
  0x000000012497f53c: movq   $0x0,0x8(%rsi)
  0x000000012497f544: mov    (%rcx),%rdx
  0x000000012497f547: and    $0x7,%rdx
  0x000000012497f54b: cmp    $0x5,%rdx
  0x000000012497f54f: je     0x000000012497f60c
  0x000000012497f555: mov    (%rax),%rdx
  0x000000012497f558: test   %rdx,%rdx
  0x000000012497f55b: je     0x000000012497f60c
  0x000000012497f561: lock cmpxchg %rdx,(%rcx)
  0x000000012497f566: je     0x000000012497f60c
  0x000000012497f56c: mov    %rcx,0x8(%rsi)
  0x000000012497f570: callq  0x000000012497f57a
  0x000000012497f575: jmpq   0x000000012497f60c
  0x000000012497f57a: lea    0x8(%rsp),%rax
  0x000000012497f57f: mov    %r13,-0x40(%rbp)
  0x000000012497f583: mov    %r15,%rdi
  0x000000012497f586: vzeroupper 
  0x000000012497f589: mov    %rbp,0x330(%r15)
  0x000000012497f590: mov    %rax,0x320(%r15)
  0x000000012497f597: test   $0xf,%esp
  0x000000012497f59d: je     0x000000012497f5b5
  0x000000012497f5a3: sub    $0x8,%rsp
  0x000000012497f5a7: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012497f5ac: add    $0x8,%rsp
  0x000000012497f5b0: jmpq   0x000000012497f5ba
  0x000000012497f5b5: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012497f5ba: movabs $0x0,%r10
  0x000000012497f5c4: mov    %r10,0x320(%r15)
  0x000000012497f5cb: movabs $0x0,%r10
  0x000000012497f5d5: mov    %r10,0x330(%r15)
  0x000000012497f5dc: movabs $0x0,%r10
  0x000000012497f5e6: mov    %r10,0x328(%r15)
  0x000000012497f5ed: vzeroupper 
  0x000000012497f5f0: cmpq   $0x0,0x8(%r15)
  0x000000012497f5f8: je     0x000000012497f603
  0x000000012497f5fe: jmpq   0x0000000124975780
  0x000000012497f603: mov    -0x40(%rbp),%r13
  0x000000012497f607: mov    -0x38(%rbp),%r14
  0x000000012497f60b: retq   
  0x000000012497f60c: mov    -0x40(%rbp),%r13
  0x000000012497f610: mov    (%rsp),%eax
  0x000000012497f613: add    $0x8,%rsp
  0x000000012497f617: mov    -0x48(%rbp),%rsi
  0x000000012497f61b: lea    -0x48(%rbp),%rbx
  0x000000012497f61f: jmpq   0x000000012497f725
  0x000000012497f624: push   %rax
  0x000000012497f625: mov    %rsi,%rsi
  0x000000012497f628: mov    %r13,-0x40(%rbp)
  0x000000012497f62c: lea    (%rsi),%rax
  0x000000012497f62f: mov    0x8(%rsi),%rcx
  0x000000012497f633: movq   $0x0,0x8(%rsi)
  0x000000012497f63b: mov    (%rcx),%rdx
  0x000000012497f63e: and    $0x7,%rdx
  0x000000012497f642: cmp    $0x5,%rdx
  0x000000012497f646: je     0x000000012497f703
  0x000000012497f64c: mov    (%rax),%rdx
  0x000000012497f64f: test   %rdx,%rdx
  0x000000012497f652: je     0x000000012497f703
  0x000000012497f658: lock cmpxchg %rdx,(%rcx)
  0x000000012497f65d: je     0x000000012497f703
  0x000000012497f663: mov    %rcx,0x8(%rsi)
  0x000000012497f667: callq  0x000000012497f671
  0x000000012497f66c: jmpq   0x000000012497f703
  0x000000012497f671: lea    0x8(%rsp),%rax
  0x000000012497f676: mov    %r13,-0x40(%rbp)
  0x000000012497f67a: mov    %r15,%rdi
  0x000000012497f67d: vzeroupper 
  0x000000012497f680: mov    %rbp,0x330(%r15)
  0x000000012497f687: mov    %rax,0x320(%r15)
  0x000000012497f68e: test   $0xf,%esp
  0x000000012497f694: je     0x000000012497f6ac
  0x000000012497f69a: sub    $0x8,%rsp
  0x000000012497f69e: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012497f6a3: add    $0x8,%rsp
  0x000000012497f6a7: jmpq   0x000000012497f6b1
  0x000000012497f6ac: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012497f6b1: movabs $0x0,%r10
  0x000000012497f6bb: mov    %r10,0x320(%r15)
  0x000000012497f6c2: movabs $0x0,%r10
  0x000000012497f6cc: mov    %r10,0x330(%r15)
  0x000000012497f6d3: movabs $0x0,%r10
  0x000000012497f6dd: mov    %r10,0x328(%r15)
  0x000000012497f6e4: vzeroupper 
  0x000000012497f6e7: cmpq   $0x0,0x8(%r15)
  0x000000012497f6ef: je     0x000000012497f6fa
  0x000000012497f6f5: jmpq   0x0000000124975780
  0x000000012497f6fa: mov    -0x40(%rbp),%r13
  0x000000012497f6fe: mov    -0x38(%rbp),%r14
  0x000000012497f702: retq   
  0x000000012497f703: mov    -0x40(%rbp),%r13
  0x000000012497f707: mov    (%rsp),%eax
  0x000000012497f70a: add    $0x8,%rsp
  0x000000012497f70e: jmpq   0x000000012497f617
  0x000000012497f713: cmpq   $0x0,0x8(%rsi)
  0x000000012497f71b: jne    0x000000012497f624
  0x000000012497f721: add    $0x10,%rsi
  0x000000012497f725: cmp    %rbx,%rsi
  0x000000012497f728: jne    0x000000012497f713
  0x000000012497f72a: cmpb   $0x0,-0xf7c5657(%rip)        # 0x00000001151ba0da = DTraceMethodProbes
  0x000000012497f731: je     0x000000012497f769
  0x000000012497f737: push   %rax
  0x000000012497f738: mov    -0x18(%rbp),%rsi
  0x000000012497f73c: mov    %r15,%rdi
  0x000000012497f73f: test   $0xf,%esp
  0x000000012497f745: je     0x000000012497f75d
  0x000000012497f74b: sub    $0x8,%rsp
  0x000000012497f74f: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000012497f754: add    $0x8,%rsp
  0x000000012497f758: jmpq   0x000000012497f762
  0x000000012497f75d: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000012497f762: mov    (%rsp),%eax
  0x000000012497f765: add    $0x8,%rsp
  0x000000012497f769: mov    -0x8(%rbp),%rbx
  0x000000012497f76d: cmpl   $0x3,0x408(%r15)
  0x000000012497f778: je     0x000000012497f861
  0x000000012497f77e: cmp    0x418(%r15),%rbx
  0x000000012497f785: jle    0x000000012497f861
  0x000000012497f78b: mov    %r15,%rdi
  0x000000012497f78e: test   $0xf,%esp
  0x000000012497f794: je     0x000000012497f7ac
  0x000000012497f79a: sub    $0x8,%rsp
  0x000000012497f79e: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000012497f7a3: add    $0x8,%rsp
  0x000000012497f7a7: jmpq   0x000000012497f7b1
  0x000000012497f7ac: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000012497f7b1: callq  0x000000012497f7bb
  0x000000012497f7b6: jmpq   0x000000012497f84d
  0x000000012497f7bb: lea    0x8(%rsp),%rax
  0x000000012497f7c0: mov    %r13,-0x40(%rbp)
  0x000000012497f7c4: mov    %r15,%rdi
  0x000000012497f7c7: vzeroupper 
  0x000000012497f7ca: mov    %rbp,0x330(%r15)
  0x000000012497f7d1: mov    %rax,0x320(%r15)
  0x000000012497f7d8: test   $0xf,%esp
  0x000000012497f7de: je     0x000000012497f7f6
  0x000000012497f7e4: sub    $0x8,%rsp
  0x000000012497f7e8: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000012497f7ed: add    $0x8,%rsp
  0x000000012497f7f1: jmpq   0x000000012497f7fb
  0x000000012497f7f6: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000012497f7fb: movabs $0x0,%r10
  0x000000012497f805: mov    %r10,0x320(%r15)
  0x000000012497f80c: movabs $0x0,%r10
  0x000000012497f816: mov    %r10,0x330(%r15)
  0x000000012497f81d: movabs $0x0,%r10
  0x000000012497f827: mov    %r10,0x328(%r15)
  0x000000012497f82e: vzeroupper 
  0x000000012497f831: cmpq   $0x0,0x8(%r15)
  0x000000012497f839: je     0x000000012497f844
  0x000000012497f83f: jmpq   0x0000000124975780
  0x000000012497f844: mov    -0x40(%rbp),%r13
  0x000000012497f848: mov    -0x38(%rbp),%r14
  0x000000012497f84c: retq   
  0x000000012497f84d: movabs $0x114ff3493,%rdi
  0x000000012497f857: and    $0xfffffffffffffff0,%rsp
  0x000000012497f85b: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000012497f860: hlt    
  0x000000012497f861: leaveq 
  0x000000012497f862: pop    %rsi
  0x000000012497f863: mov    %rbx,%rsp
  0x000000012497f866: jmpq   *%rsi
  0x000000012497f868: mov    -0x40(%rbp),%r13
  0x000000012497f86c: mov    -0x38(%rbp),%r14
  0x000000012497f870: mov    -0x48(%rbp),%rsp
  0x000000012497f874: movq   $0x0,-0x10(%rbp)
  0x000000012497f87c: mov    0x488(%r15),%rcx
  0x000000012497f883: mov    0x80(%rcx),%eax
  0x000000012497f889: movl   $0xb,0x78(%rcx)
  0x000000012497f890: movl   $0x0,0x80(%rcx)
  0x000000012497f89a: movl   $0xb,0x78(%rcx)
  0x000000012497f8a1: movabs $0x0,%r10
  0x000000012497f8ab: mov    %r10,0x80(%rcx)
  0x000000012497f8b2: mov    0x488(%r15),%rcx
  0x000000012497f8b9: movl   $0x0,0x74(%rcx)
  0x000000012497f8c0: mov    0x3dd(%r15),%bl
  0x000000012497f8c7: movb   $0x0,0x3dd(%r15)
  0x000000012497f8cf: mov    -0x18(%rbp),%rcx
  0x000000012497f8d3: mov    0x20(%rcx),%ecx
  0x000000012497f8d6: test   $0x20,%ecx
  0x000000012497f8dc: je     0x000000012497f9ef
  0x000000012497f8e2: test   $0xff,%bl
  0x000000012497f8e5: jne    0x000000012497fb02
  0x000000012497f8eb: push   %rax
  0x000000012497f8ec: lea    -0x58(%rbp),%rsi
  0x000000012497f8f0: mov    0x8(%rsi),%rax
  0x000000012497f8f4: test   %rax,%rax
  0x000000012497f8f7: jne    0x000000012497f909
  0x000000012497f8fd: mov    (%rsp),%eax
  0x000000012497f900: add    $0x8,%rsp
  0x000000012497f904: jmpq   0x000000012497f9ef
  0x000000012497f909: mov    %r13,-0x40(%rbp)
  0x000000012497f90d: lea    (%rsi),%rax
  0x000000012497f910: mov    0x8(%rsi),%rcx
  0x000000012497f914: movq   $0x0,0x8(%rsi)
  0x000000012497f91c: mov    (%rcx),%rdx
  0x000000012497f91f: and    $0x7,%rdx
  0x000000012497f923: cmp    $0x5,%rdx
  0x000000012497f927: je     0x000000012497f9e4
  0x000000012497f92d: mov    (%rax),%rdx
  0x000000012497f930: test   %rdx,%rdx
  0x000000012497f933: je     0x000000012497f9e4
  0x000000012497f939: lock cmpxchg %rdx,(%rcx)
  0x000000012497f93e: je     0x000000012497f9e4
  0x000000012497f944: mov    %rcx,0x8(%rsi)
  0x000000012497f948: callq  0x000000012497f952
  0x000000012497f94d: jmpq   0x000000012497f9e4
  0x000000012497f952: lea    0x8(%rsp),%rax
  0x000000012497f957: mov    %r13,-0x40(%rbp)
  0x000000012497f95b: mov    %r15,%rdi
  0x000000012497f95e: vzeroupper 
  0x000000012497f961: mov    %rbp,0x330(%r15)
  0x000000012497f968: mov    %rax,0x320(%r15)
  0x000000012497f96f: test   $0xf,%esp
  0x000000012497f975: je     0x000000012497f98d
  0x000000012497f97b: sub    $0x8,%rsp
  0x000000012497f97f: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012497f984: add    $0x8,%rsp
  0x000000012497f988: jmpq   0x000000012497f992
  0x000000012497f98d: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012497f992: movabs $0x0,%r10
  0x000000012497f99c: mov    %r10,0x320(%r15)
  0x000000012497f9a3: movabs $0x0,%r10
  0x000000012497f9ad: mov    %r10,0x330(%r15)
  0x000000012497f9b4: movabs $0x0,%r10
  0x000000012497f9be: mov    %r10,0x328(%r15)
  0x000000012497f9c5: vzeroupper 
  0x000000012497f9c8: cmpq   $0x0,0x8(%r15)
  0x000000012497f9d0: je     0x000000012497f9db
  0x000000012497f9d6: jmpq   0x0000000124975780
  0x000000012497f9db: mov    -0x40(%rbp),%r13
  0x000000012497f9df: mov    -0x38(%rbp),%r14
  0x000000012497f9e3: retq   
  0x000000012497f9e4: mov    -0x40(%rbp),%r13
  0x000000012497f9e8: mov    (%rsp),%eax
  0x000000012497f9eb: add    $0x8,%rsp
  0x000000012497f9ef: mov    -0x48(%rbp),%rsi
  0x000000012497f9f3: lea    -0x48(%rbp),%rbx
  0x000000012497f9f7: jmpq   0x000000012497fafd
  0x000000012497f9fc: push   %rax
  0x000000012497f9fd: mov    %rsi,%rsi
  0x000000012497fa00: mov    %r13,-0x40(%rbp)
  0x000000012497fa04: lea    (%rsi),%rax
  0x000000012497fa07: mov    0x8(%rsi),%rcx
  0x000000012497fa0b: movq   $0x0,0x8(%rsi)
  0x000000012497fa13: mov    (%rcx),%rdx
  0x000000012497fa16: and    $0x7,%rdx
  0x000000012497fa1a: cmp    $0x5,%rdx
  0x000000012497fa1e: je     0x000000012497fadb
  0x000000012497fa24: mov    (%rax),%rdx
  0x000000012497fa27: test   %rdx,%rdx
  0x000000012497fa2a: je     0x000000012497fadb
  0x000000012497fa30: lock cmpxchg %rdx,(%rcx)
  0x000000012497fa35: je     0x000000012497fadb
  0x000000012497fa3b: mov    %rcx,0x8(%rsi)
  0x000000012497fa3f: callq  0x000000012497fa49
  0x000000012497fa44: jmpq   0x000000012497fadb
  0x000000012497fa49: lea    0x8(%rsp),%rax
  0x000000012497fa4e: mov    %r13,-0x40(%rbp)
  0x000000012497fa52: mov    %r15,%rdi
  0x000000012497fa55: vzeroupper 
  0x000000012497fa58: mov    %rbp,0x330(%r15)
  0x000000012497fa5f: mov    %rax,0x320(%r15)
  0x000000012497fa66: test   $0xf,%esp
  0x000000012497fa6c: je     0x000000012497fa84
  0x000000012497fa72: sub    $0x8,%rsp
  0x000000012497fa76: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012497fa7b: add    $0x8,%rsp
  0x000000012497fa7f: jmpq   0x000000012497fa89
  0x000000012497fa84: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012497fa89: movabs $0x0,%r10
  0x000000012497fa93: mov    %r10,0x320(%r15)
  0x000000012497fa9a: movabs $0x0,%r10
  0x000000012497faa4: mov    %r10,0x330(%r15)
  0x000000012497faab: movabs $0x0,%r10
  0x000000012497fab5: mov    %r10,0x328(%r15)
  0x000000012497fabc: vzeroupper 
  0x000000012497fabf: cmpq   $0x0,0x8(%r15)
  0x000000012497fac7: je     0x000000012497fad2
  0x000000012497facd: jmpq   0x0000000124975780
  0x000000012497fad2: mov    -0x40(%rbp),%r13
  0x000000012497fad6: mov    -0x38(%rbp),%r14
  0x000000012497fada: retq   
  0x000000012497fadb: mov    -0x40(%rbp),%r13
  0x000000012497fadf: mov    (%rsp),%eax
  0x000000012497fae2: add    $0x8,%rsp
  0x000000012497fae6: jmpq   0x000000012497f9ef
  0x000000012497faeb: cmpq   $0x0,0x8(%rsi)
  0x000000012497faf3: jne    0x000000012497f9fc
  0x000000012497faf9: add    $0x10,%rsi
  0x000000012497fafd: cmp    %rbx,%rsi
  0x000000012497fb00: jne    0x000000012497faeb
  0x000000012497fb02: cmpb   $0x0,-0xf7c5a2f(%rip)        # 0x00000001151ba0da = DTraceMethodProbes
  0x000000012497fb09: je     0x000000012497fb41
  0x000000012497fb0f: push   %rax
  0x000000012497fb10: mov    -0x18(%rbp),%rsi
  0x000000012497fb14: mov    %r15,%rdi
  0x000000012497fb17: test   $0xf,%esp
  0x000000012497fb1d: je     0x000000012497fb35
  0x000000012497fb23: sub    $0x8,%rsp
  0x000000012497fb27: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000012497fb2c: add    $0x8,%rsp
  0x000000012497fb30: jmpq   0x000000012497fb3a
  0x000000012497fb35: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000012497fb3a: mov    (%rsp),%eax
  0x000000012497fb3d: add    $0x8,%rsp
  0x000000012497fb41: mov    -0x8(%rbp),%rbx
  0x000000012497fb45: cmpl   $0x3,0x408(%r15)
  0x000000012497fb50: je     0x000000012497fc39
  0x000000012497fb56: cmp    0x418(%r15),%rbx
  0x000000012497fb5d: jle    0x000000012497fc39
  0x000000012497fb63: mov    %r15,%rdi
  0x000000012497fb66: test   $0xf,%esp
  0x000000012497fb6c: je     0x000000012497fb84
  0x000000012497fb72: sub    $0x8,%rsp
  0x000000012497fb76: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000012497fb7b: add    $0x8,%rsp
  0x000000012497fb7f: jmpq   0x000000012497fb89
  0x000000012497fb84: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000012497fb89: callq  0x000000012497fb93
  0x000000012497fb8e: jmpq   0x000000012497fc25
  0x000000012497fb93: lea    0x8(%rsp),%rax
  0x000000012497fb98: mov    %r13,-0x40(%rbp)
  0x000000012497fb9c: mov    %r15,%rdi
  0x000000012497fb9f: vzeroupper 
  0x000000012497fba2: mov    %rbp,0x330(%r15)
  0x000000012497fba9: mov    %rax,0x320(%r15)
  0x000000012497fbb0: test   $0xf,%esp
  0x000000012497fbb6: je     0x000000012497fbce
  0x000000012497fbbc: sub    $0x8,%rsp
  0x000000012497fbc0: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000012497fbc5: add    $0x8,%rsp
  0x000000012497fbc9: jmpq   0x000000012497fbd3
  0x000000012497fbce: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000012497fbd3: movabs $0x0,%r10
  0x000000012497fbdd: mov    %r10,0x320(%r15)
  0x000000012497fbe4: movabs $0x0,%r10
  0x000000012497fbee: mov    %r10,0x330(%r15)
  0x000000012497fbf5: movabs $0x0,%r10
  0x000000012497fbff: mov    %r10,0x328(%r15)
  0x000000012497fc06: vzeroupper 
  0x000000012497fc09: cmpq   $0x0,0x8(%r15)
  0x000000012497fc11: je     0x000000012497fc1c
  0x000000012497fc17: jmpq   0x0000000124975780
  0x000000012497fc1c: mov    -0x40(%rbp),%r13
  0x000000012497fc20: mov    -0x38(%rbp),%r14
  0x000000012497fc24: retq   
  0x000000012497fc25: movabs $0x114ff3493,%rdi
  0x000000012497fc2f: and    $0xfffffffffffffff0,%rsp
  0x000000012497fc33: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000012497fc38: hlt    
  0x000000012497fc39: leaveq 
  0x000000012497fc3a: pop    %rsi
  0x000000012497fc3b: mov    %rbx,%rsp
  0x000000012497fc3e: jmpq   *%rsi
  0x000000012497fc40: mov    -0x40(%rbp),%r13
  0x000000012497fc44: mov    -0x38(%rbp),%r14
  0x000000012497fc48: mov    -0x48(%rbp),%rsp
  0x000000012497fc4c: movq   $0x0,-0x10(%rbp)
  0x000000012497fc54: mov    0x488(%r15),%rcx
  0x000000012497fc5b: mov    0x88(%rcx),%rax
  0x000000012497fc62: movq   $0x0,0x88(%rcx)
  0x000000012497fc6d: movl   $0xb,0x78(%rcx)
  0x000000012497fc74: movl   $0x0,0x80(%rcx)
  0x000000012497fc7e: movl   $0xb,0x78(%rcx)
  0x000000012497fc85: movabs $0x0,%r10
  0x000000012497fc8f: mov    %r10,0x80(%rcx)
  0x000000012497fc96: mov    0x488(%r15),%rcx
  0x000000012497fc9d: movl   $0x0,0x74(%rcx)
  0x000000012497fca4: mov    0x3dd(%r15),%bl
  0x000000012497fcab: movb   $0x0,0x3dd(%r15)
  0x000000012497fcb3: mov    -0x18(%rbp),%rcx
  0x000000012497fcb7: mov    0x20(%rcx),%ecx
  0x000000012497fcba: test   $0x20,%ecx
  0x000000012497fcc0: je     0x000000012497fdc7
  0x000000012497fcc6: test   $0xff,%bl
  0x000000012497fcc9: jne    0x000000012497fed4
  0x000000012497fccf: push   %rax
  0x000000012497fcd0: lea    -0x58(%rbp),%rsi
  0x000000012497fcd4: mov    0x8(%rsi),%rax
  0x000000012497fcd8: test   %rax,%rax
  0x000000012497fcdb: jne    0x000000012497fce7
  0x000000012497fce1: pop    %rax
  0x000000012497fce2: jmpq   0x000000012497fdc7
  0x000000012497fce7: mov    %r13,-0x40(%rbp)
  0x000000012497fceb: lea    (%rsi),%rax
  0x000000012497fcee: mov    0x8(%rsi),%rcx
  0x000000012497fcf2: movq   $0x0,0x8(%rsi)
  0x000000012497fcfa: mov    (%rcx),%rdx
  0x000000012497fcfd: and    $0x7,%rdx
  0x000000012497fd01: cmp    $0x5,%rdx
  0x000000012497fd05: je     0x000000012497fdc2
  0x000000012497fd0b: mov    (%rax),%rdx
  0x000000012497fd0e: test   %rdx,%rdx
  0x000000012497fd11: je     0x000000012497fdc2
  0x000000012497fd17: lock cmpxchg %rdx,(%rcx)
  0x000000012497fd1c: je     0x000000012497fdc2
  0x000000012497fd22: mov    %rcx,0x8(%rsi)
  0x000000012497fd26: callq  0x000000012497fd30
  0x000000012497fd2b: jmpq   0x000000012497fdc2
  0x000000012497fd30: lea    0x8(%rsp),%rax
  0x000000012497fd35: mov    %r13,-0x40(%rbp)
  0x000000012497fd39: mov    %r15,%rdi
  0x000000012497fd3c: vzeroupper 
  0x000000012497fd3f: mov    %rbp,0x330(%r15)
  0x000000012497fd46: mov    %rax,0x320(%r15)
  0x000000012497fd4d: test   $0xf,%esp
  0x000000012497fd53: je     0x000000012497fd6b
  0x000000012497fd59: sub    $0x8,%rsp
  0x000000012497fd5d: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012497fd62: add    $0x8,%rsp
  0x000000012497fd66: jmpq   0x000000012497fd70
  0x000000012497fd6b: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012497fd70: movabs $0x0,%r10
  0x000000012497fd7a: mov    %r10,0x320(%r15)
  0x000000012497fd81: movabs $0x0,%r10
  0x000000012497fd8b: mov    %r10,0x330(%r15)
  0x000000012497fd92: movabs $0x0,%r10
  0x000000012497fd9c: mov    %r10,0x328(%r15)
  0x000000012497fda3: vzeroupper 
  0x000000012497fda6: cmpq   $0x0,0x8(%r15)
  0x000000012497fdae: je     0x000000012497fdb9
  0x000000012497fdb4: jmpq   0x0000000124975780
  0x000000012497fdb9: mov    -0x40(%rbp),%r13
  0x000000012497fdbd: mov    -0x38(%rbp),%r14
  0x000000012497fdc1: retq   
  0x000000012497fdc2: mov    -0x40(%rbp),%r13
  0x000000012497fdc6: pop    %rax
  0x000000012497fdc7: mov    -0x48(%rbp),%rsi
  0x000000012497fdcb: lea    -0x48(%rbp),%rbx
  0x000000012497fdcf: jmpq   0x000000012497fecf
  0x000000012497fdd4: push   %rax
  0x000000012497fdd5: mov    %rsi,%rsi
  0x000000012497fdd8: mov    %r13,-0x40(%rbp)
  0x000000012497fddc: lea    (%rsi),%rax
  0x000000012497fddf: mov    0x8(%rsi),%rcx
  0x000000012497fde3: movq   $0x0,0x8(%rsi)
  0x000000012497fdeb: mov    (%rcx),%rdx
  0x000000012497fdee: and    $0x7,%rdx
  0x000000012497fdf2: cmp    $0x5,%rdx
  0x000000012497fdf6: je     0x000000012497feb3
  0x000000012497fdfc: mov    (%rax),%rdx
  0x000000012497fdff: test   %rdx,%rdx
  0x000000012497fe02: je     0x000000012497feb3
  0x000000012497fe08: lock cmpxchg %rdx,(%rcx)
  0x000000012497fe0d: je     0x000000012497feb3
  0x000000012497fe13: mov    %rcx,0x8(%rsi)
  0x000000012497fe17: callq  0x000000012497fe21
  0x000000012497fe1c: jmpq   0x000000012497feb3
  0x000000012497fe21: lea    0x8(%rsp),%rax
  0x000000012497fe26: mov    %r13,-0x40(%rbp)
  0x000000012497fe2a: mov    %r15,%rdi
  0x000000012497fe2d: vzeroupper 
  0x000000012497fe30: mov    %rbp,0x330(%r15)
  0x000000012497fe37: mov    %rax,0x320(%r15)
  0x000000012497fe3e: test   $0xf,%esp
  0x000000012497fe44: je     0x000000012497fe5c
  0x000000012497fe4a: sub    $0x8,%rsp
  0x000000012497fe4e: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012497fe53: add    $0x8,%rsp
  0x000000012497fe57: jmpq   0x000000012497fe61
  0x000000012497fe5c: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012497fe61: movabs $0x0,%r10
  0x000000012497fe6b: mov    %r10,0x320(%r15)
  0x000000012497fe72: movabs $0x0,%r10
  0x000000012497fe7c: mov    %r10,0x330(%r15)
  0x000000012497fe83: movabs $0x0,%r10
  0x000000012497fe8d: mov    %r10,0x328(%r15)
  0x000000012497fe94: vzeroupper 
  0x000000012497fe97: cmpq   $0x0,0x8(%r15)
  0x000000012497fe9f: je     0x000000012497feaa
  0x000000012497fea5: jmpq   0x0000000124975780
  0x000000012497feaa: mov    -0x40(%rbp),%r13
  0x000000012497feae: mov    -0x38(%rbp),%r14
  0x000000012497feb2: retq   
  0x000000012497feb3: mov    -0x40(%rbp),%r13
  0x000000012497feb7: pop    %rax
  0x000000012497feb8: jmpq   0x000000012497fdc7
  0x000000012497febd: cmpq   $0x0,0x8(%rsi)
  0x000000012497fec5: jne    0x000000012497fdd4
  0x000000012497fecb: add    $0x10,%rsi
  0x000000012497fecf: cmp    %rbx,%rsi
  0x000000012497fed2: jne    0x000000012497febd
  0x000000012497fed4: cmpb   $0x0,-0xf7c5e01(%rip)        # 0x00000001151ba0da = DTraceMethodProbes
  0x000000012497fedb: je     0x000000012497ff0d
  0x000000012497fee1: push   %rax
  0x000000012497fee2: mov    -0x18(%rbp),%rsi
  0x000000012497fee6: mov    %r15,%rdi
  0x000000012497fee9: test   $0xf,%esp
  0x000000012497feef: je     0x000000012497ff07
  0x000000012497fef5: sub    $0x8,%rsp
  0x000000012497fef9: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000012497fefe: add    $0x8,%rsp
  0x000000012497ff02: jmpq   0x000000012497ff0c
  0x000000012497ff07: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000012497ff0c: pop    %rax
  0x000000012497ff0d: mov    -0x8(%rbp),%rbx
  0x000000012497ff11: cmpl   $0x3,0x408(%r15)
  0x000000012497ff1c: je     0x0000000124980005
  0x000000012497ff22: cmp    0x418(%r15),%rbx
  0x000000012497ff29: jle    0x0000000124980005
  0x000000012497ff2f: mov    %r15,%rdi
  0x000000012497ff32: test   $0xf,%esp
  0x000000012497ff38: je     0x000000012497ff50
  0x000000012497ff3e: sub    $0x8,%rsp
  0x000000012497ff42: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000012497ff47: add    $0x8,%rsp
  0x000000012497ff4b: jmpq   0x000000012497ff55
  0x000000012497ff50: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000012497ff55: callq  0x000000012497ff5f
  0x000000012497ff5a: jmpq   0x000000012497fff1
  0x000000012497ff5f: lea    0x8(%rsp),%rax
  0x000000012497ff64: mov    %r13,-0x40(%rbp)
  0x000000012497ff68: mov    %r15,%rdi
  0x000000012497ff6b: vzeroupper 
  0x000000012497ff6e: mov    %rbp,0x330(%r15)
  0x000000012497ff75: mov    %rax,0x320(%r15)
  0x000000012497ff7c: test   $0xf,%esp
  0x000000012497ff82: je     0x000000012497ff9a
  0x000000012497ff88: sub    $0x8,%rsp
  0x000000012497ff8c: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000012497ff91: add    $0x8,%rsp
  0x000000012497ff95: jmpq   0x000000012497ff9f
  0x000000012497ff9a: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000012497ff9f: movabs $0x0,%r10
  0x000000012497ffa9: mov    %r10,0x320(%r15)
  0x000000012497ffb0: movabs $0x0,%r10
  0x000000012497ffba: mov    %r10,0x330(%r15)
  0x000000012497ffc1: movabs $0x0,%r10
  0x000000012497ffcb: mov    %r10,0x328(%r15)
  0x000000012497ffd2: vzeroupper 
  0x000000012497ffd5: cmpq   $0x0,0x8(%r15)
  0x000000012497ffdd: je     0x000000012497ffe8
  0x000000012497ffe3: jmpq   0x0000000124975780
  0x000000012497ffe8: mov    -0x40(%rbp),%r13
  0x000000012497ffec: mov    -0x38(%rbp),%r14
  0x000000012497fff0: retq   
  0x000000012497fff1: movabs $0x114ff3493,%rdi
  0x000000012497fffb: and    $0xfffffffffffffff0,%rsp
  0x000000012497ffff: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124980004: hlt    
  0x0000000124980005: leaveq 
  0x0000000124980006: pop    %rsi
  0x0000000124980007: mov    %rbx,%rsp
  0x000000012498000a: jmpq   *%rsi
  0x000000012498000c: mov    -0x40(%rbp),%r13
  0x0000000124980010: mov    -0x38(%rbp),%r14
  0x0000000124980014: mov    -0x48(%rbp),%rsp
  0x0000000124980018: movq   $0x0,-0x10(%rbp)
  0x0000000124980020: mov    0x488(%r15),%rcx
  0x0000000124980027: mov    0x80(%rcx),%eax
  0x000000012498002d: movl   $0xb,0x78(%rcx)
  0x0000000124980034: movl   $0x0,0x80(%rcx)
  0x000000012498003e: movl   $0xb,0x78(%rcx)
  0x0000000124980045: movabs $0x0,%r10
  0x000000012498004f: mov    %r10,0x80(%rcx)
  0x0000000124980056: mov    0x488(%r15),%rcx
  0x000000012498005d: movl   $0x0,0x74(%rcx)
  0x0000000124980064: mov    0x3dd(%r15),%bl
  0x000000012498006b: movb   $0x0,0x3dd(%r15)
  0x0000000124980073: mov    -0x18(%rbp),%rcx
  0x0000000124980077: mov    0x20(%rcx),%ecx
  0x000000012498007a: test   $0x20,%ecx
  0x0000000124980080: je     0x0000000124980193
  0x0000000124980086: test   $0xff,%bl
  0x0000000124980089: jne    0x00000001249802a6
  0x000000012498008f: push   %rax
  0x0000000124980090: lea    -0x58(%rbp),%rsi
  0x0000000124980094: mov    0x8(%rsi),%rax
  0x0000000124980098: test   %rax,%rax
  0x000000012498009b: jne    0x00000001249800ad
  0x00000001249800a1: mov    (%rsp),%eax
  0x00000001249800a4: add    $0x8,%rsp
  0x00000001249800a8: jmpq   0x0000000124980193
  0x00000001249800ad: mov    %r13,-0x40(%rbp)
  0x00000001249800b1: lea    (%rsi),%rax
  0x00000001249800b4: mov    0x8(%rsi),%rcx
  0x00000001249800b8: movq   $0x0,0x8(%rsi)
  0x00000001249800c0: mov    (%rcx),%rdx
  0x00000001249800c3: and    $0x7,%rdx
  0x00000001249800c7: cmp    $0x5,%rdx
  0x00000001249800cb: je     0x0000000124980188
  0x00000001249800d1: mov    (%rax),%rdx
  0x00000001249800d4: test   %rdx,%rdx
  0x00000001249800d7: je     0x0000000124980188
  0x00000001249800dd: lock cmpxchg %rdx,(%rcx)
  0x00000001249800e2: je     0x0000000124980188
  0x00000001249800e8: mov    %rcx,0x8(%rsi)
  0x00000001249800ec: callq  0x00000001249800f6
  0x00000001249800f1: jmpq   0x0000000124980188
  0x00000001249800f6: lea    0x8(%rsp),%rax
  0x00000001249800fb: mov    %r13,-0x40(%rbp)
  0x00000001249800ff: mov    %r15,%rdi
  0x0000000124980102: vzeroupper 
  0x0000000124980105: mov    %rbp,0x330(%r15)
  0x000000012498010c: mov    %rax,0x320(%r15)
  0x0000000124980113: test   $0xf,%esp
  0x0000000124980119: je     0x0000000124980131
  0x000000012498011f: sub    $0x8,%rsp
  0x0000000124980123: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x0000000124980128: add    $0x8,%rsp
  0x000000012498012c: jmpq   0x0000000124980136
  0x0000000124980131: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x0000000124980136: movabs $0x0,%r10
  0x0000000124980140: mov    %r10,0x320(%r15)
  0x0000000124980147: movabs $0x0,%r10
  0x0000000124980151: mov    %r10,0x330(%r15)
  0x0000000124980158: movabs $0x0,%r10
  0x0000000124980162: mov    %r10,0x328(%r15)
  0x0000000124980169: vzeroupper 
  0x000000012498016c: cmpq   $0x0,0x8(%r15)
  0x0000000124980174: je     0x000000012498017f
  0x000000012498017a: jmpq   0x0000000124975780
  0x000000012498017f: mov    -0x40(%rbp),%r13
  0x0000000124980183: mov    -0x38(%rbp),%r14
  0x0000000124980187: retq   
  0x0000000124980188: mov    -0x40(%rbp),%r13
  0x000000012498018c: mov    (%rsp),%eax
  0x000000012498018f: add    $0x8,%rsp
  0x0000000124980193: mov    -0x48(%rbp),%rsi
  0x0000000124980197: lea    -0x48(%rbp),%rbx
  0x000000012498019b: jmpq   0x00000001249802a1
  0x00000001249801a0: push   %rax
  0x00000001249801a1: mov    %rsi,%rsi
  0x00000001249801a4: mov    %r13,-0x40(%rbp)
  0x00000001249801a8: lea    (%rsi),%rax
  0x00000001249801ab: mov    0x8(%rsi),%rcx
  0x00000001249801af: movq   $0x0,0x8(%rsi)
  0x00000001249801b7: mov    (%rcx),%rdx
  0x00000001249801ba: and    $0x7,%rdx
  0x00000001249801be: cmp    $0x5,%rdx
  0x00000001249801c2: je     0x000000012498027f
  0x00000001249801c8: mov    (%rax),%rdx
  0x00000001249801cb: test   %rdx,%rdx
  0x00000001249801ce: je     0x000000012498027f
  0x00000001249801d4: lock cmpxchg %rdx,(%rcx)
  0x00000001249801d9: je     0x000000012498027f
  0x00000001249801df: mov    %rcx,0x8(%rsi)
  0x00000001249801e3: callq  0x00000001249801ed
  0x00000001249801e8: jmpq   0x000000012498027f
  0x00000001249801ed: lea    0x8(%rsp),%rax
  0x00000001249801f2: mov    %r13,-0x40(%rbp)
  0x00000001249801f6: mov    %r15,%rdi
  0x00000001249801f9: vzeroupper 
  0x00000001249801fc: mov    %rbp,0x330(%r15)
  0x0000000124980203: mov    %rax,0x320(%r15)
  0x000000012498020a: test   $0xf,%esp
  0x0000000124980210: je     0x0000000124980228
  0x0000000124980216: sub    $0x8,%rsp
  0x000000012498021a: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012498021f: add    $0x8,%rsp
  0x0000000124980223: jmpq   0x000000012498022d
  0x0000000124980228: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012498022d: movabs $0x0,%r10
  0x0000000124980237: mov    %r10,0x320(%r15)
  0x000000012498023e: movabs $0x0,%r10
  0x0000000124980248: mov    %r10,0x330(%r15)
  0x000000012498024f: movabs $0x0,%r10
  0x0000000124980259: mov    %r10,0x328(%r15)
  0x0000000124980260: vzeroupper 
  0x0000000124980263: cmpq   $0x0,0x8(%r15)
  0x000000012498026b: je     0x0000000124980276
  0x0000000124980271: jmpq   0x0000000124975780
  0x0000000124980276: mov    -0x40(%rbp),%r13
  0x000000012498027a: mov    -0x38(%rbp),%r14
  0x000000012498027e: retq   
  0x000000012498027f: mov    -0x40(%rbp),%r13
  0x0000000124980283: mov    (%rsp),%eax
  0x0000000124980286: add    $0x8,%rsp
  0x000000012498028a: jmpq   0x0000000124980193
  0x000000012498028f: cmpq   $0x0,0x8(%rsi)
  0x0000000124980297: jne    0x00000001249801a0
  0x000000012498029d: add    $0x10,%rsi
  0x00000001249802a1: cmp    %rbx,%rsi
  0x00000001249802a4: jne    0x000000012498028f
  0x00000001249802a6: cmpb   $0x0,-0xf7c61d3(%rip)        # 0x00000001151ba0da = DTraceMethodProbes
  0x00000001249802ad: je     0x00000001249802e5
  0x00000001249802b3: push   %rax
  0x00000001249802b4: mov    -0x18(%rbp),%rsi
  0x00000001249802b8: mov    %r15,%rdi
  0x00000001249802bb: test   $0xf,%esp
  0x00000001249802c1: je     0x00000001249802d9
  0x00000001249802c7: sub    $0x8,%rsp
  0x00000001249802cb: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00000001249802d0: add    $0x8,%rsp
  0x00000001249802d4: jmpq   0x00000001249802de
  0x00000001249802d9: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00000001249802de: mov    (%rsp),%eax
  0x00000001249802e1: add    $0x8,%rsp
  0x00000001249802e5: mov    -0x8(%rbp),%rbx
  0x00000001249802e9: cmpl   $0x3,0x408(%r15)
  0x00000001249802f4: je     0x00000001249803dd
  0x00000001249802fa: cmp    0x418(%r15),%rbx
  0x0000000124980301: jle    0x00000001249803dd
  0x0000000124980307: mov    %r15,%rdi
  0x000000012498030a: test   $0xf,%esp
  0x0000000124980310: je     0x0000000124980328
  0x0000000124980316: sub    $0x8,%rsp
  0x000000012498031a: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000012498031f: add    $0x8,%rsp
  0x0000000124980323: jmpq   0x000000012498032d
  0x0000000124980328: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000012498032d: callq  0x0000000124980337
  0x0000000124980332: jmpq   0x00000001249803c9
  0x0000000124980337: lea    0x8(%rsp),%rax
  0x000000012498033c: mov    %r13,-0x40(%rbp)
  0x0000000124980340: mov    %r15,%rdi
  0x0000000124980343: vzeroupper 
  0x0000000124980346: mov    %rbp,0x330(%r15)
  0x000000012498034d: mov    %rax,0x320(%r15)
  0x0000000124980354: test   $0xf,%esp
  0x000000012498035a: je     0x0000000124980372
  0x0000000124980360: sub    $0x8,%rsp
  0x0000000124980364: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x0000000124980369: add    $0x8,%rsp
  0x000000012498036d: jmpq   0x0000000124980377
  0x0000000124980372: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x0000000124980377: movabs $0x0,%r10
  0x0000000124980381: mov    %r10,0x320(%r15)
  0x0000000124980388: movabs $0x0,%r10
  0x0000000124980392: mov    %r10,0x330(%r15)
  0x0000000124980399: movabs $0x0,%r10
  0x00000001249803a3: mov    %r10,0x328(%r15)
  0x00000001249803aa: vzeroupper 
  0x00000001249803ad: cmpq   $0x0,0x8(%r15)
  0x00000001249803b5: je     0x00000001249803c0
  0x00000001249803bb: jmpq   0x0000000124975780
  0x00000001249803c0: mov    -0x40(%rbp),%r13
  0x00000001249803c4: mov    -0x38(%rbp),%r14
  0x00000001249803c8: retq   
  0x00000001249803c9: movabs $0x114ff3493,%rdi
  0x00000001249803d3: and    $0xfffffffffffffff0,%rsp
  0x00000001249803d7: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x00000001249803dc: hlt    
  0x00000001249803dd: leaveq 
  0x00000001249803de: pop    %rsi
  0x00000001249803df: mov    %rbx,%rsp
  0x00000001249803e2: jmpq   *%rsi
  0x00000001249803e4: mov    -0x40(%rbp),%r13
  0x00000001249803e8: mov    -0x38(%rbp),%r14
  0x00000001249803ec: mov    -0x48(%rbp),%rsp
  0x00000001249803f0: movq   $0x0,-0x10(%rbp)
  0x00000001249803f8: mov    0x488(%r15),%rcx
  0x00000001249803ff: mov    0x80(%rcx),%rax
  0x0000000124980406: movl   $0xb,0x78(%rcx)
  0x000000012498040d: movl   $0x0,0x80(%rcx)
  0x0000000124980417: movl   $0xb,0x78(%rcx)
  0x000000012498041e: movabs $0x0,%r10
  0x0000000124980428: mov    %r10,0x80(%rcx)
  0x000000012498042f: mov    0x488(%r15),%rcx
  0x0000000124980436: movl   $0x0,0x74(%rcx)
  0x000000012498043d: mov    0x3dd(%r15),%bl
  0x0000000124980444: movb   $0x0,0x3dd(%r15)
  0x000000012498044c: mov    -0x18(%rbp),%rcx
  0x0000000124980450: mov    0x20(%rcx),%ecx
  0x0000000124980453: test   $0x20,%ecx
  0x0000000124980459: je     0x0000000124980584
  0x000000012498045f: test   $0xff,%bl
  0x0000000124980462: jne    0x00000001249806ae
  0x0000000124980468: sub    $0x10,%rsp
  0x000000012498046c: mov    %rax,(%rsp)
  0x0000000124980470: movabs $0x0,%r10
  0x000000012498047a: mov    %r10,0x8(%rsp)
  0x000000012498047f: lea    -0x58(%rbp),%rsi
  0x0000000124980483: mov    0x8(%rsi),%rax
  0x0000000124980487: test   %rax,%rax
  0x000000012498048a: jne    0x000000012498049d
  0x0000000124980490: mov    (%rsp),%rax
  0x0000000124980494: add    $0x10,%rsp
  0x0000000124980498: jmpq   0x0000000124980584
  0x000000012498049d: mov    %r13,-0x40(%rbp)
  0x00000001249804a1: lea    (%rsi),%rax
  0x00000001249804a4: mov    0x8(%rsi),%rcx
  0x00000001249804a8: movq   $0x0,0x8(%rsi)
  0x00000001249804b0: mov    (%rcx),%rdx
  0x00000001249804b3: and    $0x7,%rdx
  0x00000001249804b7: cmp    $0x5,%rdx
  0x00000001249804bb: je     0x0000000124980578
  0x00000001249804c1: mov    (%rax),%rdx
  0x00000001249804c4: test   %rdx,%rdx
  0x00000001249804c7: je     0x0000000124980578
  0x00000001249804cd: lock cmpxchg %rdx,(%rcx)
  0x00000001249804d2: je     0x0000000124980578
  0x00000001249804d8: mov    %rcx,0x8(%rsi)
  0x00000001249804dc: callq  0x00000001249804e6
  0x00000001249804e1: jmpq   0x0000000124980578
  0x00000001249804e6: lea    0x8(%rsp),%rax
  0x00000001249804eb: mov    %r13,-0x40(%rbp)
  0x00000001249804ef: mov    %r15,%rdi
  0x00000001249804f2: vzeroupper 
  0x00000001249804f5: mov    %rbp,0x330(%r15)
  0x00000001249804fc: mov    %rax,0x320(%r15)
  0x0000000124980503: test   $0xf,%esp
  0x0000000124980509: je     0x0000000124980521
  0x000000012498050f: sub    $0x8,%rsp
  0x0000000124980513: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x0000000124980518: add    $0x8,%rsp
  0x000000012498051c: jmpq   0x0000000124980526
  0x0000000124980521: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x0000000124980526: movabs $0x0,%r10
  0x0000000124980530: mov    %r10,0x320(%r15)
  0x0000000124980537: movabs $0x0,%r10
  0x0000000124980541: mov    %r10,0x330(%r15)
  0x0000000124980548: movabs $0x0,%r10
  0x0000000124980552: mov    %r10,0x328(%r15)
  0x0000000124980559: vzeroupper 
  0x000000012498055c: cmpq   $0x0,0x8(%r15)
  0x0000000124980564: je     0x000000012498056f
  0x000000012498056a: jmpq   0x0000000124975780
  0x000000012498056f: mov    -0x40(%rbp),%r13
  0x0000000124980573: mov    -0x38(%rbp),%r14
  0x0000000124980577: retq   
  0x0000000124980578: mov    -0x40(%rbp),%r13
  0x000000012498057c: mov    (%rsp),%rax
  0x0000000124980580: add    $0x10,%rsp
  0x0000000124980584: mov    -0x48(%rbp),%rsi
  0x0000000124980588: lea    -0x48(%rbp),%rbx
  0x000000012498058c: jmpq   0x00000001249806a9
  0x0000000124980591: sub    $0x10,%rsp
  0x0000000124980595: mov    %rax,(%rsp)
  0x0000000124980599: movabs $0x0,%r10
  0x00000001249805a3: mov    %r10,0x8(%rsp)
  0x00000001249805a8: mov    %rsi,%rsi
  0x00000001249805ab: mov    %r13,-0x40(%rbp)
  0x00000001249805af: lea    (%rsi),%rax
  0x00000001249805b2: mov    0x8(%rsi),%rcx
  0x00000001249805b6: movq   $0x0,0x8(%rsi)
  0x00000001249805be: mov    (%rcx),%rdx
  0x00000001249805c1: and    $0x7,%rdx
  0x00000001249805c5: cmp    $0x5,%rdx
  0x00000001249805c9: je     0x0000000124980686
  0x00000001249805cf: mov    (%rax),%rdx
  0x00000001249805d2: test   %rdx,%rdx
  0x00000001249805d5: je     0x0000000124980686
  0x00000001249805db: lock cmpxchg %rdx,(%rcx)
  0x00000001249805e0: je     0x0000000124980686
  0x00000001249805e6: mov    %rcx,0x8(%rsi)
  0x00000001249805ea: callq  0x00000001249805f4
  0x00000001249805ef: jmpq   0x0000000124980686
  0x00000001249805f4: lea    0x8(%rsp),%rax
  0x00000001249805f9: mov    %r13,-0x40(%rbp)
  0x00000001249805fd: mov    %r15,%rdi
  0x0000000124980600: vzeroupper 
  0x0000000124980603: mov    %rbp,0x330(%r15)
  0x000000012498060a: mov    %rax,0x320(%r15)
  0x0000000124980611: test   $0xf,%esp
  0x0000000124980617: je     0x000000012498062f
  0x000000012498061d: sub    $0x8,%rsp
  0x0000000124980621: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x0000000124980626: add    $0x8,%rsp
  0x000000012498062a: jmpq   0x0000000124980634
  0x000000012498062f: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x0000000124980634: movabs $0x0,%r10
  0x000000012498063e: mov    %r10,0x320(%r15)
  0x0000000124980645: movabs $0x0,%r10
  0x000000012498064f: mov    %r10,0x330(%r15)
  0x0000000124980656: movabs $0x0,%r10
  0x0000000124980660: mov    %r10,0x328(%r15)
  0x0000000124980667: vzeroupper 
  0x000000012498066a: cmpq   $0x0,0x8(%r15)
  0x0000000124980672: je     0x000000012498067d
  0x0000000124980678: jmpq   0x0000000124975780
  0x000000012498067d: mov    -0x40(%rbp),%r13
  0x0000000124980681: mov    -0x38(%rbp),%r14
  0x0000000124980685: retq   
  0x0000000124980686: mov    -0x40(%rbp),%r13
  0x000000012498068a: mov    (%rsp),%rax
  0x000000012498068e: add    $0x10,%rsp
  0x0000000124980692: jmpq   0x0000000124980584
  0x0000000124980697: cmpq   $0x0,0x8(%rsi)
  0x000000012498069f: jne    0x0000000124980591
  0x00000001249806a5: add    $0x10,%rsi
  0x00000001249806a9: cmp    %rbx,%rsi
  0x00000001249806ac: jne    0x0000000124980697
  0x00000001249806ae: cmpb   $0x0,-0xf7c65db(%rip)        # 0x00000001151ba0da = DTraceMethodProbes
  0x00000001249806b5: je     0x0000000124980704
  0x00000001249806bb: sub    $0x10,%rsp
  0x00000001249806bf: mov    %rax,(%rsp)
  0x00000001249806c3: movabs $0x0,%r10
  0x00000001249806cd: mov    %r10,0x8(%rsp)
  0x00000001249806d2: mov    -0x18(%rbp),%rsi
  0x00000001249806d6: mov    %r15,%rdi
  0x00000001249806d9: test   $0xf,%esp
  0x00000001249806df: je     0x00000001249806f7
  0x00000001249806e5: sub    $0x8,%rsp
  0x00000001249806e9: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00000001249806ee: add    $0x8,%rsp
  0x00000001249806f2: jmpq   0x00000001249806fc
  0x00000001249806f7: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00000001249806fc: mov    (%rsp),%rax
  0x0000000124980700: add    $0x10,%rsp
  0x0000000124980704: mov    -0x8(%rbp),%rbx
  0x0000000124980708: cmpl   $0x3,0x408(%r15)
  0x0000000124980713: je     0x00000001249807fc
  0x0000000124980719: cmp    0x418(%r15),%rbx
  0x0000000124980720: jle    0x00000001249807fc
  0x0000000124980726: mov    %r15,%rdi
  0x0000000124980729: test   $0xf,%esp
  0x000000012498072f: je     0x0000000124980747
  0x0000000124980735: sub    $0x8,%rsp
  0x0000000124980739: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000012498073e: add    $0x8,%rsp
  0x0000000124980742: jmpq   0x000000012498074c
  0x0000000124980747: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000012498074c: callq  0x0000000124980756
  0x0000000124980751: jmpq   0x00000001249807e8
  0x0000000124980756: lea    0x8(%rsp),%rax
  0x000000012498075b: mov    %r13,-0x40(%rbp)
  0x000000012498075f: mov    %r15,%rdi
  0x0000000124980762: vzeroupper 
  0x0000000124980765: mov    %rbp,0x330(%r15)
  0x000000012498076c: mov    %rax,0x320(%r15)
  0x0000000124980773: test   $0xf,%esp
  0x0000000124980779: je     0x0000000124980791
  0x000000012498077f: sub    $0x8,%rsp
  0x0000000124980783: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x0000000124980788: add    $0x8,%rsp
  0x000000012498078c: jmpq   0x0000000124980796
  0x0000000124980791: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x0000000124980796: movabs $0x0,%r10
  0x00000001249807a0: mov    %r10,0x320(%r15)
  0x00000001249807a7: movabs $0x0,%r10
  0x00000001249807b1: mov    %r10,0x330(%r15)
  0x00000001249807b8: movabs $0x0,%r10
  0x00000001249807c2: mov    %r10,0x328(%r15)
  0x00000001249807c9: vzeroupper 
  0x00000001249807cc: cmpq   $0x0,0x8(%r15)
  0x00000001249807d4: je     0x00000001249807df
  0x00000001249807da: jmpq   0x0000000124975780
  0x00000001249807df: mov    -0x40(%rbp),%r13
  0x00000001249807e3: mov    -0x38(%rbp),%r14
  0x00000001249807e7: retq   
  0x00000001249807e8: movabs $0x114ff3493,%rdi
  0x00000001249807f2: and    $0xfffffffffffffff0,%rsp
  0x00000001249807f6: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x00000001249807fb: hlt    
  0x00000001249807fc: leaveq 
  0x00000001249807fd: pop    %rsi
  0x00000001249807fe: mov    %rbx,%rsp
  0x0000000124980801: jmpq   *%rsi
  0x0000000124980803: mov    -0x40(%rbp),%r13
  0x0000000124980807: mov    -0x38(%rbp),%r14
  0x000000012498080b: mov    -0x48(%rbp),%rsp
  0x000000012498080f: movq   $0x0,-0x10(%rbp)
  0x0000000124980817: mov    0x488(%r15),%rcx
  0x000000012498081e: vmovss 0x80(%rcx),%xmm0
  0x0000000124980826: movl   $0xb,0x78(%rcx)
  0x000000012498082d: movl   $0x0,0x80(%rcx)
  0x0000000124980837: movl   $0xb,0x78(%rcx)
  0x000000012498083e: movabs $0x0,%r10
  0x0000000124980848: mov    %r10,0x80(%rcx)
  0x000000012498084f: mov    0x488(%r15),%rcx
  0x0000000124980856: movl   $0x0,0x74(%rcx)
  0x000000012498085d: mov    0x3dd(%r15),%bl
  0x0000000124980864: movb   $0x0,0x3dd(%r15)
  0x000000012498086c: mov    -0x18(%rbp),%rcx
  0x0000000124980870: mov    0x20(%rcx),%ecx
  0x0000000124980873: test   $0x20,%ecx
  0x0000000124980879: je     0x0000000124980998
  0x000000012498087f: test   $0xff,%bl
  0x0000000124980882: jne    0x0000000124980ab5
  0x0000000124980888: sub    $0x8,%rsp
  0x000000012498088c: vmovss %xmm0,(%rsp)
  0x0000000124980891: lea    -0x58(%rbp),%rsi
  0x0000000124980895: mov    0x8(%rsi),%rax
  0x0000000124980899: test   %rax,%rax
  0x000000012498089c: jne    0x00000001249808b0
  0x00000001249808a2: vmovss (%rsp),%xmm0
  0x00000001249808a7: add    $0x8,%rsp
  0x00000001249808ab: jmpq   0x0000000124980998
  0x00000001249808b0: mov    %r13,-0x40(%rbp)
  0x00000001249808b4: lea    (%rsi),%rax
  0x00000001249808b7: mov    0x8(%rsi),%rcx
  0x00000001249808bb: movq   $0x0,0x8(%rsi)
  0x00000001249808c3: mov    (%rcx),%rdx
  0x00000001249808c6: and    $0x7,%rdx
  0x00000001249808ca: cmp    $0x5,%rdx
  0x00000001249808ce: je     0x000000012498098b
  0x00000001249808d4: mov    (%rax),%rdx
  0x00000001249808d7: test   %rdx,%rdx
  0x00000001249808da: je     0x000000012498098b
  0x00000001249808e0: lock cmpxchg %rdx,(%rcx)
  0x00000001249808e5: je     0x000000012498098b
  0x00000001249808eb: mov    %rcx,0x8(%rsi)
  0x00000001249808ef: callq  0x00000001249808f9
  0x00000001249808f4: jmpq   0x000000012498098b
  0x00000001249808f9: lea    0x8(%rsp),%rax
  0x00000001249808fe: mov    %r13,-0x40(%rbp)
  0x0000000124980902: mov    %r15,%rdi
  0x0000000124980905: vzeroupper 
  0x0000000124980908: mov    %rbp,0x330(%r15)
  0x000000012498090f: mov    %rax,0x320(%r15)
  0x0000000124980916: test   $0xf,%esp
  0x000000012498091c: je     0x0000000124980934
  0x0000000124980922: sub    $0x8,%rsp
  0x0000000124980926: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012498092b: add    $0x8,%rsp
  0x000000012498092f: jmpq   0x0000000124980939
  0x0000000124980934: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x0000000124980939: movabs $0x0,%r10
  0x0000000124980943: mov    %r10,0x320(%r15)
  0x000000012498094a: movabs $0x0,%r10
  0x0000000124980954: mov    %r10,0x330(%r15)
  0x000000012498095b: movabs $0x0,%r10
  0x0000000124980965: mov    %r10,0x328(%r15)
  0x000000012498096c: vzeroupper 
  0x000000012498096f: cmpq   $0x0,0x8(%r15)
  0x0000000124980977: je     0x0000000124980982
  0x000000012498097d: jmpq   0x0000000124975780
  0x0000000124980982: mov    -0x40(%rbp),%r13
  0x0000000124980986: mov    -0x38(%rbp),%r14
  0x000000012498098a: retq   
  0x000000012498098b: mov    -0x40(%rbp),%r13
  0x000000012498098f: vmovss (%rsp),%xmm0
  0x0000000124980994: add    $0x8,%rsp
  0x0000000124980998: mov    -0x48(%rbp),%rsi
  0x000000012498099c: lea    -0x48(%rbp),%rbx
  0x00000001249809a0: jmpq   0x0000000124980ab0
  0x00000001249809a5: sub    $0x8,%rsp
  0x00000001249809a9: vmovss %xmm0,(%rsp)
  0x00000001249809ae: mov    %rsi,%rsi
  0x00000001249809b1: mov    %r13,-0x40(%rbp)
  0x00000001249809b5: lea    (%rsi),%rax
  0x00000001249809b8: mov    0x8(%rsi),%rcx
  0x00000001249809bc: movq   $0x0,0x8(%rsi)
  0x00000001249809c4: mov    (%rcx),%rdx
  0x00000001249809c7: and    $0x7,%rdx
  0x00000001249809cb: cmp    $0x5,%rdx
  0x00000001249809cf: je     0x0000000124980a8c
  0x00000001249809d5: mov    (%rax),%rdx
  0x00000001249809d8: test   %rdx,%rdx
  0x00000001249809db: je     0x0000000124980a8c
  0x00000001249809e1: lock cmpxchg %rdx,(%rcx)
  0x00000001249809e6: je     0x0000000124980a8c
  0x00000001249809ec: mov    %rcx,0x8(%rsi)
  0x00000001249809f0: callq  0x00000001249809fa
  0x00000001249809f5: jmpq   0x0000000124980a8c
  0x00000001249809fa: lea    0x8(%rsp),%rax
  0x00000001249809ff: mov    %r13,-0x40(%rbp)
  0x0000000124980a03: mov    %r15,%rdi
  0x0000000124980a06: vzeroupper 
  0x0000000124980a09: mov    %rbp,0x330(%r15)
  0x0000000124980a10: mov    %rax,0x320(%r15)
  0x0000000124980a17: test   $0xf,%esp
  0x0000000124980a1d: je     0x0000000124980a35
  0x0000000124980a23: sub    $0x8,%rsp
  0x0000000124980a27: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x0000000124980a2c: add    $0x8,%rsp
  0x0000000124980a30: jmpq   0x0000000124980a3a
  0x0000000124980a35: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x0000000124980a3a: movabs $0x0,%r10
  0x0000000124980a44: mov    %r10,0x320(%r15)
  0x0000000124980a4b: movabs $0x0,%r10
  0x0000000124980a55: mov    %r10,0x330(%r15)
  0x0000000124980a5c: movabs $0x0,%r10
  0x0000000124980a66: mov    %r10,0x328(%r15)
  0x0000000124980a6d: vzeroupper 
  0x0000000124980a70: cmpq   $0x0,0x8(%r15)
  0x0000000124980a78: je     0x0000000124980a83
  0x0000000124980a7e: jmpq   0x0000000124975780
  0x0000000124980a83: mov    -0x40(%rbp),%r13
  0x0000000124980a87: mov    -0x38(%rbp),%r14
  0x0000000124980a8b: retq   
  0x0000000124980a8c: mov    -0x40(%rbp),%r13
  0x0000000124980a90: vmovss (%rsp),%xmm0
  0x0000000124980a95: add    $0x8,%rsp
  0x0000000124980a99: jmpq   0x0000000124980998
  0x0000000124980a9e: cmpq   $0x0,0x8(%rsi)
  0x0000000124980aa6: jne    0x00000001249809a5
  0x0000000124980aac: add    $0x10,%rsi
  0x0000000124980ab0: cmp    %rbx,%rsi
  0x0000000124980ab3: jne    0x0000000124980a9e
  0x0000000124980ab5: cmpb   $0x0,-0xf7c69e2(%rip)        # 0x00000001151ba0da = DTraceMethodProbes
  0x0000000124980abc: je     0x0000000124980afe
  0x0000000124980ac2: sub    $0x8,%rsp
  0x0000000124980ac6: vmovss %xmm0,(%rsp)
  0x0000000124980acb: mov    -0x18(%rbp),%rsi
  0x0000000124980acf: mov    %r15,%rdi
  0x0000000124980ad2: test   $0xf,%esp
  0x0000000124980ad8: je     0x0000000124980af0
  0x0000000124980ade: sub    $0x8,%rsp
  0x0000000124980ae2: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x0000000124980ae7: add    $0x8,%rsp
  0x0000000124980aeb: jmpq   0x0000000124980af5
  0x0000000124980af0: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x0000000124980af5: vmovss (%rsp),%xmm0
  0x0000000124980afa: add    $0x8,%rsp
  0x0000000124980afe: mov    -0x8(%rbp),%rbx
  0x0000000124980b02: cmpl   $0x3,0x408(%r15)
  0x0000000124980b0d: je     0x0000000124980bf6
  0x0000000124980b13: cmp    0x418(%r15),%rbx
  0x0000000124980b1a: jle    0x0000000124980bf6
  0x0000000124980b20: mov    %r15,%rdi
  0x0000000124980b23: test   $0xf,%esp
  0x0000000124980b29: je     0x0000000124980b41
  0x0000000124980b2f: sub    $0x8,%rsp
  0x0000000124980b33: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x0000000124980b38: add    $0x8,%rsp
  0x0000000124980b3c: jmpq   0x0000000124980b46
  0x0000000124980b41: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x0000000124980b46: callq  0x0000000124980b50
  0x0000000124980b4b: jmpq   0x0000000124980be2
  0x0000000124980b50: lea    0x8(%rsp),%rax
  0x0000000124980b55: mov    %r13,-0x40(%rbp)
  0x0000000124980b59: mov    %r15,%rdi
  0x0000000124980b5c: vzeroupper 
  0x0000000124980b5f: mov    %rbp,0x330(%r15)
  0x0000000124980b66: mov    %rax,0x320(%r15)
  0x0000000124980b6d: test   $0xf,%esp
  0x0000000124980b73: je     0x0000000124980b8b
  0x0000000124980b79: sub    $0x8,%rsp
  0x0000000124980b7d: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x0000000124980b82: add    $0x8,%rsp
  0x0000000124980b86: jmpq   0x0000000124980b90
  0x0000000124980b8b: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x0000000124980b90: movabs $0x0,%r10
  0x0000000124980b9a: mov    %r10,0x320(%r15)
  0x0000000124980ba1: movabs $0x0,%r10
  0x0000000124980bab: mov    %r10,0x330(%r15)
  0x0000000124980bb2: movabs $0x0,%r10
  0x0000000124980bbc: mov    %r10,0x328(%r15)
  0x0000000124980bc3: vzeroupper 
  0x0000000124980bc6: cmpq   $0x0,0x8(%r15)
  0x0000000124980bce: je     0x0000000124980bd9
  0x0000000124980bd4: jmpq   0x0000000124975780
  0x0000000124980bd9: mov    -0x40(%rbp),%r13
  0x0000000124980bdd: mov    -0x38(%rbp),%r14
  0x0000000124980be1: retq   
  0x0000000124980be2: movabs $0x114ff3493,%rdi
  0x0000000124980bec: and    $0xfffffffffffffff0,%rsp
  0x0000000124980bf0: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124980bf5: hlt    
  0x0000000124980bf6: leaveq 
  0x0000000124980bf7: pop    %rsi
  0x0000000124980bf8: mov    %rbx,%rsp
  0x0000000124980bfb: jmpq   *%rsi
  0x0000000124980bfd: mov    -0x40(%rbp),%r13
  0x0000000124980c01: mov    -0x38(%rbp),%r14
  0x0000000124980c05: mov    -0x48(%rbp),%rsp
  0x0000000124980c09: movq   $0x0,-0x10(%rbp)
  0x0000000124980c11: mov    0x488(%r15),%rcx
  0x0000000124980c18: vmovsd 0x80(%rcx),%xmm0
  0x0000000124980c20: movl   $0xb,0x78(%rcx)
  0x0000000124980c27: movl   $0x0,0x80(%rcx)
  0x0000000124980c31: movl   $0xb,0x78(%rcx)
  0x0000000124980c38: movabs $0x0,%r10
  0x0000000124980c42: mov    %r10,0x80(%rcx)
  0x0000000124980c49: mov    0x488(%r15),%rcx
  0x0000000124980c50: movl   $0x0,0x74(%rcx)
  0x0000000124980c57: mov    0x3dd(%r15),%bl
  0x0000000124980c5e: movb   $0x0,0x3dd(%r15)
  0x0000000124980c66: mov    -0x18(%rbp),%rcx
  0x0000000124980c6a: mov    0x20(%rcx),%ecx
  0x0000000124980c6d: test   $0x20,%ecx
  0x0000000124980c73: je     0x0000000124980d92
  0x0000000124980c79: test   $0xff,%bl
  0x0000000124980c7c: jne    0x0000000124980eaf
  0x0000000124980c82: sub    $0x10,%rsp
  0x0000000124980c86: vmovsd %xmm0,(%rsp)
  0x0000000124980c8b: lea    -0x58(%rbp),%rsi
  0x0000000124980c8f: mov    0x8(%rsi),%rax
  0x0000000124980c93: test   %rax,%rax
  0x0000000124980c96: jne    0x0000000124980caa
  0x0000000124980c9c: vmovsd (%rsp),%xmm0
  0x0000000124980ca1: add    $0x10,%rsp
  0x0000000124980ca5: jmpq   0x0000000124980d92
  0x0000000124980caa: mov    %r13,-0x40(%rbp)
  0x0000000124980cae: lea    (%rsi),%rax
  0x0000000124980cb1: mov    0x8(%rsi),%rcx
  0x0000000124980cb5: movq   $0x0,0x8(%rsi)
  0x0000000124980cbd: mov    (%rcx),%rdx
  0x0000000124980cc0: and    $0x7,%rdx
  0x0000000124980cc4: cmp    $0x5,%rdx
  0x0000000124980cc8: je     0x0000000124980d85
  0x0000000124980cce: mov    (%rax),%rdx
  0x0000000124980cd1: test   %rdx,%rdx
  0x0000000124980cd4: je     0x0000000124980d85
  0x0000000124980cda: lock cmpxchg %rdx,(%rcx)
  0x0000000124980cdf: je     0x0000000124980d85
  0x0000000124980ce5: mov    %rcx,0x8(%rsi)
  0x0000000124980ce9: callq  0x0000000124980cf3
  0x0000000124980cee: jmpq   0x0000000124980d85
  0x0000000124980cf3: lea    0x8(%rsp),%rax
  0x0000000124980cf8: mov    %r13,-0x40(%rbp)
  0x0000000124980cfc: mov    %r15,%rdi
  0x0000000124980cff: vzeroupper 
  0x0000000124980d02: mov    %rbp,0x330(%r15)
  0x0000000124980d09: mov    %rax,0x320(%r15)
  0x0000000124980d10: test   $0xf,%esp
  0x0000000124980d16: je     0x0000000124980d2e
  0x0000000124980d1c: sub    $0x8,%rsp
  0x0000000124980d20: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x0000000124980d25: add    $0x8,%rsp
  0x0000000124980d29: jmpq   0x0000000124980d33
  0x0000000124980d2e: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x0000000124980d33: movabs $0x0,%r10
  0x0000000124980d3d: mov    %r10,0x320(%r15)
  0x0000000124980d44: movabs $0x0,%r10
  0x0000000124980d4e: mov    %r10,0x330(%r15)
  0x0000000124980d55: movabs $0x0,%r10
  0x0000000124980d5f: mov    %r10,0x328(%r15)
  0x0000000124980d66: vzeroupper 
  0x0000000124980d69: cmpq   $0x0,0x8(%r15)
  0x0000000124980d71: je     0x0000000124980d7c
  0x0000000124980d77: jmpq   0x0000000124975780
  0x0000000124980d7c: mov    -0x40(%rbp),%r13
  0x0000000124980d80: mov    -0x38(%rbp),%r14
  0x0000000124980d84: retq   
  0x0000000124980d85: mov    -0x40(%rbp),%r13
  0x0000000124980d89: vmovsd (%rsp),%xmm0
  0x0000000124980d8e: add    $0x10,%rsp
  0x0000000124980d92: mov    -0x48(%rbp),%rsi
  0x0000000124980d96: lea    -0x48(%rbp),%rbx
  0x0000000124980d9a: jmpq   0x0000000124980eaa
  0x0000000124980d9f: sub    $0x10,%rsp
  0x0000000124980da3: vmovsd %xmm0,(%rsp)
  0x0000000124980da8: mov    %rsi,%rsi
  0x0000000124980dab: mov    %r13,-0x40(%rbp)
  0x0000000124980daf: lea    (%rsi),%rax
  0x0000000124980db2: mov    0x8(%rsi),%rcx
  0x0000000124980db6: movq   $0x0,0x8(%rsi)
  0x0000000124980dbe: mov    (%rcx),%rdx
  0x0000000124980dc1: and    $0x7,%rdx
  0x0000000124980dc5: cmp    $0x5,%rdx
  0x0000000124980dc9: je     0x0000000124980e86
  0x0000000124980dcf: mov    (%rax),%rdx
  0x0000000124980dd2: test   %rdx,%rdx
  0x0000000124980dd5: je     0x0000000124980e86
  0x0000000124980ddb: lock cmpxchg %rdx,(%rcx)
  0x0000000124980de0: je     0x0000000124980e86
  0x0000000124980de6: mov    %rcx,0x8(%rsi)
  0x0000000124980dea: callq  0x0000000124980df4
  0x0000000124980def: jmpq   0x0000000124980e86
  0x0000000124980df4: lea    0x8(%rsp),%rax
  0x0000000124980df9: mov    %r13,-0x40(%rbp)
  0x0000000124980dfd: mov    %r15,%rdi
  0x0000000124980e00: vzeroupper 
  0x0000000124980e03: mov    %rbp,0x330(%r15)
  0x0000000124980e0a: mov    %rax,0x320(%r15)
  0x0000000124980e11: test   $0xf,%esp
  0x0000000124980e17: je     0x0000000124980e2f
  0x0000000124980e1d: sub    $0x8,%rsp
  0x0000000124980e21: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x0000000124980e26: add    $0x8,%rsp
  0x0000000124980e2a: jmpq   0x0000000124980e34
  0x0000000124980e2f: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x0000000124980e34: movabs $0x0,%r10
  0x0000000124980e3e: mov    %r10,0x320(%r15)
  0x0000000124980e45: movabs $0x0,%r10
  0x0000000124980e4f: mov    %r10,0x330(%r15)
  0x0000000124980e56: movabs $0x0,%r10
  0x0000000124980e60: mov    %r10,0x328(%r15)
  0x0000000124980e67: vzeroupper 
  0x0000000124980e6a: cmpq   $0x0,0x8(%r15)
  0x0000000124980e72: je     0x0000000124980e7d
  0x0000000124980e78: jmpq   0x0000000124975780
  0x0000000124980e7d: mov    -0x40(%rbp),%r13
  0x0000000124980e81: mov    -0x38(%rbp),%r14
  0x0000000124980e85: retq   
  0x0000000124980e86: mov    -0x40(%rbp),%r13
  0x0000000124980e8a: vmovsd (%rsp),%xmm0
  0x0000000124980e8f: add    $0x10,%rsp
  0x0000000124980e93: jmpq   0x0000000124980d92
  0x0000000124980e98: cmpq   $0x0,0x8(%rsi)
  0x0000000124980ea0: jne    0x0000000124980d9f
  0x0000000124980ea6: add    $0x10,%rsi
  0x0000000124980eaa: cmp    %rbx,%rsi
  0x0000000124980ead: jne    0x0000000124980e98
  0x0000000124980eaf: cmpb   $0x0,-0xf7c6ddc(%rip)        # 0x00000001151ba0da = DTraceMethodProbes
  0x0000000124980eb6: je     0x0000000124980ef8
  0x0000000124980ebc: sub    $0x10,%rsp
  0x0000000124980ec0: vmovsd %xmm0,(%rsp)
  0x0000000124980ec5: mov    -0x18(%rbp),%rsi
  0x0000000124980ec9: mov    %r15,%rdi
  0x0000000124980ecc: test   $0xf,%esp
  0x0000000124980ed2: je     0x0000000124980eea
  0x0000000124980ed8: sub    $0x8,%rsp
  0x0000000124980edc: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x0000000124980ee1: add    $0x8,%rsp
  0x0000000124980ee5: jmpq   0x0000000124980eef
  0x0000000124980eea: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x0000000124980eef: vmovsd (%rsp),%xmm0
  0x0000000124980ef4: add    $0x10,%rsp
  0x0000000124980ef8: mov    -0x8(%rbp),%rbx
  0x0000000124980efc: cmpl   $0x3,0x408(%r15)
  0x0000000124980f07: je     0x0000000124980ff0
  0x0000000124980f0d: cmp    0x418(%r15),%rbx
  0x0000000124980f14: jle    0x0000000124980ff0
  0x0000000124980f1a: mov    %r15,%rdi
  0x0000000124980f1d: test   $0xf,%esp
  0x0000000124980f23: je     0x0000000124980f3b
  0x0000000124980f29: sub    $0x8,%rsp
  0x0000000124980f2d: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x0000000124980f32: add    $0x8,%rsp
  0x0000000124980f36: jmpq   0x0000000124980f40
  0x0000000124980f3b: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x0000000124980f40: callq  0x0000000124980f4a
  0x0000000124980f45: jmpq   0x0000000124980fdc
  0x0000000124980f4a: lea    0x8(%rsp),%rax
  0x0000000124980f4f: mov    %r13,-0x40(%rbp)
  0x0000000124980f53: mov    %r15,%rdi
  0x0000000124980f56: vzeroupper 
  0x0000000124980f59: mov    %rbp,0x330(%r15)
  0x0000000124980f60: mov    %rax,0x320(%r15)
  0x0000000124980f67: test   $0xf,%esp
  0x0000000124980f6d: je     0x0000000124980f85
  0x0000000124980f73: sub    $0x8,%rsp
  0x0000000124980f77: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x0000000124980f7c: add    $0x8,%rsp
  0x0000000124980f80: jmpq   0x0000000124980f8a
  0x0000000124980f85: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x0000000124980f8a: movabs $0x0,%r10
  0x0000000124980f94: mov    %r10,0x320(%r15)
  0x0000000124980f9b: movabs $0x0,%r10
  0x0000000124980fa5: mov    %r10,0x330(%r15)
  0x0000000124980fac: movabs $0x0,%r10
  0x0000000124980fb6: mov    %r10,0x328(%r15)
  0x0000000124980fbd: vzeroupper 
  0x0000000124980fc0: cmpq   $0x0,0x8(%r15)
  0x0000000124980fc8: je     0x0000000124980fd3
  0x0000000124980fce: jmpq   0x0000000124975780
  0x0000000124980fd3: mov    -0x40(%rbp),%r13
  0x0000000124980fd7: mov    -0x38(%rbp),%r14
  0x0000000124980fdb: retq   
  0x0000000124980fdc: movabs $0x114ff3493,%rdi
  0x0000000124980fe6: and    $0xfffffffffffffff0,%rsp
  0x0000000124980fea: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124980fef: hlt    
  0x0000000124980ff0: leaveq 
  0x0000000124980ff1: pop    %rsi
  0x0000000124980ff2: mov    %rbx,%rsp
  0x0000000124980ff5: jmpq   *%rsi
  0x0000000124980ff7: mov    -0x40(%rbp),%r13
  0x0000000124980ffb: mov    -0x38(%rbp),%r14
  0x0000000124980fff: mov    -0x48(%rbp),%rsp
  0x0000000124981003: movq   $0x0,-0x10(%rbp)
  0x000000012498100b: mov    0x488(%r15),%rcx
  0x0000000124981012: movl   $0xb,0x78(%rcx)
  0x0000000124981019: movl   $0x0,0x80(%rcx)
  0x0000000124981023: movl   $0xb,0x78(%rcx)
  0x000000012498102a: movabs $0x0,%r10
  0x0000000124981034: mov    %r10,0x80(%rcx)
  0x000000012498103b: mov    0x488(%r15),%rcx
  0x0000000124981042: movl   $0x0,0x74(%rcx)
  0x0000000124981049: mov    0x3dd(%r15),%bl
  0x0000000124981050: movb   $0x0,0x3dd(%r15)
  0x0000000124981058: mov    -0x18(%rbp),%rcx
  0x000000012498105c: mov    0x20(%rcx),%ecx
  0x000000012498105f: test   $0x20,%ecx
  0x0000000124981065: je     0x0000000124981169
  0x000000012498106b: test   $0xff,%bl
  0x000000012498106e: jne    0x0000000124981274
  0x0000000124981074: lea    -0x58(%rbp),%rsi
  0x0000000124981078: mov    0x8(%rsi),%rax
  0x000000012498107c: test   %rax,%rax
  0x000000012498107f: jne    0x000000012498108a
  0x0000000124981085: jmpq   0x0000000124981169
  0x000000012498108a: mov    %r13,-0x40(%rbp)
  0x000000012498108e: lea    (%rsi),%rax
  0x0000000124981091: mov    0x8(%rsi),%rcx
  0x0000000124981095: movq   $0x0,0x8(%rsi)
  0x000000012498109d: mov    (%rcx),%rdx
  0x00000001249810a0: and    $0x7,%rdx
  0x00000001249810a4: cmp    $0x5,%rdx
  0x00000001249810a8: je     0x0000000124981165
  0x00000001249810ae: mov    (%rax),%rdx
  0x00000001249810b1: test   %rdx,%rdx
  0x00000001249810b4: je     0x0000000124981165
  0x00000001249810ba: lock cmpxchg %rdx,(%rcx)
  0x00000001249810bf: je     0x0000000124981165
  0x00000001249810c5: mov    %rcx,0x8(%rsi)
  0x00000001249810c9: callq  0x00000001249810d3
  0x00000001249810ce: jmpq   0x0000000124981165
  0x00000001249810d3: lea    0x8(%rsp),%rax
  0x00000001249810d8: mov    %r13,-0x40(%rbp)
  0x00000001249810dc: mov    %r15,%rdi
  0x00000001249810df: vzeroupper 
  0x00000001249810e2: mov    %rbp,0x330(%r15)
  0x00000001249810e9: mov    %rax,0x320(%r15)
  0x00000001249810f0: test   $0xf,%esp
  0x00000001249810f6: je     0x000000012498110e
  0x00000001249810fc: sub    $0x8,%rsp
  0x0000000124981100: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x0000000124981105: add    $0x8,%rsp
  0x0000000124981109: jmpq   0x0000000124981113
  0x000000012498110e: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x0000000124981113: movabs $0x0,%r10
  0x000000012498111d: mov    %r10,0x320(%r15)
  0x0000000124981124: movabs $0x0,%r10
  0x000000012498112e: mov    %r10,0x330(%r15)
  0x0000000124981135: movabs $0x0,%r10
  0x000000012498113f: mov    %r10,0x328(%r15)
  0x0000000124981146: vzeroupper 
  0x0000000124981149: cmpq   $0x0,0x8(%r15)
  0x0000000124981151: je     0x000000012498115c
  0x0000000124981157: jmpq   0x0000000124975780
  0x000000012498115c: mov    -0x40(%rbp),%r13
  0x0000000124981160: mov    -0x38(%rbp),%r14
  0x0000000124981164: retq   
  0x0000000124981165: mov    -0x40(%rbp),%r13
  0x0000000124981169: mov    -0x48(%rbp),%rsi
  0x000000012498116d: lea    -0x48(%rbp),%rbx
  0x0000000124981171: jmpq   0x000000012498126f
  0x0000000124981176: mov    %rsi,%rsi
  0x0000000124981179: mov    %r13,-0x40(%rbp)
  0x000000012498117d: lea    (%rsi),%rax
  0x0000000124981180: mov    0x8(%rsi),%rcx
  0x0000000124981184: movq   $0x0,0x8(%rsi)
  0x000000012498118c: mov    (%rcx),%rdx
  0x000000012498118f: and    $0x7,%rdx
  0x0000000124981193: cmp    $0x5,%rdx
  0x0000000124981197: je     0x0000000124981254
  0x000000012498119d: mov    (%rax),%rdx
  0x00000001249811a0: test   %rdx,%rdx
  0x00000001249811a3: je     0x0000000124981254
  0x00000001249811a9: lock cmpxchg %rdx,(%rcx)
  0x00000001249811ae: je     0x0000000124981254
  0x00000001249811b4: mov    %rcx,0x8(%rsi)
  0x00000001249811b8: callq  0x00000001249811c2
  0x00000001249811bd: jmpq   0x0000000124981254
  0x00000001249811c2: lea    0x8(%rsp),%rax
  0x00000001249811c7: mov    %r13,-0x40(%rbp)
  0x00000001249811cb: mov    %r15,%rdi
  0x00000001249811ce: vzeroupper 
  0x00000001249811d1: mov    %rbp,0x330(%r15)
  0x00000001249811d8: mov    %rax,0x320(%r15)
  0x00000001249811df: test   $0xf,%esp
  0x00000001249811e5: je     0x00000001249811fd
  0x00000001249811eb: sub    $0x8,%rsp
  0x00000001249811ef: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00000001249811f4: add    $0x8,%rsp
  0x00000001249811f8: jmpq   0x0000000124981202
  0x00000001249811fd: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x0000000124981202: movabs $0x0,%r10
  0x000000012498120c: mov    %r10,0x320(%r15)
  0x0000000124981213: movabs $0x0,%r10
  0x000000012498121d: mov    %r10,0x330(%r15)
  0x0000000124981224: movabs $0x0,%r10
  0x000000012498122e: mov    %r10,0x328(%r15)
  0x0000000124981235: vzeroupper 
  0x0000000124981238: cmpq   $0x0,0x8(%r15)
  0x0000000124981240: je     0x000000012498124b
  0x0000000124981246: jmpq   0x0000000124975780
  0x000000012498124b: mov    -0x40(%rbp),%r13
  0x000000012498124f: mov    -0x38(%rbp),%r14
  0x0000000124981253: retq   
  0x0000000124981254: mov    -0x40(%rbp),%r13
  0x0000000124981258: jmpq   0x0000000124981169
  0x000000012498125d: cmpq   $0x0,0x8(%rsi)
  0x0000000124981265: jne    0x0000000124981176
  0x000000012498126b: add    $0x10,%rsi
  0x000000012498126f: cmp    %rbx,%rsi
  0x0000000124981272: jne    0x000000012498125d
  0x0000000124981274: cmpb   $0x0,-0xf7c71a1(%rip)        # 0x00000001151ba0da = DTraceMethodProbes
  0x000000012498127b: je     0x00000001249812ab
  0x0000000124981281: mov    -0x18(%rbp),%rsi
  0x0000000124981285: mov    %r15,%rdi
  0x0000000124981288: test   $0xf,%esp
  0x000000012498128e: je     0x00000001249812a6
  0x0000000124981294: sub    $0x8,%rsp
  0x0000000124981298: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000012498129d: add    $0x8,%rsp
  0x00000001249812a1: jmpq   0x00000001249812ab
  0x00000001249812a6: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00000001249812ab: mov    -0x8(%rbp),%rbx
  0x00000001249812af: cmpl   $0x3,0x408(%r15)
  0x00000001249812ba: je     0x00000001249813a3
  0x00000001249812c0: cmp    0x418(%r15),%rbx
  0x00000001249812c7: jle    0x00000001249813a3
  0x00000001249812cd: mov    %r15,%rdi
  0x00000001249812d0: test   $0xf,%esp
  0x00000001249812d6: je     0x00000001249812ee
  0x00000001249812dc: sub    $0x8,%rsp
  0x00000001249812e0: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00000001249812e5: add    $0x8,%rsp
  0x00000001249812e9: jmpq   0x00000001249812f3
  0x00000001249812ee: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00000001249812f3: callq  0x00000001249812fd
  0x00000001249812f8: jmpq   0x000000012498138f
  0x00000001249812fd: lea    0x8(%rsp),%rax
  0x0000000124981302: mov    %r13,-0x40(%rbp)
  0x0000000124981306: mov    %r15,%rdi
  0x0000000124981309: vzeroupper 
  0x000000012498130c: mov    %rbp,0x330(%r15)
  0x0000000124981313: mov    %rax,0x320(%r15)
  0x000000012498131a: test   $0xf,%esp
  0x0000000124981320: je     0x0000000124981338
  0x0000000124981326: sub    $0x8,%rsp
  0x000000012498132a: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000012498132f: add    $0x8,%rsp
  0x0000000124981333: jmpq   0x000000012498133d
  0x0000000124981338: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000012498133d: movabs $0x0,%r10
  0x0000000124981347: mov    %r10,0x320(%r15)
  0x000000012498134e: movabs $0x0,%r10
  0x0000000124981358: mov    %r10,0x330(%r15)
  0x000000012498135f: movabs $0x0,%r10
  0x0000000124981369: mov    %r10,0x328(%r15)
  0x0000000124981370: vzeroupper 
  0x0000000124981373: cmpq   $0x0,0x8(%r15)
  0x000000012498137b: je     0x0000000124981386
  0x0000000124981381: jmpq   0x0000000124975780
  0x0000000124981386: mov    -0x40(%rbp),%r13
  0x000000012498138a: mov    -0x38(%rbp),%r14
  0x000000012498138e: retq   
  0x000000012498138f: movabs $0x114ff3493,%rdi
  0x0000000124981399: and    $0xfffffffffffffff0,%rsp
  0x000000012498139d: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x00000001249813a2: hlt    
  0x00000001249813a3: leaveq 
  0x00000001249813a4: pop    %rsi
  0x00000001249813a5: mov    %rbx,%rsp
  0x00000001249813a8: jmpq   *%rsi
  0x00000001249813aa: nopw   0x0(%rax,%rax,1)
  0x00000001249813b0: add    %al,(%rax)
  0x00000001249813b2: add    %al,(%rax)
  0x00000001249813b4: add    %al,(%rax)
  0x00000001249813b6: add    %al,(%rax)
  0x00000001249813b8: add    %al,(%rax)
  0x00000001249813ba: add    %al,(%rax)
  0x00000001249813bc: add    %al,(%rax)
  0x00000001249813be: add    %al,(%rax)

----------------------------------------------------------------------
result handlers for native calls  [0x00000001249813e0, 0x0000000124981400]  32 bytes

  0x00000001249813e0: and    $0xff,%eax
  0x00000001249813e6: setne  %al
  0x00000001249813e9: retq   
  0x00000001249813ea: movzwl %ax,%eax
  0x00000001249813ed: retq   
  0x00000001249813ee: movsbl %al,%eax
  0x00000001249813f1: retq   
  0x00000001249813f2: movswl %ax,%eax
  0x00000001249813f5: retq   
  0x00000001249813f6: retq   
  0x00000001249813f7: retq   
  0x00000001249813f8: retq   
  0x00000001249813f9: retq   
  0x00000001249813fa: retq   
  0x00000001249813fb: mov    0x10(%rbp),%rax
  0x00000001249813ff: retq   

----------------------------------------------------------------------
safepoint entry points  [0x0000000124981420, 0x0000000124981b40]  1824 bytes

  0x0000000124981420: push   %rax
  0x0000000124981421: callq  0x000000012498142b
  0x0000000124981426: jmpq   0x00000001249814bd
  0x000000012498142b: lea    0x8(%rsp),%rax
  0x0000000124981430: mov    %r13,-0x40(%rbp)
  0x0000000124981434: mov    %r15,%rdi
  0x0000000124981437: vzeroupper 
  0x000000012498143a: mov    %rbp,0x330(%r15)
  0x0000000124981441: mov    %rax,0x320(%r15)
  0x0000000124981448: test   $0xf,%esp
  0x000000012498144e: je     0x0000000124981466
  0x0000000124981454: sub    $0x8,%rsp
  0x0000000124981458: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000012498145d: add    $0x8,%rsp
  0x0000000124981461: jmpq   0x000000012498146b
  0x0000000124981466: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000012498146b: movabs $0x0,%r10
  0x0000000124981475: mov    %r10,0x320(%r15)
  0x000000012498147c: movabs $0x0,%r10
  0x0000000124981486: mov    %r10,0x330(%r15)
  0x000000012498148d: movabs $0x0,%r10
  0x0000000124981497: mov    %r10,0x328(%r15)
  0x000000012498149e: vzeroupper 
  0x00000001249814a1: cmpq   $0x0,0x8(%r15)
  0x00000001249814a9: je     0x00000001249814b4
  0x00000001249814af: jmpq   0x0000000124975780
  0x00000001249814b4: mov    -0x40(%rbp),%r13
  0x00000001249814b8: mov    -0x38(%rbp),%r14
  0x00000001249814bc: retq   
  0x00000001249814bd: movzbl 0x0(%r13),%ebx
  0x00000001249814c2: movabs $0x1151d2a20,%r10
  0x00000001249814cc: jmpq   *(%r10,%rbx,8)
  0x00000001249814d0: push   %rax
  0x00000001249814d1: callq  0x00000001249814db
  0x00000001249814d6: jmpq   0x000000012498156d
  0x00000001249814db: lea    0x8(%rsp),%rax
  0x00000001249814e0: mov    %r13,-0x40(%rbp)
  0x00000001249814e4: mov    %r15,%rdi
  0x00000001249814e7: vzeroupper 
  0x00000001249814ea: mov    %rbp,0x330(%r15)
  0x00000001249814f1: mov    %rax,0x320(%r15)
  0x00000001249814f8: test   $0xf,%esp
  0x00000001249814fe: je     0x0000000124981516
  0x0000000124981504: sub    $0x8,%rsp
  0x0000000124981508: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000012498150d: add    $0x8,%rsp
  0x0000000124981511: jmpq   0x000000012498151b
  0x0000000124981516: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000012498151b: movabs $0x0,%r10
  0x0000000124981525: mov    %r10,0x320(%r15)
  0x000000012498152c: movabs $0x0,%r10
  0x0000000124981536: mov    %r10,0x330(%r15)
  0x000000012498153d: movabs $0x0,%r10
  0x0000000124981547: mov    %r10,0x328(%r15)
  0x000000012498154e: vzeroupper 
  0x0000000124981551: cmpq   $0x0,0x8(%r15)
  0x0000000124981559: je     0x0000000124981564
  0x000000012498155f: jmpq   0x0000000124975780
  0x0000000124981564: mov    -0x40(%rbp),%r13
  0x0000000124981568: mov    -0x38(%rbp),%r14
  0x000000012498156c: retq   
  0x000000012498156d: movzbl 0x0(%r13),%ebx
  0x0000000124981572: movabs $0x1151d2a20,%r10
  0x000000012498157c: jmpq   *(%r10,%rbx,8)
  0x0000000124981580: push   %rax
  0x0000000124981581: callq  0x000000012498158b
  0x0000000124981586: jmpq   0x000000012498161d
  0x000000012498158b: lea    0x8(%rsp),%rax
  0x0000000124981590: mov    %r13,-0x40(%rbp)
  0x0000000124981594: mov    %r15,%rdi
  0x0000000124981597: vzeroupper 
  0x000000012498159a: mov    %rbp,0x330(%r15)
  0x00000001249815a1: mov    %rax,0x320(%r15)
  0x00000001249815a8: test   $0xf,%esp
  0x00000001249815ae: je     0x00000001249815c6
  0x00000001249815b4: sub    $0x8,%rsp
  0x00000001249815b8: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00000001249815bd: add    $0x8,%rsp
  0x00000001249815c1: jmpq   0x00000001249815cb
  0x00000001249815c6: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00000001249815cb: movabs $0x0,%r10
  0x00000001249815d5: mov    %r10,0x320(%r15)
  0x00000001249815dc: movabs $0x0,%r10
  0x00000001249815e6: mov    %r10,0x330(%r15)
  0x00000001249815ed: movabs $0x0,%r10
  0x00000001249815f7: mov    %r10,0x328(%r15)
  0x00000001249815fe: vzeroupper 
  0x0000000124981601: cmpq   $0x0,0x8(%r15)
  0x0000000124981609: je     0x0000000124981614
  0x000000012498160f: jmpq   0x0000000124975780
  0x0000000124981614: mov    -0x40(%rbp),%r13
  0x0000000124981618: mov    -0x38(%rbp),%r14
  0x000000012498161c: retq   
  0x000000012498161d: movzbl 0x0(%r13),%ebx
  0x0000000124981622: movabs $0x1151d2a20,%r10
  0x000000012498162c: jmpq   *(%r10,%rbx,8)
  0x0000000124981630: push   %rax
  0x0000000124981631: callq  0x000000012498163b
  0x0000000124981636: jmpq   0x00000001249816cd
  0x000000012498163b: lea    0x8(%rsp),%rax
  0x0000000124981640: mov    %r13,-0x40(%rbp)
  0x0000000124981644: mov    %r15,%rdi
  0x0000000124981647: vzeroupper 
  0x000000012498164a: mov    %rbp,0x330(%r15)
  0x0000000124981651: mov    %rax,0x320(%r15)
  0x0000000124981658: test   $0xf,%esp
  0x000000012498165e: je     0x0000000124981676
  0x0000000124981664: sub    $0x8,%rsp
  0x0000000124981668: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000012498166d: add    $0x8,%rsp
  0x0000000124981671: jmpq   0x000000012498167b
  0x0000000124981676: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000012498167b: movabs $0x0,%r10
  0x0000000124981685: mov    %r10,0x320(%r15)
  0x000000012498168c: movabs $0x0,%r10
  0x0000000124981696: mov    %r10,0x330(%r15)
  0x000000012498169d: movabs $0x0,%r10
  0x00000001249816a7: mov    %r10,0x328(%r15)
  0x00000001249816ae: vzeroupper 
  0x00000001249816b1: cmpq   $0x0,0x8(%r15)
  0x00000001249816b9: je     0x00000001249816c4
  0x00000001249816bf: jmpq   0x0000000124975780
  0x00000001249816c4: mov    -0x40(%rbp),%r13
  0x00000001249816c8: mov    -0x38(%rbp),%r14
  0x00000001249816cc: retq   
  0x00000001249816cd: movzbl 0x0(%r13),%ebx
  0x00000001249816d2: movabs $0x1151d2a20,%r10
  0x00000001249816dc: jmpq   *(%r10,%rbx,8)
  0x00000001249816e0: push   %rax
  0x00000001249816e1: callq  0x00000001249816eb
  0x00000001249816e6: jmpq   0x000000012498177d
  0x00000001249816eb: lea    0x8(%rsp),%rax
  0x00000001249816f0: mov    %r13,-0x40(%rbp)
  0x00000001249816f4: mov    %r15,%rdi
  0x00000001249816f7: vzeroupper 
  0x00000001249816fa: mov    %rbp,0x330(%r15)
  0x0000000124981701: mov    %rax,0x320(%r15)
  0x0000000124981708: test   $0xf,%esp
  0x000000012498170e: je     0x0000000124981726
  0x0000000124981714: sub    $0x8,%rsp
  0x0000000124981718: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000012498171d: add    $0x8,%rsp
  0x0000000124981721: jmpq   0x000000012498172b
  0x0000000124981726: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000012498172b: movabs $0x0,%r10
  0x0000000124981735: mov    %r10,0x320(%r15)
  0x000000012498173c: movabs $0x0,%r10
  0x0000000124981746: mov    %r10,0x330(%r15)
  0x000000012498174d: movabs $0x0,%r10
  0x0000000124981757: mov    %r10,0x328(%r15)
  0x000000012498175e: vzeroupper 
  0x0000000124981761: cmpq   $0x0,0x8(%r15)
  0x0000000124981769: je     0x0000000124981774
  0x000000012498176f: jmpq   0x0000000124975780
  0x0000000124981774: mov    -0x40(%rbp),%r13
  0x0000000124981778: mov    -0x38(%rbp),%r14
  0x000000012498177c: retq   
  0x000000012498177d: movzbl 0x0(%r13),%ebx
  0x0000000124981782: movabs $0x1151d2a20,%r10
  0x000000012498178c: jmpq   *(%r10,%rbx,8)
  0x0000000124981790: push   %rax
  0x0000000124981791: callq  0x000000012498179b
  0x0000000124981796: jmpq   0x000000012498182d
  0x000000012498179b: lea    0x8(%rsp),%rax
  0x00000001249817a0: mov    %r13,-0x40(%rbp)
  0x00000001249817a4: mov    %r15,%rdi
  0x00000001249817a7: vzeroupper 
  0x00000001249817aa: mov    %rbp,0x330(%r15)
  0x00000001249817b1: mov    %rax,0x320(%r15)
  0x00000001249817b8: test   $0xf,%esp
  0x00000001249817be: je     0x00000001249817d6
  0x00000001249817c4: sub    $0x8,%rsp
  0x00000001249817c8: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00000001249817cd: add    $0x8,%rsp
  0x00000001249817d1: jmpq   0x00000001249817db
  0x00000001249817d6: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00000001249817db: movabs $0x0,%r10
  0x00000001249817e5: mov    %r10,0x320(%r15)
  0x00000001249817ec: movabs $0x0,%r10
  0x00000001249817f6: mov    %r10,0x330(%r15)
  0x00000001249817fd: movabs $0x0,%r10
  0x0000000124981807: mov    %r10,0x328(%r15)
  0x000000012498180e: vzeroupper 
  0x0000000124981811: cmpq   $0x0,0x8(%r15)
  0x0000000124981819: je     0x0000000124981824
  0x000000012498181f: jmpq   0x0000000124975780
  0x0000000124981824: mov    -0x40(%rbp),%r13
  0x0000000124981828: mov    -0x38(%rbp),%r14
  0x000000012498182c: retq   
  0x000000012498182d: movzbl 0x0(%r13),%ebx
  0x0000000124981832: movabs $0x1151d2a20,%r10
  0x000000012498183c: jmpq   *(%r10,%rbx,8)
  0x0000000124981840: sub    $0x10,%rsp
  0x0000000124981844: mov    %rax,(%rsp)
  0x0000000124981848: movabs $0x0,%r10
  0x0000000124981852: mov    %r10,0x8(%rsp)
  0x0000000124981857: callq  0x0000000124981861
  0x000000012498185c: jmpq   0x00000001249818f3
  0x0000000124981861: lea    0x8(%rsp),%rax
  0x0000000124981866: mov    %r13,-0x40(%rbp)
  0x000000012498186a: mov    %r15,%rdi
  0x000000012498186d: vzeroupper 
  0x0000000124981870: mov    %rbp,0x330(%r15)
  0x0000000124981877: mov    %rax,0x320(%r15)
  0x000000012498187e: test   $0xf,%esp
  0x0000000124981884: je     0x000000012498189c
  0x000000012498188a: sub    $0x8,%rsp
  0x000000012498188e: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x0000000124981893: add    $0x8,%rsp
  0x0000000124981897: jmpq   0x00000001249818a1
  0x000000012498189c: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00000001249818a1: movabs $0x0,%r10
  0x00000001249818ab: mov    %r10,0x320(%r15)
  0x00000001249818b2: movabs $0x0,%r10
  0x00000001249818bc: mov    %r10,0x330(%r15)
  0x00000001249818c3: movabs $0x0,%r10
  0x00000001249818cd: mov    %r10,0x328(%r15)
  0x00000001249818d4: vzeroupper 
  0x00000001249818d7: cmpq   $0x0,0x8(%r15)
  0x00000001249818df: je     0x00000001249818ea
  0x00000001249818e5: jmpq   0x0000000124975780
  0x00000001249818ea: mov    -0x40(%rbp),%r13
  0x00000001249818ee: mov    -0x38(%rbp),%r14
  0x00000001249818f2: retq   
  0x00000001249818f3: movzbl 0x0(%r13),%ebx
  0x00000001249818f8: movabs $0x1151d2a20,%r10
  0x0000000124981902: jmpq   *(%r10,%rbx,8)
  0x0000000124981906: sub    $0x8,%rsp
  0x000000012498190a: vmovss %xmm0,(%rsp)
  0x000000012498190f: callq  0x0000000124981919
  0x0000000124981914: jmpq   0x00000001249819ab
  0x0000000124981919: lea    0x8(%rsp),%rax
  0x000000012498191e: mov    %r13,-0x40(%rbp)
  0x0000000124981922: mov    %r15,%rdi
  0x0000000124981925: vzeroupper 
  0x0000000124981928: mov    %rbp,0x330(%r15)
  0x000000012498192f: mov    %rax,0x320(%r15)
  0x0000000124981936: test   $0xf,%esp
  0x000000012498193c: je     0x0000000124981954
  0x0000000124981942: sub    $0x8,%rsp
  0x0000000124981946: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000012498194b: add    $0x8,%rsp
  0x000000012498194f: jmpq   0x0000000124981959
  0x0000000124981954: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x0000000124981959: movabs $0x0,%r10
  0x0000000124981963: mov    %r10,0x320(%r15)
  0x000000012498196a: movabs $0x0,%r10
  0x0000000124981974: mov    %r10,0x330(%r15)
  0x000000012498197b: movabs $0x0,%r10
  0x0000000124981985: mov    %r10,0x328(%r15)
  0x000000012498198c: vzeroupper 
  0x000000012498198f: cmpq   $0x0,0x8(%r15)
  0x0000000124981997: je     0x00000001249819a2
  0x000000012498199d: jmpq   0x0000000124975780
  0x00000001249819a2: mov    -0x40(%rbp),%r13
  0x00000001249819a6: mov    -0x38(%rbp),%r14
  0x00000001249819aa: retq   
  0x00000001249819ab: movzbl 0x0(%r13),%ebx
  0x00000001249819b0: movabs $0x1151d2a20,%r10
  0x00000001249819ba: jmpq   *(%r10,%rbx,8)
  0x00000001249819be: sub    $0x10,%rsp
  0x00000001249819c2: vmovsd %xmm0,(%rsp)
  0x00000001249819c7: callq  0x00000001249819d1
  0x00000001249819cc: jmpq   0x0000000124981a63
  0x00000001249819d1: lea    0x8(%rsp),%rax
  0x00000001249819d6: mov    %r13,-0x40(%rbp)
  0x00000001249819da: mov    %r15,%rdi
  0x00000001249819dd: vzeroupper 
  0x00000001249819e0: mov    %rbp,0x330(%r15)
  0x00000001249819e7: mov    %rax,0x320(%r15)
  0x00000001249819ee: test   $0xf,%esp
  0x00000001249819f4: je     0x0000000124981a0c
  0x00000001249819fa: sub    $0x8,%rsp
  0x00000001249819fe: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x0000000124981a03: add    $0x8,%rsp
  0x0000000124981a07: jmpq   0x0000000124981a11
  0x0000000124981a0c: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x0000000124981a11: movabs $0x0,%r10
  0x0000000124981a1b: mov    %r10,0x320(%r15)
  0x0000000124981a22: movabs $0x0,%r10
  0x0000000124981a2c: mov    %r10,0x330(%r15)
  0x0000000124981a33: movabs $0x0,%r10
  0x0000000124981a3d: mov    %r10,0x328(%r15)
  0x0000000124981a44: vzeroupper 
  0x0000000124981a47: cmpq   $0x0,0x8(%r15)
  0x0000000124981a4f: je     0x0000000124981a5a
  0x0000000124981a55: jmpq   0x0000000124975780
  0x0000000124981a5a: mov    -0x40(%rbp),%r13
  0x0000000124981a5e: mov    -0x38(%rbp),%r14
  0x0000000124981a62: retq   
  0x0000000124981a63: movzbl 0x0(%r13),%ebx
  0x0000000124981a68: movabs $0x1151d2a20,%r10
  0x0000000124981a72: jmpq   *(%r10,%rbx,8)
  0x0000000124981a76: callq  0x0000000124981a80
  0x0000000124981a7b: jmpq   0x0000000124981b12
  0x0000000124981a80: lea    0x8(%rsp),%rax
  0x0000000124981a85: mov    %r13,-0x40(%rbp)
  0x0000000124981a89: mov    %r15,%rdi
  0x0000000124981a8c: vzeroupper 
  0x0000000124981a8f: mov    %rbp,0x330(%r15)
  0x0000000124981a96: mov    %rax,0x320(%r15)
  0x0000000124981a9d: test   $0xf,%esp
  0x0000000124981aa3: je     0x0000000124981abb
  0x0000000124981aa9: sub    $0x8,%rsp
  0x0000000124981aad: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x0000000124981ab2: add    $0x8,%rsp
  0x0000000124981ab6: jmpq   0x0000000124981ac0
  0x0000000124981abb: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x0000000124981ac0: movabs $0x0,%r10
  0x0000000124981aca: mov    %r10,0x320(%r15)
  0x0000000124981ad1: movabs $0x0,%r10
  0x0000000124981adb: mov    %r10,0x330(%r15)
  0x0000000124981ae2: movabs $0x0,%r10
  0x0000000124981aec: mov    %r10,0x328(%r15)
  0x0000000124981af3: vzeroupper 
  0x0000000124981af6: cmpq   $0x0,0x8(%r15)
  0x0000000124981afe: je     0x0000000124981b09
  0x0000000124981b04: jmpq   0x0000000124975780
  0x0000000124981b09: mov    -0x40(%rbp),%r13
  0x0000000124981b0d: mov    -0x38(%rbp),%r14
  0x0000000124981b11: retq   
  0x0000000124981b12: movzbl 0x0(%r13),%ebx
  0x0000000124981b17: movabs $0x1151d2a20,%r10
  0x0000000124981b21: jmpq   *(%r10,%rbx,8)
  0x0000000124981b25: data16 xchg %ax,%ax
  0x0000000124981b28: add    %al,(%rax)
  0x0000000124981b2a: add    %al,(%rax)
  0x0000000124981b2c: add    %al,(%rax)
  0x0000000124981b2e: add    %al,(%rax)
  0x0000000124981b30: add    %al,(%rax)
  0x0000000124981b32: add    %al,(%rax)
  0x0000000124981b34: add    %al,(%rax)
  0x0000000124981b36: add    %al,(%rax)
  0x0000000124981b38: add    %al,(%rax)
  0x0000000124981b3a: add    %al,(%rax)
  0x0000000124981b3c: add    %al,(%rax)
  0x0000000124981b3e: add    %al,(%rax)

----------------------------------------------------------------------
exception handling  [0x0000000124981b60, 0x0000000124982a80]  3872 bytes

  0x0000000124981b60: movq   $0x0,-0x10(%rbp)
  0x0000000124981b68: mov    -0x40(%rbp),%r13
  0x0000000124981b6c: mov    -0x38(%rbp),%r14
  0x0000000124981b70: xor    %r12,%r12
  0x0000000124981b73: mov    %rax,%rsi
  0x0000000124981b76: mov    -0x48(%rbp),%rsp
  0x0000000124981b7a: movq   $0x0,-0x10(%rbp)
  0x0000000124981b82: callq  0x0000000124981b8c
  0x0000000124981b87: jmpq   0x0000000124981c36
  0x0000000124981b8c: lea    0x8(%rsp),%rax
  0x0000000124981b91: mov    %r13,-0x40(%rbp)
  0x0000000124981b95: mov    %r15,%rdi
  0x0000000124981b98: vzeroupper 
  0x0000000124981b9b: mov    %rbp,0x330(%r15)
  0x0000000124981ba2: mov    %rax,0x320(%r15)
  0x0000000124981ba9: test   $0xf,%esp
  0x0000000124981baf: je     0x0000000124981bc7
  0x0000000124981bb5: sub    $0x8,%rsp
  0x0000000124981bb9: callq  0x0000000114baae28 = InterpreterRuntime::exception_handler_for_exception(JavaThread*, oopDesc*)
  0x0000000124981bbe: add    $0x8,%rsp
  0x0000000124981bc2: jmpq   0x0000000124981bcc
  0x0000000124981bc7: callq  0x0000000114baae28 = InterpreterRuntime::exception_handler_for_exception(JavaThread*, oopDesc*)
  0x0000000124981bcc: movabs $0x0,%r10
  0x0000000124981bd6: mov    %r10,0x320(%r15)
  0x0000000124981bdd: movabs $0x0,%r10
  0x0000000124981be7: mov    %r10,0x330(%r15)
  0x0000000124981bee: movabs $0x0,%r10
  0x0000000124981bf8: mov    %r10,0x328(%r15)
  0x0000000124981bff: vzeroupper 
  0x0000000124981c02: cmpq   $0x0,0x8(%r15)
  0x0000000124981c0a: je     0x0000000124981c15
  0x0000000124981c10: jmpq   0x0000000124975780
  0x0000000124981c15: mov    0x380(%r15),%rdx
  0x0000000124981c1c: movabs $0x0,%r10
  0x0000000124981c26: mov    %r10,0x380(%r15)
  0x0000000124981c2d: mov    -0x40(%rbp),%r13
  0x0000000124981c31: mov    -0x38(%rbp),%r14
  0x0000000124981c35: retq   
  0x0000000124981c36: push   %rdx
  0x0000000124981c37: jmpq   *%rax
  0x0000000124981c39: mov    -0x48(%rbp),%rsp
  0x0000000124981c3d: movq   $0x0,-0x10(%rbp)
  0x0000000124981c45: mov    0x44c(%r15),%edx
  0x0000000124981c4c: or     $0x2,%edx
  0x0000000124981c4f: mov    %edx,0x44c(%r15)
  0x0000000124981c56: mov    0x8(%rbp),%rsi
  0x0000000124981c5a: mov    %rsi,%rdi
  0x0000000124981c5d: test   $0xf,%esp
  0x0000000124981c63: je     0x0000000124981c7b
  0x0000000124981c69: sub    $0x8,%rsp
  0x0000000124981c6d: callq  0x0000000114bad868 = InterpreterRuntime::interpreter_contains(unsigned char*)
  0x0000000124981c72: add    $0x8,%rsp
  0x0000000124981c76: jmpq   0x0000000124981c80
  0x0000000124981c7b: callq  0x0000000114bad868 = InterpreterRuntime::interpreter_contains(unsigned char*)
  0x0000000124981c80: test   %eax,%eax
  0x0000000124981c82: jne    0x000000012498203a
  0x0000000124981c88: mov    -0x18(%rbp),%rax
  0x0000000124981c8c: mov    0x8(%rax),%rax
  0x0000000124981c90: movzwl 0x34(%rax),%eax
  0x0000000124981c94: shl    $0x3,%eax
  0x0000000124981c97: mov    -0x38(%rbp),%r14
  0x0000000124981c9b: sub    %rax,%r14
  0x0000000124981c9e: add    $0x8,%r14
  0x0000000124981ca2: mov    %r14,%rdx
  0x0000000124981ca5: mov    %rax,%rsi
  0x0000000124981ca8: mov    %r15,%rdi
  0x0000000124981cab: test   $0xf,%esp
  0x0000000124981cb1: je     0x0000000124981cc9
  0x0000000124981cb7: sub    $0x8,%rsp
  0x0000000124981cbb: callq  0x0000000114a8311a = Deoptimization::popframe_preserve_args(JavaThread*, int, void*)
  0x0000000124981cc0: add    $0x8,%rsp
  0x0000000124981cc4: jmpq   0x0000000124981cce
  0x0000000124981cc9: callq  0x0000000114a8311a = Deoptimization::popframe_preserve_args(JavaThread*, int, void*)
  0x0000000124981cce: mov    0x3dd(%r15),%bl
  0x0000000124981cd5: movb   $0x0,0x3dd(%r15)
  0x0000000124981cdd: mov    -0x18(%rbp),%rcx
  0x0000000124981ce1: mov    0x20(%rcx),%ecx
  0x0000000124981ce4: test   $0x20,%ecx
  0x0000000124981cea: je     0x0000000124981dee
  0x0000000124981cf0: test   $0xff,%bl
  0x0000000124981cf3: jne    0x0000000124981ef9
  0x0000000124981cf9: lea    -0x58(%rbp),%rsi
  0x0000000124981cfd: mov    0x8(%rsi),%rax
  0x0000000124981d01: test   %rax,%rax
  0x0000000124981d04: jne    0x0000000124981d0f
  0x0000000124981d0a: jmpq   0x0000000124981dee
  0x0000000124981d0f: mov    %r13,-0x40(%rbp)
  0x0000000124981d13: lea    (%rsi),%rax
  0x0000000124981d16: mov    0x8(%rsi),%rcx
  0x0000000124981d1a: movq   $0x0,0x8(%rsi)
  0x0000000124981d22: mov    (%rcx),%rdx
  0x0000000124981d25: and    $0x7,%rdx
  0x0000000124981d29: cmp    $0x5,%rdx
  0x0000000124981d2d: je     0x0000000124981dea
  0x0000000124981d33: mov    (%rax),%rdx
  0x0000000124981d36: test   %rdx,%rdx
  0x0000000124981d39: je     0x0000000124981dea
  0x0000000124981d3f: lock cmpxchg %rdx,(%rcx)
  0x0000000124981d44: je     0x0000000124981dea
  0x0000000124981d4a: mov    %rcx,0x8(%rsi)
  0x0000000124981d4e: callq  0x0000000124981d58
  0x0000000124981d53: jmpq   0x0000000124981dea
  0x0000000124981d58: lea    0x8(%rsp),%rax
  0x0000000124981d5d: mov    %r13,-0x40(%rbp)
  0x0000000124981d61: mov    %r15,%rdi
  0x0000000124981d64: vzeroupper 
  0x0000000124981d67: mov    %rbp,0x330(%r15)
  0x0000000124981d6e: mov    %rax,0x320(%r15)
  0x0000000124981d75: test   $0xf,%esp
  0x0000000124981d7b: je     0x0000000124981d93
  0x0000000124981d81: sub    $0x8,%rsp
  0x0000000124981d85: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x0000000124981d8a: add    $0x8,%rsp
  0x0000000124981d8e: jmpq   0x0000000124981d98
  0x0000000124981d93: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x0000000124981d98: movabs $0x0,%r10
  0x0000000124981da2: mov    %r10,0x320(%r15)
  0x0000000124981da9: movabs $0x0,%r10
  0x0000000124981db3: mov    %r10,0x330(%r15)
  0x0000000124981dba: movabs $0x0,%r10
  0x0000000124981dc4: mov    %r10,0x328(%r15)
  0x0000000124981dcb: vzeroupper 
  0x0000000124981dce: cmpq   $0x0,0x8(%r15)
  0x0000000124981dd6: je     0x0000000124981de1
  0x0000000124981ddc: jmpq   0x0000000124975780
  0x0000000124981de1: mov    -0x40(%rbp),%r13
  0x0000000124981de5: mov    -0x38(%rbp),%r14
  0x0000000124981de9: retq   
  0x0000000124981dea: mov    -0x40(%rbp),%r13
  0x0000000124981dee: mov    -0x48(%rbp),%rsi
  0x0000000124981df2: lea    -0x48(%rbp),%rbx
  0x0000000124981df6: jmpq   0x0000000124981ef4
  0x0000000124981dfb: mov    %rsi,%rsi
  0x0000000124981dfe: mov    %r13,-0x40(%rbp)
  0x0000000124981e02: lea    (%rsi),%rax
  0x0000000124981e05: mov    0x8(%rsi),%rcx
  0x0000000124981e09: movq   $0x0,0x8(%rsi)
  0x0000000124981e11: mov    (%rcx),%rdx
  0x0000000124981e14: and    $0x7,%rdx
  0x0000000124981e18: cmp    $0x5,%rdx
  0x0000000124981e1c: je     0x0000000124981ed9
  0x0000000124981e22: mov    (%rax),%rdx
  0x0000000124981e25: test   %rdx,%rdx
  0x0000000124981e28: je     0x0000000124981ed9
  0x0000000124981e2e: lock cmpxchg %rdx,(%rcx)
  0x0000000124981e33: je     0x0000000124981ed9
  0x0000000124981e39: mov    %rcx,0x8(%rsi)
  0x0000000124981e3d: callq  0x0000000124981e47
  0x0000000124981e42: jmpq   0x0000000124981ed9
  0x0000000124981e47: lea    0x8(%rsp),%rax
  0x0000000124981e4c: mov    %r13,-0x40(%rbp)
  0x0000000124981e50: mov    %r15,%rdi
  0x0000000124981e53: vzeroupper 
  0x0000000124981e56: mov    %rbp,0x330(%r15)
  0x0000000124981e5d: mov    %rax,0x320(%r15)
  0x0000000124981e64: test   $0xf,%esp
  0x0000000124981e6a: je     0x0000000124981e82
  0x0000000124981e70: sub    $0x8,%rsp
  0x0000000124981e74: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x0000000124981e79: add    $0x8,%rsp
  0x0000000124981e7d: jmpq   0x0000000124981e87
  0x0000000124981e82: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x0000000124981e87: movabs $0x0,%r10
  0x0000000124981e91: mov    %r10,0x320(%r15)
  0x0000000124981e98: movabs $0x0,%r10
  0x0000000124981ea2: mov    %r10,0x330(%r15)
  0x0000000124981ea9: movabs $0x0,%r10
  0x0000000124981eb3: mov    %r10,0x328(%r15)
  0x0000000124981eba: vzeroupper 
  0x0000000124981ebd: cmpq   $0x0,0x8(%r15)
  0x0000000124981ec5: je     0x0000000124981ed0
  0x0000000124981ecb: jmpq   0x0000000124975780
  0x0000000124981ed0: mov    -0x40(%rbp),%r13
  0x0000000124981ed4: mov    -0x38(%rbp),%r14
  0x0000000124981ed8: retq   
  0x0000000124981ed9: mov    -0x40(%rbp),%r13
  0x0000000124981edd: jmpq   0x0000000124981dee
  0x0000000124981ee2: cmpq   $0x0,0x8(%rsi)
  0x0000000124981eea: jne    0x0000000124981dfb
  0x0000000124981ef0: add    $0x10,%rsi
  0x0000000124981ef4: cmp    %rbx,%rsi
  0x0000000124981ef7: jne    0x0000000124981ee2
  0x0000000124981ef9: cmpb   $0x0,-0xf7c7e26(%rip)        # 0x00000001151ba0da = DTraceMethodProbes
  0x0000000124981f00: je     0x0000000124981f30
  0x0000000124981f06: mov    -0x18(%rbp),%rsi
  0x0000000124981f0a: mov    %r15,%rdi
  0x0000000124981f0d: test   $0xf,%esp
  0x0000000124981f13: je     0x0000000124981f2b
  0x0000000124981f19: sub    $0x8,%rsp
  0x0000000124981f1d: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x0000000124981f22: add    $0x8,%rsp
  0x0000000124981f26: jmpq   0x0000000124981f30
  0x0000000124981f2b: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x0000000124981f30: mov    -0x8(%rbp),%rbx
  0x0000000124981f34: cmpl   $0x3,0x408(%r15)
  0x0000000124981f3f: je     0x0000000124982028
  0x0000000124981f45: cmp    0x418(%r15),%rbx
  0x0000000124981f4c: jle    0x0000000124982028
  0x0000000124981f52: mov    %r15,%rdi
  0x0000000124981f55: test   $0xf,%esp
  0x0000000124981f5b: je     0x0000000124981f73
  0x0000000124981f61: sub    $0x8,%rsp
  0x0000000124981f65: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x0000000124981f6a: add    $0x8,%rsp
  0x0000000124981f6e: jmpq   0x0000000124981f78
  0x0000000124981f73: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x0000000124981f78: callq  0x0000000124981f82
  0x0000000124981f7d: jmpq   0x0000000124982014
  0x0000000124981f82: lea    0x8(%rsp),%rax
  0x0000000124981f87: mov    %r13,-0x40(%rbp)
  0x0000000124981f8b: mov    %r15,%rdi
  0x0000000124981f8e: vzeroupper 
  0x0000000124981f91: mov    %rbp,0x330(%r15)
  0x0000000124981f98: mov    %rax,0x320(%r15)
  0x0000000124981f9f: test   $0xf,%esp
  0x0000000124981fa5: je     0x0000000124981fbd
  0x0000000124981fab: sub    $0x8,%rsp
  0x0000000124981faf: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x0000000124981fb4: add    $0x8,%rsp
  0x0000000124981fb8: jmpq   0x0000000124981fc2
  0x0000000124981fbd: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x0000000124981fc2: movabs $0x0,%r10
  0x0000000124981fcc: mov    %r10,0x320(%r15)
  0x0000000124981fd3: movabs $0x0,%r10
  0x0000000124981fdd: mov    %r10,0x330(%r15)
  0x0000000124981fe4: movabs $0x0,%r10
  0x0000000124981fee: mov    %r10,0x328(%r15)
  0x0000000124981ff5: vzeroupper 
  0x0000000124981ff8: cmpq   $0x0,0x8(%r15)
  0x0000000124982000: je     0x000000012498200b
  0x0000000124982006: jmpq   0x0000000124975780
  0x000000012498200b: mov    -0x40(%rbp),%r13
  0x000000012498200f: mov    -0x38(%rbp),%r14
  0x0000000124982013: retq   
  0x0000000124982014: movabs $0x114ff3493,%rdi
  0x000000012498201e: and    $0xfffffffffffffff0,%rsp
  0x0000000124982022: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124982027: hlt    
  0x0000000124982028: leaveq 
  0x0000000124982029: pop    %rdx
  0x000000012498202a: mov    %rbx,%rsp
  0x000000012498202d: movl   $0x4,0x44c(%r15)
  0x0000000124982038: jmpq   *%rdx
  0x000000012498203a: mov    0x3dd(%r15),%bl
  0x0000000124982041: movb   $0x0,0x3dd(%r15)
  0x0000000124982049: mov    -0x18(%rbp),%rcx
  0x000000012498204d: mov    0x20(%rcx),%ecx
  0x0000000124982050: test   $0x20,%ecx
  0x0000000124982056: je     0x000000012498215a
  0x000000012498205c: test   $0xff,%bl
  0x000000012498205f: jne    0x0000000124982265
  0x0000000124982065: lea    -0x58(%rbp),%rsi
  0x0000000124982069: mov    0x8(%rsi),%rax
  0x000000012498206d: test   %rax,%rax
  0x0000000124982070: jne    0x000000012498207b
  0x0000000124982076: jmpq   0x000000012498215a
  0x000000012498207b: mov    %r13,-0x40(%rbp)
  0x000000012498207f: lea    (%rsi),%rax
  0x0000000124982082: mov    0x8(%rsi),%rcx
  0x0000000124982086: movq   $0x0,0x8(%rsi)
  0x000000012498208e: mov    (%rcx),%rdx
  0x0000000124982091: and    $0x7,%rdx
  0x0000000124982095: cmp    $0x5,%rdx
  0x0000000124982099: je     0x0000000124982156
  0x000000012498209f: mov    (%rax),%rdx
  0x00000001249820a2: test   %rdx,%rdx
  0x00000001249820a5: je     0x0000000124982156
  0x00000001249820ab: lock cmpxchg %rdx,(%rcx)
  0x00000001249820b0: je     0x0000000124982156
  0x00000001249820b6: mov    %rcx,0x8(%rsi)
  0x00000001249820ba: callq  0x00000001249820c4
  0x00000001249820bf: jmpq   0x0000000124982156
  0x00000001249820c4: lea    0x8(%rsp),%rax
  0x00000001249820c9: mov    %r13,-0x40(%rbp)
  0x00000001249820cd: mov    %r15,%rdi
  0x00000001249820d0: vzeroupper 
  0x00000001249820d3: mov    %rbp,0x330(%r15)
  0x00000001249820da: mov    %rax,0x320(%r15)
  0x00000001249820e1: test   $0xf,%esp
  0x00000001249820e7: je     0x00000001249820ff
  0x00000001249820ed: sub    $0x8,%rsp
  0x00000001249820f1: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00000001249820f6: add    $0x8,%rsp
  0x00000001249820fa: jmpq   0x0000000124982104
  0x00000001249820ff: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x0000000124982104: movabs $0x0,%r10
  0x000000012498210e: mov    %r10,0x320(%r15)
  0x0000000124982115: movabs $0x0,%r10
  0x000000012498211f: mov    %r10,0x330(%r15)
  0x0000000124982126: movabs $0x0,%r10
  0x0000000124982130: mov    %r10,0x328(%r15)
  0x0000000124982137: vzeroupper 
  0x000000012498213a: cmpq   $0x0,0x8(%r15)
  0x0000000124982142: je     0x000000012498214d
  0x0000000124982148: jmpq   0x0000000124975780
  0x000000012498214d: mov    -0x40(%rbp),%r13
  0x0000000124982151: mov    -0x38(%rbp),%r14
  0x0000000124982155: retq   
  0x0000000124982156: mov    -0x40(%rbp),%r13
  0x000000012498215a: mov    -0x48(%rbp),%rsi
  0x000000012498215e: lea    -0x48(%rbp),%rbx
  0x0000000124982162: jmpq   0x0000000124982260
  0x0000000124982167: mov    %rsi,%rsi
  0x000000012498216a: mov    %r13,-0x40(%rbp)
  0x000000012498216e: lea    (%rsi),%rax
  0x0000000124982171: mov    0x8(%rsi),%rcx
  0x0000000124982175: movq   $0x0,0x8(%rsi)
  0x000000012498217d: mov    (%rcx),%rdx
  0x0000000124982180: and    $0x7,%rdx
  0x0000000124982184: cmp    $0x5,%rdx
  0x0000000124982188: je     0x0000000124982245
  0x000000012498218e: mov    (%rax),%rdx
  0x0000000124982191: test   %rdx,%rdx
  0x0000000124982194: je     0x0000000124982245
  0x000000012498219a: lock cmpxchg %rdx,(%rcx)
  0x000000012498219f: je     0x0000000124982245
  0x00000001249821a5: mov    %rcx,0x8(%rsi)
  0x00000001249821a9: callq  0x00000001249821b3
  0x00000001249821ae: jmpq   0x0000000124982245
  0x00000001249821b3: lea    0x8(%rsp),%rax
  0x00000001249821b8: mov    %r13,-0x40(%rbp)
  0x00000001249821bc: mov    %r15,%rdi
  0x00000001249821bf: vzeroupper 
  0x00000001249821c2: mov    %rbp,0x330(%r15)
  0x00000001249821c9: mov    %rax,0x320(%r15)
  0x00000001249821d0: test   $0xf,%esp
  0x00000001249821d6: je     0x00000001249821ee
  0x00000001249821dc: sub    $0x8,%rsp
  0x00000001249821e0: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00000001249821e5: add    $0x8,%rsp
  0x00000001249821e9: jmpq   0x00000001249821f3
  0x00000001249821ee: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00000001249821f3: movabs $0x0,%r10
  0x00000001249821fd: mov    %r10,0x320(%r15)
  0x0000000124982204: movabs $0x0,%r10
  0x000000012498220e: mov    %r10,0x330(%r15)
  0x0000000124982215: movabs $0x0,%r10
  0x000000012498221f: mov    %r10,0x328(%r15)
  0x0000000124982226: vzeroupper 
  0x0000000124982229: cmpq   $0x0,0x8(%r15)
  0x0000000124982231: je     0x000000012498223c
  0x0000000124982237: jmpq   0x0000000124975780
  0x000000012498223c: mov    -0x40(%rbp),%r13
  0x0000000124982240: mov    -0x38(%rbp),%r14
  0x0000000124982244: retq   
  0x0000000124982245: mov    -0x40(%rbp),%r13
  0x0000000124982249: jmpq   0x000000012498215a
  0x000000012498224e: cmpq   $0x0,0x8(%rsi)
  0x0000000124982256: jne    0x0000000124982167
  0x000000012498225c: add    $0x10,%rsi
  0x0000000124982260: cmp    %rbx,%rsi
  0x0000000124982263: jne    0x000000012498224e
  0x0000000124982265: cmpb   $0x0,-0xf7c8192(%rip)        # 0x00000001151ba0da = DTraceMethodProbes
  0x000000012498226c: je     0x000000012498229c
  0x0000000124982272: mov    -0x18(%rbp),%rsi
  0x0000000124982276: mov    %r15,%rdi
  0x0000000124982279: test   $0xf,%esp
  0x000000012498227f: je     0x0000000124982297
  0x0000000124982285: sub    $0x8,%rsp
  0x0000000124982289: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000012498228e: add    $0x8,%rsp
  0x0000000124982292: jmpq   0x000000012498229c
  0x0000000124982297: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000012498229c: mov    -0x8(%rbp),%rbx
  0x00000001249822a0: cmpl   $0x3,0x408(%r15)
  0x00000001249822ab: je     0x0000000124982394
  0x00000001249822b1: cmp    0x418(%r15),%rbx
  0x00000001249822b8: jle    0x0000000124982394
  0x00000001249822be: mov    %r15,%rdi
  0x00000001249822c1: test   $0xf,%esp
  0x00000001249822c7: je     0x00000001249822df
  0x00000001249822cd: sub    $0x8,%rsp
  0x00000001249822d1: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00000001249822d6: add    $0x8,%rsp
  0x00000001249822da: jmpq   0x00000001249822e4
  0x00000001249822df: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00000001249822e4: callq  0x00000001249822ee
  0x00000001249822e9: jmpq   0x0000000124982380
  0x00000001249822ee: lea    0x8(%rsp),%rax
  0x00000001249822f3: mov    %r13,-0x40(%rbp)
  0x00000001249822f7: mov    %r15,%rdi
  0x00000001249822fa: vzeroupper 
  0x00000001249822fd: mov    %rbp,0x330(%r15)
  0x0000000124982304: mov    %rax,0x320(%r15)
  0x000000012498230b: test   $0xf,%esp
  0x0000000124982311: je     0x0000000124982329
  0x0000000124982317: sub    $0x8,%rsp
  0x000000012498231b: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x0000000124982320: add    $0x8,%rsp
  0x0000000124982324: jmpq   0x000000012498232e
  0x0000000124982329: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000012498232e: movabs $0x0,%r10
  0x0000000124982338: mov    %r10,0x320(%r15)
  0x000000012498233f: movabs $0x0,%r10
  0x0000000124982349: mov    %r10,0x330(%r15)
  0x0000000124982350: movabs $0x0,%r10
  0x000000012498235a: mov    %r10,0x328(%r15)
  0x0000000124982361: vzeroupper 
  0x0000000124982364: cmpq   $0x0,0x8(%r15)
  0x000000012498236c: je     0x0000000124982377
  0x0000000124982372: jmpq   0x0000000124975780
  0x0000000124982377: mov    -0x40(%rbp),%r13
  0x000000012498237b: mov    -0x38(%rbp),%r14
  0x000000012498237f: retq   
  0x0000000124982380: movabs $0x114ff3493,%rdi
  0x000000012498238a: and    $0xfffffffffffffff0,%rsp
  0x000000012498238e: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124982393: hlt    
  0x0000000124982394: leaveq 
  0x0000000124982395: pop    %rdx
  0x0000000124982396: mov    %rbx,%rsp
  0x0000000124982399: mov    %rsp,%rsi
  0x000000012498239c: mov    -0x10(%rbp),%rdx
  0x00000001249823a0: vzeroupper 
  0x00000001249823a3: mov    %rbp,0x330(%r15)
  0x00000001249823aa: movabs $0x1249823a0,%r10
  0x00000001249823b4: mov    %r10,0x328(%r15)
  0x00000001249823bb: mov    %rsp,0x320(%r15)
  0x00000001249823c2: mov    %r15,%rdi
  0x00000001249823c5: test   $0xf,%esp
  0x00000001249823cb: je     0x00000001249823e3
  0x00000001249823d1: sub    $0x8,%rsp
  0x00000001249823d5: callq  0x0000000114badfa0 = InterpreterRuntime::popframe_move_outgoing_args(JavaThread*, void*, void*)
  0x00000001249823da: add    $0x8,%rsp
  0x00000001249823de: jmpq   0x00000001249823e8
  0x00000001249823e3: callq  0x0000000114badfa0 = InterpreterRuntime::popframe_move_outgoing_args(JavaThread*, void*, void*)
  0x00000001249823e8: movabs $0x0,%r10
  0x00000001249823f2: mov    %r10,0x320(%r15)
  0x00000001249823f9: movabs $0x0,%r10
  0x0000000124982403: mov    %r10,0x330(%r15)
  0x000000012498240a: movabs $0x0,%r10
  0x0000000124982414: mov    %r10,0x328(%r15)
  0x000000012498241b: vzeroupper 
  0x000000012498241e: mov    -0x10(%rbp),%rsp
  0x0000000124982422: movq   $0x0,-0x10(%rbp)
  0x000000012498242a: mov    -0x40(%rbp),%r13
  0x000000012498242e: mov    -0x38(%rbp),%r14
  0x0000000124982432: push   %rax
  0x0000000124982433: push   %rbx
  0x0000000124982434: mov    -0x18(%rbp),%rbx
  0x0000000124982438: mov    0x10(%rbx),%rax
  0x000000012498243c: test   %rax,%rax
  0x000000012498243f: je     0x000000012498247c
  0x0000000124982445: mov    %r13,%rsi
  0x0000000124982448: mov    %rbx,%rdi
  0x000000012498244b: test   $0xf,%esp
  0x0000000124982451: je     0x0000000124982469
  0x0000000124982457: sub    $0x8,%rsp
  0x000000012498245b: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x0000000124982460: add    $0x8,%rsp
  0x0000000124982464: jmpq   0x000000012498246e
  0x0000000124982469: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012498246e: mov    0x10(%rbx),%rbx
  0x0000000124982472: add    $0x138,%rbx
  0x0000000124982479: add    %rbx,%rax
  0x000000012498247c: mov    %rax,-0x28(%rbp)
  0x0000000124982480: pop    %rbx
  0x0000000124982481: pop    %rax
  0x0000000124982482: movl   $0x0,0x44c(%r15)
  0x000000012498248d: cmpb   $0xb8,0x0(%r13)
  0x0000000124982492: jne    0x0000000124982565
  0x0000000124982498: mov    -0x18(%rbp),%rdx
  0x000000012498249c: mov    (%r14),%rax
  0x000000012498249f: callq  0x00000001249824a9
  0x00000001249824a4: jmpq   0x0000000124982559
  0x00000001249824a9: mov    %r13,%rcx
  0x00000001249824ac: mov    %rax,%rsi
  0x00000001249824af: lea    0x8(%rsp),%rax
  0x00000001249824b4: mov    %r13,-0x40(%rbp)
  0x00000001249824b8: mov    %r15,%rdi
  0x00000001249824bb: vzeroupper 
  0x00000001249824be: mov    %rbp,0x330(%r15)
  0x00000001249824c5: mov    %rax,0x320(%r15)
  0x00000001249824cc: test   $0xf,%esp
  0x00000001249824d2: je     0x00000001249824ea
  0x00000001249824d8: sub    $0x8,%rsp
  0x00000001249824dc: callq  0x0000000114bae17c = InterpreterRuntime::member_name_arg_or_null(JavaThread*, unsigned char*, Method*, unsigned char*)
  0x00000001249824e1: add    $0x8,%rsp
  0x00000001249824e5: jmpq   0x00000001249824ef
  0x00000001249824ea: callq  0x0000000114bae17c = InterpreterRuntime::member_name_arg_or_null(JavaThread*, unsigned char*, Method*, unsigned char*)
  0x00000001249824ef: movabs $0x0,%r10
  0x00000001249824f9: mov    %r10,0x320(%r15)
  0x0000000124982500: movabs $0x0,%r10
  0x000000012498250a: mov    %r10,0x330(%r15)
  0x0000000124982511: movabs $0x0,%r10
  0x000000012498251b: mov    %r10,0x328(%r15)
  0x0000000124982522: vzeroupper 
  0x0000000124982525: cmpq   $0x0,0x8(%r15)
  0x000000012498252d: je     0x0000000124982538
  0x0000000124982533: jmpq   0x0000000124975780
  0x0000000124982538: mov    0x380(%r15),%rax
  0x000000012498253f: movabs $0x0,%r10
  0x0000000124982549: mov    %r10,0x380(%r15)
  0x0000000124982550: mov    -0x40(%rbp),%r13
  0x0000000124982554: mov    -0x38(%rbp),%r14
  0x0000000124982558: retq   
  0x0000000124982559: test   %rax,%rax
  0x000000012498255c: je     0x0000000124982565
  0x0000000124982562: mov    %rax,(%rbx)
  0x0000000124982565: movzbl 0x0(%r13),%ebx
  0x000000012498256a: movabs $0x1151d7a20,%r10
  0x0000000124982574: jmpq   *(%r10,%rbx,8)
  0x0000000124982578: pop    %rax
  0x0000000124982579: mov    %rax,0x380(%r15)
  0x0000000124982580: mov    0x3dd(%r15),%bl
  0x0000000124982587: movb   $0x0,0x3dd(%r15)
  0x000000012498258f: mov    -0x18(%rbp),%rcx
  0x0000000124982593: mov    0x20(%rcx),%ecx
  0x0000000124982596: test   $0x20,%ecx
  0x000000012498259c: je     0x000000012498273c
  0x00000001249825a2: test   $0xff,%bl
  0x00000001249825a5: jne    0x00000001249828e3
  0x00000001249825ab: lea    -0x58(%rbp),%rsi
  0x00000001249825af: mov    0x8(%rsi),%rax
  0x00000001249825b3: test   %rax,%rax
  0x00000001249825b6: jne    0x000000012498265d
  0x00000001249825bc: callq  0x00000001249825c6
  0x00000001249825c1: jmpq   0x0000000124982658
  0x00000001249825c6: lea    0x8(%rsp),%rax
  0x00000001249825cb: mov    %r13,-0x40(%rbp)
  0x00000001249825cf: mov    %r15,%rdi
  0x00000001249825d2: vzeroupper 
  0x00000001249825d5: mov    %rbp,0x330(%r15)
  0x00000001249825dc: mov    %rax,0x320(%r15)
  0x00000001249825e3: test   $0xf,%esp
  0x00000001249825e9: je     0x0000000124982601
  0x00000001249825ef: sub    $0x8,%rsp
  0x00000001249825f3: callq  0x0000000114babe0a = InterpreterRuntime::new_illegal_monitor_state_exception(JavaThread*)
  0x00000001249825f8: add    $0x8,%rsp
  0x00000001249825fc: jmpq   0x0000000124982606
  0x0000000124982601: callq  0x0000000114babe0a = InterpreterRuntime::new_illegal_monitor_state_exception(JavaThread*)
  0x0000000124982606: movabs $0x0,%r10
  0x0000000124982610: mov    %r10,0x320(%r15)
  0x0000000124982617: movabs $0x0,%r10
  0x0000000124982621: mov    %r10,0x330(%r15)
  0x0000000124982628: movabs $0x0,%r10
  0x0000000124982632: mov    %r10,0x328(%r15)
  0x0000000124982639: vzeroupper 
  0x000000012498263c: cmpq   $0x0,0x8(%r15)
  0x0000000124982644: je     0x000000012498264f
  0x000000012498264a: jmpq   0x0000000124975780
  0x000000012498264f: mov    -0x40(%rbp),%r13
  0x0000000124982653: mov    -0x38(%rbp),%r14
  0x0000000124982657: retq   
  0x0000000124982658: jmpq   0x000000012498273c
  0x000000012498265d: mov    %r13,-0x40(%rbp)
  0x0000000124982661: lea    (%rsi),%rax
  0x0000000124982664: mov    0x8(%rsi),%rcx
  0x0000000124982668: movq   $0x0,0x8(%rsi)
  0x0000000124982670: mov    (%rcx),%rdx
  0x0000000124982673: and    $0x7,%rdx
  0x0000000124982677: cmp    $0x5,%rdx
  0x000000012498267b: je     0x0000000124982738
  0x0000000124982681: mov    (%rax),%rdx
  0x0000000124982684: test   %rdx,%rdx
  0x0000000124982687: je     0x0000000124982738
  0x000000012498268d: lock cmpxchg %rdx,(%rcx)
  0x0000000124982692: je     0x0000000124982738
  0x0000000124982698: mov    %rcx,0x8(%rsi)
  0x000000012498269c: callq  0x00000001249826a6
  0x00000001249826a1: jmpq   0x0000000124982738
  0x00000001249826a6: lea    0x8(%rsp),%rax
  0x00000001249826ab: mov    %r13,-0x40(%rbp)
  0x00000001249826af: mov    %r15,%rdi
  0x00000001249826b2: vzeroupper 
  0x00000001249826b5: mov    %rbp,0x330(%r15)
  0x00000001249826bc: mov    %rax,0x320(%r15)
  0x00000001249826c3: test   $0xf,%esp
  0x00000001249826c9: je     0x00000001249826e1
  0x00000001249826cf: sub    $0x8,%rsp
  0x00000001249826d3: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00000001249826d8: add    $0x8,%rsp
  0x00000001249826dc: jmpq   0x00000001249826e6
  0x00000001249826e1: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00000001249826e6: movabs $0x0,%r10
  0x00000001249826f0: mov    %r10,0x320(%r15)
  0x00000001249826f7: movabs $0x0,%r10
  0x0000000124982701: mov    %r10,0x330(%r15)
  0x0000000124982708: movabs $0x0,%r10
  0x0000000124982712: mov    %r10,0x328(%r15)
  0x0000000124982719: vzeroupper 
  0x000000012498271c: cmpq   $0x0,0x8(%r15)
  0x0000000124982724: je     0x000000012498272f
  0x000000012498272a: jmpq   0x0000000124975780
  0x000000012498272f: mov    -0x40(%rbp),%r13
  0x0000000124982733: mov    -0x38(%rbp),%r14
  0x0000000124982737: retq   
  0x0000000124982738: mov    -0x40(%rbp),%r13
  0x000000012498273c: mov    -0x48(%rbp),%rsi
  0x0000000124982740: lea    -0x48(%rbp),%rbx
  0x0000000124982744: jmpq   0x00000001249828de
  0x0000000124982749: mov    %rsi,%rsi
  0x000000012498274c: mov    %r13,-0x40(%rbp)
  0x0000000124982750: lea    (%rsi),%rax
  0x0000000124982753: mov    0x8(%rsi),%rcx
  0x0000000124982757: movq   $0x0,0x8(%rsi)
  0x000000012498275f: mov    (%rcx),%rdx
  0x0000000124982762: and    $0x7,%rdx
  0x0000000124982766: cmp    $0x5,%rdx
  0x000000012498276a: je     0x0000000124982827
  0x0000000124982770: mov    (%rax),%rdx
  0x0000000124982773: test   %rdx,%rdx
  0x0000000124982776: je     0x0000000124982827
  0x000000012498277c: lock cmpxchg %rdx,(%rcx)
  0x0000000124982781: je     0x0000000124982827
  0x0000000124982787: mov    %rcx,0x8(%rsi)
  0x000000012498278b: callq  0x0000000124982795
  0x0000000124982790: jmpq   0x0000000124982827
  0x0000000124982795: lea    0x8(%rsp),%rax
  0x000000012498279a: mov    %r13,-0x40(%rbp)
  0x000000012498279e: mov    %r15,%rdi
  0x00000001249827a1: vzeroupper 
  0x00000001249827a4: mov    %rbp,0x330(%r15)
  0x00000001249827ab: mov    %rax,0x320(%r15)
  0x00000001249827b2: test   $0xf,%esp
  0x00000001249827b8: je     0x00000001249827d0
  0x00000001249827be: sub    $0x8,%rsp
  0x00000001249827c2: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00000001249827c7: add    $0x8,%rsp
  0x00000001249827cb: jmpq   0x00000001249827d5
  0x00000001249827d0: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00000001249827d5: movabs $0x0,%r10
  0x00000001249827df: mov    %r10,0x320(%r15)
  0x00000001249827e6: movabs $0x0,%r10
  0x00000001249827f0: mov    %r10,0x330(%r15)
  0x00000001249827f7: movabs $0x0,%r10
  0x0000000124982801: mov    %r10,0x328(%r15)
  0x0000000124982808: vzeroupper 
  0x000000012498280b: cmpq   $0x0,0x8(%r15)
  0x0000000124982813: je     0x000000012498281e
  0x0000000124982819: jmpq   0x0000000124975780
  0x000000012498281e: mov    -0x40(%rbp),%r13
  0x0000000124982822: mov    -0x38(%rbp),%r14
  0x0000000124982826: retq   
  0x0000000124982827: mov    -0x40(%rbp),%r13
  0x000000012498282b: callq  0x0000000124982835
  0x0000000124982830: jmpq   0x00000001249828c7
  0x0000000124982835: lea    0x8(%rsp),%rax
  0x000000012498283a: mov    %r13,-0x40(%rbp)
  0x000000012498283e: mov    %r15,%rdi
  0x0000000124982841: vzeroupper 
  0x0000000124982844: mov    %rbp,0x330(%r15)
  0x000000012498284b: mov    %rax,0x320(%r15)
  0x0000000124982852: test   $0xf,%esp
  0x0000000124982858: je     0x0000000124982870
  0x000000012498285e: sub    $0x8,%rsp
  0x0000000124982862: callq  0x0000000114babe0a = InterpreterRuntime::new_illegal_monitor_state_exception(JavaThread*)
  0x0000000124982867: add    $0x8,%rsp
  0x000000012498286b: jmpq   0x0000000124982875
  0x0000000124982870: callq  0x0000000114babe0a = InterpreterRuntime::new_illegal_monitor_state_exception(JavaThread*)
  0x0000000124982875: movabs $0x0,%r10
  0x000000012498287f: mov    %r10,0x320(%r15)
  0x0000000124982886: movabs $0x0,%r10
  0x0000000124982890: mov    %r10,0x330(%r15)
  0x0000000124982897: movabs $0x0,%r10
  0x00000001249828a1: mov    %r10,0x328(%r15)
  0x00000001249828a8: vzeroupper 
  0x00000001249828ab: cmpq   $0x0,0x8(%r15)
  0x00000001249828b3: je     0x00000001249828be
  0x00000001249828b9: jmpq   0x0000000124975780
  0x00000001249828be: mov    -0x40(%rbp),%r13
  0x00000001249828c2: mov    -0x38(%rbp),%r14
  0x00000001249828c6: retq   
  0x00000001249828c7: jmpq   0x000000012498273c
  0x00000001249828cc: cmpq   $0x0,0x8(%rsi)
  0x00000001249828d4: jne    0x0000000124982749
  0x00000001249828da: add    $0x10,%rsi
  0x00000001249828de: cmp    %rbx,%rsi
  0x00000001249828e1: jne    0x00000001249828cc
  0x00000001249828e3: cmpb   $0x0,-0xf7c8810(%rip)        # 0x00000001151ba0da = DTraceMethodProbes
  0x00000001249828ea: je     0x000000012498291a
  0x00000001249828f0: mov    -0x18(%rbp),%rsi
  0x00000001249828f4: mov    %r15,%rdi
  0x00000001249828f7: test   $0xf,%esp
  0x00000001249828fd: je     0x0000000124982915
  0x0000000124982903: sub    $0x8,%rsp
  0x0000000124982907: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000012498290c: add    $0x8,%rsp
  0x0000000124982910: jmpq   0x000000012498291a
  0x0000000124982915: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000012498291a: mov    -0x8(%rbp),%rbx
  0x000000012498291e: cmpl   $0x3,0x408(%r15)
  0x0000000124982929: je     0x0000000124982a12
  0x000000012498292f: cmp    0x418(%r15),%rbx
  0x0000000124982936: jle    0x0000000124982a12
  0x000000012498293c: mov    %r15,%rdi
  0x000000012498293f: test   $0xf,%esp
  0x0000000124982945: je     0x000000012498295d
  0x000000012498294b: sub    $0x8,%rsp
  0x000000012498294f: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x0000000124982954: add    $0x8,%rsp
  0x0000000124982958: jmpq   0x0000000124982962
  0x000000012498295d: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x0000000124982962: callq  0x000000012498296c
  0x0000000124982967: jmpq   0x00000001249829fe
  0x000000012498296c: lea    0x8(%rsp),%rax
  0x0000000124982971: mov    %r13,-0x40(%rbp)
  0x0000000124982975: mov    %r15,%rdi
  0x0000000124982978: vzeroupper 
  0x000000012498297b: mov    %rbp,0x330(%r15)
  0x0000000124982982: mov    %rax,0x320(%r15)
  0x0000000124982989: test   $0xf,%esp
  0x000000012498298f: je     0x00000001249829a7
  0x0000000124982995: sub    $0x8,%rsp
  0x0000000124982999: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000012498299e: add    $0x8,%rsp
  0x00000001249829a2: jmpq   0x00000001249829ac
  0x00000001249829a7: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00000001249829ac: movabs $0x0,%r10
  0x00000001249829b6: mov    %r10,0x320(%r15)
  0x00000001249829bd: movabs $0x0,%r10
  0x00000001249829c7: mov    %r10,0x330(%r15)
  0x00000001249829ce: movabs $0x0,%r10
  0x00000001249829d8: mov    %r10,0x328(%r15)
  0x00000001249829df: vzeroupper 
  0x00000001249829e2: cmpq   $0x0,0x8(%r15)
  0x00000001249829ea: je     0x00000001249829f5
  0x00000001249829f0: jmpq   0x0000000124975780
  0x00000001249829f5: mov    -0x40(%rbp),%r13
  0x00000001249829f9: mov    -0x38(%rbp),%r14
  0x00000001249829fd: retq   
  0x00000001249829fe: movabs $0x114ff3493,%rdi
  0x0000000124982a08: and    $0xfffffffffffffff0,%rsp
  0x0000000124982a0c: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124982a11: hlt    
  0x0000000124982a12: leaveq 
  0x0000000124982a13: pop    %rdx
  0x0000000124982a14: mov    %rbx,%rsp
  0x0000000124982a17: mov    0x380(%r15),%rax
  0x0000000124982a1e: movabs $0x0,%r10
  0x0000000124982a28: mov    %r10,0x380(%r15)
  0x0000000124982a2f: push   %rax
  0x0000000124982a30: push   %rdx
  0x0000000124982a31: mov    %rdx,%rsi
  0x0000000124982a34: mov    %r15,%rdi
  0x0000000124982a37: test   $0xf,%esp
  0x0000000124982a3d: je     0x0000000124982a55
  0x0000000124982a43: sub    $0x8,%rsp
  0x0000000124982a47: callq  0x0000000114e96672 = SharedRuntime::exception_handler_for_return_address(JavaThread*, unsigned char*)
  0x0000000124982a4c: add    $0x8,%rsp
  0x0000000124982a50: jmpq   0x0000000124982a5a
  0x0000000124982a55: callq  0x0000000114e96672 = SharedRuntime::exception_handler_for_return_address(JavaThread*, unsigned char*)
  0x0000000124982a5a: mov    %rax,%rbx
  0x0000000124982a5d: pop    %rdx
  0x0000000124982a5e: pop    %rax
  0x0000000124982a5f: jmpq   *%rbx
  0x0000000124982a61: nopl   0x0(%rax)
  0x0000000124982a68: add    %al,(%rax)
  0x0000000124982a6a: add    %al,(%rax)
  0x0000000124982a6c: add    %al,(%rax)
  0x0000000124982a6e: add    %al,(%rax)
  0x0000000124982a70: add    %al,(%rax)
  0x0000000124982a72: add    %al,(%rax)
  0x0000000124982a74: add    %al,(%rax)
  0x0000000124982a76: add    %al,(%rax)
  0x0000000124982a78: add    %al,(%rax)
  0x0000000124982a7a: add    %al,(%rax)
  0x0000000124982a7c: add    %al,(%rax)
  0x0000000124982a7e: add    %al,(%rax)

----------------------------------------------------------------------
throw exception entrypoints  [0x0000000124982aa0, 0x0000000124982f40]  1184 bytes

  0x0000000124982aa0: mov    -0x48(%rbp),%rsp
  0x0000000124982aa4: movq   $0x0,-0x10(%rbp)
  0x0000000124982aac: callq  0x0000000124982ab6
  0x0000000124982ab1: jmpq   0x0000000124982b4b
  0x0000000124982ab6: mov    %rbx,%rdx
  0x0000000124982ab9: lea    0x8(%rsp),%rax
  0x0000000124982abe: mov    %r13,-0x40(%rbp)
  0x0000000124982ac2: mov    %r15,%rdi
  0x0000000124982ac5: vzeroupper 
  0x0000000124982ac8: mov    %rbp,0x330(%r15)
  0x0000000124982acf: mov    %rax,0x320(%r15)
  0x0000000124982ad6: test   $0xf,%esp
  0x0000000124982adc: je     0x0000000124982af4
  0x0000000124982ae2: sub    $0x8,%rsp
  0x0000000124982ae6: callq  0x0000000114baabec = InterpreterRuntime::throw_ArrayIndexOutOfBoundsException(JavaThread*, arrayOopDesc*, int)
  0x0000000124982aeb: add    $0x8,%rsp
  0x0000000124982aef: jmpq   0x0000000124982af9
  0x0000000124982af4: callq  0x0000000114baabec = InterpreterRuntime::throw_ArrayIndexOutOfBoundsException(JavaThread*, arrayOopDesc*, int)
  0x0000000124982af9: movabs $0x0,%r10
  0x0000000124982b03: mov    %r10,0x320(%r15)
  0x0000000124982b0a: movabs $0x0,%r10
  0x0000000124982b14: mov    %r10,0x330(%r15)
  0x0000000124982b1b: movabs $0x0,%r10
  0x0000000124982b25: mov    %r10,0x328(%r15)
  0x0000000124982b2c: vzeroupper 
  0x0000000124982b2f: cmpq   $0x0,0x8(%r15)
  0x0000000124982b37: je     0x0000000124982b42
  0x0000000124982b3d: jmpq   0x0000000124975780
  0x0000000124982b42: mov    -0x40(%rbp),%r13
  0x0000000124982b46: mov    -0x38(%rbp),%r14
  0x0000000124982b4a: retq   
  0x0000000124982b4b: pop    %rdx
  0x0000000124982b4c: mov    -0x48(%rbp),%rsp
  0x0000000124982b50: movq   $0x0,-0x10(%rbp)
  0x0000000124982b58: movabs $0x115051506,%rsi
  0x0000000124982b62: callq  0x0000000124982b6c
  0x0000000124982b67: jmpq   0x0000000124982c16
  0x0000000124982b6c: lea    0x8(%rsp),%rax
  0x0000000124982b71: mov    %r13,-0x40(%rbp)
  0x0000000124982b75: mov    %r15,%rdi
  0x0000000124982b78: vzeroupper 
  0x0000000124982b7b: mov    %rbp,0x330(%r15)
  0x0000000124982b82: mov    %rax,0x320(%r15)
  0x0000000124982b89: test   $0xf,%esp
  0x0000000124982b8f: je     0x0000000124982ba7
  0x0000000124982b95: sub    $0x8,%rsp
  0x0000000124982b99: callq  0x0000000114baaaba = InterpreterRuntime::create_klass_exception(JavaThread*, char*, oopDesc*)
  0x0000000124982b9e: add    $0x8,%rsp
  0x0000000124982ba2: jmpq   0x0000000124982bac
  0x0000000124982ba7: callq  0x0000000114baaaba = InterpreterRuntime::create_klass_exception(JavaThread*, char*, oopDesc*)
  0x0000000124982bac: movabs $0x0,%r10
  0x0000000124982bb6: mov    %r10,0x320(%r15)
  0x0000000124982bbd: movabs $0x0,%r10
  0x0000000124982bc7: mov    %r10,0x330(%r15)
  0x0000000124982bce: movabs $0x0,%r10
  0x0000000124982bd8: mov    %r10,0x328(%r15)
  0x0000000124982bdf: vzeroupper 
  0x0000000124982be2: cmpq   $0x0,0x8(%r15)
  0x0000000124982bea: je     0x0000000124982bf5
  0x0000000124982bf0: jmpq   0x0000000124975780
  0x0000000124982bf5: mov    0x380(%r15),%rax
  0x0000000124982bfc: movabs $0x0,%r10
  0x0000000124982c06: mov    %r10,0x380(%r15)
  0x0000000124982c0d: mov    -0x40(%rbp),%r13
  0x0000000124982c11: mov    -0x38(%rbp),%r14
  0x0000000124982c15: retq   
  0x0000000124982c16: jmpq   0x0000000124981b73
  0x0000000124982c1b: mov    -0x48(%rbp),%rsp
  0x0000000124982c1f: movq   $0x0,-0x10(%rbp)
  0x0000000124982c27: movabs $0x115051524,%rsi
  0x0000000124982c31: movabs $0x114ff413f,%rdx
  0x0000000124982c3b: callq  0x0000000124982c45
  0x0000000124982c40: jmpq   0x0000000124982cef
  0x0000000124982c45: lea    0x8(%rsp),%rax
  0x0000000124982c4a: mov    %r13,-0x40(%rbp)
  0x0000000124982c4e: mov    %r15,%rdi
  0x0000000124982c51: vzeroupper 
  0x0000000124982c54: mov    %rbp,0x330(%r15)
  0x0000000124982c5b: mov    %rax,0x320(%r15)
  0x0000000124982c62: test   $0xf,%esp
  0x0000000124982c68: je     0x0000000124982c80
  0x0000000124982c6e: sub    $0x8,%rsp
  0x0000000124982c72: callq  0x0000000114baa9b4 = InterpreterRuntime::create_exception(JavaThread*, char*, char*)
  0x0000000124982c77: add    $0x8,%rsp
  0x0000000124982c7b: jmpq   0x0000000124982c85
  0x0000000124982c80: callq  0x0000000114baa9b4 = InterpreterRuntime::create_exception(JavaThread*, char*, char*)
  0x0000000124982c85: movabs $0x0,%r10
  0x0000000124982c8f: mov    %r10,0x320(%r15)
  0x0000000124982c96: movabs $0x0,%r10
  0x0000000124982ca0: mov    %r10,0x330(%r15)
  0x0000000124982ca7: movabs $0x0,%r10
  0x0000000124982cb1: mov    %r10,0x328(%r15)
  0x0000000124982cb8: vzeroupper 
  0x0000000124982cbb: cmpq   $0x0,0x8(%r15)
  0x0000000124982cc3: je     0x0000000124982cce
  0x0000000124982cc9: jmpq   0x0000000124975780
  0x0000000124982cce: mov    0x380(%r15),%rax
  0x0000000124982cd5: movabs $0x0,%r10
  0x0000000124982cdf: mov    %r10,0x380(%r15)
  0x0000000124982ce6: mov    -0x40(%rbp),%r13
  0x0000000124982cea: mov    -0x38(%rbp),%r14
  0x0000000124982cee: retq   
  0x0000000124982cef: jmpq   0x0000000124981b73
  0x0000000124982cf4: pop    %rsi
  0x0000000124982cf5: mov    -0x48(%rbp),%rsp
  0x0000000124982cf9: movq   $0x0,-0x10(%rbp)
  0x0000000124982d01: callq  0x0000000124982d0b
  0x0000000124982d06: jmpq   0x0000000124982d9d
  0x0000000124982d0b: lea    0x8(%rsp),%rax
  0x0000000124982d10: mov    %r13,-0x40(%rbp)
  0x0000000124982d14: mov    %r15,%rdi
  0x0000000124982d17: vzeroupper 
  0x0000000124982d1a: mov    %rbp,0x330(%r15)
  0x0000000124982d21: mov    %rax,0x320(%r15)
  0x0000000124982d28: test   $0xf,%esp
  0x0000000124982d2e: je     0x0000000124982d46
  0x0000000124982d34: sub    $0x8,%rsp
  0x0000000124982d38: callq  0x0000000114baad28 = InterpreterRuntime::throw_ClassCastException(JavaThread*, oopDesc*)
  0x0000000124982d3d: add    $0x8,%rsp
  0x0000000124982d41: jmpq   0x0000000124982d4b
  0x0000000124982d46: callq  0x0000000114baad28 = InterpreterRuntime::throw_ClassCastException(JavaThread*, oopDesc*)
  0x0000000124982d4b: movabs $0x0,%r10
  0x0000000124982d55: mov    %r10,0x320(%r15)
  0x0000000124982d5c: movabs $0x0,%r10
  0x0000000124982d66: mov    %r10,0x330(%r15)
  0x0000000124982d6d: movabs $0x0,%r10
  0x0000000124982d77: mov    %r10,0x328(%r15)
  0x0000000124982d7e: vzeroupper 
  0x0000000124982d81: cmpq   $0x0,0x8(%r15)
  0x0000000124982d89: je     0x0000000124982d94
  0x0000000124982d8f: jmpq   0x0000000124975780
  0x0000000124982d94: mov    -0x40(%rbp),%r13
  0x0000000124982d98: mov    -0x38(%rbp),%r14
  0x0000000124982d9c: retq   
  0x0000000124982d9d: mov    -0x48(%rbp),%rsp
  0x0000000124982da1: movq   $0x0,-0x10(%rbp)
  0x0000000124982da9: movabs $0x115051542,%rsi
  0x0000000124982db3: movabs $0x0,%rdx
  0x0000000124982dbd: callq  0x0000000124982dc7
  0x0000000124982dc2: jmpq   0x0000000124982e71
  0x0000000124982dc7: lea    0x8(%rsp),%rax
  0x0000000124982dcc: mov    %r13,-0x40(%rbp)
  0x0000000124982dd0: mov    %r15,%rdi
  0x0000000124982dd3: vzeroupper 
  0x0000000124982dd6: mov    %rbp,0x330(%r15)
  0x0000000124982ddd: mov    %rax,0x320(%r15)
  0x0000000124982de4: test   $0xf,%esp
  0x0000000124982dea: je     0x0000000124982e02
  0x0000000124982df0: sub    $0x8,%rsp
  0x0000000124982df4: callq  0x0000000114baa9b4 = InterpreterRuntime::create_exception(JavaThread*, char*, char*)
  0x0000000124982df9: add    $0x8,%rsp
  0x0000000124982dfd: jmpq   0x0000000124982e07
  0x0000000124982e02: callq  0x0000000114baa9b4 = InterpreterRuntime::create_exception(JavaThread*, char*, char*)
  0x0000000124982e07: movabs $0x0,%r10
  0x0000000124982e11: mov    %r10,0x320(%r15)
  0x0000000124982e18: movabs $0x0,%r10
  0x0000000124982e22: mov    %r10,0x330(%r15)
  0x0000000124982e29: movabs $0x0,%r10
  0x0000000124982e33: mov    %r10,0x328(%r15)
  0x0000000124982e3a: vzeroupper 
  0x0000000124982e3d: cmpq   $0x0,0x8(%r15)
  0x0000000124982e45: je     0x0000000124982e50
  0x0000000124982e4b: jmpq   0x0000000124975780
  0x0000000124982e50: mov    0x380(%r15),%rax
  0x0000000124982e57: movabs $0x0,%r10
  0x0000000124982e61: mov    %r10,0x380(%r15)
  0x0000000124982e68: mov    -0x40(%rbp),%r13
  0x0000000124982e6c: mov    -0x38(%rbp),%r14
  0x0000000124982e70: retq   
  0x0000000124982e71: jmpq   0x0000000124981b73
  0x0000000124982e76: mov    -0x40(%rbp),%r13
  0x0000000124982e7a: mov    -0x48(%rbp),%rsp
  0x0000000124982e7e: movq   $0x0,-0x10(%rbp)
  0x0000000124982e86: callq  0x0000000124982e90
  0x0000000124982e8b: jmpq   0x0000000124982f22
  0x0000000124982e90: lea    0x8(%rsp),%rax
  0x0000000124982e95: mov    %r13,-0x40(%rbp)
  0x0000000124982e99: mov    %r15,%rdi
  0x0000000124982e9c: vzeroupper 
  0x0000000124982e9f: mov    %rbp,0x330(%r15)
  0x0000000124982ea6: mov    %rax,0x320(%r15)
  0x0000000124982ead: test   $0xf,%esp
  0x0000000124982eb3: je     0x0000000124982ecb
  0x0000000124982eb9: sub    $0x8,%rsp
  0x0000000124982ebd: callq  0x0000000114baa7ae = InterpreterRuntime::throw_StackOverflowError(JavaThread*)
  0x0000000124982ec2: add    $0x8,%rsp
  0x0000000124982ec6: jmpq   0x0000000124982ed0
  0x0000000124982ecb: callq  0x0000000114baa7ae = InterpreterRuntime::throw_StackOverflowError(JavaThread*)
  0x0000000124982ed0: movabs $0x0,%r10
  0x0000000124982eda: mov    %r10,0x320(%r15)
  0x0000000124982ee1: movabs $0x0,%r10
  0x0000000124982eeb: mov    %r10,0x330(%r15)
  0x0000000124982ef2: movabs $0x0,%r10
  0x0000000124982efc: mov    %r10,0x328(%r15)
  0x0000000124982f03: vzeroupper 
  0x0000000124982f06: cmpq   $0x0,0x8(%r15)
  0x0000000124982f0e: je     0x0000000124982f19
  0x0000000124982f14: jmpq   0x0000000124975780
  0x0000000124982f19: mov    -0x40(%rbp),%r13
  0x0000000124982f1d: mov    -0x38(%rbp),%r14
  0x0000000124982f21: retq   
  0x0000000124982f22: nopw   0x0(%rax,%rax,1)
  0x0000000124982f28: add    %al,(%rax)
  0x0000000124982f2a: add    %al,(%rax)
  0x0000000124982f2c: add    %al,(%rax)
  0x0000000124982f2e: add    %al,(%rax)
  0x0000000124982f30: add    %al,(%rax)
  0x0000000124982f32: add    %al,(%rax)
  0x0000000124982f34: add    %al,(%rax)
  0x0000000124982f36: add    %al,(%rax)
  0x0000000124982f38: add    %al,(%rax)
  0x0000000124982f3a: add    %al,(%rax)
  0x0000000124982f3c: add    %al,(%rax)
  0x0000000124982f3e: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = zerolocals)  [0x0000000124982f60, 0x0000000124983440]  1248 bytes

  0x0000000124982f60: mov    0x8(%rbx),%rdx
  0x0000000124982f64: movzwl 0x34(%rdx),%ecx
  0x0000000124982f68: movzwl 0x32(%rdx),%edx
  0x0000000124982f6c: sub    %ecx,%edx
  0x0000000124982f6e: cmp    $0x1f5,%edx
  0x0000000124982f74: jbe    0x0000000124982f9f
  0x0000000124982f7a: mov    %rdx,%rax
  0x0000000124982f7d: shl    $0x3,%rax
  0x0000000124982f81: add    $0x58,%rax
  0x0000000124982f85: add    0x410(%r15),%rax
  0x0000000124982f8c: cmp    %rax,%rsp
  0x0000000124982f8f: ja     0x0000000124982f9f
  0x0000000124982f95: pop    %rax
  0x0000000124982f96: mov    %r13,%rsp
  0x0000000124982f99: push   %rax
  0x0000000124982f9a: jmpq   0x000000012497d100
  0x0000000124982f9f: pop    %rax
  0x0000000124982fa0: lea    -0x8(%rsp,%rcx,8),%r14
  0x0000000124982fa5: test   %edx,%edx
  0x0000000124982fa7: jle    0x0000000124982fb6
  0x0000000124982fad: pushq  $0x0
  0x0000000124982fb2: dec    %edx
  0x0000000124982fb4: jg     0x0000000124982fad
  0x0000000124982fb6: push   %rax
  0x0000000124982fb7: push   %rbp
  0x0000000124982fb8: mov    %rsp,%rbp
  0x0000000124982fbb: push   %r13
  0x0000000124982fbd: pushq  $0x0
  0x0000000124982fc2: mov    0x8(%rbx),%r13
  0x0000000124982fc6: lea    0x38(%r13),%r13
  0x0000000124982fca: push   %rbx
  0x0000000124982fcb: mov    0x8(%rbx),%rdx
  0x0000000124982fcf: mov    0x8(%rdx),%rdx
  0x0000000124982fd3: mov    0x18(%rdx),%rdx
  0x0000000124982fd7: mov    0x70(%rdx),%rdx
  0x0000000124982fdb: mov    (%rdx),%rdx
  0x0000000124982fde: push   %rdx
  0x0000000124982fdf: mov    0x10(%rbx),%rdx
  0x0000000124982fe3: test   %rdx,%rdx
  0x0000000124982fe6: je     0x0000000124982ff3
  0x0000000124982fec: add    $0x138,%rdx
  0x0000000124982ff3: push   %rdx
  0x0000000124982ff4: mov    0x8(%rbx),%rdx
  0x0000000124982ff8: mov    0x8(%rdx),%rdx
  0x0000000124982ffc: mov    0x10(%rdx),%rdx
  0x0000000124983000: push   %rdx
  0x0000000124983001: push   %r14
  0x0000000124983003: push   %r13
  0x0000000124983005: pushq  $0x0
  0x000000012498300a: mov    %rsp,(%rsp)
  0x000000012498300e: movb   $0x1,0x3dd(%r15)
  0x0000000124983016: mov    -0x28(%rbp),%rax
  0x000000012498301a: test   %rax,%rax
  0x000000012498301d: je     0x00000001249830b9
  0x0000000124983023: mov    -0x4(%rax),%ecx
  0x0000000124983026: test   %ecx,%ecx
  0x0000000124983028: js     0x00000001249830b9
  0x000000012498302e: add    %rcx,%rax
  0x0000000124983031: mov    0x8(%rax),%rcx
  0x0000000124983035: sub    $0x2,%rcx
  0x0000000124983039: mov    0x10(%rax,%rcx,8),%rdx
  0x000000012498303e: neg    %rdx
  0x0000000124983041: mov    (%r14,%rdx,8),%rdx
  0x0000000124983045: test   %rdx,%rdx
  0x0000000124983048: jne    0x0000000124983055
  0x000000012498304a: orq    $0x1,0x18(%rax,%rcx,8)
  0x0000000124983053: jmp    0x00000001249830b3
  0x0000000124983055: mov    0x8(%rdx),%edx
  0x0000000124983058: movabs $0x800000000,%r12
  0x0000000124983062: add    %r12,%rdx
  0x0000000124983065: xor    %r12,%r12
  0x0000000124983068: xor    0x18(%rax,%rcx,8),%rdx
  0x000000012498306d: test   $0xfffffffffffffffc,%rdx
  0x0000000124983074: je     0x00000001249830b3
  0x0000000124983076: test   $0x2,%rdx
  0x000000012498307d: jne    0x00000001249830b3
  0x000000012498307f: cmpq   $0x0,0x18(%rax,%rcx,8)
  0x0000000124983088: je     0x00000001249830ae
  0x000000012498308a: cmpq   $0x1,0x18(%rax,%rcx,8)
  0x0000000124983093: je     0x00000001249830ae
  0x0000000124983095: xor    0x18(%rax,%rcx,8),%rdx
  0x000000012498309a: test   $0xfffffffffffffffc,%rdx
  0x00000001249830a1: je     0x00000001249830b3
  0x00000001249830a3: orq    $0x2,0x18(%rax,%rcx,8)
  0x00000001249830ac: jmp    0x00000001249830b3
  0x00000001249830ae: mov    %rdx,0x18(%rax,%rcx,8)
  0x00000001249830b3: sub    $0x2,%rcx
  0x00000001249830b7: jns    0x0000000124983039
  0x00000001249830b9: mov    0x10(%rbx),%rax
  0x00000001249830bd: test   %rax,%rax
  0x00000001249830c0: je     0x00000001249830e2
  0x00000001249830c2: mov    0x104(%rax),%ecx
  0x00000001249830c8: add    $0x8,%ecx
  0x00000001249830cb: mov    %ecx,0x104(%rax)
  0x00000001249830d1: and    0x118(%rax),%ecx
  0x00000001249830d7: je     0x0000000124983380
  0x00000001249830dd: jmpq   0x00000001249831ad
  0x00000001249830e2: mov    0x18(%rbx),%rax
  0x00000001249830e6: test   %rax,%rax
  0x00000001249830e9: jne    0x000000012498319b
  0x00000001249830ef: callq  0x00000001249830f9
  0x00000001249830f4: jmpq   0x000000012498318e
  0x00000001249830f9: mov    %rbx,%rsi
  0x00000001249830fc: lea    0x8(%rsp),%rax
  0x0000000124983101: mov    %r13,-0x40(%rbp)
  0x0000000124983105: mov    %r15,%rdi
  0x0000000124983108: vzeroupper 
  0x000000012498310b: mov    %rbp,0x330(%r15)
  0x0000000124983112: mov    %rax,0x320(%r15)
  0x0000000124983119: test   $0xf,%esp
  0x000000012498311f: je     0x0000000124983137
  0x0000000124983125: sub    $0x8,%rsp
  0x0000000124983129: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498312e: add    $0x8,%rsp
  0x0000000124983132: jmpq   0x000000012498313c
  0x0000000124983137: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498313c: movabs $0x0,%r10
  0x0000000124983146: mov    %r10,0x320(%r15)
  0x000000012498314d: movabs $0x0,%r10
  0x0000000124983157: mov    %r10,0x330(%r15)
  0x000000012498315e: movabs $0x0,%r10
  0x0000000124983168: mov    %r10,0x328(%r15)
  0x000000012498316f: vzeroupper 
  0x0000000124983172: cmpq   $0x0,0x8(%r15)
  0x000000012498317a: je     0x0000000124983185
  0x0000000124983180: jmpq   0x0000000124975780
  0x0000000124983185: mov    -0x40(%rbp),%r13
  0x0000000124983189: mov    -0x38(%rbp),%r14
  0x000000012498318d: retq   
  0x000000012498318e: mov    0x18(%rbx),%rax
  0x0000000124983192: test   %rax,%rax
  0x0000000124983195: je     0x00000001249831ad
  0x000000012498319b: mov    0x18(%rax),%ecx
  0x000000012498319e: add    $0x8,%ecx
  0x00000001249831a1: mov    %ecx,0x18(%rax)
  0x00000001249831a4: and    0x30(%rax),%ecx
  0x00000001249831a7: je     0x0000000124983380
  0x00000001249831ad: mov    %eax,-0x1000(%rsp)
  0x00000001249831b4: mov    %eax,-0x2000(%rsp)
  0x00000001249831bb: mov    %eax,-0x3000(%rsp)
  0x00000001249831c2: mov    %eax,-0x4000(%rsp)
  0x00000001249831c9: mov    %eax,-0x5000(%rsp)
  0x00000001249831d0: mov    %eax,-0x6000(%rsp)
  0x00000001249831d7: mov    %eax,-0x7000(%rsp)
  0x00000001249831de: mov    %eax,-0x8000(%rsp)
  0x00000001249831e5: mov    %eax,-0x9000(%rsp)
  0x00000001249831ec: mov    %eax,-0xa000(%rsp)
  0x00000001249831f3: mov    %eax,-0xb000(%rsp)
  0x00000001249831fa: mov    %eax,-0xc000(%rsp)
  0x0000000124983201: mov    %eax,-0xd000(%rsp)
  0x0000000124983208: mov    %eax,-0xe000(%rsp)
  0x000000012498320f: mov    %eax,-0xf000(%rsp)
  0x0000000124983216: mov    %eax,-0x10000(%rsp)
  0x000000012498321d: mov    %eax,-0x11000(%rsp)
  0x0000000124983224: mov    %eax,-0x12000(%rsp)
  0x000000012498322b: mov    %eax,-0x13000(%rsp)
  0x0000000124983232: mov    %eax,-0x14000(%rsp)
  0x0000000124983239: movb   $0x0,0x3dd(%r15)
  0x0000000124983241: cmpb   $0x0,-0xf7c916e(%rip)        # 0x00000001151ba0da = DTraceMethodProbes
  0x0000000124983248: je     0x0000000124983278
  0x000000012498324e: mov    -0x18(%rbp),%rsi
  0x0000000124983252: mov    %r15,%rdi
  0x0000000124983255: test   $0xf,%esp
  0x000000012498325b: je     0x0000000124983273
  0x0000000124983261: sub    $0x8,%rsp
  0x0000000124983265: callq  0x0000000114e9793e = SharedRuntime::dtrace_method_entry(JavaThread*, Method*)
  0x000000012498326a: add    $0x8,%rsp
  0x000000012498326e: jmpq   0x0000000124983278
  0x0000000124983273: callq  0x0000000114e9793e = SharedRuntime::dtrace_method_entry(JavaThread*, Method*)
  0x0000000124983278: movzbl 0x0(%r13),%ebx
  0x000000012498327d: movabs $0x1151d7a20,%r10
  0x0000000124983287: jmpq   *(%r10,%rbx,8)
  0x000000012498328b: callq  0x0000000124983295
  0x0000000124983290: jmpq   0x0000000124983327
  0x0000000124983295: lea    0x8(%rsp),%rax
  0x000000012498329a: mov    %r13,-0x40(%rbp)
  0x000000012498329e: mov    %r15,%rdi
  0x00000001249832a1: vzeroupper 
  0x00000001249832a4: mov    %rbp,0x330(%r15)
  0x00000001249832ab: mov    %rax,0x320(%r15)
  0x00000001249832b2: test   $0xf,%esp
  0x00000001249832b8: je     0x00000001249832d0
  0x00000001249832be: sub    $0x8,%rsp
  0x00000001249832c2: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x00000001249832c7: add    $0x8,%rsp
  0x00000001249832cb: jmpq   0x00000001249832d5
  0x00000001249832d0: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x00000001249832d5: movabs $0x0,%r10
  0x00000001249832df: mov    %r10,0x320(%r15)
  0x00000001249832e6: movabs $0x0,%r10
  0x00000001249832f0: mov    %r10,0x330(%r15)
  0x00000001249832f7: movabs $0x0,%r10
  0x0000000124983301: mov    %r10,0x328(%r15)
  0x0000000124983308: vzeroupper 
  0x000000012498330b: cmpq   $0x0,0x8(%r15)
  0x0000000124983313: je     0x000000012498331e
  0x0000000124983319: jmpq   0x0000000124975780
  0x000000012498331e: mov    -0x40(%rbp),%r13
  0x0000000124983322: mov    -0x38(%rbp),%r14
  0x0000000124983326: retq   
  0x0000000124983327: push   %rax
  0x0000000124983328: push   %rbx
  0x0000000124983329: mov    -0x18(%rbp),%rbx
  0x000000012498332d: mov    0x10(%rbx),%rax
  0x0000000124983331: test   %rax,%rax
  0x0000000124983334: je     0x0000000124983371
  0x000000012498333a: mov    %r13,%rsi
  0x000000012498333d: mov    %rbx,%rdi
  0x0000000124983340: test   $0xf,%esp
  0x0000000124983346: je     0x000000012498335e
  0x000000012498334c: sub    $0x8,%rsp
  0x0000000124983350: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x0000000124983355: add    $0x8,%rsp
  0x0000000124983359: jmpq   0x0000000124983363
  0x000000012498335e: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x0000000124983363: mov    0x10(%rbx),%rbx
  0x0000000124983367: add    $0x138,%rbx
  0x000000012498336e: add    %rbx,%rax
  0x0000000124983371: mov    %rax,-0x28(%rbp)
  0x0000000124983375: pop    %rbx
  0x0000000124983376: pop    %rax
  0x0000000124983377: mov    -0x18(%rbp),%rbx
  0x000000012498337b: jmpq   0x00000001249831ad
  0x0000000124983380: mov    $0x0,%esi
  0x0000000124983385: callq  0x000000012498338f
  0x000000012498338a: jmpq   0x0000000124983421
  0x000000012498338f: lea    0x8(%rsp),%rax
  0x0000000124983394: mov    %r13,-0x40(%rbp)
  0x0000000124983398: mov    %r15,%rdi
  0x000000012498339b: vzeroupper 
  0x000000012498339e: mov    %rbp,0x330(%r15)
  0x00000001249833a5: mov    %rax,0x320(%r15)
  0x00000001249833ac: test   $0xf,%esp
  0x00000001249833b2: je     0x00000001249833ca
  0x00000001249833b8: sub    $0x8,%rsp
  0x00000001249833bc: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00000001249833c1: add    $0x8,%rsp
  0x00000001249833c5: jmpq   0x00000001249833cf
  0x00000001249833ca: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00000001249833cf: movabs $0x0,%r10
  0x00000001249833d9: mov    %r10,0x320(%r15)
  0x00000001249833e0: movabs $0x0,%r10
  0x00000001249833ea: mov    %r10,0x330(%r15)
  0x00000001249833f1: movabs $0x0,%r10
  0x00000001249833fb: mov    %r10,0x328(%r15)
  0x0000000124983402: vzeroupper 
  0x0000000124983405: cmpq   $0x0,0x8(%r15)
  0x000000012498340d: je     0x0000000124983418
  0x0000000124983413: jmpq   0x0000000124975780
  0x0000000124983418: mov    -0x40(%rbp),%r13
  0x000000012498341c: mov    -0x38(%rbp),%r14
  0x0000000124983420: retq   
  0x0000000124983421: mov    -0x18(%rbp),%rbx
  0x0000000124983425: jmpq   0x00000001249831ad
  0x000000012498342a: nopw   0x0(%rax,%rax,1)
  0x0000000124983430: add    %al,(%rax)
  0x0000000124983432: add    %al,(%rax)
  0x0000000124983434: add    %al,(%rax)
  0x0000000124983436: add    %al,(%rax)
  0x0000000124983438: add    %al,(%rax)
  0x000000012498343a: add    %al,(%rax)
  0x000000012498343c: add    %al,(%rax)
  0x000000012498343e: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = zerolocals_synchronized)  [0x0000000124983460, 0x0000000124983ae0]  1664 bytes

  0x0000000124983460: mov    0x8(%rbx),%rdx
  0x0000000124983464: movzwl 0x34(%rdx),%ecx
  0x0000000124983468: movzwl 0x32(%rdx),%edx
  0x000000012498346c: sub    %ecx,%edx
  0x000000012498346e: cmp    $0x1f5,%edx
  0x0000000124983474: jbe    0x000000012498349f
  0x000000012498347a: mov    %rdx,%rax
  0x000000012498347d: shl    $0x3,%rax
  0x0000000124983481: add    $0x58,%rax
  0x0000000124983485: add    0x410(%r15),%rax
  0x000000012498348c: cmp    %rax,%rsp
  0x000000012498348f: ja     0x000000012498349f
  0x0000000124983495: pop    %rax
  0x0000000124983496: mov    %r13,%rsp
  0x0000000124983499: push   %rax
  0x000000012498349a: jmpq   0x000000012497d100
  0x000000012498349f: pop    %rax
  0x00000001249834a0: lea    -0x8(%rsp,%rcx,8),%r14
  0x00000001249834a5: test   %edx,%edx
  0x00000001249834a7: jle    0x00000001249834b6
  0x00000001249834ad: pushq  $0x0
  0x00000001249834b2: dec    %edx
  0x00000001249834b4: jg     0x00000001249834ad
  0x00000001249834b6: push   %rax
  0x00000001249834b7: push   %rbp
  0x00000001249834b8: mov    %rsp,%rbp
  0x00000001249834bb: push   %r13
  0x00000001249834bd: pushq  $0x0
  0x00000001249834c2: mov    0x8(%rbx),%r13
  0x00000001249834c6: lea    0x38(%r13),%r13
  0x00000001249834ca: push   %rbx
  0x00000001249834cb: mov    0x8(%rbx),%rdx
  0x00000001249834cf: mov    0x8(%rdx),%rdx
  0x00000001249834d3: mov    0x18(%rdx),%rdx
  0x00000001249834d7: mov    0x70(%rdx),%rdx
  0x00000001249834db: mov    (%rdx),%rdx
  0x00000001249834de: push   %rdx
  0x00000001249834df: mov    0x10(%rbx),%rdx
  0x00000001249834e3: test   %rdx,%rdx
  0x00000001249834e6: je     0x00000001249834f3
  0x00000001249834ec: add    $0x138,%rdx
  0x00000001249834f3: push   %rdx
  0x00000001249834f4: mov    0x8(%rbx),%rdx
  0x00000001249834f8: mov    0x8(%rdx),%rdx
  0x00000001249834fc: mov    0x10(%rdx),%rdx
  0x0000000124983500: push   %rdx
  0x0000000124983501: push   %r14
  0x0000000124983503: push   %r13
  0x0000000124983505: pushq  $0x0
  0x000000012498350a: mov    %rsp,(%rsp)
  0x000000012498350e: movb   $0x1,0x3dd(%r15)
  0x0000000124983516: mov    -0x28(%rbp),%rax
  0x000000012498351a: test   %rax,%rax
  0x000000012498351d: je     0x00000001249835b9
  0x0000000124983523: mov    -0x4(%rax),%ecx
  0x0000000124983526: test   %ecx,%ecx
  0x0000000124983528: js     0x00000001249835b9
  0x000000012498352e: add    %rcx,%rax
  0x0000000124983531: mov    0x8(%rax),%rcx
  0x0000000124983535: sub    $0x2,%rcx
  0x0000000124983539: mov    0x10(%rax,%rcx,8),%rdx
  0x000000012498353e: neg    %rdx
  0x0000000124983541: mov    (%r14,%rdx,8),%rdx
  0x0000000124983545: test   %rdx,%rdx
  0x0000000124983548: jne    0x0000000124983555
  0x000000012498354a: orq    $0x1,0x18(%rax,%rcx,8)
  0x0000000124983553: jmp    0x00000001249835b3
  0x0000000124983555: mov    0x8(%rdx),%edx
  0x0000000124983558: movabs $0x800000000,%r12
  0x0000000124983562: add    %r12,%rdx
  0x0000000124983565: xor    %r12,%r12
  0x0000000124983568: xor    0x18(%rax,%rcx,8),%rdx
  0x000000012498356d: test   $0xfffffffffffffffc,%rdx
  0x0000000124983574: je     0x00000001249835b3
  0x0000000124983576: test   $0x2,%rdx
  0x000000012498357d: jne    0x00000001249835b3
  0x000000012498357f: cmpq   $0x0,0x18(%rax,%rcx,8)
  0x0000000124983588: je     0x00000001249835ae
  0x000000012498358a: cmpq   $0x1,0x18(%rax,%rcx,8)
  0x0000000124983593: je     0x00000001249835ae
  0x0000000124983595: xor    0x18(%rax,%rcx,8),%rdx
  0x000000012498359a: test   $0xfffffffffffffffc,%rdx
  0x00000001249835a1: je     0x00000001249835b3
  0x00000001249835a3: orq    $0x2,0x18(%rax,%rcx,8)
  0x00000001249835ac: jmp    0x00000001249835b3
  0x00000001249835ae: mov    %rdx,0x18(%rax,%rcx,8)
  0x00000001249835b3: sub    $0x2,%rcx
  0x00000001249835b7: jns    0x0000000124983539
  0x00000001249835b9: mov    0x10(%rbx),%rax
  0x00000001249835bd: test   %rax,%rax
  0x00000001249835c0: je     0x00000001249835e2
  0x00000001249835c2: mov    0x104(%rax),%ecx
  0x00000001249835c8: add    $0x8,%ecx
  0x00000001249835cb: mov    %ecx,0x104(%rax)
  0x00000001249835d1: and    0x118(%rax),%ecx
  0x00000001249835d7: je     0x0000000124983a36
  0x00000001249835dd: jmpq   0x00000001249836ad
  0x00000001249835e2: mov    0x18(%rbx),%rax
  0x00000001249835e6: test   %rax,%rax
  0x00000001249835e9: jne    0x000000012498369b
  0x00000001249835ef: callq  0x00000001249835f9
  0x00000001249835f4: jmpq   0x000000012498368e
  0x00000001249835f9: mov    %rbx,%rsi
  0x00000001249835fc: lea    0x8(%rsp),%rax
  0x0000000124983601: mov    %r13,-0x40(%rbp)
  0x0000000124983605: mov    %r15,%rdi
  0x0000000124983608: vzeroupper 
  0x000000012498360b: mov    %rbp,0x330(%r15)
  0x0000000124983612: mov    %rax,0x320(%r15)
  0x0000000124983619: test   $0xf,%esp
  0x000000012498361f: je     0x0000000124983637
  0x0000000124983625: sub    $0x8,%rsp
  0x0000000124983629: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498362e: add    $0x8,%rsp
  0x0000000124983632: jmpq   0x000000012498363c
  0x0000000124983637: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498363c: movabs $0x0,%r10
  0x0000000124983646: mov    %r10,0x320(%r15)
  0x000000012498364d: movabs $0x0,%r10
  0x0000000124983657: mov    %r10,0x330(%r15)
  0x000000012498365e: movabs $0x0,%r10
  0x0000000124983668: mov    %r10,0x328(%r15)
  0x000000012498366f: vzeroupper 
  0x0000000124983672: cmpq   $0x0,0x8(%r15)
  0x000000012498367a: je     0x0000000124983685
  0x0000000124983680: jmpq   0x0000000124975780
  0x0000000124983685: mov    -0x40(%rbp),%r13
  0x0000000124983689: mov    -0x38(%rbp),%r14
  0x000000012498368d: retq   
  0x000000012498368e: mov    0x18(%rbx),%rax
  0x0000000124983692: test   %rax,%rax
  0x0000000124983695: je     0x00000001249836ad
  0x000000012498369b: mov    0x18(%rax),%ecx
  0x000000012498369e: add    $0x8,%ecx
  0x00000001249836a1: mov    %ecx,0x18(%rax)
  0x00000001249836a4: and    0x30(%rax),%ecx
  0x00000001249836a7: je     0x0000000124983a36
  0x00000001249836ad: mov    %eax,-0x1000(%rsp)
  0x00000001249836b4: mov    %eax,-0x2000(%rsp)
  0x00000001249836bb: mov    %eax,-0x3000(%rsp)
  0x00000001249836c2: mov    %eax,-0x4000(%rsp)
  0x00000001249836c9: mov    %eax,-0x5000(%rsp)
  0x00000001249836d0: mov    %eax,-0x6000(%rsp)
  0x00000001249836d7: mov    %eax,-0x7000(%rsp)
  0x00000001249836de: mov    %eax,-0x8000(%rsp)
  0x00000001249836e5: mov    %eax,-0x9000(%rsp)
  0x00000001249836ec: mov    %eax,-0xa000(%rsp)
  0x00000001249836f3: mov    %eax,-0xb000(%rsp)
  0x00000001249836fa: mov    %eax,-0xc000(%rsp)
  0x0000000124983701: mov    %eax,-0xd000(%rsp)
  0x0000000124983708: mov    %eax,-0xe000(%rsp)
  0x000000012498370f: mov    %eax,-0xf000(%rsp)
  0x0000000124983716: mov    %eax,-0x10000(%rsp)
  0x000000012498371d: mov    %eax,-0x11000(%rsp)
  0x0000000124983724: mov    %eax,-0x12000(%rsp)
  0x000000012498372b: mov    %eax,-0x13000(%rsp)
  0x0000000124983732: mov    %eax,-0x14000(%rsp)
  0x0000000124983739: movb   $0x0,0x3dd(%r15)
  0x0000000124983741: mov    0x20(%rbx),%eax
  0x0000000124983744: test   $0x8,%eax
  0x0000000124983749: mov    (%r14),%rax
  0x000000012498374c: je     0x0000000124983765
  0x0000000124983752: mov    0x8(%rbx),%rax
  0x0000000124983756: mov    0x8(%rax),%rax
  0x000000012498375a: mov    0x18(%rax),%rax
  0x000000012498375e: mov    0x70(%rax),%rax
  0x0000000124983762: mov    (%rax),%rax
  0x0000000124983765: sub    $0x10,%rsp
  0x0000000124983769: mov    %rsp,-0x48(%rbp)
  0x000000012498376d: mov    %rax,0x8(%rsp)
  0x0000000124983772: mov    %rsp,%rsi
  0x0000000124983775: mov    0x8(%rsi),%rcx
  0x0000000124983779: mov    (%rcx),%rax
  0x000000012498377c: mov    %rax,%rbx
  0x000000012498377f: and    $0x7,%rbx
  0x0000000124983783: cmp    $0x5,%rbx
  0x0000000124983787: jne    0x0000000124983832
  0x000000012498378d: mov    0x8(%rcx),%ebx
  0x0000000124983790: movabs $0x800000000,%r12
  0x000000012498379a: add    %r12,%rbx
  0x000000012498379d: xor    %r12,%r12
  0x00000001249837a0: mov    0xb8(%rbx),%rbx
  0x00000001249837a7: or     %r15,%rbx
  0x00000001249837aa: xor    %rax,%rbx
  0x00000001249837ad: and    $0xffffffffffffff87,%rbx
  0x00000001249837b1: je     0x00000001249838f7
  0x00000001249837b7: test   $0x7,%rbx
  0x00000001249837be: jne    0x0000000124983813
  0x00000001249837c0: test   $0x300,%rbx
  0x00000001249837c7: jne    0x00000001249837e6
  0x00000001249837c9: and    $0x37f,%rax
  0x00000001249837d0: mov    %rax,%rbx
  0x00000001249837d3: or     %r15,%rbx
  0x00000001249837d6: lock cmpxchg %rbx,(%rcx)
  0x00000001249837db: jne    0x000000012498385b
  0x00000001249837e1: jmpq   0x00000001249838f7
  0x00000001249837e6: mov    0x8(%rcx),%ebx
  0x00000001249837e9: movabs $0x800000000,%r12
  0x00000001249837f3: add    %r12,%rbx
  0x00000001249837f6: xor    %r12,%r12
  0x00000001249837f9: mov    0xb8(%rbx),%rbx
  0x0000000124983800: or     %r15,%rbx
  0x0000000124983803: lock cmpxchg %rbx,(%rcx)
  0x0000000124983808: jne    0x000000012498385b
  0x000000012498380e: jmpq   0x00000001249838f7
  0x0000000124983813: mov    0x8(%rcx),%ebx
  0x0000000124983816: movabs $0x800000000,%r12
  0x0000000124983820: add    %r12,%rbx
  0x0000000124983823: xor    %r12,%r12
  0x0000000124983826: mov    0xb8(%rbx),%rbx
  0x000000012498382d: lock cmpxchg %rbx,(%rcx)
  0x0000000124983832: mov    $0x1,%eax
  0x0000000124983837: or     (%rcx),%rax
  0x000000012498383a: mov    %rax,(%rsi)
  0x000000012498383d: lock cmpxchg %rsi,(%rcx)
  0x0000000124983842: je     0x00000001249838f7
  0x0000000124983848: sub    %rsp,%rax
  0x000000012498384b: and    $0xfffffffffffff007,%rax
  0x0000000124983852: mov    %rax,(%rsi)
  0x0000000124983855: je     0x00000001249838f7
  0x000000012498385b: callq  0x0000000124983865
  0x0000000124983860: jmpq   0x00000001249838f7
  0x0000000124983865: lea    0x8(%rsp),%rax
  0x000000012498386a: mov    %r13,-0x40(%rbp)
  0x000000012498386e: mov    %r15,%rdi
  0x0000000124983871: vzeroupper 
  0x0000000124983874: mov    %rbp,0x330(%r15)
  0x000000012498387b: mov    %rax,0x320(%r15)
  0x0000000124983882: test   $0xf,%esp
  0x0000000124983888: je     0x00000001249838a0
  0x000000012498388e: sub    $0x8,%rsp
  0x0000000124983892: callq  0x0000000114babba4 = InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*)
  0x0000000124983897: add    $0x8,%rsp
  0x000000012498389b: jmpq   0x00000001249838a5
  0x00000001249838a0: callq  0x0000000114babba4 = InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*)
  0x00000001249838a5: movabs $0x0,%r10
  0x00000001249838af: mov    %r10,0x320(%r15)
  0x00000001249838b6: movabs $0x0,%r10
  0x00000001249838c0: mov    %r10,0x330(%r15)
  0x00000001249838c7: movabs $0x0,%r10
  0x00000001249838d1: mov    %r10,0x328(%r15)
  0x00000001249838d8: vzeroupper 
  0x00000001249838db: cmpq   $0x0,0x8(%r15)
  0x00000001249838e3: je     0x00000001249838ee
  0x00000001249838e9: jmpq   0x0000000124975780
  0x00000001249838ee: mov    -0x40(%rbp),%r13
  0x00000001249838f2: mov    -0x38(%rbp),%r14
  0x00000001249838f6: retq   
  0x00000001249838f7: cmpb   $0x0,-0xf7c9824(%rip)        # 0x00000001151ba0da = DTraceMethodProbes
  0x00000001249838fe: je     0x000000012498392e
  0x0000000124983904: mov    -0x18(%rbp),%rsi
  0x0000000124983908: mov    %r15,%rdi
  0x000000012498390b: test   $0xf,%esp
  0x0000000124983911: je     0x0000000124983929
  0x0000000124983917: sub    $0x8,%rsp
  0x000000012498391b: callq  0x0000000114e9793e = SharedRuntime::dtrace_method_entry(JavaThread*, Method*)
  0x0000000124983920: add    $0x8,%rsp
  0x0000000124983924: jmpq   0x000000012498392e
  0x0000000124983929: callq  0x0000000114e9793e = SharedRuntime::dtrace_method_entry(JavaThread*, Method*)
  0x000000012498392e: movzbl 0x0(%r13),%ebx
  0x0000000124983933: movabs $0x1151d7a20,%r10
  0x000000012498393d: jmpq   *(%r10,%rbx,8)
  0x0000000124983941: callq  0x000000012498394b
  0x0000000124983946: jmpq   0x00000001249839dd
  0x000000012498394b: lea    0x8(%rsp),%rax
  0x0000000124983950: mov    %r13,-0x40(%rbp)
  0x0000000124983954: mov    %r15,%rdi
  0x0000000124983957: vzeroupper 
  0x000000012498395a: mov    %rbp,0x330(%r15)
  0x0000000124983961: mov    %rax,0x320(%r15)
  0x0000000124983968: test   $0xf,%esp
  0x000000012498396e: je     0x0000000124983986
  0x0000000124983974: sub    $0x8,%rsp
  0x0000000124983978: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498397d: add    $0x8,%rsp
  0x0000000124983981: jmpq   0x000000012498398b
  0x0000000124983986: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498398b: movabs $0x0,%r10
  0x0000000124983995: mov    %r10,0x320(%r15)
  0x000000012498399c: movabs $0x0,%r10
  0x00000001249839a6: mov    %r10,0x330(%r15)
  0x00000001249839ad: movabs $0x0,%r10
  0x00000001249839b7: mov    %r10,0x328(%r15)
  0x00000001249839be: vzeroupper 
  0x00000001249839c1: cmpq   $0x0,0x8(%r15)
  0x00000001249839c9: je     0x00000001249839d4
  0x00000001249839cf: jmpq   0x0000000124975780
  0x00000001249839d4: mov    -0x40(%rbp),%r13
  0x00000001249839d8: mov    -0x38(%rbp),%r14
  0x00000001249839dc: retq   
  0x00000001249839dd: push   %rax
  0x00000001249839de: push   %rbx
  0x00000001249839df: mov    -0x18(%rbp),%rbx
  0x00000001249839e3: mov    0x10(%rbx),%rax
  0x00000001249839e7: test   %rax,%rax
  0x00000001249839ea: je     0x0000000124983a27
  0x00000001249839f0: mov    %r13,%rsi
  0x00000001249839f3: mov    %rbx,%rdi
  0x00000001249839f6: test   $0xf,%esp
  0x00000001249839fc: je     0x0000000124983a14
  0x0000000124983a02: sub    $0x8,%rsp
  0x0000000124983a06: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x0000000124983a0b: add    $0x8,%rsp
  0x0000000124983a0f: jmpq   0x0000000124983a19
  0x0000000124983a14: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x0000000124983a19: mov    0x10(%rbx),%rbx
  0x0000000124983a1d: add    $0x138,%rbx
  0x0000000124983a24: add    %rbx,%rax
  0x0000000124983a27: mov    %rax,-0x28(%rbp)
  0x0000000124983a2b: pop    %rbx
  0x0000000124983a2c: pop    %rax
  0x0000000124983a2d: mov    -0x18(%rbp),%rbx
  0x0000000124983a31: jmpq   0x00000001249836ad
  0x0000000124983a36: mov    $0x0,%esi
  0x0000000124983a3b: callq  0x0000000124983a45
  0x0000000124983a40: jmpq   0x0000000124983ad7
  0x0000000124983a45: lea    0x8(%rsp),%rax
  0x0000000124983a4a: mov    %r13,-0x40(%rbp)
  0x0000000124983a4e: mov    %r15,%rdi
  0x0000000124983a51: vzeroupper 
  0x0000000124983a54: mov    %rbp,0x330(%r15)
  0x0000000124983a5b: mov    %rax,0x320(%r15)
  0x0000000124983a62: test   $0xf,%esp
  0x0000000124983a68: je     0x0000000124983a80
  0x0000000124983a6e: sub    $0x8,%rsp
  0x0000000124983a72: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x0000000124983a77: add    $0x8,%rsp
  0x0000000124983a7b: jmpq   0x0000000124983a85
  0x0000000124983a80: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x0000000124983a85: movabs $0x0,%r10
  0x0000000124983a8f: mov    %r10,0x320(%r15)
  0x0000000124983a96: movabs $0x0,%r10
  0x0000000124983aa0: mov    %r10,0x330(%r15)
  0x0000000124983aa7: movabs $0x0,%r10
  0x0000000124983ab1: mov    %r10,0x328(%r15)
  0x0000000124983ab8: vzeroupper 
  0x0000000124983abb: cmpq   $0x0,0x8(%r15)
  0x0000000124983ac3: je     0x0000000124983ace
  0x0000000124983ac9: jmpq   0x0000000124975780
  0x0000000124983ace: mov    -0x40(%rbp),%r13
  0x0000000124983ad2: mov    -0x38(%rbp),%r14
  0x0000000124983ad6: retq   
  0x0000000124983ad7: mov    -0x18(%rbp),%rbx
  0x0000000124983adb: jmpq   0x00000001249836ad

----------------------------------------------------------------------
method entry point (kind = abstract)  [0x0000000124983b00, 0x0000000124983be0]  224 bytes

  0x0000000124983b00: mov    -0x48(%rbp),%rsp
  0x0000000124983b04: movq   $0x0,-0x10(%rbp)
  0x0000000124983b0c: mov    -0x40(%rbp),%r13
  0x0000000124983b10: mov    -0x38(%rbp),%r14
  0x0000000124983b14: callq  0x0000000124983b1e
  0x0000000124983b19: jmpq   0x0000000124983bb3
  0x0000000124983b1e: mov    %rbx,%rsi
  0x0000000124983b21: lea    0x8(%rsp),%rax
  0x0000000124983b26: mov    %r13,-0x40(%rbp)
  0x0000000124983b2a: mov    %r15,%rdi
  0x0000000124983b2d: vzeroupper 
  0x0000000124983b30: mov    %rbp,0x330(%r15)
  0x0000000124983b37: mov    %rax,0x320(%r15)
  0x0000000124983b3e: test   $0xf,%esp
  0x0000000124983b44: je     0x0000000124983b5c
  0x0000000124983b4a: sub    $0x8,%rsp
  0x0000000124983b4e: callq  0x0000000114bab418 = InterpreterRuntime::throw_AbstractMethodErrorWithMethod(JavaThread*, Method*)
  0x0000000124983b53: add    $0x8,%rsp
  0x0000000124983b57: jmpq   0x0000000124983b61
  0x0000000124983b5c: callq  0x0000000114bab418 = InterpreterRuntime::throw_AbstractMethodErrorWithMethod(JavaThread*, Method*)
  0x0000000124983b61: movabs $0x0,%r10
  0x0000000124983b6b: mov    %r10,0x320(%r15)
  0x0000000124983b72: movabs $0x0,%r10
  0x0000000124983b7c: mov    %r10,0x330(%r15)
  0x0000000124983b83: movabs $0x0,%r10
  0x0000000124983b8d: mov    %r10,0x328(%r15)
  0x0000000124983b94: vzeroupper 
  0x0000000124983b97: cmpq   $0x0,0x8(%r15)
  0x0000000124983b9f: je     0x0000000124983baa
  0x0000000124983ba5: jmpq   0x0000000124975780
  0x0000000124983baa: mov    -0x40(%rbp),%r13
  0x0000000124983bae: mov    -0x38(%rbp),%r14
  0x0000000124983bb2: retq   
  0x0000000124983bb3: movabs $0x114ff3493,%rdi
  0x0000000124983bbd: and    $0xfffffffffffffff0,%rsp
  0x0000000124983bc1: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124983bc6: hlt    
  0x0000000124983bc7: nop
  0x0000000124983bc8: add    %al,(%rax)
  0x0000000124983bca: add    %al,(%rax)
  0x0000000124983bcc: add    %al,(%rax)
  0x0000000124983bce: add    %al,(%rax)
  0x0000000124983bd0: add    %al,(%rax)
  0x0000000124983bd2: add    %al,(%rax)
  0x0000000124983bd4: add    %al,(%rax)
  0x0000000124983bd6: add    %al,(%rax)
  0x0000000124983bd8: add    %al,(%rax)
  0x0000000124983bda: add    %al,(%rax)
  0x0000000124983bdc: add    %al,(%rax)
  0x0000000124983bde: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_lang_math_sin)  [0x0000000124983c00, 0x0000000124983c20]  32 bytes

  0x0000000124983c00: vmovsd 0x8(%rsp),%xmm0
  0x0000000124983c06: callq  0x0000000124977765
  0x0000000124983c0b: pop    %rax
  0x0000000124983c0c: mov    %r13,%rsp
  0x0000000124983c0f: jmpq   *%rax
  0x0000000124983c11: nopl   0x0(%rax)
  0x0000000124983c18: add    %al,(%rax)
  0x0000000124983c1a: add    %al,(%rax)
  0x0000000124983c1c: add    %al,(%rax)
  0x0000000124983c1e: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_lang_math_cos)  [0x0000000124983c40, 0x0000000124983c60]  32 bytes

  0x0000000124983c40: vmovsd 0x8(%rsp),%xmm0
  0x0000000124983c46: callq  0x0000000124977dfc
  0x0000000124983c4b: pop    %rax
  0x0000000124983c4c: mov    %r13,%rsp
  0x0000000124983c4f: jmpq   *%rax
  0x0000000124983c51: nopl   0x0(%rax)
  0x0000000124983c58: add    %al,(%rax)
  0x0000000124983c5a: add    %al,(%rax)
  0x0000000124983c5c: add    %al,(%rax)
  0x0000000124983c5e: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_lang_math_tan)  [0x0000000124983c80, 0x0000000124983ca0]  32 bytes

  0x0000000124983c80: vmovsd 0x8(%rsp),%xmm0
  0x0000000124983c86: callq  0x0000000124978475
  0x0000000124983c8b: pop    %rax
  0x0000000124983c8c: mov    %r13,%rsp
  0x0000000124983c8f: jmpq   *%rax
  0x0000000124983c91: nopl   0x0(%rax)
  0x0000000124983c98: add    %al,(%rax)
  0x0000000124983c9a: add    %al,(%rax)
  0x0000000124983c9c: add    %al,(%rax)
  0x0000000124983c9e: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_lang_math_abs)  [0x0000000124983cc0, 0x0000000124983ce0]  32 bytes

  0x0000000124983cc0: fldl   0x8(%rsp)
  0x0000000124983cc4: fabs   
  0x0000000124983cc6: sub    $0x10,%rsp
  0x0000000124983cca: fstpl  (%rsp)
  0x0000000124983ccd: vmovsd (%rsp),%xmm0
  0x0000000124983cd2: add    $0x10,%rsp
  0x0000000124983cd6: pop    %rax
  0x0000000124983cd7: mov    %r13,%rsp
  0x0000000124983cda: jmpq   *%rax
  0x0000000124983cdc: nopl   0x0(%rax)

----------------------------------------------------------------------
method entry point (kind = java_lang_math_sqrt)  [0x0000000124983d00, 0x0000000124983d20]  32 bytes

  0x0000000124983d00: vsqrtsd 0x8(%rsp),%xmm0,%xmm0
  0x0000000124983d06: pop    %rax
  0x0000000124983d07: mov    %r13,%rsp
  0x0000000124983d0a: jmpq   *%rax
  0x0000000124983d0c: nopl   0x0(%rax)
  0x0000000124983d10: add    %al,(%rax)
  0x0000000124983d12: add    %al,(%rax)
  0x0000000124983d14: add    %al,(%rax)
  0x0000000124983d16: add    %al,(%rax)
  0x0000000124983d18: add    %al,(%rax)
  0x0000000124983d1a: add    %al,(%rax)
  0x0000000124983d1c: add    %al,(%rax)
  0x0000000124983d1e: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_lang_math_log)  [0x0000000124983d40, 0x0000000124983d60]  32 bytes

  0x0000000124983d40: vmovsd 0x8(%rsp),%xmm0
  0x0000000124983d46: callq  0x0000000124976126
  0x0000000124983d4b: pop    %rax
  0x0000000124983d4c: mov    %r13,%rsp
  0x0000000124983d4f: jmpq   *%rax
  0x0000000124983d51: nopl   0x0(%rax)
  0x0000000124983d58: add    %al,(%rax)
  0x0000000124983d5a: add    %al,(%rax)
  0x0000000124983d5c: add    %al,(%rax)
  0x0000000124983d5e: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_lang_math_log10)  [0x0000000124983d80, 0x0000000124983da0]  32 bytes

  0x0000000124983d80: vmovsd 0x8(%rsp),%xmm0
  0x0000000124983d86: callq  0x00000001249763a2
  0x0000000124983d8b: pop    %rax
  0x0000000124983d8c: mov    %r13,%rsp
  0x0000000124983d8f: jmpq   *%rax
  0x0000000124983d91: nopl   0x0(%rax)
  0x0000000124983d98: add    %al,(%rax)
  0x0000000124983d9a: add    %al,(%rax)
  0x0000000124983d9c: add    %al,(%rax)
  0x0000000124983d9e: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_lang_math_exp)  [0x0000000124983dc0, 0x0000000124983de0]  32 bytes

  0x0000000124983dc0: vmovsd 0x8(%rsp),%xmm0
  0x0000000124983dc6: callq  0x0000000124975df9
  0x0000000124983dcb: pop    %rax
  0x0000000124983dcc: mov    %r13,%rsp
  0x0000000124983dcf: jmpq   *%rax
  0x0000000124983dd1: nopl   0x0(%rax)
  0x0000000124983dd8: add    %al,(%rax)
  0x0000000124983dda: add    %al,(%rax)
  0x0000000124983ddc: add    %al,(%rax)
  0x0000000124983dde: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_lang_math_pow)  [0x0000000124983e00, 0x0000000124983e20]  32 bytes

  0x0000000124983e00: vmovsd 0x8(%rsp),%xmm1
  0x0000000124983e06: vmovsd 0x18(%rsp),%xmm0
  0x0000000124983e0c: callq  0x0000000124976651
  0x0000000124983e11: pop    %rax
  0x0000000124983e12: mov    %r13,%rsp
  0x0000000124983e15: jmpq   *%rax
  0x0000000124983e17: nop
  0x0000000124983e18: add    %al,(%rax)
  0x0000000124983e1a: add    %al,(%rax)
  0x0000000124983e1c: add    %al,(%rax)
  0x0000000124983e1e: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_lang_math_fmaF)  [0x0000000124983e40, 0x0000000124983e60]  32 bytes

  0x0000000124983e40: vmovss 0x8(%rsp),%xmm0
  0x0000000124983e46: vmovss 0x10(%rsp),%xmm1
  0x0000000124983e4c: vmovss 0x18(%rsp),%xmm2
  0x0000000124983e52: vfmadd231ss %xmm2,%xmm1,%xmm0
  0x0000000124983e57: pop    %rax
  0x0000000124983e58: mov    %r13,%rsp
  0x0000000124983e5b: jmpq   *%rax
  0x0000000124983e5d: data16 xchg %ax,%ax

----------------------------------------------------------------------
method entry point (kind = java_lang_math_fmaD)  [0x0000000124983e80, 0x0000000124983ea0]  32 bytes

  0x0000000124983e80: vmovsd 0x8(%rsp),%xmm0
  0x0000000124983e86: vmovsd 0x18(%rsp),%xmm1
  0x0000000124983e8c: vmovsd 0x28(%rsp),%xmm2
  0x0000000124983e92: vfmadd231sd %xmm2,%xmm1,%xmm0
  0x0000000124983e97: pop    %rax
  0x0000000124983e98: mov    %r13,%rsp
  0x0000000124983e9b: jmpq   *%rax
  0x0000000124983e9d: data16 xchg %ax,%ax

----------------------------------------------------------------------
method entry point (kind = java_lang_ref_reference_get)  [0x0000000124983ec0, 0x0000000124983f60]  160 bytes

  0x0000000124983ec0: mov    0x8(%rsp),%rax
  0x0000000124983ec5: test   %rax,%rax
  0x0000000124983ec8: je     0x0000000124983f3e
  0x0000000124983ece: mov    0xc(%rax),%eax
  0x0000000124983ed1: shl    $0x3,%rax
  0x0000000124983ed5: cmpb   $0x0,0x30(%r15)
  0x0000000124983eda: je     0x0000000124983f37
  0x0000000124983ee0: cmp    $0x0,%rax
  0x0000000124983ee4: je     0x0000000124983f37
  0x0000000124983eea: mov    0x38(%r15),%rbx
  0x0000000124983eee: cmp    $0x0,%rbx
  0x0000000124983ef2: je     0x0000000124983f0c
  0x0000000124983ef8: sub    $0x8,%rbx
  0x0000000124983efc: mov    %rbx,0x38(%r15)
  0x0000000124983f00: add    0x48(%r15),%rbx
  0x0000000124983f04: mov    %rax,(%rbx)
  0x0000000124983f07: jmpq   0x0000000124983f37
  0x0000000124983f0c: push   %rax
  0x0000000124983f0d: mov    %r15,%rsi
  0x0000000124983f10: mov    %rax,%rdi
  0x0000000124983f13: test   $0xf,%esp
  0x0000000124983f19: je     0x0000000124983f31
  0x0000000124983f1f: sub    $0x8,%rsp
  0x0000000124983f23: callq  0x0000000114b0185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x0000000124983f28: add    $0x8,%rsp
  0x0000000124983f2c: jmpq   0x0000000124983f36
  0x0000000124983f31: callq  0x0000000114b0185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x0000000124983f36: pop    %rax
  0x0000000124983f37: pop    %rdi
  0x0000000124983f38: mov    %r13,%rsp
  0x0000000124983f3b: jmpq   *%rdi
  0x0000000124983f3d: retq   
  0x0000000124983f3e: jmpq   0x0000000124982f60
  0x0000000124983f43: nopl   0x0(%rax,%rax,1)
  0x0000000124983f48: add    %al,(%rax)
  0x0000000124983f4a: add    %al,(%rax)
  0x0000000124983f4c: add    %al,(%rax)
  0x0000000124983f4e: add    %al,(%rax)
  0x0000000124983f50: add    %al,(%rax)
  0x0000000124983f52: add    %al,(%rax)
  0x0000000124983f54: add    %al,(%rax)
  0x0000000124983f56: add    %al,(%rax)
  0x0000000124983f58: add    %al,(%rax)
  0x0000000124983f5a: add    %al,(%rax)
  0x0000000124983f5c: add    %al,(%rax)
  0x0000000124983f5e: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = native)  [0x0000000124983f80, 0x0000000124984900]  2432 bytes

  0x0000000124983f80: mov    0x8(%rbx),%rcx
  0x0000000124983f84: movzwl 0x34(%rcx),%ecx
  0x0000000124983f88: pop    %rax
  0x0000000124983f89: lea    -0x8(%rsp,%rcx,8),%r14
  0x0000000124983f8e: pushq  $0x0
  0x0000000124983f93: pushq  $0x0
  0x0000000124983f98: push   %rax
  0x0000000124983f99: push   %rbp
  0x0000000124983f9a: mov    %rsp,%rbp
  0x0000000124983f9d: push   %r13
  0x0000000124983f9f: pushq  $0x0
  0x0000000124983fa4: mov    0x8(%rbx),%r13
  0x0000000124983fa8: lea    0x38(%r13),%r13
  0x0000000124983fac: push   %rbx
  0x0000000124983fad: mov    0x8(%rbx),%rdx
  0x0000000124983fb1: mov    0x8(%rdx),%rdx
  0x0000000124983fb5: mov    0x18(%rdx),%rdx
  0x0000000124983fb9: mov    0x70(%rdx),%rdx
  0x0000000124983fbd: mov    (%rdx),%rdx
  0x0000000124983fc0: push   %rdx
  0x0000000124983fc1: mov    0x10(%rbx),%rdx
  0x0000000124983fc5: test   %rdx,%rdx
  0x0000000124983fc8: je     0x0000000124983fd5
  0x0000000124983fce: add    $0x138,%rdx
  0x0000000124983fd5: push   %rdx
  0x0000000124983fd6: mov    0x8(%rbx),%rdx
  0x0000000124983fda: mov    0x8(%rdx),%rdx
  0x0000000124983fde: mov    0x10(%rdx),%rdx
  0x0000000124983fe2: push   %rdx
  0x0000000124983fe3: push   %r14
  0x0000000124983fe5: pushq  $0x0
  0x0000000124983fea: pushq  $0x0
  0x0000000124983fef: mov    %rsp,(%rsp)
  0x0000000124983ff3: movb   $0x1,0x3dd(%r15)
  0x0000000124983ffb: mov    0x10(%rbx),%rax
  0x0000000124983fff: test   %rax,%rax
  0x0000000124984002: je     0x0000000124984024
  0x0000000124984004: mov    0x104(%rax),%ecx
  0x000000012498400a: add    $0x8,%ecx
  0x000000012498400d: mov    %ecx,0x104(%rax)
  0x0000000124984013: and    0x118(%rax),%ecx
  0x0000000124984019: je     0x000000012498484c
  0x000000012498401f: jmpq   0x00000001249840ef
  0x0000000124984024: mov    0x18(%rbx),%rax
  0x0000000124984028: test   %rax,%rax
  0x000000012498402b: jne    0x00000001249840dd
  0x0000000124984031: callq  0x000000012498403b
  0x0000000124984036: jmpq   0x00000001249840d0
  0x000000012498403b: mov    %rbx,%rsi
  0x000000012498403e: lea    0x8(%rsp),%rax
  0x0000000124984043: mov    %r13,-0x40(%rbp)
  0x0000000124984047: mov    %r15,%rdi
  0x000000012498404a: vzeroupper 
  0x000000012498404d: mov    %rbp,0x330(%r15)
  0x0000000124984054: mov    %rax,0x320(%r15)
  0x000000012498405b: test   $0xf,%esp
  0x0000000124984061: je     0x0000000124984079
  0x0000000124984067: sub    $0x8,%rsp
  0x000000012498406b: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x0000000124984070: add    $0x8,%rsp
  0x0000000124984074: jmpq   0x000000012498407e
  0x0000000124984079: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498407e: movabs $0x0,%r10
  0x0000000124984088: mov    %r10,0x320(%r15)
  0x000000012498408f: movabs $0x0,%r10
  0x0000000124984099: mov    %r10,0x330(%r15)
  0x00000001249840a0: movabs $0x0,%r10
  0x00000001249840aa: mov    %r10,0x328(%r15)
  0x00000001249840b1: vzeroupper 
  0x00000001249840b4: cmpq   $0x0,0x8(%r15)
  0x00000001249840bc: je     0x00000001249840c7
  0x00000001249840c2: jmpq   0x0000000124975780
  0x00000001249840c7: mov    -0x40(%rbp),%r13
  0x00000001249840cb: mov    -0x38(%rbp),%r14
  0x00000001249840cf: retq   
  0x00000001249840d0: mov    0x18(%rbx),%rax
  0x00000001249840d4: test   %rax,%rax
  0x00000001249840d7: je     0x00000001249840ef
  0x00000001249840dd: mov    0x18(%rax),%ecx
  0x00000001249840e0: add    $0x8,%ecx
  0x00000001249840e3: mov    %ecx,0x18(%rax)
  0x00000001249840e6: and    0x30(%rax),%ecx
  0x00000001249840e9: je     0x000000012498484c
  0x00000001249840ef: mov    %eax,-0x14000(%rsp)
  0x00000001249840f6: movb   $0x0,0x3dd(%r15)
  0x00000001249840fe: cmpb   $0x0,-0xf7ca02b(%rip)        # 0x00000001151ba0da = DTraceMethodProbes
  0x0000000124984105: je     0x0000000124984135
  0x000000012498410b: mov    -0x18(%rbp),%rsi
  0x000000012498410f: mov    %r15,%rdi
  0x0000000124984112: test   $0xf,%esp
  0x0000000124984118: je     0x0000000124984130
  0x000000012498411e: sub    $0x8,%rsp
  0x0000000124984122: callq  0x0000000114e9793e = SharedRuntime::dtrace_method_entry(JavaThread*, Method*)
  0x0000000124984127: add    $0x8,%rsp
  0x000000012498412b: jmpq   0x0000000124984135
  0x0000000124984130: callq  0x0000000114e9793e = SharedRuntime::dtrace_method_entry(JavaThread*, Method*)
  0x0000000124984135: mov    -0x18(%rbp),%rbx
  0x0000000124984139: mov    0x8(%rbx),%r11
  0x000000012498413d: movzwl 0x34(%r11),%r11d
  0x0000000124984142: shl    $0x3,%r11d
  0x0000000124984146: sub    %r11,%rsp
  0x0000000124984149: sub    $0x0,%rsp
  0x000000012498414d: and    $0xfffffffffffffff0,%rsp
  0x0000000124984151: mov    0x60(%rbx),%r11
  0x0000000124984155: test   %r11,%r11
  0x0000000124984158: jne    0x0000000124984205
  0x000000012498415e: callq  0x0000000124984168
  0x0000000124984163: jmpq   0x00000001249841fd
  0x0000000124984168: mov    %rbx,%rsi
  0x000000012498416b: lea    0x8(%rsp),%rax
  0x0000000124984170: mov    %r13,-0x40(%rbp)
  0x0000000124984174: mov    %r15,%rdi
  0x0000000124984177: vzeroupper 
  0x000000012498417a: mov    %rbp,0x330(%r15)
  0x0000000124984181: mov    %rax,0x320(%r15)
  0x0000000124984188: test   $0xf,%esp
  0x000000012498418e: je     0x00000001249841a6
  0x0000000124984194: sub    $0x8,%rsp
  0x0000000124984198: callq  0x0000000114baded2 = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0x000000012498419d: add    $0x8,%rsp
  0x00000001249841a1: jmpq   0x00000001249841ab
  0x00000001249841a6: callq  0x0000000114baded2 = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0x00000001249841ab: movabs $0x0,%r10
  0x00000001249841b5: mov    %r10,0x320(%r15)
  0x00000001249841bc: movabs $0x0,%r10
  0x00000001249841c6: mov    %r10,0x330(%r15)
  0x00000001249841cd: movabs $0x0,%r10
  0x00000001249841d7: mov    %r10,0x328(%r15)
  0x00000001249841de: vzeroupper 
  0x00000001249841e1: cmpq   $0x0,0x8(%r15)
  0x00000001249841e9: je     0x00000001249841f4
  0x00000001249841ef: jmpq   0x0000000124975780
  0x00000001249841f4: mov    -0x40(%rbp),%r13
  0x00000001249841f8: mov    -0x38(%rbp),%r14
  0x00000001249841fc: retq   
  0x00000001249841fd: mov    -0x18(%rbp),%rbx
  0x0000000124984201: mov    0x60(%rbx),%r11
  0x0000000124984205: callq  *%r11
  0x0000000124984208: mov    -0x18(%rbp),%rbx
  0x000000012498420c: mov    %rax,0x18(%rbp)
  0x0000000124984210: mov    0x20(%rbx),%r11d
  0x0000000124984214: test   $0x8,%r11d
  0x000000012498421b: je     0x000000012498423c
  0x0000000124984221: mov    0x8(%rbx),%r11
  0x0000000124984225: mov    0x8(%r11),%r11
  0x0000000124984229: mov    0x18(%r11),%r11
  0x000000012498422d: mov    0x70(%r11),%r11
  0x0000000124984231: mov    (%r11),%r11
  0x0000000124984234: mov    %r11,0x10(%rbp)
  0x0000000124984238: lea    0x10(%rbp),%rsi
  0x000000012498423c: mov    0x58(%rbx),%rax
  0x0000000124984240: movabs $0x114e975ed,%r10
  0x000000012498424a: cmp    %r10,%rax
  0x000000012498424d: jne    0x00000001249842fa
  0x0000000124984253: callq  0x000000012498425d
  0x0000000124984258: jmpq   0x00000001249842f2
  0x000000012498425d: mov    %rbx,%rsi
  0x0000000124984260: lea    0x8(%rsp),%rax
  0x0000000124984265: mov    %r13,-0x40(%rbp)
  0x0000000124984269: mov    %r15,%rdi
  0x000000012498426c: vzeroupper 
  0x000000012498426f: mov    %rbp,0x330(%r15)
  0x0000000124984276: mov    %rax,0x320(%r15)
  0x000000012498427d: test   $0xf,%esp
  0x0000000124984283: je     0x000000012498429b
  0x0000000124984289: sub    $0x8,%rsp
  0x000000012498428d: callq  0x0000000114baded2 = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0x0000000124984292: add    $0x8,%rsp
  0x0000000124984296: jmpq   0x00000001249842a0
  0x000000012498429b: callq  0x0000000114baded2 = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0x00000001249842a0: movabs $0x0,%r10
  0x00000001249842aa: mov    %r10,0x320(%r15)
  0x00000001249842b1: movabs $0x0,%r10
  0x00000001249842bb: mov    %r10,0x330(%r15)
  0x00000001249842c2: movabs $0x0,%r10
  0x00000001249842cc: mov    %r10,0x328(%r15)
  0x00000001249842d3: vzeroupper 
  0x00000001249842d6: cmpq   $0x0,0x8(%r15)
  0x00000001249842de: je     0x00000001249842e9
  0x00000001249842e4: jmpq   0x0000000124975780
  0x00000001249842e9: mov    -0x40(%rbp),%r13
  0x00000001249842ed: mov    -0x38(%rbp),%r14
  0x00000001249842f1: retq   
  0x00000001249842f2: mov    -0x18(%rbp),%rbx
  0x00000001249842f6: mov    0x58(%rbx),%rax
  0x00000001249842fa: lea    0x340(%r15),%rdi
  0x0000000124984301: vzeroupper 
  0x0000000124984304: mov    %rbp,0x330(%r15)
  0x000000012498430b: movabs $0x124984301,%r10
  0x0000000124984315: mov    %r10,0x328(%r15)
  0x000000012498431c: mov    %rsp,0x320(%r15)
  0x0000000124984323: movl   $0x4,0x3b8(%r15)
  0x000000012498432e: callq  *%rax
  0x0000000124984330: vzeroupper 
  0x0000000124984333: sub    $0x10,%rsp
  0x0000000124984337: vmovsd %xmm0,(%rsp)
  0x000000012498433c: sub    $0x10,%rsp
  0x0000000124984340: mov    %rax,(%rsp)
  0x0000000124984344: movabs $0x0,%r10
  0x000000012498434e: mov    %r10,0x8(%rsp)
  0x0000000124984353: movl   $0x5,0x3b8(%r15)
  0x000000012498435e: lock addl $0x0,-0x40(%rsp)
  0x0000000124984364: testb  $0x8,0x108(%r15)
  0x000000012498436c: jne    0x0000000124984383
  0x0000000124984372: cmpl   $0x0,0xd8(%r15)
  0x000000012498437d: je     0x000000012498439c
  0x0000000124984383: mov    %r15,%rdi
  0x0000000124984386: mov    %rsp,%r12
  0x0000000124984389: sub    $0x0,%rsp
  0x000000012498438d: and    $0xfffffffffffffff0,%rsp
  0x0000000124984391: callq  0x0000000114f71148 = JavaThread::check_special_condition_for_native_trans(JavaThread*)
  0x0000000124984396: mov    %r12,%rsp
  0x0000000124984399: xor    %r12,%r12
  0x000000012498439c: movl   $0x8,0x3b8(%r15)
  0x00000001249843a7: movabs $0x0,%r10
  0x00000001249843b1: mov    %r10,0x320(%r15)
  0x00000001249843b8: movabs $0x0,%r10
  0x00000001249843c2: mov    %r10,0x330(%r15)
  0x00000001249843c9: movabs $0x0,%r10
  0x00000001249843d3: mov    %r10,0x328(%r15)
  0x00000001249843da: vzeroupper 
  0x00000001249843dd: mov    0xe0(%r15),%r11
  0x00000001249843e4: movl   $0x0,0x100(%r11)
  0x00000001249843ef: movabs $0x1249813fb,%r11
  0x00000001249843f9: cmp    0x18(%rbp),%r11
  0x00000001249843fd: jne    0x00000001249844a9
  0x0000000124984403: mov    (%rsp),%rax
  0x0000000124984407: add    $0x10,%rsp
  0x000000012498440b: test   %rax,%rax
  0x000000012498440e: je     0x000000012498448e
  0x0000000124984414: test   $0x1,%rax
  0x000000012498441a: je     0x000000012498448b
  0x0000000124984420: mov    -0x1(%rax),%rax
  0x0000000124984424: cmpb   $0x0,0x30(%r15)
  0x0000000124984429: je     0x0000000124984486
  0x000000012498442f: cmp    $0x0,%rax
  0x0000000124984433: je     0x0000000124984486
  0x0000000124984439: mov    0x38(%r15),%r11
  0x000000012498443d: cmp    $0x0,%r11
  0x0000000124984441: je     0x000000012498445b
  0x0000000124984447: sub    $0x8,%r11
  0x000000012498444b: mov    %r11,0x38(%r15)
  0x000000012498444f: add    0x48(%r15),%r11
  0x0000000124984453: mov    %rax,(%r11)
  0x0000000124984456: jmpq   0x0000000124984486
  0x000000012498445b: push   %rax
  0x000000012498445c: mov    %r15,%rsi
  0x000000012498445f: mov    %rax,%rdi
  0x0000000124984462: test   $0xf,%esp
  0x0000000124984468: je     0x0000000124984480
  0x000000012498446e: sub    $0x8,%rsp
  0x0000000124984472: callq  0x0000000114b0185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x0000000124984477: add    $0x8,%rsp
  0x000000012498447b: jmpq   0x0000000124984485
  0x0000000124984480: callq  0x0000000114b0185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x0000000124984485: pop    %rax
  0x0000000124984486: jmpq   0x000000012498448e
  0x000000012498448b: mov    (%rax),%rax
  0x000000012498448e: mov    %rax,0x10(%rbp)
  0x0000000124984492: sub    $0x10,%rsp
  0x0000000124984496: mov    %rax,(%rsp)
  0x000000012498449a: movabs $0x0,%r10
  0x00000001249844a4: mov    %r10,0x8(%rsp)
  0x00000001249844a9: cmpl   $0x2,0x408(%r15)
  0x00000001249844b4: jne    0x0000000124984577
  0x00000001249844ba: mov    %rsp,-0x28(%rsp)
  0x00000001249844bf: sub    $0x80,%rsp
  0x00000001249844c6: mov    %rax,0x78(%rsp)
  0x00000001249844cb: mov    %rcx,0x70(%rsp)
  0x00000001249844d0: mov    %rdx,0x68(%rsp)
  0x00000001249844d5: mov    %rbx,0x60(%rsp)
  0x00000001249844da: mov    %rbp,0x50(%rsp)
  0x00000001249844df: mov    %rsi,0x48(%rsp)
  0x00000001249844e4: mov    %rdi,0x40(%rsp)
  0x00000001249844e9: mov    %r8,0x38(%rsp)
  0x00000001249844ee: mov    %r9,0x30(%rsp)
  0x00000001249844f3: mov    %r10,0x28(%rsp)
  0x00000001249844f8: mov    %r11,0x20(%rsp)
  0x00000001249844fd: mov    %r12,0x18(%rsp)
  0x0000000124984502: mov    %r13,0x10(%rsp)
  0x0000000124984507: mov    %r14,0x8(%rsp)
  0x000000012498450c: mov    %r15,(%rsp)
  0x0000000124984510: mov    %rsp,%r12
  0x0000000124984513: sub    $0x0,%rsp
  0x0000000124984517: and    $0xfffffffffffffff0,%rsp
  0x000000012498451b: callq  0x0000000114e99586 = SharedRuntime::reguard_yellow_pages()
  0x0000000124984520: mov    %r12,%rsp
  0x0000000124984523: mov    (%rsp),%r15
  0x0000000124984527: mov    0x8(%rsp),%r14
  0x000000012498452c: mov    0x10(%rsp),%r13
  0x0000000124984531: mov    0x18(%rsp),%r12
  0x0000000124984536: mov    0x20(%rsp),%r11
  0x000000012498453b: mov    0x28(%rsp),%r10
  0x0000000124984540: mov    0x30(%rsp),%r9
  0x0000000124984545: mov    0x38(%rsp),%r8
  0x000000012498454a: mov    0x40(%rsp),%rdi
  0x000000012498454f: mov    0x48(%rsp),%rsi
  0x0000000124984554: mov    0x50(%rsp),%rbp
  0x0000000124984559: mov    0x60(%rsp),%rbx
  0x000000012498455e: mov    0x68(%rsp),%rdx
  0x0000000124984563: mov    0x70(%rsp),%rcx
  0x0000000124984568: mov    0x78(%rsp),%rax
  0x000000012498456d: add    $0x80,%rsp
  0x0000000124984574: xor    %r12,%r12
  0x0000000124984577: mov    -0x18(%rbp),%rbx
  0x000000012498457b: mov    0x8(%rbx),%r13
  0x000000012498457f: lea    0x38(%r13),%r13
  0x0000000124984583: cmpq   $0x0,0x8(%r15)
  0x000000012498458b: je     0x0000000124984641
  0x0000000124984591: callq  0x000000012498459b
  0x0000000124984596: jmpq   0x000000012498462d
  0x000000012498459b: lea    0x8(%rsp),%rax
  0x00000001249845a0: mov    %r13,-0x40(%rbp)
  0x00000001249845a4: mov    %r15,%rdi
  0x00000001249845a7: vzeroupper 
  0x00000001249845aa: mov    %rbp,0x330(%r15)
  0x00000001249845b1: mov    %rax,0x320(%r15)
  0x00000001249845b8: test   $0xf,%esp
  0x00000001249845be: je     0x00000001249845d6
  0x00000001249845c4: sub    $0x8,%rsp
  0x00000001249845c8: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00000001249845cd: add    $0x8,%rsp
  0x00000001249845d1: jmpq   0x00000001249845db
  0x00000001249845d6: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00000001249845db: movabs $0x0,%r10
  0x00000001249845e5: mov    %r10,0x320(%r15)
  0x00000001249845ec: movabs $0x0,%r10
  0x00000001249845f6: mov    %r10,0x330(%r15)
  0x00000001249845fd: movabs $0x0,%r10
  0x0000000124984607: mov    %r10,0x328(%r15)
  0x000000012498460e: vzeroupper 
  0x0000000124984611: cmpq   $0x0,0x8(%r15)
  0x0000000124984619: je     0x0000000124984624
  0x000000012498461f: jmpq   0x0000000124975780
  0x0000000124984624: mov    -0x40(%rbp),%r13
  0x0000000124984628: mov    -0x38(%rbp),%r14
  0x000000012498462c: retq   
  0x000000012498462d: movabs $0x114ff3493,%rdi
  0x0000000124984637: and    $0xfffffffffffffff0,%rsp
  0x000000012498463b: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124984640: hlt    
  0x0000000124984641: mov    0x20(%rbx),%r11d
  0x0000000124984645: test   $0x20,%r11d
  0x000000012498464c: je     0x00000001249847f2
  0x0000000124984652: lea    -0x58(%rbp),%rsi
  0x0000000124984656: mov    0x8(%rsi),%r11
  0x000000012498465a: test   %r11,%r11
  0x000000012498465d: jne    0x0000000124984713
  0x0000000124984663: callq  0x000000012498466d
  0x0000000124984668: jmpq   0x00000001249846ff
  0x000000012498466d: lea    0x8(%rsp),%rax
  0x0000000124984672: mov    %r13,-0x40(%rbp)
  0x0000000124984676: mov    %r15,%rdi
  0x0000000124984679: vzeroupper 
  0x000000012498467c: mov    %rbp,0x330(%r15)
  0x0000000124984683: mov    %rax,0x320(%r15)
  0x000000012498468a: test   $0xf,%esp
  0x0000000124984690: je     0x00000001249846a8
  0x0000000124984696: sub    $0x8,%rsp
  0x000000012498469a: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000012498469f: add    $0x8,%rsp
  0x00000001249846a3: jmpq   0x00000001249846ad
  0x00000001249846a8: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00000001249846ad: movabs $0x0,%r10
  0x00000001249846b7: mov    %r10,0x320(%r15)
  0x00000001249846be: movabs $0x0,%r10
  0x00000001249846c8: mov    %r10,0x330(%r15)
  0x00000001249846cf: movabs $0x0,%r10
  0x00000001249846d9: mov    %r10,0x328(%r15)
  0x00000001249846e0: vzeroupper 
  0x00000001249846e3: cmpq   $0x0,0x8(%r15)
  0x00000001249846eb: je     0x00000001249846f6
  0x00000001249846f1: jmpq   0x0000000124975780
  0x00000001249846f6: mov    -0x40(%rbp),%r13
  0x00000001249846fa: mov    -0x38(%rbp),%r14
  0x00000001249846fe: retq   
  0x00000001249846ff: movabs $0x114ff3493,%rdi
  0x0000000124984709: and    $0xfffffffffffffff0,%rsp
  0x000000012498470d: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124984712: hlt    
  0x0000000124984713: mov    %r13,-0x40(%rbp)
  0x0000000124984717: lea    (%rsi),%rax
  0x000000012498471a: mov    0x8(%rsi),%rcx
  0x000000012498471e: movq   $0x0,0x8(%rsi)
  0x0000000124984726: mov    (%rcx),%rdx
  0x0000000124984729: and    $0x7,%rdx
  0x000000012498472d: cmp    $0x5,%rdx
  0x0000000124984731: je     0x00000001249847ee
  0x0000000124984737: mov    (%rax),%rdx
  0x000000012498473a: test   %rdx,%rdx
  0x000000012498473d: je     0x00000001249847ee
  0x0000000124984743: lock cmpxchg %rdx,(%rcx)
  0x0000000124984748: je     0x00000001249847ee
  0x000000012498474e: mov    %rcx,0x8(%rsi)
  0x0000000124984752: callq  0x000000012498475c
  0x0000000124984757: jmpq   0x00000001249847ee
  0x000000012498475c: lea    0x8(%rsp),%rax
  0x0000000124984761: mov    %r13,-0x40(%rbp)
  0x0000000124984765: mov    %r15,%rdi
  0x0000000124984768: vzeroupper 
  0x000000012498476b: mov    %rbp,0x330(%r15)
  0x0000000124984772: mov    %rax,0x320(%r15)
  0x0000000124984779: test   $0xf,%esp
  0x000000012498477f: je     0x0000000124984797
  0x0000000124984785: sub    $0x8,%rsp
  0x0000000124984789: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012498478e: add    $0x8,%rsp
  0x0000000124984792: jmpq   0x000000012498479c
  0x0000000124984797: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012498479c: movabs $0x0,%r10
  0x00000001249847a6: mov    %r10,0x320(%r15)
  0x00000001249847ad: movabs $0x0,%r10
  0x00000001249847b7: mov    %r10,0x330(%r15)
  0x00000001249847be: movabs $0x0,%r10
  0x00000001249847c8: mov    %r10,0x328(%r15)
  0x00000001249847cf: vzeroupper 
  0x00000001249847d2: cmpq   $0x0,0x8(%r15)
  0x00000001249847da: je     0x00000001249847e5
  0x00000001249847e0: jmpq   0x0000000124975780
  0x00000001249847e5: mov    -0x40(%rbp),%r13
  0x00000001249847e9: mov    -0x38(%rbp),%r14
  0x00000001249847ed: retq   
  0x00000001249847ee: mov    -0x40(%rbp),%r13
  0x00000001249847f2: cmpb   $0x0,-0xf7ca71f(%rip)        # 0x00000001151ba0da = DTraceMethodProbes
  0x00000001249847f9: je     0x0000000124984829
  0x00000001249847ff: mov    -0x18(%rbp),%rsi
  0x0000000124984803: mov    %r15,%rdi
  0x0000000124984806: test   $0xf,%esp
  0x000000012498480c: je     0x0000000124984824
  0x0000000124984812: sub    $0x8,%rsp
  0x0000000124984816: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000012498481b: add    $0x8,%rsp
  0x000000012498481f: jmpq   0x0000000124984829
  0x0000000124984824: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x0000000124984829: mov    (%rsp),%rax
  0x000000012498482d: add    $0x10,%rsp
  0x0000000124984831: vmovsd (%rsp),%xmm0
  0x0000000124984836: add    $0x10,%rsp
  0x000000012498483a: mov    0x18(%rbp),%r11
  0x000000012498483e: callq  *%r11
  0x0000000124984841: mov    -0x8(%rbp),%r11
  0x0000000124984845: leaveq 
  0x0000000124984846: pop    %rdi
  0x0000000124984847: mov    %r11,%rsp
  0x000000012498484a: jmpq   *%rdi
  0x000000012498484c: mov    $0x0,%esi
  0x0000000124984851: callq  0x000000012498485b
  0x0000000124984856: jmpq   0x00000001249848ed
  0x000000012498485b: lea    0x8(%rsp),%rax
  0x0000000124984860: mov    %r13,-0x40(%rbp)
  0x0000000124984864: mov    %r15,%rdi
  0x0000000124984867: vzeroupper 
  0x000000012498486a: mov    %rbp,0x330(%r15)
  0x0000000124984871: mov    %rax,0x320(%r15)
  0x0000000124984878: test   $0xf,%esp
  0x000000012498487e: je     0x0000000124984896
  0x0000000124984884: sub    $0x8,%rsp
  0x0000000124984888: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498488d: add    $0x8,%rsp
  0x0000000124984891: jmpq   0x000000012498489b
  0x0000000124984896: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498489b: movabs $0x0,%r10
  0x00000001249848a5: mov    %r10,0x320(%r15)
  0x00000001249848ac: movabs $0x0,%r10
  0x00000001249848b6: mov    %r10,0x330(%r15)
  0x00000001249848bd: movabs $0x0,%r10
  0x00000001249848c7: mov    %r10,0x328(%r15)
  0x00000001249848ce: vzeroupper 
  0x00000001249848d1: cmpq   $0x0,0x8(%r15)
  0x00000001249848d9: je     0x00000001249848e4
  0x00000001249848df: jmpq   0x0000000124975780
  0x00000001249848e4: mov    -0x40(%rbp),%r13
  0x00000001249848e8: mov    -0x38(%rbp),%r14
  0x00000001249848ec: retq   
  0x00000001249848ed: mov    -0x18(%rbp),%rbx
  0x00000001249848f1: jmpq   0x00000001249840ef
  0x00000001249848f6: xchg   %ax,%ax
  0x00000001249848f8: add    %al,(%rax)
  0x00000001249848fa: add    %al,(%rax)
  0x00000001249848fc: add    %al,(%rax)
  0x00000001249848fe: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = native_synchronized)  [0x0000000124984920, 0x0000000124985460]  2880 bytes

  0x0000000124984920: mov    0x8(%rbx),%rcx
  0x0000000124984924: movzwl 0x34(%rcx),%ecx
  0x0000000124984928: pop    %rax
  0x0000000124984929: lea    -0x8(%rsp,%rcx,8),%r14
  0x000000012498492e: pushq  $0x0
  0x0000000124984933: pushq  $0x0
  0x0000000124984938: push   %rax
  0x0000000124984939: push   %rbp
  0x000000012498493a: mov    %rsp,%rbp
  0x000000012498493d: push   %r13
  0x000000012498493f: pushq  $0x0
  0x0000000124984944: mov    0x8(%rbx),%r13
  0x0000000124984948: lea    0x38(%r13),%r13
  0x000000012498494c: push   %rbx
  0x000000012498494d: mov    0x8(%rbx),%rdx
  0x0000000124984951: mov    0x8(%rdx),%rdx
  0x0000000124984955: mov    0x18(%rdx),%rdx
  0x0000000124984959: mov    0x70(%rdx),%rdx
  0x000000012498495d: mov    (%rdx),%rdx
  0x0000000124984960: push   %rdx
  0x0000000124984961: mov    0x10(%rbx),%rdx
  0x0000000124984965: test   %rdx,%rdx
  0x0000000124984968: je     0x0000000124984975
  0x000000012498496e: add    $0x138,%rdx
  0x0000000124984975: push   %rdx
  0x0000000124984976: mov    0x8(%rbx),%rdx
  0x000000012498497a: mov    0x8(%rdx),%rdx
  0x000000012498497e: mov    0x10(%rdx),%rdx
  0x0000000124984982: push   %rdx
  0x0000000124984983: push   %r14
  0x0000000124984985: pushq  $0x0
  0x000000012498498a: pushq  $0x0
  0x000000012498498f: mov    %rsp,(%rsp)
  0x0000000124984993: movb   $0x1,0x3dd(%r15)
  0x000000012498499b: mov    0x10(%rbx),%rax
  0x000000012498499f: test   %rax,%rax
  0x00000001249849a2: je     0x00000001249849c4
  0x00000001249849a4: mov    0x104(%rax),%ecx
  0x00000001249849aa: add    $0x8,%ecx
  0x00000001249849ad: mov    %ecx,0x104(%rax)
  0x00000001249849b3: and    0x118(%rax),%ecx
  0x00000001249849b9: je     0x00000001249853a2
  0x00000001249849bf: jmpq   0x0000000124984a8f
  0x00000001249849c4: mov    0x18(%rbx),%rax
  0x00000001249849c8: test   %rax,%rax
  0x00000001249849cb: jne    0x0000000124984a7d
  0x00000001249849d1: callq  0x00000001249849db
  0x00000001249849d6: jmpq   0x0000000124984a70
  0x00000001249849db: mov    %rbx,%rsi
  0x00000001249849de: lea    0x8(%rsp),%rax
  0x00000001249849e3: mov    %r13,-0x40(%rbp)
  0x00000001249849e7: mov    %r15,%rdi
  0x00000001249849ea: vzeroupper 
  0x00000001249849ed: mov    %rbp,0x330(%r15)
  0x00000001249849f4: mov    %rax,0x320(%r15)
  0x00000001249849fb: test   $0xf,%esp
  0x0000000124984a01: je     0x0000000124984a19
  0x0000000124984a07: sub    $0x8,%rsp
  0x0000000124984a0b: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x0000000124984a10: add    $0x8,%rsp
  0x0000000124984a14: jmpq   0x0000000124984a1e
  0x0000000124984a19: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x0000000124984a1e: movabs $0x0,%r10
  0x0000000124984a28: mov    %r10,0x320(%r15)
  0x0000000124984a2f: movabs $0x0,%r10
  0x0000000124984a39: mov    %r10,0x330(%r15)
  0x0000000124984a40: movabs $0x0,%r10
  0x0000000124984a4a: mov    %r10,0x328(%r15)
  0x0000000124984a51: vzeroupper 
  0x0000000124984a54: cmpq   $0x0,0x8(%r15)
  0x0000000124984a5c: je     0x0000000124984a67
  0x0000000124984a62: jmpq   0x0000000124975780
  0x0000000124984a67: mov    -0x40(%rbp),%r13
  0x0000000124984a6b: mov    -0x38(%rbp),%r14
  0x0000000124984a6f: retq   
  0x0000000124984a70: mov    0x18(%rbx),%rax
  0x0000000124984a74: test   %rax,%rax
  0x0000000124984a77: je     0x0000000124984a8f
  0x0000000124984a7d: mov    0x18(%rax),%ecx
  0x0000000124984a80: add    $0x8,%ecx
  0x0000000124984a83: mov    %ecx,0x18(%rax)
  0x0000000124984a86: and    0x30(%rax),%ecx
  0x0000000124984a89: je     0x00000001249853a2
  0x0000000124984a8f: mov    %eax,-0x14000(%rsp)
  0x0000000124984a96: movb   $0x0,0x3dd(%r15)
  0x0000000124984a9e: mov    0x20(%rbx),%eax
  0x0000000124984aa1: test   $0x8,%eax
  0x0000000124984aa6: mov    (%r14),%rax
  0x0000000124984aa9: je     0x0000000124984ac2
  0x0000000124984aaf: mov    0x8(%rbx),%rax
  0x0000000124984ab3: mov    0x8(%rax),%rax
  0x0000000124984ab7: mov    0x18(%rax),%rax
  0x0000000124984abb: mov    0x70(%rax),%rax
  0x0000000124984abf: mov    (%rax),%rax
  0x0000000124984ac2: sub    $0x10,%rsp
  0x0000000124984ac6: mov    %rsp,-0x48(%rbp)
  0x0000000124984aca: mov    %rax,0x8(%rsp)
  0x0000000124984acf: mov    %rsp,%rsi
  0x0000000124984ad2: mov    0x8(%rsi),%rcx
  0x0000000124984ad6: mov    (%rcx),%rax
  0x0000000124984ad9: mov    %rax,%rbx
  0x0000000124984adc: and    $0x7,%rbx
  0x0000000124984ae0: cmp    $0x5,%rbx
  0x0000000124984ae4: jne    0x0000000124984b8f
  0x0000000124984aea: mov    0x8(%rcx),%ebx
  0x0000000124984aed: movabs $0x800000000,%r12
  0x0000000124984af7: add    %r12,%rbx
  0x0000000124984afa: xor    %r12,%r12
  0x0000000124984afd: mov    0xb8(%rbx),%rbx
  0x0000000124984b04: or     %r15,%rbx
  0x0000000124984b07: xor    %rax,%rbx
  0x0000000124984b0a: and    $0xffffffffffffff87,%rbx
  0x0000000124984b0e: je     0x0000000124984c54
  0x0000000124984b14: test   $0x7,%rbx
  0x0000000124984b1b: jne    0x0000000124984b70
  0x0000000124984b1d: test   $0x300,%rbx
  0x0000000124984b24: jne    0x0000000124984b43
  0x0000000124984b26: and    $0x37f,%rax
  0x0000000124984b2d: mov    %rax,%rbx
  0x0000000124984b30: or     %r15,%rbx
  0x0000000124984b33: lock cmpxchg %rbx,(%rcx)
  0x0000000124984b38: jne    0x0000000124984bb8
  0x0000000124984b3e: jmpq   0x0000000124984c54
  0x0000000124984b43: mov    0x8(%rcx),%ebx
  0x0000000124984b46: movabs $0x800000000,%r12
  0x0000000124984b50: add    %r12,%rbx
  0x0000000124984b53: xor    %r12,%r12
  0x0000000124984b56: mov    0xb8(%rbx),%rbx
  0x0000000124984b5d: or     %r15,%rbx
  0x0000000124984b60: lock cmpxchg %rbx,(%rcx)
  0x0000000124984b65: jne    0x0000000124984bb8
  0x0000000124984b6b: jmpq   0x0000000124984c54
  0x0000000124984b70: mov    0x8(%rcx),%ebx
  0x0000000124984b73: movabs $0x800000000,%r12
  0x0000000124984b7d: add    %r12,%rbx
  0x0000000124984b80: xor    %r12,%r12
  0x0000000124984b83: mov    0xb8(%rbx),%rbx
  0x0000000124984b8a: lock cmpxchg %rbx,(%rcx)
  0x0000000124984b8f: mov    $0x1,%eax
  0x0000000124984b94: or     (%rcx),%rax
  0x0000000124984b97: mov    %rax,(%rsi)
  0x0000000124984b9a: lock cmpxchg %rsi,(%rcx)
  0x0000000124984b9f: je     0x0000000124984c54
  0x0000000124984ba5: sub    %rsp,%rax
  0x0000000124984ba8: and    $0xfffffffffffff007,%rax
  0x0000000124984baf: mov    %rax,(%rsi)
  0x0000000124984bb2: je     0x0000000124984c54
  0x0000000124984bb8: callq  0x0000000124984bc2
  0x0000000124984bbd: jmpq   0x0000000124984c54
  0x0000000124984bc2: lea    0x8(%rsp),%rax
  0x0000000124984bc7: mov    %r13,-0x40(%rbp)
  0x0000000124984bcb: mov    %r15,%rdi
  0x0000000124984bce: vzeroupper 
  0x0000000124984bd1: mov    %rbp,0x330(%r15)
  0x0000000124984bd8: mov    %rax,0x320(%r15)
  0x0000000124984bdf: test   $0xf,%esp
  0x0000000124984be5: je     0x0000000124984bfd
  0x0000000124984beb: sub    $0x8,%rsp
  0x0000000124984bef: callq  0x0000000114babba4 = InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*)
  0x0000000124984bf4: add    $0x8,%rsp
  0x0000000124984bf8: jmpq   0x0000000124984c02
  0x0000000124984bfd: callq  0x0000000114babba4 = InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*)
  0x0000000124984c02: movabs $0x0,%r10
  0x0000000124984c0c: mov    %r10,0x320(%r15)
  0x0000000124984c13: movabs $0x0,%r10
  0x0000000124984c1d: mov    %r10,0x330(%r15)
  0x0000000124984c24: movabs $0x0,%r10
  0x0000000124984c2e: mov    %r10,0x328(%r15)
  0x0000000124984c35: vzeroupper 
  0x0000000124984c38: cmpq   $0x0,0x8(%r15)
  0x0000000124984c40: je     0x0000000124984c4b
  0x0000000124984c46: jmpq   0x0000000124975780
  0x0000000124984c4b: mov    -0x40(%rbp),%r13
  0x0000000124984c4f: mov    -0x38(%rbp),%r14
  0x0000000124984c53: retq   
  0x0000000124984c54: cmpb   $0x0,-0xf7cab81(%rip)        # 0x00000001151ba0da = DTraceMethodProbes
  0x0000000124984c5b: je     0x0000000124984c8b
  0x0000000124984c61: mov    -0x18(%rbp),%rsi
  0x0000000124984c65: mov    %r15,%rdi
  0x0000000124984c68: test   $0xf,%esp
  0x0000000124984c6e: je     0x0000000124984c86
  0x0000000124984c74: sub    $0x8,%rsp
  0x0000000124984c78: callq  0x0000000114e9793e = SharedRuntime::dtrace_method_entry(JavaThread*, Method*)
  0x0000000124984c7d: add    $0x8,%rsp
  0x0000000124984c81: jmpq   0x0000000124984c8b
  0x0000000124984c86: callq  0x0000000114e9793e = SharedRuntime::dtrace_method_entry(JavaThread*, Method*)
  0x0000000124984c8b: mov    -0x18(%rbp),%rbx
  0x0000000124984c8f: mov    0x8(%rbx),%r11
  0x0000000124984c93: movzwl 0x34(%r11),%r11d
  0x0000000124984c98: shl    $0x3,%r11d
  0x0000000124984c9c: sub    %r11,%rsp
  0x0000000124984c9f: sub    $0x0,%rsp
  0x0000000124984ca3: and    $0xfffffffffffffff0,%rsp
  0x0000000124984ca7: mov    0x60(%rbx),%r11
  0x0000000124984cab: test   %r11,%r11
  0x0000000124984cae: jne    0x0000000124984d5b
  0x0000000124984cb4: callq  0x0000000124984cbe
  0x0000000124984cb9: jmpq   0x0000000124984d53
  0x0000000124984cbe: mov    %rbx,%rsi
  0x0000000124984cc1: lea    0x8(%rsp),%rax
  0x0000000124984cc6: mov    %r13,-0x40(%rbp)
  0x0000000124984cca: mov    %r15,%rdi
  0x0000000124984ccd: vzeroupper 
  0x0000000124984cd0: mov    %rbp,0x330(%r15)
  0x0000000124984cd7: mov    %rax,0x320(%r15)
  0x0000000124984cde: test   $0xf,%esp
  0x0000000124984ce4: je     0x0000000124984cfc
  0x0000000124984cea: sub    $0x8,%rsp
  0x0000000124984cee: callq  0x0000000114baded2 = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0x0000000124984cf3: add    $0x8,%rsp
  0x0000000124984cf7: jmpq   0x0000000124984d01
  0x0000000124984cfc: callq  0x0000000114baded2 = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0x0000000124984d01: movabs $0x0,%r10
  0x0000000124984d0b: mov    %r10,0x320(%r15)
  0x0000000124984d12: movabs $0x0,%r10
  0x0000000124984d1c: mov    %r10,0x330(%r15)
  0x0000000124984d23: movabs $0x0,%r10
  0x0000000124984d2d: mov    %r10,0x328(%r15)
  0x0000000124984d34: vzeroupper 
  0x0000000124984d37: cmpq   $0x0,0x8(%r15)
  0x0000000124984d3f: je     0x0000000124984d4a
  0x0000000124984d45: jmpq   0x0000000124975780
  0x0000000124984d4a: mov    -0x40(%rbp),%r13
  0x0000000124984d4e: mov    -0x38(%rbp),%r14
  0x0000000124984d52: retq   
  0x0000000124984d53: mov    -0x18(%rbp),%rbx
  0x0000000124984d57: mov    0x60(%rbx),%r11
  0x0000000124984d5b: callq  *%r11
  0x0000000124984d5e: mov    -0x18(%rbp),%rbx
  0x0000000124984d62: mov    %rax,0x18(%rbp)
  0x0000000124984d66: mov    0x20(%rbx),%r11d
  0x0000000124984d6a: test   $0x8,%r11d
  0x0000000124984d71: je     0x0000000124984d92
  0x0000000124984d77: mov    0x8(%rbx),%r11
  0x0000000124984d7b: mov    0x8(%r11),%r11
  0x0000000124984d7f: mov    0x18(%r11),%r11
  0x0000000124984d83: mov    0x70(%r11),%r11
  0x0000000124984d87: mov    (%r11),%r11
  0x0000000124984d8a: mov    %r11,0x10(%rbp)
  0x0000000124984d8e: lea    0x10(%rbp),%rsi
  0x0000000124984d92: mov    0x58(%rbx),%rax
  0x0000000124984d96: movabs $0x114e975ed,%r10
  0x0000000124984da0: cmp    %r10,%rax
  0x0000000124984da3: jne    0x0000000124984e50
  0x0000000124984da9: callq  0x0000000124984db3
  0x0000000124984dae: jmpq   0x0000000124984e48
  0x0000000124984db3: mov    %rbx,%rsi
  0x0000000124984db6: lea    0x8(%rsp),%rax
  0x0000000124984dbb: mov    %r13,-0x40(%rbp)
  0x0000000124984dbf: mov    %r15,%rdi
  0x0000000124984dc2: vzeroupper 
  0x0000000124984dc5: mov    %rbp,0x330(%r15)
  0x0000000124984dcc: mov    %rax,0x320(%r15)
  0x0000000124984dd3: test   $0xf,%esp
  0x0000000124984dd9: je     0x0000000124984df1
  0x0000000124984ddf: sub    $0x8,%rsp
  0x0000000124984de3: callq  0x0000000114baded2 = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0x0000000124984de8: add    $0x8,%rsp
  0x0000000124984dec: jmpq   0x0000000124984df6
  0x0000000124984df1: callq  0x0000000114baded2 = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0x0000000124984df6: movabs $0x0,%r10
  0x0000000124984e00: mov    %r10,0x320(%r15)
  0x0000000124984e07: movabs $0x0,%r10
  0x0000000124984e11: mov    %r10,0x330(%r15)
  0x0000000124984e18: movabs $0x0,%r10
  0x0000000124984e22: mov    %r10,0x328(%r15)
  0x0000000124984e29: vzeroupper 
  0x0000000124984e2c: cmpq   $0x0,0x8(%r15)
  0x0000000124984e34: je     0x0000000124984e3f
  0x0000000124984e3a: jmpq   0x0000000124975780
  0x0000000124984e3f: mov    -0x40(%rbp),%r13
  0x0000000124984e43: mov    -0x38(%rbp),%r14
  0x0000000124984e47: retq   
  0x0000000124984e48: mov    -0x18(%rbp),%rbx
  0x0000000124984e4c: mov    0x58(%rbx),%rax
  0x0000000124984e50: lea    0x340(%r15),%rdi
  0x0000000124984e57: vzeroupper 
  0x0000000124984e5a: mov    %rbp,0x330(%r15)
  0x0000000124984e61: movabs $0x124984e57,%r10
  0x0000000124984e6b: mov    %r10,0x328(%r15)
  0x0000000124984e72: mov    %rsp,0x320(%r15)
  0x0000000124984e79: movl   $0x4,0x3b8(%r15)
  0x0000000124984e84: callq  *%rax
  0x0000000124984e86: vzeroupper 
  0x0000000124984e89: sub    $0x10,%rsp
  0x0000000124984e8d: vmovsd %xmm0,(%rsp)
  0x0000000124984e92: sub    $0x10,%rsp
  0x0000000124984e96: mov    %rax,(%rsp)
  0x0000000124984e9a: movabs $0x0,%r10
  0x0000000124984ea4: mov    %r10,0x8(%rsp)
  0x0000000124984ea9: movl   $0x5,0x3b8(%r15)
  0x0000000124984eb4: lock addl $0x0,-0x40(%rsp)
  0x0000000124984eba: testb  $0x8,0x108(%r15)
  0x0000000124984ec2: jne    0x0000000124984ed9
  0x0000000124984ec8: cmpl   $0x0,0xd8(%r15)
  0x0000000124984ed3: je     0x0000000124984ef2
  0x0000000124984ed9: mov    %r15,%rdi
  0x0000000124984edc: mov    %rsp,%r12
  0x0000000124984edf: sub    $0x0,%rsp
  0x0000000124984ee3: and    $0xfffffffffffffff0,%rsp
  0x0000000124984ee7: callq  0x0000000114f71148 = JavaThread::check_special_condition_for_native_trans(JavaThread*)
  0x0000000124984eec: mov    %r12,%rsp
  0x0000000124984eef: xor    %r12,%r12
  0x0000000124984ef2: movl   $0x8,0x3b8(%r15)
  0x0000000124984efd: movabs $0x0,%r10
  0x0000000124984f07: mov    %r10,0x320(%r15)
  0x0000000124984f0e: movabs $0x0,%r10
  0x0000000124984f18: mov    %r10,0x330(%r15)
  0x0000000124984f1f: movabs $0x0,%r10
  0x0000000124984f29: mov    %r10,0x328(%r15)
  0x0000000124984f30: vzeroupper 
  0x0000000124984f33: mov    0xe0(%r15),%r11
  0x0000000124984f3a: movl   $0x0,0x100(%r11)
  0x0000000124984f45: movabs $0x1249813fb,%r11
  0x0000000124984f4f: cmp    0x18(%rbp),%r11
  0x0000000124984f53: jne    0x0000000124984fff
  0x0000000124984f59: mov    (%rsp),%rax
  0x0000000124984f5d: add    $0x10,%rsp
  0x0000000124984f61: test   %rax,%rax
  0x0000000124984f64: je     0x0000000124984fe4
  0x0000000124984f6a: test   $0x1,%rax
  0x0000000124984f70: je     0x0000000124984fe1
  0x0000000124984f76: mov    -0x1(%rax),%rax
  0x0000000124984f7a: cmpb   $0x0,0x30(%r15)
  0x0000000124984f7f: je     0x0000000124984fdc
  0x0000000124984f85: cmp    $0x0,%rax
  0x0000000124984f89: je     0x0000000124984fdc
  0x0000000124984f8f: mov    0x38(%r15),%r11
  0x0000000124984f93: cmp    $0x0,%r11
  0x0000000124984f97: je     0x0000000124984fb1
  0x0000000124984f9d: sub    $0x8,%r11
  0x0000000124984fa1: mov    %r11,0x38(%r15)
  0x0000000124984fa5: add    0x48(%r15),%r11
  0x0000000124984fa9: mov    %rax,(%r11)
  0x0000000124984fac: jmpq   0x0000000124984fdc
  0x0000000124984fb1: push   %rax
  0x0000000124984fb2: mov    %r15,%rsi
  0x0000000124984fb5: mov    %rax,%rdi
  0x0000000124984fb8: test   $0xf,%esp
  0x0000000124984fbe: je     0x0000000124984fd6
  0x0000000124984fc4: sub    $0x8,%rsp
  0x0000000124984fc8: callq  0x0000000114b0185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x0000000124984fcd: add    $0x8,%rsp
  0x0000000124984fd1: jmpq   0x0000000124984fdb
  0x0000000124984fd6: callq  0x0000000114b0185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x0000000124984fdb: pop    %rax
  0x0000000124984fdc: jmpq   0x0000000124984fe4
  0x0000000124984fe1: mov    (%rax),%rax
  0x0000000124984fe4: mov    %rax,0x10(%rbp)
  0x0000000124984fe8: sub    $0x10,%rsp
  0x0000000124984fec: mov    %rax,(%rsp)
  0x0000000124984ff0: movabs $0x0,%r10
  0x0000000124984ffa: mov    %r10,0x8(%rsp)
  0x0000000124984fff: cmpl   $0x2,0x408(%r15)
  0x000000012498500a: jne    0x00000001249850cd
  0x0000000124985010: mov    %rsp,-0x28(%rsp)
  0x0000000124985015: sub    $0x80,%rsp
  0x000000012498501c: mov    %rax,0x78(%rsp)
  0x0000000124985021: mov    %rcx,0x70(%rsp)
  0x0000000124985026: mov    %rdx,0x68(%rsp)
  0x000000012498502b: mov    %rbx,0x60(%rsp)
  0x0000000124985030: mov    %rbp,0x50(%rsp)
  0x0000000124985035: mov    %rsi,0x48(%rsp)
  0x000000012498503a: mov    %rdi,0x40(%rsp)
  0x000000012498503f: mov    %r8,0x38(%rsp)
  0x0000000124985044: mov    %r9,0x30(%rsp)
  0x0000000124985049: mov    %r10,0x28(%rsp)
  0x000000012498504e: mov    %r11,0x20(%rsp)
  0x0000000124985053: mov    %r12,0x18(%rsp)
  0x0000000124985058: mov    %r13,0x10(%rsp)
  0x000000012498505d: mov    %r14,0x8(%rsp)
  0x0000000124985062: mov    %r15,(%rsp)
  0x0000000124985066: mov    %rsp,%r12
  0x0000000124985069: sub    $0x0,%rsp
  0x000000012498506d: and    $0xfffffffffffffff0,%rsp
  0x0000000124985071: callq  0x0000000114e99586 = SharedRuntime::reguard_yellow_pages()
  0x0000000124985076: mov    %r12,%rsp
  0x0000000124985079: mov    (%rsp),%r15
  0x000000012498507d: mov    0x8(%rsp),%r14
  0x0000000124985082: mov    0x10(%rsp),%r13
  0x0000000124985087: mov    0x18(%rsp),%r12
  0x000000012498508c: mov    0x20(%rsp),%r11
  0x0000000124985091: mov    0x28(%rsp),%r10
  0x0000000124985096: mov    0x30(%rsp),%r9
  0x000000012498509b: mov    0x38(%rsp),%r8
  0x00000001249850a0: mov    0x40(%rsp),%rdi
  0x00000001249850a5: mov    0x48(%rsp),%rsi
  0x00000001249850aa: mov    0x50(%rsp),%rbp
  0x00000001249850af: mov    0x60(%rsp),%rbx
  0x00000001249850b4: mov    0x68(%rsp),%rdx
  0x00000001249850b9: mov    0x70(%rsp),%rcx
  0x00000001249850be: mov    0x78(%rsp),%rax
  0x00000001249850c3: add    $0x80,%rsp
  0x00000001249850ca: xor    %r12,%r12
  0x00000001249850cd: mov    -0x18(%rbp),%rbx
  0x00000001249850d1: mov    0x8(%rbx),%r13
  0x00000001249850d5: lea    0x38(%r13),%r13
  0x00000001249850d9: cmpq   $0x0,0x8(%r15)
  0x00000001249850e1: je     0x0000000124985197
  0x00000001249850e7: callq  0x00000001249850f1
  0x00000001249850ec: jmpq   0x0000000124985183
  0x00000001249850f1: lea    0x8(%rsp),%rax
  0x00000001249850f6: mov    %r13,-0x40(%rbp)
  0x00000001249850fa: mov    %r15,%rdi
  0x00000001249850fd: vzeroupper 
  0x0000000124985100: mov    %rbp,0x330(%r15)
  0x0000000124985107: mov    %rax,0x320(%r15)
  0x000000012498510e: test   $0xf,%esp
  0x0000000124985114: je     0x000000012498512c
  0x000000012498511a: sub    $0x8,%rsp
  0x000000012498511e: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124985123: add    $0x8,%rsp
  0x0000000124985127: jmpq   0x0000000124985131
  0x000000012498512c: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124985131: movabs $0x0,%r10
  0x000000012498513b: mov    %r10,0x320(%r15)
  0x0000000124985142: movabs $0x0,%r10
  0x000000012498514c: mov    %r10,0x330(%r15)
  0x0000000124985153: movabs $0x0,%r10
  0x000000012498515d: mov    %r10,0x328(%r15)
  0x0000000124985164: vzeroupper 
  0x0000000124985167: cmpq   $0x0,0x8(%r15)
  0x000000012498516f: je     0x000000012498517a
  0x0000000124985175: jmpq   0x0000000124975780
  0x000000012498517a: mov    -0x40(%rbp),%r13
  0x000000012498517e: mov    -0x38(%rbp),%r14
  0x0000000124985182: retq   
  0x0000000124985183: movabs $0x114ff3493,%rdi
  0x000000012498518d: and    $0xfffffffffffffff0,%rsp
  0x0000000124985191: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124985196: hlt    
  0x0000000124985197: mov    0x20(%rbx),%r11d
  0x000000012498519b: test   $0x20,%r11d
  0x00000001249851a2: je     0x0000000124985348
  0x00000001249851a8: lea    -0x58(%rbp),%rsi
  0x00000001249851ac: mov    0x8(%rsi),%r11
  0x00000001249851b0: test   %r11,%r11
  0x00000001249851b3: jne    0x0000000124985269
  0x00000001249851b9: callq  0x00000001249851c3
  0x00000001249851be: jmpq   0x0000000124985255
  0x00000001249851c3: lea    0x8(%rsp),%rax
  0x00000001249851c8: mov    %r13,-0x40(%rbp)
  0x00000001249851cc: mov    %r15,%rdi
  0x00000001249851cf: vzeroupper 
  0x00000001249851d2: mov    %rbp,0x330(%r15)
  0x00000001249851d9: mov    %rax,0x320(%r15)
  0x00000001249851e0: test   $0xf,%esp
  0x00000001249851e6: je     0x00000001249851fe
  0x00000001249851ec: sub    $0x8,%rsp
  0x00000001249851f0: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00000001249851f5: add    $0x8,%rsp
  0x00000001249851f9: jmpq   0x0000000124985203
  0x00000001249851fe: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x0000000124985203: movabs $0x0,%r10
  0x000000012498520d: mov    %r10,0x320(%r15)
  0x0000000124985214: movabs $0x0,%r10
  0x000000012498521e: mov    %r10,0x330(%r15)
  0x0000000124985225: movabs $0x0,%r10
  0x000000012498522f: mov    %r10,0x328(%r15)
  0x0000000124985236: vzeroupper 
  0x0000000124985239: cmpq   $0x0,0x8(%r15)
  0x0000000124985241: je     0x000000012498524c
  0x0000000124985247: jmpq   0x0000000124975780
  0x000000012498524c: mov    -0x40(%rbp),%r13
  0x0000000124985250: mov    -0x38(%rbp),%r14
  0x0000000124985254: retq   
  0x0000000124985255: movabs $0x114ff3493,%rdi
  0x000000012498525f: and    $0xfffffffffffffff0,%rsp
  0x0000000124985263: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124985268: hlt    
  0x0000000124985269: mov    %r13,-0x40(%rbp)
  0x000000012498526d: lea    (%rsi),%rax
  0x0000000124985270: mov    0x8(%rsi),%rcx
  0x0000000124985274: movq   $0x0,0x8(%rsi)
  0x000000012498527c: mov    (%rcx),%rdx
  0x000000012498527f: and    $0x7,%rdx
  0x0000000124985283: cmp    $0x5,%rdx
  0x0000000124985287: je     0x0000000124985344
  0x000000012498528d: mov    (%rax),%rdx
  0x0000000124985290: test   %rdx,%rdx
  0x0000000124985293: je     0x0000000124985344
  0x0000000124985299: lock cmpxchg %rdx,(%rcx)
  0x000000012498529e: je     0x0000000124985344
  0x00000001249852a4: mov    %rcx,0x8(%rsi)
  0x00000001249852a8: callq  0x00000001249852b2
  0x00000001249852ad: jmpq   0x0000000124985344
  0x00000001249852b2: lea    0x8(%rsp),%rax
  0x00000001249852b7: mov    %r13,-0x40(%rbp)
  0x00000001249852bb: mov    %r15,%rdi
  0x00000001249852be: vzeroupper 
  0x00000001249852c1: mov    %rbp,0x330(%r15)
  0x00000001249852c8: mov    %rax,0x320(%r15)
  0x00000001249852cf: test   $0xf,%esp
  0x00000001249852d5: je     0x00000001249852ed
  0x00000001249852db: sub    $0x8,%rsp
  0x00000001249852df: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00000001249852e4: add    $0x8,%rsp
  0x00000001249852e8: jmpq   0x00000001249852f2
  0x00000001249852ed: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00000001249852f2: movabs $0x0,%r10
  0x00000001249852fc: mov    %r10,0x320(%r15)
  0x0000000124985303: movabs $0x0,%r10
  0x000000012498530d: mov    %r10,0x330(%r15)
  0x0000000124985314: movabs $0x0,%r10
  0x000000012498531e: mov    %r10,0x328(%r15)
  0x0000000124985325: vzeroupper 
  0x0000000124985328: cmpq   $0x0,0x8(%r15)
  0x0000000124985330: je     0x000000012498533b
  0x0000000124985336: jmpq   0x0000000124975780
  0x000000012498533b: mov    -0x40(%rbp),%r13
  0x000000012498533f: mov    -0x38(%rbp),%r14
  0x0000000124985343: retq   
  0x0000000124985344: mov    -0x40(%rbp),%r13
  0x0000000124985348: cmpb   $0x0,-0xf7cb275(%rip)        # 0x00000001151ba0da = DTraceMethodProbes
  0x000000012498534f: je     0x000000012498537f
  0x0000000124985355: mov    -0x18(%rbp),%rsi
  0x0000000124985359: mov    %r15,%rdi
  0x000000012498535c: test   $0xf,%esp
  0x0000000124985362: je     0x000000012498537a
  0x0000000124985368: sub    $0x8,%rsp
  0x000000012498536c: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x0000000124985371: add    $0x8,%rsp
  0x0000000124985375: jmpq   0x000000012498537f
  0x000000012498537a: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000012498537f: mov    (%rsp),%rax
  0x0000000124985383: add    $0x10,%rsp
  0x0000000124985387: vmovsd (%rsp),%xmm0
  0x000000012498538c: add    $0x10,%rsp
  0x0000000124985390: mov    0x18(%rbp),%r11
  0x0000000124985394: callq  *%r11
  0x0000000124985397: mov    -0x8(%rbp),%r11
  0x000000012498539b: leaveq 
  0x000000012498539c: pop    %rdi
  0x000000012498539d: mov    %r11,%rsp
  0x00000001249853a0: jmpq   *%rdi
  0x00000001249853a2: mov    $0x0,%esi
  0x00000001249853a7: callq  0x00000001249853b1
  0x00000001249853ac: jmpq   0x0000000124985443
  0x00000001249853b1: lea    0x8(%rsp),%rax
  0x00000001249853b6: mov    %r13,-0x40(%rbp)
  0x00000001249853ba: mov    %r15,%rdi
  0x00000001249853bd: vzeroupper 
  0x00000001249853c0: mov    %rbp,0x330(%r15)
  0x00000001249853c7: mov    %rax,0x320(%r15)
  0x00000001249853ce: test   $0xf,%esp
  0x00000001249853d4: je     0x00000001249853ec
  0x00000001249853da: sub    $0x8,%rsp
  0x00000001249853de: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00000001249853e3: add    $0x8,%rsp
  0x00000001249853e7: jmpq   0x00000001249853f1
  0x00000001249853ec: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00000001249853f1: movabs $0x0,%r10
  0x00000001249853fb: mov    %r10,0x320(%r15)
  0x0000000124985402: movabs $0x0,%r10
  0x000000012498540c: mov    %r10,0x330(%r15)
  0x0000000124985413: movabs $0x0,%r10
  0x000000012498541d: mov    %r10,0x328(%r15)
  0x0000000124985424: vzeroupper 
  0x0000000124985427: cmpq   $0x0,0x8(%r15)
  0x000000012498542f: je     0x000000012498543a
  0x0000000124985435: jmpq   0x0000000124975780
  0x000000012498543a: mov    -0x40(%rbp),%r13
  0x000000012498543e: mov    -0x38(%rbp),%r14
  0x0000000124985442: retq   
  0x0000000124985443: mov    -0x18(%rbp),%rbx
  0x0000000124985447: jmpq   0x0000000124984a8f
  0x000000012498544c: nopl   0x0(%rax)
  0x0000000124985450: add    %al,(%rax)
  0x0000000124985452: add    %al,(%rax)
  0x0000000124985454: add    %al,(%rax)
  0x0000000124985456: add    %al,(%rax)
  0x0000000124985458: add    %al,(%rax)
  0x000000012498545a: add    %al,(%rax)
  0x000000012498545c: add    %al,(%rax)
  0x000000012498545e: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_util_zip_CRC32_update)  [0x0000000124985480, 0x00000001249854c0]  64 bytes

  0x0000000124985480: testb  $0x8,0x108(%r15)
  0x0000000124985488: jne    0x00000001249854b8
  0x000000012498548e: mov    0x8(%rsp),%edi
  0x0000000124985492: mov    0x10(%rsp),%eax
  0x0000000124985496: movabs $0x115195a30,%rsi
  0x00000001249854a0: not    %eax
  0x00000001249854a2: xor    %eax,%edi
  0x00000001249854a4: and    $0xff,%edi
  0x00000001249854aa: shr    $0x8,%eax
  0x00000001249854ad: xor    (%rsi,%rdi,4),%eax
  0x00000001249854b0: not    %eax
  0x00000001249854b2: pop    %rdi
  0x00000001249854b3: mov    %r13,%rsp
  0x00000001249854b6: jmpq   *%rdi
  0x00000001249854b8: jmpq   0x0000000124983f80
  0x00000001249854bd: data16 xchg %ax,%ax

----------------------------------------------------------------------
method entry point (kind = java_util_zip_CRC32_updateBytes)  [0x00000001249854e0, 0x0000000124985540]  96 bytes

  0x00000001249854e0: testb  $0x8,0x108(%r15)
  0x00000001249854e8: jne    0x0000000124985530
  0x00000001249854ee: mov    0x18(%rsp),%rsi
  0x00000001249854f3: add    $0x10,%rsi
  0x00000001249854f7: movslq 0x10(%rsp),%rdx
  0x00000001249854fc: add    %rdx,%rsi
  0x00000001249854ff: mov    0x20(%rsp),%edi
  0x0000000124985503: mov    0x8(%rsp),%edx
  0x0000000124985507: test   $0xf,%esp
  0x000000012498550d: je     0x0000000124985525
  0x0000000124985513: sub    $0x8,%rsp
  0x0000000124985517: callq  0x0000000124975940
  0x000000012498551c: add    $0x8,%rsp
  0x0000000124985520: jmpq   0x000000012498552a
  0x0000000124985525: callq  0x0000000124975940
  0x000000012498552a: pop    %rdi
  0x000000012498552b: mov    %r13,%rsp
  0x000000012498552e: jmpq   *%rdi
  0x0000000124985530: jmpq   0x0000000124983f80
  0x0000000124985535: data16 xchg %ax,%ax
  0x0000000124985538: add    %al,(%rax)
  0x000000012498553a: add    %al,(%rax)
  0x000000012498553c: add    %al,(%rax)
  0x000000012498553e: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_util_zip_CRC32_updateByteBuffer)  [0x0000000124985560, 0x00000001249855c0]  96 bytes

  0x0000000124985560: testb  $0x8,0x108(%r15)
  0x0000000124985568: jne    0x00000001249855ac
  0x000000012498556e: mov    0x18(%rsp),%rsi
  0x0000000124985573: movslq 0x10(%rsp),%rdx
  0x0000000124985578: add    %rdx,%rsi
  0x000000012498557b: mov    0x28(%rsp),%edi
  0x000000012498557f: mov    0x8(%rsp),%edx
  0x0000000124985583: test   $0xf,%esp
  0x0000000124985589: je     0x00000001249855a1
  0x000000012498558f: sub    $0x8,%rsp
  0x0000000124985593: callq  0x0000000124975940
  0x0000000124985598: add    $0x8,%rsp
  0x000000012498559c: jmpq   0x00000001249855a6
  0x00000001249855a1: callq  0x0000000124975940
  0x00000001249855a6: pop    %rdi
  0x00000001249855a7: mov    %r13,%rsp
  0x00000001249855aa: jmpq   *%rdi
  0x00000001249855ac: jmpq   0x0000000124983f80
  0x00000001249855b1: nopl   0x0(%rax)
  0x00000001249855b8: add    %al,(%rax)
  0x00000001249855ba: add    %al,(%rax)
  0x00000001249855bc: add    %al,(%rax)
  0x00000001249855be: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_util_zip_CRC32C_updateBytes)  [0x00000001249855e0, 0x0000000124985640]  96 bytes

  0x00000001249855e0: mov    0x18(%rsp),%rsi
  0x00000001249855e5: add    $0x10,%rsi
  0x00000001249855e9: movslq 0x10(%rsp),%rcx
  0x00000001249855ee: add    %rcx,%rsi
  0x00000001249855f1: mov    0x20(%rsp),%edi
  0x00000001249855f5: mov    0x8(%rsp),%edx
  0x00000001249855f9: sub    %ecx,%edx
  0x00000001249855fb: test   $0xf,%esp
  0x0000000124985601: je     0x0000000124985619
  0x0000000124985607: sub    $0x8,%rsp
  0x000000012498560b: callq  0x0000000124975ba0
  0x0000000124985610: add    $0x8,%rsp
  0x0000000124985614: jmpq   0x000000012498561e
  0x0000000124985619: callq  0x0000000124975ba0
  0x000000012498561e: pop    %rdi
  0x000000012498561f: mov    %r13,%rsp
  0x0000000124985622: jmpq   *%rdi
  0x0000000124985624: nopl   0x0(%rax)
  0x0000000124985628: add    %al,(%rax)
  0x000000012498562a: add    %al,(%rax)
  0x000000012498562c: add    %al,(%rax)
  0x000000012498562e: add    %al,(%rax)
  0x0000000124985630: add    %al,(%rax)
  0x0000000124985632: add    %al,(%rax)
  0x0000000124985634: add    %al,(%rax)
  0x0000000124985636: add    %al,(%rax)
  0x0000000124985638: add    %al,(%rax)
  0x000000012498563a: add    %al,(%rax)
  0x000000012498563c: add    %al,(%rax)
  0x000000012498563e: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_util_zip_CRC32C_updateDirectByteBuffer)  [0x0000000124985660, 0x00000001249856a0]  64 bytes

  0x0000000124985660: mov    0x18(%rsp),%rsi
  0x0000000124985665: movslq 0x10(%rsp),%rcx
  0x000000012498566a: add    %rcx,%rsi
  0x000000012498566d: mov    0x28(%rsp),%edi
  0x0000000124985671: mov    0x8(%rsp),%edx
  0x0000000124985675: sub    %ecx,%edx
  0x0000000124985677: test   $0xf,%esp
  0x000000012498567d: je     0x0000000124985695
  0x0000000124985683: sub    $0x8,%rsp
  0x0000000124985687: callq  0x0000000124975ba0
  0x000000012498568c: add    $0x8,%rsp
  0x0000000124985690: jmpq   0x000000012498569a
  0x0000000124985695: callq  0x0000000124975ba0
  0x000000012498569a: pop    %rdi
  0x000000012498569b: mov    %r13,%rsp
  0x000000012498569e: jmpq   *%rdi

----------------------------------------------------------------------
nop  0 nop  [0x00000001249856c0, 0x0000000124985720]  96 bytes

  0x00000001249856c0: push   %rax
  0x00000001249856c1: jmpq   0x00000001249856ff
  0x00000001249856c6: sub    $0x8,%rsp
  0x00000001249856ca: vmovss %xmm0,(%rsp)
  0x00000001249856cf: jmpq   0x00000001249856ff
  0x00000001249856d4: sub    $0x10,%rsp
  0x00000001249856d8: vmovsd %xmm0,(%rsp)
  0x00000001249856dd: jmpq   0x00000001249856ff
  0x00000001249856e2: sub    $0x10,%rsp
  0x00000001249856e6: mov    %rax,(%rsp)
  0x00000001249856ea: movabs $0x0,%r10
  0x00000001249856f4: mov    %r10,0x8(%rsp)
  0x00000001249856f9: jmpq   0x00000001249856ff
  0x00000001249856fe: push   %rax
  0x00000001249856ff: movzbl 0x1(%r13),%ebx
  0x0000000124985704: inc    %r13
  0x0000000124985707: movabs $0x1151d7a20,%r10
  0x0000000124985711: jmpq   *(%r10,%rbx,8)
  0x0000000124985715: data16 xchg %ax,%ax
  0x0000000124985718: add    %al,(%rax)
  0x000000012498571a: add    %al,(%rax)
  0x000000012498571c: add    %al,(%rax)
  0x000000012498571e: add    %al,(%rax)

----------------------------------------------------------------------
aconst_null  1 aconst_null  [0x0000000124985740, 0x00000001249857a0]  96 bytes

  0x0000000124985740: push   %rax
  0x0000000124985741: jmpq   0x000000012498577f
  0x0000000124985746: sub    $0x8,%rsp
  0x000000012498574a: vmovss %xmm0,(%rsp)
  0x000000012498574f: jmpq   0x000000012498577f
  0x0000000124985754: sub    $0x10,%rsp
  0x0000000124985758: vmovsd %xmm0,(%rsp)
  0x000000012498575d: jmpq   0x000000012498577f
  0x0000000124985762: sub    $0x10,%rsp
  0x0000000124985766: mov    %rax,(%rsp)
  0x000000012498576a: movabs $0x0,%r10
  0x0000000124985774: mov    %r10,0x8(%rsp)
  0x0000000124985779: jmpq   0x000000012498577f
  0x000000012498577e: push   %rax
  0x000000012498577f: xor    %eax,%eax
  0x0000000124985781: movzbl 0x1(%r13),%ebx
  0x0000000124985786: inc    %r13
  0x0000000124985789: movabs $0x1151d7220,%r10
  0x0000000124985793: jmpq   *(%r10,%rbx,8)
  0x0000000124985797: nop
  0x0000000124985798: add    %al,(%rax)
  0x000000012498579a: add    %al,(%rax)
  0x000000012498579c: add    %al,(%rax)
  0x000000012498579e: add    %al,(%rax)

----------------------------------------------------------------------
iconst_m1  2 iconst_m1  [0x00000001249857c0, 0x0000000124985820]  96 bytes

  0x00000001249857c0: push   %rax
  0x00000001249857c1: jmpq   0x00000001249857ff
  0x00000001249857c6: sub    $0x8,%rsp
  0x00000001249857ca: vmovss %xmm0,(%rsp)
  0x00000001249857cf: jmpq   0x00000001249857ff
  0x00000001249857d4: sub    $0x10,%rsp
  0x00000001249857d8: vmovsd %xmm0,(%rsp)
  0x00000001249857dd: jmpq   0x00000001249857ff
  0x00000001249857e2: sub    $0x10,%rsp
  0x00000001249857e6: mov    %rax,(%rsp)
  0x00000001249857ea: movabs $0x0,%r10
  0x00000001249857f4: mov    %r10,0x8(%rsp)
  0x00000001249857f9: jmpq   0x00000001249857ff
  0x00000001249857fe: push   %rax
  0x00000001249857ff: mov    $0xffffffff,%eax
  0x0000000124985804: movzbl 0x1(%r13),%ebx
  0x0000000124985809: inc    %r13
  0x000000012498580c: movabs $0x1151d5220,%r10
  0x0000000124985816: jmpq   *(%r10,%rbx,8)
  0x000000012498581a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
iconst_0  3 iconst_0  [0x0000000124985840, 0x00000001249858a0]  96 bytes

  0x0000000124985840: push   %rax
  0x0000000124985841: jmpq   0x000000012498587f
  0x0000000124985846: sub    $0x8,%rsp
  0x000000012498584a: vmovss %xmm0,(%rsp)
  0x000000012498584f: jmpq   0x000000012498587f
  0x0000000124985854: sub    $0x10,%rsp
  0x0000000124985858: vmovsd %xmm0,(%rsp)
  0x000000012498585d: jmpq   0x000000012498587f
  0x0000000124985862: sub    $0x10,%rsp
  0x0000000124985866: mov    %rax,(%rsp)
  0x000000012498586a: movabs $0x0,%r10
  0x0000000124985874: mov    %r10,0x8(%rsp)
  0x0000000124985879: jmpq   0x000000012498587f
  0x000000012498587e: push   %rax
  0x000000012498587f: xor    %eax,%eax
  0x0000000124985881: movzbl 0x1(%r13),%ebx
  0x0000000124985886: inc    %r13
  0x0000000124985889: movabs $0x1151d5220,%r10
  0x0000000124985893: jmpq   *(%r10,%rbx,8)
  0x0000000124985897: nop
  0x0000000124985898: add    %al,(%rax)
  0x000000012498589a: add    %al,(%rax)
  0x000000012498589c: add    %al,(%rax)
  0x000000012498589e: add    %al,(%rax)

----------------------------------------------------------------------
iconst_1  4 iconst_1  [0x00000001249858c0, 0x0000000124985920]  96 bytes

  0x00000001249858c0: push   %rax
  0x00000001249858c1: jmpq   0x00000001249858ff
  0x00000001249858c6: sub    $0x8,%rsp
  0x00000001249858ca: vmovss %xmm0,(%rsp)
  0x00000001249858cf: jmpq   0x00000001249858ff
  0x00000001249858d4: sub    $0x10,%rsp
  0x00000001249858d8: vmovsd %xmm0,(%rsp)
  0x00000001249858dd: jmpq   0x00000001249858ff
  0x00000001249858e2: sub    $0x10,%rsp
  0x00000001249858e6: mov    %rax,(%rsp)
  0x00000001249858ea: movabs $0x0,%r10
  0x00000001249858f4: mov    %r10,0x8(%rsp)
  0x00000001249858f9: jmpq   0x00000001249858ff
  0x00000001249858fe: push   %rax
  0x00000001249858ff: mov    $0x1,%eax
  0x0000000124985904: movzbl 0x1(%r13),%ebx
  0x0000000124985909: inc    %r13
  0x000000012498590c: movabs $0x1151d5220,%r10
  0x0000000124985916: jmpq   *(%r10,%rbx,8)
  0x000000012498591a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
iconst_2  5 iconst_2  [0x0000000124985940, 0x00000001249859a0]  96 bytes

  0x0000000124985940: push   %rax
  0x0000000124985941: jmpq   0x000000012498597f
  0x0000000124985946: sub    $0x8,%rsp
  0x000000012498594a: vmovss %xmm0,(%rsp)
  0x000000012498594f: jmpq   0x000000012498597f
  0x0000000124985954: sub    $0x10,%rsp
  0x0000000124985958: vmovsd %xmm0,(%rsp)
  0x000000012498595d: jmpq   0x000000012498597f
  0x0000000124985962: sub    $0x10,%rsp
  0x0000000124985966: mov    %rax,(%rsp)
  0x000000012498596a: movabs $0x0,%r10
  0x0000000124985974: mov    %r10,0x8(%rsp)
  0x0000000124985979: jmpq   0x000000012498597f
  0x000000012498597e: push   %rax
  0x000000012498597f: mov    $0x2,%eax
  0x0000000124985984: movzbl 0x1(%r13),%ebx
  0x0000000124985989: inc    %r13
  0x000000012498598c: movabs $0x1151d5220,%r10
  0x0000000124985996: jmpq   *(%r10,%rbx,8)
  0x000000012498599a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
iconst_3  6 iconst_3  [0x00000001249859c0, 0x0000000124985a20]  96 bytes

  0x00000001249859c0: push   %rax
  0x00000001249859c1: jmpq   0x00000001249859ff
  0x00000001249859c6: sub    $0x8,%rsp
  0x00000001249859ca: vmovss %xmm0,(%rsp)
  0x00000001249859cf: jmpq   0x00000001249859ff
  0x00000001249859d4: sub    $0x10,%rsp
  0x00000001249859d8: vmovsd %xmm0,(%rsp)
  0x00000001249859dd: jmpq   0x00000001249859ff
  0x00000001249859e2: sub    $0x10,%rsp
  0x00000001249859e6: mov    %rax,(%rsp)
  0x00000001249859ea: movabs $0x0,%r10
  0x00000001249859f4: mov    %r10,0x8(%rsp)
  0x00000001249859f9: jmpq   0x00000001249859ff
  0x00000001249859fe: push   %rax
  0x00000001249859ff: mov    $0x3,%eax
  0x0000000124985a04: movzbl 0x1(%r13),%ebx
  0x0000000124985a09: inc    %r13
  0x0000000124985a0c: movabs $0x1151d5220,%r10
  0x0000000124985a16: jmpq   *(%r10,%rbx,8)
  0x0000000124985a1a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
iconst_4  7 iconst_4  [0x0000000124985a40, 0x0000000124985aa0]  96 bytes

  0x0000000124985a40: push   %rax
  0x0000000124985a41: jmpq   0x0000000124985a7f
  0x0000000124985a46: sub    $0x8,%rsp
  0x0000000124985a4a: vmovss %xmm0,(%rsp)
  0x0000000124985a4f: jmpq   0x0000000124985a7f
  0x0000000124985a54: sub    $0x10,%rsp
  0x0000000124985a58: vmovsd %xmm0,(%rsp)
  0x0000000124985a5d: jmpq   0x0000000124985a7f
  0x0000000124985a62: sub    $0x10,%rsp
  0x0000000124985a66: mov    %rax,(%rsp)
  0x0000000124985a6a: movabs $0x0,%r10
  0x0000000124985a74: mov    %r10,0x8(%rsp)
  0x0000000124985a79: jmpq   0x0000000124985a7f
  0x0000000124985a7e: push   %rax
  0x0000000124985a7f: mov    $0x4,%eax
  0x0000000124985a84: movzbl 0x1(%r13),%ebx
  0x0000000124985a89: inc    %r13
  0x0000000124985a8c: movabs $0x1151d5220,%r10
  0x0000000124985a96: jmpq   *(%r10,%rbx,8)
  0x0000000124985a9a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
iconst_5  8 iconst_5  [0x0000000124985ac0, 0x0000000124985b20]  96 bytes

  0x0000000124985ac0: push   %rax
  0x0000000124985ac1: jmpq   0x0000000124985aff
  0x0000000124985ac6: sub    $0x8,%rsp
  0x0000000124985aca: vmovss %xmm0,(%rsp)
  0x0000000124985acf: jmpq   0x0000000124985aff
  0x0000000124985ad4: sub    $0x10,%rsp
  0x0000000124985ad8: vmovsd %xmm0,(%rsp)
  0x0000000124985add: jmpq   0x0000000124985aff
  0x0000000124985ae2: sub    $0x10,%rsp
  0x0000000124985ae6: mov    %rax,(%rsp)
  0x0000000124985aea: movabs $0x0,%r10
  0x0000000124985af4: mov    %r10,0x8(%rsp)
  0x0000000124985af9: jmpq   0x0000000124985aff
  0x0000000124985afe: push   %rax
  0x0000000124985aff: mov    $0x5,%eax
  0x0000000124985b04: movzbl 0x1(%r13),%ebx
  0x0000000124985b09: inc    %r13
  0x0000000124985b0c: movabs $0x1151d5220,%r10
  0x0000000124985b16: jmpq   *(%r10,%rbx,8)
  0x0000000124985b1a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
lconst_0  9 lconst_0  [0x0000000124985b40, 0x0000000124985ba0]  96 bytes

  0x0000000124985b40: push   %rax
  0x0000000124985b41: jmpq   0x0000000124985b7f
  0x0000000124985b46: sub    $0x8,%rsp
  0x0000000124985b4a: vmovss %xmm0,(%rsp)
  0x0000000124985b4f: jmpq   0x0000000124985b7f
  0x0000000124985b54: sub    $0x10,%rsp
  0x0000000124985b58: vmovsd %xmm0,(%rsp)
  0x0000000124985b5d: jmpq   0x0000000124985b7f
  0x0000000124985b62: sub    $0x10,%rsp
  0x0000000124985b66: mov    %rax,(%rsp)
  0x0000000124985b6a: movabs $0x0,%r10
  0x0000000124985b74: mov    %r10,0x8(%rsp)
  0x0000000124985b79: jmpq   0x0000000124985b7f
  0x0000000124985b7e: push   %rax
  0x0000000124985b7f: xor    %eax,%eax
  0x0000000124985b81: movzbl 0x1(%r13),%ebx
  0x0000000124985b86: inc    %r13
  0x0000000124985b89: movabs $0x1151d5a20,%r10
  0x0000000124985b93: jmpq   *(%r10,%rbx,8)
  0x0000000124985b97: nop
  0x0000000124985b98: add    %al,(%rax)
  0x0000000124985b9a: add    %al,(%rax)
  0x0000000124985b9c: add    %al,(%rax)
  0x0000000124985b9e: add    %al,(%rax)

----------------------------------------------------------------------
lconst_1  10 lconst_1  [0x0000000124985bc0, 0x0000000124985c20]  96 bytes

  0x0000000124985bc0: push   %rax
  0x0000000124985bc1: jmpq   0x0000000124985bff
  0x0000000124985bc6: sub    $0x8,%rsp
  0x0000000124985bca: vmovss %xmm0,(%rsp)
  0x0000000124985bcf: jmpq   0x0000000124985bff
  0x0000000124985bd4: sub    $0x10,%rsp
  0x0000000124985bd8: vmovsd %xmm0,(%rsp)
  0x0000000124985bdd: jmpq   0x0000000124985bff
  0x0000000124985be2: sub    $0x10,%rsp
  0x0000000124985be6: mov    %rax,(%rsp)
  0x0000000124985bea: movabs $0x0,%r10
  0x0000000124985bf4: mov    %r10,0x8(%rsp)
  0x0000000124985bf9: jmpq   0x0000000124985bff
  0x0000000124985bfe: push   %rax
  0x0000000124985bff: mov    $0x1,%eax
  0x0000000124985c04: movzbl 0x1(%r13),%ebx
  0x0000000124985c09: inc    %r13
  0x0000000124985c0c: movabs $0x1151d5a20,%r10
  0x0000000124985c16: jmpq   *(%r10,%rbx,8)
  0x0000000124985c1a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
fconst_0  11 fconst_0  [0x0000000124985c40, 0x0000000124985ca0]  96 bytes

  0x0000000124985c40: push   %rax
  0x0000000124985c41: jmpq   0x0000000124985c7f
  0x0000000124985c46: sub    $0x8,%rsp
  0x0000000124985c4a: vmovss %xmm0,(%rsp)
  0x0000000124985c4f: jmpq   0x0000000124985c7f
  0x0000000124985c54: sub    $0x10,%rsp
  0x0000000124985c58: vmovsd %xmm0,(%rsp)
  0x0000000124985c5d: jmpq   0x0000000124985c7f
  0x0000000124985c62: sub    $0x10,%rsp
  0x0000000124985c66: mov    %rax,(%rsp)
  0x0000000124985c6a: movabs $0x0,%r10
  0x0000000124985c74: mov    %r10,0x8(%rsp)
  0x0000000124985c79: jmpq   0x0000000124985c7f
  0x0000000124985c7e: push   %rax
  0x0000000124985c7f: vxorps %xmm0,%xmm0,%xmm0
  0x0000000124985c83: movzbl 0x1(%r13),%ebx
  0x0000000124985c88: inc    %r13
  0x0000000124985c8b: movabs $0x1151d6220,%r10
  0x0000000124985c95: jmpq   *(%r10,%rbx,8)
  0x0000000124985c99: nopl   0x0(%rax)

----------------------------------------------------------------------
fconst_1  12 fconst_1  [0x0000000124985cc0, 0x0000000124985d20]  96 bytes

  0x0000000124985cc0: push   %rax
  0x0000000124985cc1: jmpq   0x0000000124985cff
  0x0000000124985cc6: sub    $0x8,%rsp
  0x0000000124985cca: vmovss %xmm0,(%rsp)
  0x0000000124985ccf: jmpq   0x0000000124985cff
  0x0000000124985cd4: sub    $0x10,%rsp
  0x0000000124985cd8: vmovsd %xmm0,(%rsp)
  0x0000000124985cdd: jmpq   0x0000000124985cff
  0x0000000124985ce2: sub    $0x10,%rsp
  0x0000000124985ce6: mov    %rax,(%rsp)
  0x0000000124985cea: movabs $0x0,%r10
  0x0000000124985cf4: mov    %r10,0x8(%rsp)
  0x0000000124985cf9: jmpq   0x0000000124985cff
  0x0000000124985cfe: push   %rax
  0x0000000124985cff: vmovss -0xf7ef80f(%rip),%xmm0        # 0x00000001151964f8 = TemplateTable::fconst(int)::one
  0x0000000124985d07: movzbl 0x1(%r13),%ebx
  0x0000000124985d0c: inc    %r13
  0x0000000124985d0f: movabs $0x1151d6220,%r10
  0x0000000124985d19: jmpq   *(%r10,%rbx,8)
  0x0000000124985d1d: data16 xchg %ax,%ax

----------------------------------------------------------------------
fconst_2  13 fconst_2  [0x0000000124985d40, 0x0000000124985da0]  96 bytes

  0x0000000124985d40: push   %rax
  0x0000000124985d41: jmpq   0x0000000124985d7f
  0x0000000124985d46: sub    $0x8,%rsp
  0x0000000124985d4a: vmovss %xmm0,(%rsp)
  0x0000000124985d4f: jmpq   0x0000000124985d7f
  0x0000000124985d54: sub    $0x10,%rsp
  0x0000000124985d58: vmovsd %xmm0,(%rsp)
  0x0000000124985d5d: jmpq   0x0000000124985d7f
  0x0000000124985d62: sub    $0x10,%rsp
  0x0000000124985d66: mov    %rax,(%rsp)
  0x0000000124985d6a: movabs $0x0,%r10
  0x0000000124985d74: mov    %r10,0x8(%rsp)
  0x0000000124985d79: jmpq   0x0000000124985d7f
  0x0000000124985d7e: push   %rax
  0x0000000124985d7f: vmovss -0xf7ef88b(%rip),%xmm0        # 0x00000001151964fc = TemplateTable::fconst(int)::two
  0x0000000124985d87: movzbl 0x1(%r13),%ebx
  0x0000000124985d8c: inc    %r13
  0x0000000124985d8f: movabs $0x1151d6220,%r10
  0x0000000124985d99: jmpq   *(%r10,%rbx,8)
  0x0000000124985d9d: data16 xchg %ax,%ax

----------------------------------------------------------------------
dconst_0  14 dconst_0  [0x0000000124985dc0, 0x0000000124985e20]  96 bytes

  0x0000000124985dc0: push   %rax
  0x0000000124985dc1: jmpq   0x0000000124985dff
  0x0000000124985dc6: sub    $0x8,%rsp
  0x0000000124985dca: vmovss %xmm0,(%rsp)
  0x0000000124985dcf: jmpq   0x0000000124985dff
  0x0000000124985dd4: sub    $0x10,%rsp
  0x0000000124985dd8: vmovsd %xmm0,(%rsp)
  0x0000000124985ddd: jmpq   0x0000000124985dff
  0x0000000124985de2: sub    $0x10,%rsp
  0x0000000124985de6: mov    %rax,(%rsp)
  0x0000000124985dea: movabs $0x0,%r10
  0x0000000124985df4: mov    %r10,0x8(%rsp)
  0x0000000124985df9: jmpq   0x0000000124985dff
  0x0000000124985dfe: push   %rax
  0x0000000124985dff: vxorpd %xmm0,%xmm0,%xmm0
  0x0000000124985e03: movzbl 0x1(%r13),%ebx
  0x0000000124985e08: inc    %r13
  0x0000000124985e0b: movabs $0x1151d6a20,%r10
  0x0000000124985e15: jmpq   *(%r10,%rbx,8)
  0x0000000124985e19: nopl   0x0(%rax)

----------------------------------------------------------------------
dconst_1  15 dconst_1  [0x0000000124985e40, 0x0000000124985ea0]  96 bytes

  0x0000000124985e40: push   %rax
  0x0000000124985e41: jmpq   0x0000000124985e7f
  0x0000000124985e46: sub    $0x8,%rsp
  0x0000000124985e4a: vmovss %xmm0,(%rsp)
  0x0000000124985e4f: jmpq   0x0000000124985e7f
  0x0000000124985e54: sub    $0x10,%rsp
  0x0000000124985e58: vmovsd %xmm0,(%rsp)
  0x0000000124985e5d: jmpq   0x0000000124985e7f
  0x0000000124985e62: sub    $0x10,%rsp
  0x0000000124985e66: mov    %rax,(%rsp)
  0x0000000124985e6a: movabs $0x0,%r10
  0x0000000124985e74: mov    %r10,0x8(%rsp)
  0x0000000124985e79: jmpq   0x0000000124985e7f
  0x0000000124985e7e: push   %rax
  0x0000000124985e7f: vmovsd -0xf7ef987(%rip),%xmm0        # 0x0000000115196500 = TemplateTable::dconst(int)::one
  0x0000000124985e87: movzbl 0x1(%r13),%ebx
  0x0000000124985e8c: inc    %r13
  0x0000000124985e8f: movabs $0x1151d6a20,%r10
  0x0000000124985e99: jmpq   *(%r10,%rbx,8)
  0x0000000124985e9d: data16 xchg %ax,%ax

----------------------------------------------------------------------
bipush  16 bipush  [0x0000000124985ec0, 0x0000000124985f20]  96 bytes

  0x0000000124985ec0: push   %rax
  0x0000000124985ec1: jmpq   0x0000000124985eff
  0x0000000124985ec6: sub    $0x8,%rsp
  0x0000000124985eca: vmovss %xmm0,(%rsp)
  0x0000000124985ecf: jmpq   0x0000000124985eff
  0x0000000124985ed4: sub    $0x10,%rsp
  0x0000000124985ed8: vmovsd %xmm0,(%rsp)
  0x0000000124985edd: jmpq   0x0000000124985eff
  0x0000000124985ee2: sub    $0x10,%rsp
  0x0000000124985ee6: mov    %rax,(%rsp)
  0x0000000124985eea: movabs $0x0,%r10
  0x0000000124985ef4: mov    %r10,0x8(%rsp)
  0x0000000124985ef9: jmpq   0x0000000124985eff
  0x0000000124985efe: push   %rax
  0x0000000124985eff: movsbl 0x1(%r13),%eax
  0x0000000124985f04: movzbl 0x2(%r13),%ebx
  0x0000000124985f09: add    $0x2,%r13
  0x0000000124985f0d: movabs $0x1151d5220,%r10
  0x0000000124985f17: jmpq   *(%r10,%rbx,8)
  0x0000000124985f1b: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
sipush  17 sipush  [0x0000000124985f40, 0x0000000124985fa0]  96 bytes

  0x0000000124985f40: push   %rax
  0x0000000124985f41: jmpq   0x0000000124985f7f
  0x0000000124985f46: sub    $0x8,%rsp
  0x0000000124985f4a: vmovss %xmm0,(%rsp)
  0x0000000124985f4f: jmpq   0x0000000124985f7f
  0x0000000124985f54: sub    $0x10,%rsp
  0x0000000124985f58: vmovsd %xmm0,(%rsp)
  0x0000000124985f5d: jmpq   0x0000000124985f7f
  0x0000000124985f62: sub    $0x10,%rsp
  0x0000000124985f66: mov    %rax,(%rsp)
  0x0000000124985f6a: movabs $0x0,%r10
  0x0000000124985f74: mov    %r10,0x8(%rsp)
  0x0000000124985f79: jmpq   0x0000000124985f7f
  0x0000000124985f7e: push   %rax
  0x0000000124985f7f: movzwl 0x1(%r13),%eax
  0x0000000124985f84: bswap  %eax
  0x0000000124985f86: sar    $0x10,%eax
  0x0000000124985f89: movzbl 0x3(%r13),%ebx
  0x0000000124985f8e: add    $0x3,%r13
  0x0000000124985f92: movabs $0x1151d5220,%r10
  0x0000000124985f9c: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
ldc  18 ldc  [0x0000000124985fc0, 0x00000001249862a0]  736 bytes

  0x0000000124985fc0: push   %rax
  0x0000000124985fc1: jmpq   0x0000000124985fff
  0x0000000124985fc6: sub    $0x8,%rsp
  0x0000000124985fca: vmovss %xmm0,(%rsp)
  0x0000000124985fcf: jmpq   0x0000000124985fff
  0x0000000124985fd4: sub    $0x10,%rsp
  0x0000000124985fd8: vmovsd %xmm0,(%rsp)
  0x0000000124985fdd: jmpq   0x0000000124985fff
  0x0000000124985fe2: sub    $0x10,%rsp
  0x0000000124985fe6: mov    %rax,(%rsp)
  0x0000000124985fea: movabs $0x0,%r10
  0x0000000124985ff4: mov    %r10,0x8(%rsp)
  0x0000000124985ff9: jmpq   0x0000000124985fff
  0x0000000124985ffe: push   %rax
  0x0000000124985fff: movzbl 0x1(%r13),%ebx
  0x0000000124986004: mov    -0x18(%rbp),%rcx
  0x0000000124986008: mov    0x8(%rcx),%rcx
  0x000000012498600c: mov    0x8(%rcx),%rcx
  0x0000000124986010: mov    0x8(%rcx),%rax
  0x0000000124986014: movzbl 0x4(%rax,%rbx,1),%edx
  0x0000000124986019: cmp    $0x64,%edx
  0x000000012498601c: je     0x000000012498602c
  0x000000012498601e: cmp    $0x67,%edx
  0x0000000124986021: je     0x000000012498602c
  0x0000000124986023: cmp    $0x7,%edx
  0x0000000124986026: jne    0x00000001249860eb
  0x000000012498602c: mov    $0x0,%esi
  0x0000000124986031: callq  0x000000012498603b
  0x0000000124986036: jmpq   0x00000001249860e5
  0x000000012498603b: lea    0x8(%rsp),%rax
  0x0000000124986040: mov    %r13,-0x40(%rbp)
  0x0000000124986044: mov    %r15,%rdi
  0x0000000124986047: vzeroupper 
  0x000000012498604a: mov    %rbp,0x330(%r15)
  0x0000000124986051: mov    %rax,0x320(%r15)
  0x0000000124986058: test   $0xf,%esp
  0x000000012498605e: je     0x0000000124986076
  0x0000000124986064: sub    $0x8,%rsp
  0x0000000124986068: callq  0x0000000114ba9c8e = InterpreterRuntime::ldc(JavaThread*, bool)
  0x000000012498606d: add    $0x8,%rsp
  0x0000000124986071: jmpq   0x000000012498607b
  0x0000000124986076: callq  0x0000000114ba9c8e = InterpreterRuntime::ldc(JavaThread*, bool)
  0x000000012498607b: movabs $0x0,%r10
  0x0000000124986085: mov    %r10,0x320(%r15)
  0x000000012498608c: movabs $0x0,%r10
  0x0000000124986096: mov    %r10,0x330(%r15)
  0x000000012498609d: movabs $0x0,%r10
  0x00000001249860a7: mov    %r10,0x328(%r15)
  0x00000001249860ae: vzeroupper 
  0x00000001249860b1: cmpq   $0x0,0x8(%r15)
  0x00000001249860b9: je     0x00000001249860c4
  0x00000001249860bf: jmpq   0x0000000124975780
  0x00000001249860c4: mov    0x380(%r15),%rax
  0x00000001249860cb: movabs $0x0,%r10
  0x00000001249860d5: mov    %r10,0x380(%r15)
  0x00000001249860dc: mov    -0x40(%rbp),%r13
  0x00000001249860e0: mov    -0x38(%rbp),%r14
  0x00000001249860e4: retq   
  0x00000001249860e5: push   %rax
  0x00000001249860e6: jmpq   0x0000000124986280
  0x00000001249860eb: cmp    $0x4,%edx
  0x00000001249860ee: jne    0x0000000124986104
  0x00000001249860f0: vmovss 0x40(%rcx,%rbx,8),%xmm0
  0x00000001249860f6: sub    $0x8,%rsp
  0x00000001249860fa: vmovss %xmm0,(%rsp)
  0x00000001249860ff: jmpq   0x0000000124986280
  0x0000000124986104: cmp    $0x3,%edx
  0x0000000124986107: jne    0x0000000124986113
  0x0000000124986109: mov    0x40(%rcx,%rbx,8),%eax
  0x000000012498610d: push   %rax
  0x000000012498610e: jmpq   0x0000000124986280
  0x0000000124986113: mov    $0x12,%esi
  0x0000000124986118: callq  0x0000000124986122
  0x000000012498611d: jmpq   0x00000001249861cc
  0x0000000124986122: lea    0x8(%rsp),%rax
  0x0000000124986127: mov    %r13,-0x40(%rbp)
  0x000000012498612b: mov    %r15,%rdi
  0x000000012498612e: vzeroupper 
  0x0000000124986131: mov    %rbp,0x330(%r15)
  0x0000000124986138: mov    %rax,0x320(%r15)
  0x000000012498613f: test   $0xf,%esp
  0x0000000124986145: je     0x000000012498615d
  0x000000012498614b: sub    $0x8,%rsp
  0x000000012498614f: callq  0x0000000114ba9de6 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0x0000000124986154: add    $0x8,%rsp
  0x0000000124986158: jmpq   0x0000000124986162
  0x000000012498615d: callq  0x0000000114ba9de6 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0x0000000124986162: movabs $0x0,%r10
  0x000000012498616c: mov    %r10,0x320(%r15)
  0x0000000124986173: movabs $0x0,%r10
  0x000000012498617d: mov    %r10,0x330(%r15)
  0x0000000124986184: movabs $0x0,%r10
  0x000000012498618e: mov    %r10,0x328(%r15)
  0x0000000124986195: vzeroupper 
  0x0000000124986198: cmpq   $0x0,0x8(%r15)
  0x00000001249861a0: je     0x00000001249861ab
  0x00000001249861a6: jmpq   0x0000000124975780
  0x00000001249861ab: mov    0x380(%r15),%rax
  0x00000001249861b2: movabs $0x0,%r10
  0x00000001249861bc: mov    %r10,0x380(%r15)
  0x00000001249861c3: mov    -0x40(%rbp),%r13
  0x00000001249861c7: mov    -0x38(%rbp),%r14
  0x00000001249861cb: retq   
  0x00000001249861cc: mov    0x388(%r15),%rcx
  0x00000001249861d3: movabs $0x0,%r10
  0x00000001249861dd: mov    %r10,0x388(%r15)
  0x00000001249861e4: mov    %ecx,%ebx
  0x00000001249861e6: and    $0xffff,%ebx
  0x00000001249861ec: shr    $0x1c,%ecx
  0x00000001249861ef: and    $0xf,%ecx
  0x00000001249861f2: cmp    $0x4,%ecx
  0x00000001249861f5: jne    0x0000000124986204
  0x00000001249861fb: mov    (%rax,%rbx,1),%eax
  0x00000001249861fe: push   %rax
  0x00000001249861ff: jmpq   0x0000000124986280
  0x0000000124986204: cmp    $0x6,%ecx
  0x0000000124986207: jne    0x0000000124986220
  0x000000012498620d: vmovss (%rax,%rbx,1),%xmm0
  0x0000000124986212: sub    $0x8,%rsp
  0x0000000124986216: vmovss %xmm0,(%rsp)
  0x000000012498621b: jmpq   0x0000000124986280
  0x0000000124986220: cmp    $0x3,%ecx
  0x0000000124986223: jne    0x0000000124986233
  0x0000000124986229: movswl (%rax,%rbx,1),%eax
  0x000000012498622d: push   %rax
  0x000000012498622e: jmpq   0x0000000124986280
  0x0000000124986233: cmp    $0x0,%ecx
  0x0000000124986236: jne    0x0000000124986246
  0x000000012498623c: movsbl (%rax,%rbx,1),%eax
  0x0000000124986240: push   %rax
  0x0000000124986241: jmpq   0x0000000124986280
  0x0000000124986246: cmp    $0x2,%ecx
  0x0000000124986249: jne    0x0000000124986259
  0x000000012498624f: movzwl (%rax,%rbx,1),%eax
  0x0000000124986253: push   %rax
  0x0000000124986254: jmpq   0x0000000124986280
  0x0000000124986259: cmp    $0x1,%ecx
  0x000000012498625c: jne    0x000000012498626c
  0x0000000124986262: movsbl (%rax,%rbx,1),%eax
  0x0000000124986266: push   %rax
  0x0000000124986267: jmpq   0x0000000124986280
  0x000000012498626c: movabs $0x115051c44,%rdi
  0x0000000124986276: and    $0xfffffffffffffff0,%rsp
  0x000000012498627a: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000012498627f: hlt    
  0x0000000124986280: movzbl 0x2(%r13),%ebx
  0x0000000124986285: add    $0x2,%r13
  0x0000000124986289: movabs $0x1151d7a20,%r10
  0x0000000124986293: jmpq   *(%r10,%rbx,8)
  0x0000000124986297: nop
  0x0000000124986298: add    %al,(%rax)
  0x000000012498629a: add    %al,(%rax)
  0x000000012498629c: add    %al,(%rax)
  0x000000012498629e: add    %al,(%rax)

----------------------------------------------------------------------
ldc_w  19 ldc_w  [0x00000001249862c0, 0x00000001249865a0]  736 bytes

  0x00000001249862c0: push   %rax
  0x00000001249862c1: jmpq   0x00000001249862ff
  0x00000001249862c6: sub    $0x8,%rsp
  0x00000001249862ca: vmovss %xmm0,(%rsp)
  0x00000001249862cf: jmpq   0x00000001249862ff
  0x00000001249862d4: sub    $0x10,%rsp
  0x00000001249862d8: vmovsd %xmm0,(%rsp)
  0x00000001249862dd: jmpq   0x00000001249862ff
  0x00000001249862e2: sub    $0x10,%rsp
  0x00000001249862e6: mov    %rax,(%rsp)
  0x00000001249862ea: movabs $0x0,%r10
  0x00000001249862f4: mov    %r10,0x8(%rsp)
  0x00000001249862f9: jmpq   0x00000001249862ff
  0x00000001249862fe: push   %rax
  0x00000001249862ff: movzwl 0x1(%r13),%ebx
  0x0000000124986304: bswap  %ebx
  0x0000000124986306: shr    $0x10,%ebx
  0x0000000124986309: mov    -0x18(%rbp),%rcx
  0x000000012498630d: mov    0x8(%rcx),%rcx
  0x0000000124986311: mov    0x8(%rcx),%rcx
  0x0000000124986315: mov    0x8(%rcx),%rax
  0x0000000124986319: movzbl 0x4(%rax,%rbx,1),%edx
  0x000000012498631e: cmp    $0x64,%edx
  0x0000000124986321: je     0x0000000124986331
  0x0000000124986323: cmp    $0x67,%edx
  0x0000000124986326: je     0x0000000124986331
  0x0000000124986328: cmp    $0x7,%edx
  0x000000012498632b: jne    0x00000001249863f0
  0x0000000124986331: mov    $0x1,%esi
  0x0000000124986336: callq  0x0000000124986340
  0x000000012498633b: jmpq   0x00000001249863ea
  0x0000000124986340: lea    0x8(%rsp),%rax
  0x0000000124986345: mov    %r13,-0x40(%rbp)
  0x0000000124986349: mov    %r15,%rdi
  0x000000012498634c: vzeroupper 
  0x000000012498634f: mov    %rbp,0x330(%r15)
  0x0000000124986356: mov    %rax,0x320(%r15)
  0x000000012498635d: test   $0xf,%esp
  0x0000000124986363: je     0x000000012498637b
  0x0000000124986369: sub    $0x8,%rsp
  0x000000012498636d: callq  0x0000000114ba9c8e = InterpreterRuntime::ldc(JavaThread*, bool)
  0x0000000124986372: add    $0x8,%rsp
  0x0000000124986376: jmpq   0x0000000124986380
  0x000000012498637b: callq  0x0000000114ba9c8e = InterpreterRuntime::ldc(JavaThread*, bool)
  0x0000000124986380: movabs $0x0,%r10
  0x000000012498638a: mov    %r10,0x320(%r15)
  0x0000000124986391: movabs $0x0,%r10
  0x000000012498639b: mov    %r10,0x330(%r15)
  0x00000001249863a2: movabs $0x0,%r10
  0x00000001249863ac: mov    %r10,0x328(%r15)
  0x00000001249863b3: vzeroupper 
  0x00000001249863b6: cmpq   $0x0,0x8(%r15)
  0x00000001249863be: je     0x00000001249863c9
  0x00000001249863c4: jmpq   0x0000000124975780
  0x00000001249863c9: mov    0x380(%r15),%rax
  0x00000001249863d0: movabs $0x0,%r10
  0x00000001249863da: mov    %r10,0x380(%r15)
  0x00000001249863e1: mov    -0x40(%rbp),%r13
  0x00000001249863e5: mov    -0x38(%rbp),%r14
  0x00000001249863e9: retq   
  0x00000001249863ea: push   %rax
  0x00000001249863eb: jmpq   0x0000000124986585
  0x00000001249863f0: cmp    $0x4,%edx
  0x00000001249863f3: jne    0x0000000124986409
  0x00000001249863f5: vmovss 0x40(%rcx,%rbx,8),%xmm0
  0x00000001249863fb: sub    $0x8,%rsp
  0x00000001249863ff: vmovss %xmm0,(%rsp)
  0x0000000124986404: jmpq   0x0000000124986585
  0x0000000124986409: cmp    $0x3,%edx
  0x000000012498640c: jne    0x0000000124986418
  0x000000012498640e: mov    0x40(%rcx,%rbx,8),%eax
  0x0000000124986412: push   %rax
  0x0000000124986413: jmpq   0x0000000124986585
  0x0000000124986418: mov    $0x13,%esi
  0x000000012498641d: callq  0x0000000124986427
  0x0000000124986422: jmpq   0x00000001249864d1
  0x0000000124986427: lea    0x8(%rsp),%rax
  0x000000012498642c: mov    %r13,-0x40(%rbp)
  0x0000000124986430: mov    %r15,%rdi
  0x0000000124986433: vzeroupper 
  0x0000000124986436: mov    %rbp,0x330(%r15)
  0x000000012498643d: mov    %rax,0x320(%r15)
  0x0000000124986444: test   $0xf,%esp
  0x000000012498644a: je     0x0000000124986462
  0x0000000124986450: sub    $0x8,%rsp
  0x0000000124986454: callq  0x0000000114ba9de6 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0x0000000124986459: add    $0x8,%rsp
  0x000000012498645d: jmpq   0x0000000124986467
  0x0000000124986462: callq  0x0000000114ba9de6 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0x0000000124986467: movabs $0x0,%r10
  0x0000000124986471: mov    %r10,0x320(%r15)
  0x0000000124986478: movabs $0x0,%r10
  0x0000000124986482: mov    %r10,0x330(%r15)
  0x0000000124986489: movabs $0x0,%r10
  0x0000000124986493: mov    %r10,0x328(%r15)
  0x000000012498649a: vzeroupper 
  0x000000012498649d: cmpq   $0x0,0x8(%r15)
  0x00000001249864a5: je     0x00000001249864b0
  0x00000001249864ab: jmpq   0x0000000124975780
  0x00000001249864b0: mov    0x380(%r15),%rax
  0x00000001249864b7: movabs $0x0,%r10
  0x00000001249864c1: mov    %r10,0x380(%r15)
  0x00000001249864c8: mov    -0x40(%rbp),%r13
  0x00000001249864cc: mov    -0x38(%rbp),%r14
  0x00000001249864d0: retq   
  0x00000001249864d1: mov    0x388(%r15),%rcx
  0x00000001249864d8: movabs $0x0,%r10
  0x00000001249864e2: mov    %r10,0x388(%r15)
  0x00000001249864e9: mov    %ecx,%ebx
  0x00000001249864eb: and    $0xffff,%ebx
  0x00000001249864f1: shr    $0x1c,%ecx
  0x00000001249864f4: and    $0xf,%ecx
  0x00000001249864f7: cmp    $0x4,%ecx
  0x00000001249864fa: jne    0x0000000124986509
  0x0000000124986500: mov    (%rax,%rbx,1),%eax
  0x0000000124986503: push   %rax
  0x0000000124986504: jmpq   0x0000000124986585
  0x0000000124986509: cmp    $0x6,%ecx
  0x000000012498650c: jne    0x0000000124986525
  0x0000000124986512: vmovss (%rax,%rbx,1),%xmm0
  0x0000000124986517: sub    $0x8,%rsp
  0x000000012498651b: vmovss %xmm0,(%rsp)
  0x0000000124986520: jmpq   0x0000000124986585
  0x0000000124986525: cmp    $0x3,%ecx
  0x0000000124986528: jne    0x0000000124986538
  0x000000012498652e: movswl (%rax,%rbx,1),%eax
  0x0000000124986532: push   %rax
  0x0000000124986533: jmpq   0x0000000124986585
  0x0000000124986538: cmp    $0x0,%ecx
  0x000000012498653b: jne    0x000000012498654b
  0x0000000124986541: movsbl (%rax,%rbx,1),%eax
  0x0000000124986545: push   %rax
  0x0000000124986546: jmpq   0x0000000124986585
  0x000000012498654b: cmp    $0x2,%ecx
  0x000000012498654e: jne    0x000000012498655e
  0x0000000124986554: movzwl (%rax,%rbx,1),%eax
  0x0000000124986558: push   %rax
  0x0000000124986559: jmpq   0x0000000124986585
  0x000000012498655e: cmp    $0x1,%ecx
  0x0000000124986561: jne    0x0000000124986571
  0x0000000124986567: movsbl (%rax,%rbx,1),%eax
  0x000000012498656b: push   %rax
  0x000000012498656c: jmpq   0x0000000124986585
  0x0000000124986571: movabs $0x115051c44,%rdi
  0x000000012498657b: and    $0xfffffffffffffff0,%rsp
  0x000000012498657f: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124986584: hlt    
  0x0000000124986585: movzbl 0x3(%r13),%ebx
  0x000000012498658a: add    $0x3,%r13
  0x000000012498658e: movabs $0x1151d7a20,%r10
  0x0000000124986598: jmpq   *(%r10,%rbx,8)
  0x000000012498659c: nopl   0x0(%rax)

----------------------------------------------------------------------
ldc2_w  20 ldc2_w  [0x00000001249865c0, 0x00000001249867c0]  512 bytes

  0x00000001249865c0: push   %rax
  0x00000001249865c1: jmpq   0x00000001249865ff
  0x00000001249865c6: sub    $0x8,%rsp
  0x00000001249865ca: vmovss %xmm0,(%rsp)
  0x00000001249865cf: jmpq   0x00000001249865ff
  0x00000001249865d4: sub    $0x10,%rsp
  0x00000001249865d8: vmovsd %xmm0,(%rsp)
  0x00000001249865dd: jmpq   0x00000001249865ff
  0x00000001249865e2: sub    $0x10,%rsp
  0x00000001249865e6: mov    %rax,(%rsp)
  0x00000001249865ea: movabs $0x0,%r10
  0x00000001249865f4: mov    %r10,0x8(%rsp)
  0x00000001249865f9: jmpq   0x00000001249865ff
  0x00000001249865fe: push   %rax
  0x00000001249865ff: movzwl 0x1(%r13),%ebx
  0x0000000124986604: bswap  %ebx
  0x0000000124986606: shr    $0x10,%ebx
  0x0000000124986609: mov    -0x18(%rbp),%rcx
  0x000000012498660d: mov    0x8(%rcx),%rcx
  0x0000000124986611: mov    0x8(%rcx),%rcx
  0x0000000124986615: mov    0x8(%rcx),%rax
  0x0000000124986619: movzbl 0x4(%rax,%rbx,1),%edx
  0x000000012498661e: cmp    $0x6,%edx
  0x0000000124986621: jne    0x0000000124986637
  0x0000000124986623: vmovsd 0x40(%rcx,%rbx,8),%xmm0
  0x0000000124986629: sub    $0x10,%rsp
  0x000000012498662d: vmovsd %xmm0,(%rsp)
  0x0000000124986632: jmpq   0x0000000124986795
  0x0000000124986637: cmp    $0x5,%edx
  0x000000012498663a: jne    0x000000012498665d
  0x000000012498663c: mov    0x40(%rcx,%rbx,8),%rax
  0x0000000124986641: sub    $0x10,%rsp
  0x0000000124986645: mov    %rax,(%rsp)
  0x0000000124986649: movabs $0x0,%r10
  0x0000000124986653: mov    %r10,0x8(%rsp)
  0x0000000124986658: jmpq   0x0000000124986795
  0x000000012498665d: mov    $0x14,%esi
  0x0000000124986662: callq  0x000000012498666c
  0x0000000124986667: jmpq   0x0000000124986716
  0x000000012498666c: lea    0x8(%rsp),%rax
  0x0000000124986671: mov    %r13,-0x40(%rbp)
  0x0000000124986675: mov    %r15,%rdi
  0x0000000124986678: vzeroupper 
  0x000000012498667b: mov    %rbp,0x330(%r15)
  0x0000000124986682: mov    %rax,0x320(%r15)
  0x0000000124986689: test   $0xf,%esp
  0x000000012498668f: je     0x00000001249866a7
  0x0000000124986695: sub    $0x8,%rsp
  0x0000000124986699: callq  0x0000000114ba9de6 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0x000000012498669e: add    $0x8,%rsp
  0x00000001249866a2: jmpq   0x00000001249866ac
  0x00000001249866a7: callq  0x0000000114ba9de6 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0x00000001249866ac: movabs $0x0,%r10
  0x00000001249866b6: mov    %r10,0x320(%r15)
  0x00000001249866bd: movabs $0x0,%r10
  0x00000001249866c7: mov    %r10,0x330(%r15)
  0x00000001249866ce: movabs $0x0,%r10
  0x00000001249866d8: mov    %r10,0x328(%r15)
  0x00000001249866df: vzeroupper 
  0x00000001249866e2: cmpq   $0x0,0x8(%r15)
  0x00000001249866ea: je     0x00000001249866f5
  0x00000001249866f0: jmpq   0x0000000124975780
  0x00000001249866f5: mov    0x380(%r15),%rax
  0x00000001249866fc: movabs $0x0,%r10
  0x0000000124986706: mov    %r10,0x380(%r15)
  0x000000012498670d: mov    -0x40(%rbp),%r13
  0x0000000124986711: mov    -0x38(%rbp),%r14
  0x0000000124986715: retq   
  0x0000000124986716: mov    0x388(%r15),%rcx
  0x000000012498671d: movabs $0x0,%r10
  0x0000000124986727: mov    %r10,0x388(%r15)
  0x000000012498672e: mov    %ecx,%ebx
  0x0000000124986730: and    $0xffff,%ebx
  0x0000000124986736: shr    $0x1c,%ecx
  0x0000000124986739: and    $0xf,%ecx
  0x000000012498673c: cmp    $0x5,%ecx
  0x000000012498673f: jne    0x0000000124986765
  0x0000000124986745: mov    (%rax,%rbx,1),%rax
  0x0000000124986749: sub    $0x10,%rsp
  0x000000012498674d: mov    %rax,(%rsp)
  0x0000000124986751: movabs $0x0,%r10
  0x000000012498675b: mov    %r10,0x8(%rsp)
  0x0000000124986760: jmpq   0x0000000124986795
  0x0000000124986765: cmp    $0x7,%ecx
  0x0000000124986768: jne    0x0000000124986781
  0x000000012498676e: vmovsd (%rax,%rbx,1),%xmm0
  0x0000000124986773: sub    $0x10,%rsp
  0x0000000124986777: vmovsd %xmm0,(%rsp)
  0x000000012498677c: jmpq   0x0000000124986795
  0x0000000124986781: movabs $0x115051c44,%rdi
  0x000000012498678b: and    $0xfffffffffffffff0,%rsp
  0x000000012498678f: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124986794: hlt    
  0x0000000124986795: movzbl 0x3(%r13),%ebx
  0x000000012498679a: add    $0x3,%r13
  0x000000012498679e: movabs $0x1151d7a20,%r10
  0x00000001249867a8: jmpq   *(%r10,%rbx,8)
  0x00000001249867ac: nopl   0x0(%rax)
  0x00000001249867b0: add    %al,(%rax)
  0x00000001249867b2: add    %al,(%rax)
  0x00000001249867b4: add    %al,(%rax)
  0x00000001249867b6: add    %al,(%rax)
  0x00000001249867b8: add    %al,(%rax)
  0x00000001249867ba: add    %al,(%rax)
  0x00000001249867bc: add    %al,(%rax)
  0x00000001249867be: add    %al,(%rax)

----------------------------------------------------------------------
iload  21 iload  [0x00000001249867e0, 0x00000001249868a0]  192 bytes

  0x00000001249867e0: push   %rax
  0x00000001249867e1: jmpq   0x000000012498681f
  0x00000001249867e6: sub    $0x8,%rsp
  0x00000001249867ea: vmovss %xmm0,(%rsp)
  0x00000001249867ef: jmpq   0x000000012498681f
  0x00000001249867f4: sub    $0x10,%rsp
  0x00000001249867f8: vmovsd %xmm0,(%rsp)
  0x00000001249867fd: jmpq   0x000000012498681f
  0x0000000124986802: sub    $0x10,%rsp
  0x0000000124986806: mov    %rax,(%rsp)
  0x000000012498680a: movabs $0x0,%r10
  0x0000000124986814: mov    %r10,0x8(%rsp)
  0x0000000124986819: jmpq   0x000000012498681f
  0x000000012498681e: push   %rax
  0x000000012498681f: movzbl 0x2(%r13),%ebx
  0x0000000124986824: cmp    $0x15,%ebx
  0x0000000124986827: je     0x000000012498684d
  0x000000012498682d: cmp    $0xe0,%ebx
  0x0000000124986833: mov    $0xe1,%ecx
  0x0000000124986838: je     0x0000000124986849
  0x000000012498683a: cmp    $0x34,%ebx
  0x000000012498683d: mov    $0xe2,%ecx
  0x0000000124986842: je     0x0000000124986849
  0x0000000124986844: mov    $0xe0,%ecx
  0x0000000124986849: mov    %cl,0x0(%r13)
  0x000000012498684d: movzbl 0x1(%r13),%ebx
  0x0000000124986852: neg    %rbx
  0x0000000124986855: mov    (%r14,%rbx,8),%eax
  0x0000000124986859: movzbl 0x2(%r13),%ebx
  0x000000012498685e: add    $0x2,%r13
  0x0000000124986862: movabs $0x1151d5220,%r10
  0x000000012498686c: jmpq   *(%r10,%rbx,8)
  0x0000000124986870: movzwl 0x2(%r13),%ebx
  0x0000000124986875: bswap  %ebx
  0x0000000124986877: shr    $0x10,%ebx
  0x000000012498687a: neg    %rbx
  0x000000012498687d: mov    (%r14,%rbx,8),%eax
  0x0000000124986881: movzbl 0x4(%r13),%ebx
  0x0000000124986886: add    $0x4,%r13
  0x000000012498688a: movabs $0x1151d5220,%r10
  0x0000000124986894: jmpq   *(%r10,%rbx,8)
  0x0000000124986898: add    %al,(%rax)
  0x000000012498689a: add    %al,(%rax)
  0x000000012498689c: add    %al,(%rax)
  0x000000012498689e: add    %al,(%rax)

----------------------------------------------------------------------
lload  22 lload  [0x00000001249868c0, 0x0000000124986960]  160 bytes

  0x00000001249868c0: push   %rax
  0x00000001249868c1: jmpq   0x00000001249868ff
  0x00000001249868c6: sub    $0x8,%rsp
  0x00000001249868ca: vmovss %xmm0,(%rsp)
  0x00000001249868cf: jmpq   0x00000001249868ff
  0x00000001249868d4: sub    $0x10,%rsp
  0x00000001249868d8: vmovsd %xmm0,(%rsp)
  0x00000001249868dd: jmpq   0x00000001249868ff
  0x00000001249868e2: sub    $0x10,%rsp
  0x00000001249868e6: mov    %rax,(%rsp)
  0x00000001249868ea: movabs $0x0,%r10
  0x00000001249868f4: mov    %r10,0x8(%rsp)
  0x00000001249868f9: jmpq   0x00000001249868ff
  0x00000001249868fe: push   %rax
  0x00000001249868ff: movzbl 0x1(%r13),%ebx
  0x0000000124986904: neg    %rbx
  0x0000000124986907: mov    -0x8(%r14,%rbx,8),%rax
  0x000000012498690c: movzbl 0x2(%r13),%ebx
  0x0000000124986911: add    $0x2,%r13
  0x0000000124986915: movabs $0x1151d5a20,%r10
  0x000000012498691f: jmpq   *(%r10,%rbx,8)
  0x0000000124986923: movzwl 0x2(%r13),%ebx
  0x0000000124986928: bswap  %ebx
  0x000000012498692a: shr    $0x10,%ebx
  0x000000012498692d: neg    %rbx
  0x0000000124986930: mov    -0x8(%r14,%rbx,8),%rax
  0x0000000124986935: movzbl 0x4(%r13),%ebx
  0x000000012498693a: add    $0x4,%r13
  0x000000012498693e: movabs $0x1151d5a20,%r10
  0x0000000124986948: jmpq   *(%r10,%rbx,8)
  0x000000012498694c: nopl   0x0(%rax)
  0x0000000124986950: add    %al,(%rax)
  0x0000000124986952: add    %al,(%rax)
  0x0000000124986954: add    %al,(%rax)
  0x0000000124986956: add    %al,(%rax)
  0x0000000124986958: add    %al,(%rax)
  0x000000012498695a: add    %al,(%rax)
  0x000000012498695c: add    %al,(%rax)
  0x000000012498695e: add    %al,(%rax)

----------------------------------------------------------------------
fload  23 fload  [0x0000000124986980, 0x0000000124986a20]  160 bytes

  0x0000000124986980: push   %rax
  0x0000000124986981: jmpq   0x00000001249869bf
  0x0000000124986986: sub    $0x8,%rsp
  0x000000012498698a: vmovss %xmm0,(%rsp)
  0x000000012498698f: jmpq   0x00000001249869bf
  0x0000000124986994: sub    $0x10,%rsp
  0x0000000124986998: vmovsd %xmm0,(%rsp)
  0x000000012498699d: jmpq   0x00000001249869bf
  0x00000001249869a2: sub    $0x10,%rsp
  0x00000001249869a6: mov    %rax,(%rsp)
  0x00000001249869aa: movabs $0x0,%r10
  0x00000001249869b4: mov    %r10,0x8(%rsp)
  0x00000001249869b9: jmpq   0x00000001249869bf
  0x00000001249869be: push   %rax
  0x00000001249869bf: movzbl 0x1(%r13),%ebx
  0x00000001249869c4: neg    %rbx
  0x00000001249869c7: vmovss (%r14,%rbx,8),%xmm0
  0x00000001249869cd: movzbl 0x2(%r13),%ebx
  0x00000001249869d2: add    $0x2,%r13
  0x00000001249869d6: movabs $0x1151d6220,%r10
  0x00000001249869e0: jmpq   *(%r10,%rbx,8)
  0x00000001249869e4: movzwl 0x2(%r13),%ebx
  0x00000001249869e9: bswap  %ebx
  0x00000001249869eb: shr    $0x10,%ebx
  0x00000001249869ee: neg    %rbx
  0x00000001249869f1: vmovss (%r14,%rbx,8),%xmm0
  0x00000001249869f7: movzbl 0x4(%r13),%ebx
  0x00000001249869fc: add    $0x4,%r13
  0x0000000124986a00: movabs $0x1151d6220,%r10
  0x0000000124986a0a: jmpq   *(%r10,%rbx,8)
  0x0000000124986a0e: xchg   %ax,%ax
  0x0000000124986a10: add    %al,(%rax)
  0x0000000124986a12: add    %al,(%rax)
  0x0000000124986a14: add    %al,(%rax)
  0x0000000124986a16: add    %al,(%rax)
  0x0000000124986a18: add    %al,(%rax)
  0x0000000124986a1a: add    %al,(%rax)
  0x0000000124986a1c: add    %al,(%rax)
  0x0000000124986a1e: add    %al,(%rax)

----------------------------------------------------------------------
dload  24 dload  [0x0000000124986a40, 0x0000000124986ae0]  160 bytes

  0x0000000124986a40: push   %rax
  0x0000000124986a41: jmpq   0x0000000124986a7f
  0x0000000124986a46: sub    $0x8,%rsp
  0x0000000124986a4a: vmovss %xmm0,(%rsp)
  0x0000000124986a4f: jmpq   0x0000000124986a7f
  0x0000000124986a54: sub    $0x10,%rsp
  0x0000000124986a58: vmovsd %xmm0,(%rsp)
  0x0000000124986a5d: jmpq   0x0000000124986a7f
  0x0000000124986a62: sub    $0x10,%rsp
  0x0000000124986a66: mov    %rax,(%rsp)
  0x0000000124986a6a: movabs $0x0,%r10
  0x0000000124986a74: mov    %r10,0x8(%rsp)
  0x0000000124986a79: jmpq   0x0000000124986a7f
  0x0000000124986a7e: push   %rax
  0x0000000124986a7f: movzbl 0x1(%r13),%ebx
  0x0000000124986a84: neg    %rbx
  0x0000000124986a87: vmovsd -0x8(%r14,%rbx,8),%xmm0
  0x0000000124986a8e: movzbl 0x2(%r13),%ebx
  0x0000000124986a93: add    $0x2,%r13
  0x0000000124986a97: movabs $0x1151d6a20,%r10
  0x0000000124986aa1: jmpq   *(%r10,%rbx,8)
  0x0000000124986aa5: movzwl 0x2(%r13),%ebx
  0x0000000124986aaa: bswap  %ebx
  0x0000000124986aac: shr    $0x10,%ebx
  0x0000000124986aaf: neg    %rbx
  0x0000000124986ab2: vmovsd -0x8(%r14,%rbx,8),%xmm0
  0x0000000124986ab9: movzbl 0x4(%r13),%ebx
  0x0000000124986abe: add    $0x4,%r13
  0x0000000124986ac2: movabs $0x1151d6a20,%r10
  0x0000000124986acc: jmpq   *(%r10,%rbx,8)
  0x0000000124986ad0: add    %al,(%rax)
  0x0000000124986ad2: add    %al,(%rax)
  0x0000000124986ad4: add    %al,(%rax)
  0x0000000124986ad6: add    %al,(%rax)
  0x0000000124986ad8: add    %al,(%rax)
  0x0000000124986ada: add    %al,(%rax)
  0x0000000124986adc: add    %al,(%rax)
  0x0000000124986ade: add    %al,(%rax)

----------------------------------------------------------------------
aload  25 aload  [0x0000000124986b00, 0x0000000124986ba0]  160 bytes

  0x0000000124986b00: push   %rax
  0x0000000124986b01: jmpq   0x0000000124986b3f
  0x0000000124986b06: sub    $0x8,%rsp
  0x0000000124986b0a: vmovss %xmm0,(%rsp)
  0x0000000124986b0f: jmpq   0x0000000124986b3f
  0x0000000124986b14: sub    $0x10,%rsp
  0x0000000124986b18: vmovsd %xmm0,(%rsp)
  0x0000000124986b1d: jmpq   0x0000000124986b3f
  0x0000000124986b22: sub    $0x10,%rsp
  0x0000000124986b26: mov    %rax,(%rsp)
  0x0000000124986b2a: movabs $0x0,%r10
  0x0000000124986b34: mov    %r10,0x8(%rsp)
  0x0000000124986b39: jmpq   0x0000000124986b3f
  0x0000000124986b3e: push   %rax
  0x0000000124986b3f: movzbl 0x1(%r13),%ebx
  0x0000000124986b44: neg    %rbx
  0x0000000124986b47: mov    (%r14,%rbx,8),%rax
  0x0000000124986b4b: movzbl 0x2(%r13),%ebx
  0x0000000124986b50: add    $0x2,%r13
  0x0000000124986b54: movabs $0x1151d7220,%r10
  0x0000000124986b5e: jmpq   *(%r10,%rbx,8)
  0x0000000124986b62: movzwl 0x2(%r13),%ebx
  0x0000000124986b67: bswap  %ebx
  0x0000000124986b69: shr    $0x10,%ebx
  0x0000000124986b6c: neg    %rbx
  0x0000000124986b6f: mov    (%r14,%rbx,8),%rax
  0x0000000124986b73: movzbl 0x4(%r13),%ebx
  0x0000000124986b78: add    $0x4,%r13
  0x0000000124986b7c: movabs $0x1151d7220,%r10
  0x0000000124986b86: jmpq   *(%r10,%rbx,8)
  0x0000000124986b8a: nopw   0x0(%rax,%rax,1)
  0x0000000124986b90: add    %al,(%rax)
  0x0000000124986b92: add    %al,(%rax)
  0x0000000124986b94: add    %al,(%rax)
  0x0000000124986b96: add    %al,(%rax)
  0x0000000124986b98: add    %al,(%rax)
  0x0000000124986b9a: add    %al,(%rax)
  0x0000000124986b9c: add    %al,(%rax)
  0x0000000124986b9e: add    %al,(%rax)

----------------------------------------------------------------------
iload_0  26 iload_0  [0x0000000124986bc0, 0x0000000124986c20]  96 bytes

  0x0000000124986bc0: push   %rax
  0x0000000124986bc1: jmpq   0x0000000124986bff
  0x0000000124986bc6: sub    $0x8,%rsp
  0x0000000124986bca: vmovss %xmm0,(%rsp)
  0x0000000124986bcf: jmpq   0x0000000124986bff
  0x0000000124986bd4: sub    $0x10,%rsp
  0x0000000124986bd8: vmovsd %xmm0,(%rsp)
  0x0000000124986bdd: jmpq   0x0000000124986bff
  0x0000000124986be2: sub    $0x10,%rsp
  0x0000000124986be6: mov    %rax,(%rsp)
  0x0000000124986bea: movabs $0x0,%r10
  0x0000000124986bf4: mov    %r10,0x8(%rsp)
  0x0000000124986bf9: jmpq   0x0000000124986bff
  0x0000000124986bfe: push   %rax
  0x0000000124986bff: mov    (%r14),%eax
  0x0000000124986c02: movzbl 0x1(%r13),%ebx
  0x0000000124986c07: inc    %r13
  0x0000000124986c0a: movabs $0x1151d5220,%r10
  0x0000000124986c14: jmpq   *(%r10,%rbx,8)
  0x0000000124986c18: add    %al,(%rax)
  0x0000000124986c1a: add    %al,(%rax)
  0x0000000124986c1c: add    %al,(%rax)
  0x0000000124986c1e: add    %al,(%rax)

----------------------------------------------------------------------
iload_1  27 iload_1  [0x0000000124986c40, 0x0000000124986ca0]  96 bytes

  0x0000000124986c40: push   %rax
  0x0000000124986c41: jmpq   0x0000000124986c7f
  0x0000000124986c46: sub    $0x8,%rsp
  0x0000000124986c4a: vmovss %xmm0,(%rsp)
  0x0000000124986c4f: jmpq   0x0000000124986c7f
  0x0000000124986c54: sub    $0x10,%rsp
  0x0000000124986c58: vmovsd %xmm0,(%rsp)
  0x0000000124986c5d: jmpq   0x0000000124986c7f
  0x0000000124986c62: sub    $0x10,%rsp
  0x0000000124986c66: mov    %rax,(%rsp)
  0x0000000124986c6a: movabs $0x0,%r10
  0x0000000124986c74: mov    %r10,0x8(%rsp)
  0x0000000124986c79: jmpq   0x0000000124986c7f
  0x0000000124986c7e: push   %rax
  0x0000000124986c7f: mov    -0x8(%r14),%eax
  0x0000000124986c83: movzbl 0x1(%r13),%ebx
  0x0000000124986c88: inc    %r13
  0x0000000124986c8b: movabs $0x1151d5220,%r10
  0x0000000124986c95: jmpq   *(%r10,%rbx,8)
  0x0000000124986c99: nopl   0x0(%rax)

----------------------------------------------------------------------
iload_2  28 iload_2  [0x0000000124986cc0, 0x0000000124986d20]  96 bytes

  0x0000000124986cc0: push   %rax
  0x0000000124986cc1: jmpq   0x0000000124986cff
  0x0000000124986cc6: sub    $0x8,%rsp
  0x0000000124986cca: vmovss %xmm0,(%rsp)
  0x0000000124986ccf: jmpq   0x0000000124986cff
  0x0000000124986cd4: sub    $0x10,%rsp
  0x0000000124986cd8: vmovsd %xmm0,(%rsp)
  0x0000000124986cdd: jmpq   0x0000000124986cff
  0x0000000124986ce2: sub    $0x10,%rsp
  0x0000000124986ce6: mov    %rax,(%rsp)
  0x0000000124986cea: movabs $0x0,%r10
  0x0000000124986cf4: mov    %r10,0x8(%rsp)
  0x0000000124986cf9: jmpq   0x0000000124986cff
  0x0000000124986cfe: push   %rax
  0x0000000124986cff: mov    -0x10(%r14),%eax
  0x0000000124986d03: movzbl 0x1(%r13),%ebx
  0x0000000124986d08: inc    %r13
  0x0000000124986d0b: movabs $0x1151d5220,%r10
  0x0000000124986d15: jmpq   *(%r10,%rbx,8)
  0x0000000124986d19: nopl   0x0(%rax)

----------------------------------------------------------------------
iload_3  29 iload_3  [0x0000000124986d40, 0x0000000124986da0]  96 bytes

  0x0000000124986d40: push   %rax
  0x0000000124986d41: jmpq   0x0000000124986d7f
  0x0000000124986d46: sub    $0x8,%rsp
  0x0000000124986d4a: vmovss %xmm0,(%rsp)
  0x0000000124986d4f: jmpq   0x0000000124986d7f
  0x0000000124986d54: sub    $0x10,%rsp
  0x0000000124986d58: vmovsd %xmm0,(%rsp)
  0x0000000124986d5d: jmpq   0x0000000124986d7f
  0x0000000124986d62: sub    $0x10,%rsp
  0x0000000124986d66: mov    %rax,(%rsp)
  0x0000000124986d6a: movabs $0x0,%r10
  0x0000000124986d74: mov    %r10,0x8(%rsp)
  0x0000000124986d79: jmpq   0x0000000124986d7f
  0x0000000124986d7e: push   %rax
  0x0000000124986d7f: mov    -0x18(%r14),%eax
  0x0000000124986d83: movzbl 0x1(%r13),%ebx
  0x0000000124986d88: inc    %r13
  0x0000000124986d8b: movabs $0x1151d5220,%r10
  0x0000000124986d95: jmpq   *(%r10,%rbx,8)
  0x0000000124986d99: nopl   0x0(%rax)

----------------------------------------------------------------------
lload_0  30 lload_0  [0x0000000124986dc0, 0x0000000124986e20]  96 bytes

  0x0000000124986dc0: push   %rax
  0x0000000124986dc1: jmpq   0x0000000124986dff
  0x0000000124986dc6: sub    $0x8,%rsp
  0x0000000124986dca: vmovss %xmm0,(%rsp)
  0x0000000124986dcf: jmpq   0x0000000124986dff
  0x0000000124986dd4: sub    $0x10,%rsp
  0x0000000124986dd8: vmovsd %xmm0,(%rsp)
  0x0000000124986ddd: jmpq   0x0000000124986dff
  0x0000000124986de2: sub    $0x10,%rsp
  0x0000000124986de6: mov    %rax,(%rsp)
  0x0000000124986dea: movabs $0x0,%r10
  0x0000000124986df4: mov    %r10,0x8(%rsp)
  0x0000000124986df9: jmpq   0x0000000124986dff
  0x0000000124986dfe: push   %rax
  0x0000000124986dff: mov    -0x8(%r14),%rax
  0x0000000124986e03: movzbl 0x1(%r13),%ebx
  0x0000000124986e08: inc    %r13
  0x0000000124986e0b: movabs $0x1151d5a20,%r10
  0x0000000124986e15: jmpq   *(%r10,%rbx,8)
  0x0000000124986e19: nopl   0x0(%rax)

----------------------------------------------------------------------
lload_1  31 lload_1  [0x0000000124986e40, 0x0000000124986ea0]  96 bytes

  0x0000000124986e40: push   %rax
  0x0000000124986e41: jmpq   0x0000000124986e7f
  0x0000000124986e46: sub    $0x8,%rsp
  0x0000000124986e4a: vmovss %xmm0,(%rsp)
  0x0000000124986e4f: jmpq   0x0000000124986e7f
  0x0000000124986e54: sub    $0x10,%rsp
  0x0000000124986e58: vmovsd %xmm0,(%rsp)
  0x0000000124986e5d: jmpq   0x0000000124986e7f
  0x0000000124986e62: sub    $0x10,%rsp
  0x0000000124986e66: mov    %rax,(%rsp)
  0x0000000124986e6a: movabs $0x0,%r10
  0x0000000124986e74: mov    %r10,0x8(%rsp)
  0x0000000124986e79: jmpq   0x0000000124986e7f
  0x0000000124986e7e: push   %rax
  0x0000000124986e7f: mov    -0x10(%r14),%rax
  0x0000000124986e83: movzbl 0x1(%r13),%ebx
  0x0000000124986e88: inc    %r13
  0x0000000124986e8b: movabs $0x1151d5a20,%r10
  0x0000000124986e95: jmpq   *(%r10,%rbx,8)
  0x0000000124986e99: nopl   0x0(%rax)

----------------------------------------------------------------------
lload_2  32 lload_2  [0x0000000124986ec0, 0x0000000124986f20]  96 bytes

  0x0000000124986ec0: push   %rax
  0x0000000124986ec1: jmpq   0x0000000124986eff
  0x0000000124986ec6: sub    $0x8,%rsp
  0x0000000124986eca: vmovss %xmm0,(%rsp)
  0x0000000124986ecf: jmpq   0x0000000124986eff
  0x0000000124986ed4: sub    $0x10,%rsp
  0x0000000124986ed8: vmovsd %xmm0,(%rsp)
  0x0000000124986edd: jmpq   0x0000000124986eff
  0x0000000124986ee2: sub    $0x10,%rsp
  0x0000000124986ee6: mov    %rax,(%rsp)
  0x0000000124986eea: movabs $0x0,%r10
  0x0000000124986ef4: mov    %r10,0x8(%rsp)
  0x0000000124986ef9: jmpq   0x0000000124986eff
  0x0000000124986efe: push   %rax
  0x0000000124986eff: mov    -0x18(%r14),%rax
  0x0000000124986f03: movzbl 0x1(%r13),%ebx
  0x0000000124986f08: inc    %r13
  0x0000000124986f0b: movabs $0x1151d5a20,%r10
  0x0000000124986f15: jmpq   *(%r10,%rbx,8)
  0x0000000124986f19: nopl   0x0(%rax)

----------------------------------------------------------------------
lload_3  33 lload_3  [0x0000000124986f40, 0x0000000124986fa0]  96 bytes

  0x0000000124986f40: push   %rax
  0x0000000124986f41: jmpq   0x0000000124986f7f
  0x0000000124986f46: sub    $0x8,%rsp
  0x0000000124986f4a: vmovss %xmm0,(%rsp)
  0x0000000124986f4f: jmpq   0x0000000124986f7f
  0x0000000124986f54: sub    $0x10,%rsp
  0x0000000124986f58: vmovsd %xmm0,(%rsp)
  0x0000000124986f5d: jmpq   0x0000000124986f7f
  0x0000000124986f62: sub    $0x10,%rsp
  0x0000000124986f66: mov    %rax,(%rsp)
  0x0000000124986f6a: movabs $0x0,%r10
  0x0000000124986f74: mov    %r10,0x8(%rsp)
  0x0000000124986f79: jmpq   0x0000000124986f7f
  0x0000000124986f7e: push   %rax
  0x0000000124986f7f: mov    -0x20(%r14),%rax
  0x0000000124986f83: movzbl 0x1(%r13),%ebx
  0x0000000124986f88: inc    %r13
  0x0000000124986f8b: movabs $0x1151d5a20,%r10
  0x0000000124986f95: jmpq   *(%r10,%rbx,8)
  0x0000000124986f99: nopl   0x0(%rax)

----------------------------------------------------------------------
fload_0  34 fload_0  [0x0000000124986fc0, 0x0000000124987020]  96 bytes

  0x0000000124986fc0: push   %rax
  0x0000000124986fc1: jmpq   0x0000000124986fff
  0x0000000124986fc6: sub    $0x8,%rsp
  0x0000000124986fca: vmovss %xmm0,(%rsp)
  0x0000000124986fcf: jmpq   0x0000000124986fff
  0x0000000124986fd4: sub    $0x10,%rsp
  0x0000000124986fd8: vmovsd %xmm0,(%rsp)
  0x0000000124986fdd: jmpq   0x0000000124986fff
  0x0000000124986fe2: sub    $0x10,%rsp
  0x0000000124986fe6: mov    %rax,(%rsp)
  0x0000000124986fea: movabs $0x0,%r10
  0x0000000124986ff4: mov    %r10,0x8(%rsp)
  0x0000000124986ff9: jmpq   0x0000000124986fff
  0x0000000124986ffe: push   %rax
  0x0000000124986fff: vmovss (%r14),%xmm0
  0x0000000124987004: movzbl 0x1(%r13),%ebx
  0x0000000124987009: inc    %r13
  0x000000012498700c: movabs $0x1151d6220,%r10
  0x0000000124987016: jmpq   *(%r10,%rbx,8)
  0x000000012498701a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
fload_1  35 fload_1  [0x0000000124987040, 0x00000001249870a0]  96 bytes

  0x0000000124987040: push   %rax
  0x0000000124987041: jmpq   0x000000012498707f
  0x0000000124987046: sub    $0x8,%rsp
  0x000000012498704a: vmovss %xmm0,(%rsp)
  0x000000012498704f: jmpq   0x000000012498707f
  0x0000000124987054: sub    $0x10,%rsp
  0x0000000124987058: vmovsd %xmm0,(%rsp)
  0x000000012498705d: jmpq   0x000000012498707f
  0x0000000124987062: sub    $0x10,%rsp
  0x0000000124987066: mov    %rax,(%rsp)
  0x000000012498706a: movabs $0x0,%r10
  0x0000000124987074: mov    %r10,0x8(%rsp)
  0x0000000124987079: jmpq   0x000000012498707f
  0x000000012498707e: push   %rax
  0x000000012498707f: vmovss -0x8(%r14),%xmm0
  0x0000000124987085: movzbl 0x1(%r13),%ebx
  0x000000012498708a: inc    %r13
  0x000000012498708d: movabs $0x1151d6220,%r10
  0x0000000124987097: jmpq   *(%r10,%rbx,8)
  0x000000012498709b: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
fload_2  36 fload_2  [0x00000001249870c0, 0x0000000124987120]  96 bytes

  0x00000001249870c0: push   %rax
  0x00000001249870c1: jmpq   0x00000001249870ff
  0x00000001249870c6: sub    $0x8,%rsp
  0x00000001249870ca: vmovss %xmm0,(%rsp)
  0x00000001249870cf: jmpq   0x00000001249870ff
  0x00000001249870d4: sub    $0x10,%rsp
  0x00000001249870d8: vmovsd %xmm0,(%rsp)
  0x00000001249870dd: jmpq   0x00000001249870ff
  0x00000001249870e2: sub    $0x10,%rsp
  0x00000001249870e6: mov    %rax,(%rsp)
  0x00000001249870ea: movabs $0x0,%r10
  0x00000001249870f4: mov    %r10,0x8(%rsp)
  0x00000001249870f9: jmpq   0x00000001249870ff
  0x00000001249870fe: push   %rax
  0x00000001249870ff: vmovss -0x10(%r14),%xmm0
  0x0000000124987105: movzbl 0x1(%r13),%ebx
  0x000000012498710a: inc    %r13
  0x000000012498710d: movabs $0x1151d6220,%r10
  0x0000000124987117: jmpq   *(%r10,%rbx,8)
  0x000000012498711b: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
fload_3  37 fload_3  [0x0000000124987140, 0x00000001249871a0]  96 bytes

  0x0000000124987140: push   %rax
  0x0000000124987141: jmpq   0x000000012498717f
  0x0000000124987146: sub    $0x8,%rsp
  0x000000012498714a: vmovss %xmm0,(%rsp)
  0x000000012498714f: jmpq   0x000000012498717f
  0x0000000124987154: sub    $0x10,%rsp
  0x0000000124987158: vmovsd %xmm0,(%rsp)
  0x000000012498715d: jmpq   0x000000012498717f
  0x0000000124987162: sub    $0x10,%rsp
  0x0000000124987166: mov    %rax,(%rsp)
  0x000000012498716a: movabs $0x0,%r10
  0x0000000124987174: mov    %r10,0x8(%rsp)
  0x0000000124987179: jmpq   0x000000012498717f
  0x000000012498717e: push   %rax
  0x000000012498717f: vmovss -0x18(%r14),%xmm0
  0x0000000124987185: movzbl 0x1(%r13),%ebx
  0x000000012498718a: inc    %r13
  0x000000012498718d: movabs $0x1151d6220,%r10
  0x0000000124987197: jmpq   *(%r10,%rbx,8)
  0x000000012498719b: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
dload_0  38 dload_0  [0x00000001249871c0, 0x0000000124987220]  96 bytes

  0x00000001249871c0: push   %rax
  0x00000001249871c1: jmpq   0x00000001249871ff
  0x00000001249871c6: sub    $0x8,%rsp
  0x00000001249871ca: vmovss %xmm0,(%rsp)
  0x00000001249871cf: jmpq   0x00000001249871ff
  0x00000001249871d4: sub    $0x10,%rsp
  0x00000001249871d8: vmovsd %xmm0,(%rsp)
  0x00000001249871dd: jmpq   0x00000001249871ff
  0x00000001249871e2: sub    $0x10,%rsp
  0x00000001249871e6: mov    %rax,(%rsp)
  0x00000001249871ea: movabs $0x0,%r10
  0x00000001249871f4: mov    %r10,0x8(%rsp)
  0x00000001249871f9: jmpq   0x00000001249871ff
  0x00000001249871fe: push   %rax
  0x00000001249871ff: vmovsd -0x8(%r14),%xmm0
  0x0000000124987205: movzbl 0x1(%r13),%ebx
  0x000000012498720a: inc    %r13
  0x000000012498720d: movabs $0x1151d6a20,%r10
  0x0000000124987217: jmpq   *(%r10,%rbx,8)
  0x000000012498721b: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
dload_1  39 dload_1  [0x0000000124987240, 0x00000001249872a0]  96 bytes

  0x0000000124987240: push   %rax
  0x0000000124987241: jmpq   0x000000012498727f
  0x0000000124987246: sub    $0x8,%rsp
  0x000000012498724a: vmovss %xmm0,(%rsp)
  0x000000012498724f: jmpq   0x000000012498727f
  0x0000000124987254: sub    $0x10,%rsp
  0x0000000124987258: vmovsd %xmm0,(%rsp)
  0x000000012498725d: jmpq   0x000000012498727f
  0x0000000124987262: sub    $0x10,%rsp
  0x0000000124987266: mov    %rax,(%rsp)
  0x000000012498726a: movabs $0x0,%r10
  0x0000000124987274: mov    %r10,0x8(%rsp)
  0x0000000124987279: jmpq   0x000000012498727f
  0x000000012498727e: push   %rax
  0x000000012498727f: vmovsd -0x10(%r14),%xmm0
  0x0000000124987285: movzbl 0x1(%r13),%ebx
  0x000000012498728a: inc    %r13
  0x000000012498728d: movabs $0x1151d6a20,%r10
  0x0000000124987297: jmpq   *(%r10,%rbx,8)
  0x000000012498729b: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
dload_2  40 dload_2  [0x00000001249872c0, 0x0000000124987320]  96 bytes

  0x00000001249872c0: push   %rax
  0x00000001249872c1: jmpq   0x00000001249872ff
  0x00000001249872c6: sub    $0x8,%rsp
  0x00000001249872ca: vmovss %xmm0,(%rsp)
  0x00000001249872cf: jmpq   0x00000001249872ff
  0x00000001249872d4: sub    $0x10,%rsp
  0x00000001249872d8: vmovsd %xmm0,(%rsp)
  0x00000001249872dd: jmpq   0x00000001249872ff
  0x00000001249872e2: sub    $0x10,%rsp
  0x00000001249872e6: mov    %rax,(%rsp)
  0x00000001249872ea: movabs $0x0,%r10
  0x00000001249872f4: mov    %r10,0x8(%rsp)
  0x00000001249872f9: jmpq   0x00000001249872ff
  0x00000001249872fe: push   %rax
  0x00000001249872ff: vmovsd -0x18(%r14),%xmm0
  0x0000000124987305: movzbl 0x1(%r13),%ebx
  0x000000012498730a: inc    %r13
  0x000000012498730d: movabs $0x1151d6a20,%r10
  0x0000000124987317: jmpq   *(%r10,%rbx,8)
  0x000000012498731b: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
dload_3  41 dload_3  [0x0000000124987340, 0x00000001249873a0]  96 bytes

  0x0000000124987340: push   %rax
  0x0000000124987341: jmpq   0x000000012498737f
  0x0000000124987346: sub    $0x8,%rsp
  0x000000012498734a: vmovss %xmm0,(%rsp)
  0x000000012498734f: jmpq   0x000000012498737f
  0x0000000124987354: sub    $0x10,%rsp
  0x0000000124987358: vmovsd %xmm0,(%rsp)
  0x000000012498735d: jmpq   0x000000012498737f
  0x0000000124987362: sub    $0x10,%rsp
  0x0000000124987366: mov    %rax,(%rsp)
  0x000000012498736a: movabs $0x0,%r10
  0x0000000124987374: mov    %r10,0x8(%rsp)
  0x0000000124987379: jmpq   0x000000012498737f
  0x000000012498737e: push   %rax
  0x000000012498737f: vmovsd -0x20(%r14),%xmm0
  0x0000000124987385: movzbl 0x1(%r13),%ebx
  0x000000012498738a: inc    %r13
  0x000000012498738d: movabs $0x1151d6a20,%r10
  0x0000000124987397: jmpq   *(%r10,%rbx,8)
  0x000000012498739b: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
aload_0  42 aload_0  [0x00000001249873c0, 0x0000000124987460]  160 bytes

  0x00000001249873c0: push   %rax
  0x00000001249873c1: jmpq   0x00000001249873ff
  0x00000001249873c6: sub    $0x8,%rsp
  0x00000001249873ca: vmovss %xmm0,(%rsp)
  0x00000001249873cf: jmpq   0x00000001249873ff
  0x00000001249873d4: sub    $0x10,%rsp
  0x00000001249873d8: vmovsd %xmm0,(%rsp)
  0x00000001249873dd: jmpq   0x00000001249873ff
  0x00000001249873e2: sub    $0x10,%rsp
  0x00000001249873e6: mov    %rax,(%rsp)
  0x00000001249873ea: movabs $0x0,%r10
  0x00000001249873f4: mov    %r10,0x8(%rsp)
  0x00000001249873f9: jmpq   0x00000001249873ff
  0x00000001249873fe: push   %rax
  0x00000001249873ff: movzbl 0x1(%r13),%ebx
  0x0000000124987404: cmp    $0xb4,%ebx
  0x000000012498740a: je     0x0000000124987440
  0x0000000124987410: cmp    $0xd0,%ebx
  0x0000000124987416: mov    $0xdd,%ecx
  0x000000012498741b: je     0x000000012498743c
  0x000000012498741d: cmp    $0xcb,%ebx
  0x0000000124987423: mov    $0xde,%ecx
  0x0000000124987428: je     0x000000012498743c
  0x000000012498742a: cmp    $0xcf,%ebx
  0x0000000124987430: mov    $0xdf,%ecx
  0x0000000124987435: je     0x000000012498743c
  0x0000000124987437: mov    $0xdc,%ecx
  0x000000012498743c: mov    %cl,0x0(%r13)
  0x0000000124987440: mov    (%r14),%rax
  0x0000000124987443: movzbl 0x1(%r13),%ebx
  0x0000000124987448: inc    %r13
  0x000000012498744b: movabs $0x1151d7220,%r10
  0x0000000124987455: jmpq   *(%r10,%rbx,8)
  0x0000000124987459: nopl   0x0(%rax)

----------------------------------------------------------------------
aload_1  43 aload_1  [0x0000000124987480, 0x00000001249874e0]  96 bytes

  0x0000000124987480: push   %rax
  0x0000000124987481: jmpq   0x00000001249874bf
  0x0000000124987486: sub    $0x8,%rsp
  0x000000012498748a: vmovss %xmm0,(%rsp)
  0x000000012498748f: jmpq   0x00000001249874bf
  0x0000000124987494: sub    $0x10,%rsp
  0x0000000124987498: vmovsd %xmm0,(%rsp)
  0x000000012498749d: jmpq   0x00000001249874bf
  0x00000001249874a2: sub    $0x10,%rsp
  0x00000001249874a6: mov    %rax,(%rsp)
  0x00000001249874aa: movabs $0x0,%r10
  0x00000001249874b4: mov    %r10,0x8(%rsp)
  0x00000001249874b9: jmpq   0x00000001249874bf
  0x00000001249874be: push   %rax
  0x00000001249874bf: mov    -0x8(%r14),%rax
  0x00000001249874c3: movzbl 0x1(%r13),%ebx
  0x00000001249874c8: inc    %r13
  0x00000001249874cb: movabs $0x1151d7220,%r10
  0x00000001249874d5: jmpq   *(%r10,%rbx,8)
  0x00000001249874d9: nopl   0x0(%rax)

----------------------------------------------------------------------
aload_2  44 aload_2  [0x0000000124987500, 0x0000000124987560]  96 bytes

  0x0000000124987500: push   %rax
  0x0000000124987501: jmpq   0x000000012498753f
  0x0000000124987506: sub    $0x8,%rsp
  0x000000012498750a: vmovss %xmm0,(%rsp)
  0x000000012498750f: jmpq   0x000000012498753f
  0x0000000124987514: sub    $0x10,%rsp
  0x0000000124987518: vmovsd %xmm0,(%rsp)
  0x000000012498751d: jmpq   0x000000012498753f
  0x0000000124987522: sub    $0x10,%rsp
  0x0000000124987526: mov    %rax,(%rsp)
  0x000000012498752a: movabs $0x0,%r10
  0x0000000124987534: mov    %r10,0x8(%rsp)
  0x0000000124987539: jmpq   0x000000012498753f
  0x000000012498753e: push   %rax
  0x000000012498753f: mov    -0x10(%r14),%rax
  0x0000000124987543: movzbl 0x1(%r13),%ebx
  0x0000000124987548: inc    %r13
  0x000000012498754b: movabs $0x1151d7220,%r10
  0x0000000124987555: jmpq   *(%r10,%rbx,8)
  0x0000000124987559: nopl   0x0(%rax)

----------------------------------------------------------------------
aload_3  45 aload_3  [0x0000000124987580, 0x00000001249875e0]  96 bytes

  0x0000000124987580: push   %rax
  0x0000000124987581: jmpq   0x00000001249875bf
  0x0000000124987586: sub    $0x8,%rsp
  0x000000012498758a: vmovss %xmm0,(%rsp)
  0x000000012498758f: jmpq   0x00000001249875bf
  0x0000000124987594: sub    $0x10,%rsp
  0x0000000124987598: vmovsd %xmm0,(%rsp)
  0x000000012498759d: jmpq   0x00000001249875bf
  0x00000001249875a2: sub    $0x10,%rsp
  0x00000001249875a6: mov    %rax,(%rsp)
  0x00000001249875aa: movabs $0x0,%r10
  0x00000001249875b4: mov    %r10,0x8(%rsp)
  0x00000001249875b9: jmpq   0x00000001249875bf
  0x00000001249875be: push   %rax
  0x00000001249875bf: mov    -0x18(%r14),%rax
  0x00000001249875c3: movzbl 0x1(%r13),%ebx
  0x00000001249875c8: inc    %r13
  0x00000001249875cb: movabs $0x1151d7220,%r10
  0x00000001249875d5: jmpq   *(%r10,%rbx,8)
  0x00000001249875d9: nopl   0x0(%rax)

----------------------------------------------------------------------
iaload  46 iaload  [0x0000000124987600, 0x0000000124987640]  64 bytes

  0x0000000124987600: mov    (%rsp),%eax
  0x0000000124987603: add    $0x8,%rsp
  0x0000000124987607: pop    %rdx
  0x0000000124987608: movslq %eax,%rax
  0x000000012498760b: cmp    0xc(%rdx),%eax
  0x000000012498760e: mov    %eax,%ebx
  0x0000000124987610: jb     0x000000012498761a
  0x0000000124987612: mov    %rdx,%rsi
  0x0000000124987615: jmpq   0x0000000124982aa0
  0x000000012498761a: mov    0x10(%rdx,%rax,4),%eax
  0x000000012498761e: movzbl 0x1(%r13),%ebx
  0x0000000124987623: inc    %r13
  0x0000000124987626: movabs $0x1151d5220,%r10
  0x0000000124987630: jmpq   *(%r10,%rbx,8)
  0x0000000124987634: nopl   0x0(%rax)
  0x0000000124987638: add    %al,(%rax)
  0x000000012498763a: add    %al,(%rax)
  0x000000012498763c: add    %al,(%rax)
  0x000000012498763e: add    %al,(%rax)

----------------------------------------------------------------------
laload  47 laload  [0x0000000124987660, 0x00000001249876a0]  64 bytes

  0x0000000124987660: mov    (%rsp),%eax
  0x0000000124987663: add    $0x8,%rsp
  0x0000000124987667: pop    %rdx
  0x0000000124987668: movslq %eax,%rax
  0x000000012498766b: cmp    0xc(%rdx),%eax
  0x000000012498766e: mov    %eax,%ebx
  0x0000000124987670: jb     0x000000012498767a
  0x0000000124987672: mov    %rdx,%rsi
  0x0000000124987675: jmpq   0x0000000124982aa0
  0x000000012498767a: mov    0x10(%rdx,%rbx,8),%rax
  0x000000012498767f: movzbl 0x1(%r13),%ebx
  0x0000000124987684: inc    %r13
  0x0000000124987687: movabs $0x1151d5a20,%r10
  0x0000000124987691: jmpq   *(%r10,%rbx,8)
  0x0000000124987695: data16 xchg %ax,%ax
  0x0000000124987698: add    %al,(%rax)
  0x000000012498769a: add    %al,(%rax)
  0x000000012498769c: add    %al,(%rax)
  0x000000012498769e: add    %al,(%rax)

----------------------------------------------------------------------
faload  48 faload  [0x00000001249876c0, 0x0000000124987700]  64 bytes

  0x00000001249876c0: mov    (%rsp),%eax
  0x00000001249876c3: add    $0x8,%rsp
  0x00000001249876c7: pop    %rdx
  0x00000001249876c8: movslq %eax,%rax
  0x00000001249876cb: cmp    0xc(%rdx),%eax
  0x00000001249876ce: mov    %eax,%ebx
  0x00000001249876d0: jb     0x00000001249876da
  0x00000001249876d2: mov    %rdx,%rsi
  0x00000001249876d5: jmpq   0x0000000124982aa0
  0x00000001249876da: vmovss 0x10(%rdx,%rax,4),%xmm0
  0x00000001249876e0: movzbl 0x1(%r13),%ebx
  0x00000001249876e5: inc    %r13
  0x00000001249876e8: movabs $0x1151d6220,%r10
  0x00000001249876f2: jmpq   *(%r10,%rbx,8)
  0x00000001249876f6: xchg   %ax,%ax
  0x00000001249876f8: add    %al,(%rax)
  0x00000001249876fa: add    %al,(%rax)
  0x00000001249876fc: add    %al,(%rax)
  0x00000001249876fe: add    %al,(%rax)

----------------------------------------------------------------------
daload  49 daload  [0x0000000124987720, 0x0000000124987760]  64 bytes

  0x0000000124987720: mov    (%rsp),%eax
  0x0000000124987723: add    $0x8,%rsp
  0x0000000124987727: pop    %rdx
  0x0000000124987728: movslq %eax,%rax
  0x000000012498772b: cmp    0xc(%rdx),%eax
  0x000000012498772e: mov    %eax,%ebx
  0x0000000124987730: jb     0x000000012498773a
  0x0000000124987732: mov    %rdx,%rsi
  0x0000000124987735: jmpq   0x0000000124982aa0
  0x000000012498773a: vmovsd 0x10(%rdx,%rax,8),%xmm0
  0x0000000124987740: movzbl 0x1(%r13),%ebx
  0x0000000124987745: inc    %r13
  0x0000000124987748: movabs $0x1151d6a20,%r10
  0x0000000124987752: jmpq   *(%r10,%rbx,8)
  0x0000000124987756: xchg   %ax,%ax
  0x0000000124987758: add    %al,(%rax)
  0x000000012498775a: add    %al,(%rax)
  0x000000012498775c: add    %al,(%rax)
  0x000000012498775e: add    %al,(%rax)

----------------------------------------------------------------------
aaload  50 aaload  [0x0000000124987780, 0x00000001249877c0]  64 bytes

  0x0000000124987780: mov    (%rsp),%eax
  0x0000000124987783: add    $0x8,%rsp
  0x0000000124987787: pop    %rdx
  0x0000000124987788: movslq %eax,%rax
  0x000000012498778b: cmp    0xc(%rdx),%eax
  0x000000012498778e: mov    %eax,%ebx
  0x0000000124987790: jb     0x000000012498779a
  0x0000000124987792: mov    %rdx,%rsi
  0x0000000124987795: jmpq   0x0000000124982aa0
  0x000000012498779a: mov    0x10(%rdx,%rax,4),%eax
  0x000000012498779e: shl    $0x3,%rax
  0x00000001249877a2: movzbl 0x1(%r13),%ebx
  0x00000001249877a7: inc    %r13
  0x00000001249877aa: movabs $0x1151d7220,%r10
  0x00000001249877b4: jmpq   *(%r10,%rbx,8)
  0x00000001249877b8: add    %al,(%rax)
  0x00000001249877ba: add    %al,(%rax)
  0x00000001249877bc: add    %al,(%rax)
  0x00000001249877be: add    %al,(%rax)

----------------------------------------------------------------------
baload  51 baload  [0x00000001249877e0, 0x0000000124987820]  64 bytes

  0x00000001249877e0: mov    (%rsp),%eax
  0x00000001249877e3: add    $0x8,%rsp
  0x00000001249877e7: pop    %rdx
  0x00000001249877e8: movslq %eax,%rax
  0x00000001249877eb: cmp    0xc(%rdx),%eax
  0x00000001249877ee: mov    %eax,%ebx
  0x00000001249877f0: jb     0x00000001249877fa
  0x00000001249877f2: mov    %rdx,%rsi
  0x00000001249877f5: jmpq   0x0000000124982aa0
  0x00000001249877fa: movsbl 0x10(%rdx,%rax,1),%eax
  0x00000001249877ff: movzbl 0x1(%r13),%ebx
  0x0000000124987804: inc    %r13
  0x0000000124987807: movabs $0x1151d5220,%r10
  0x0000000124987811: jmpq   *(%r10,%rbx,8)
  0x0000000124987815: data16 xchg %ax,%ax
  0x0000000124987818: add    %al,(%rax)
  0x000000012498781a: add    %al,(%rax)
  0x000000012498781c: add    %al,(%rax)
  0x000000012498781e: add    %al,(%rax)

----------------------------------------------------------------------
caload  52 caload  [0x0000000124987840, 0x0000000124987880]  64 bytes

  0x0000000124987840: mov    (%rsp),%eax
  0x0000000124987843: add    $0x8,%rsp
  0x0000000124987847: pop    %rdx
  0x0000000124987848: movslq %eax,%rax
  0x000000012498784b: cmp    0xc(%rdx),%eax
  0x000000012498784e: mov    %eax,%ebx
  0x0000000124987850: jb     0x000000012498785a
  0x0000000124987852: mov    %rdx,%rsi
  0x0000000124987855: jmpq   0x0000000124982aa0
  0x000000012498785a: movzwl 0x10(%rdx,%rax,2),%eax
  0x000000012498785f: movzbl 0x1(%r13),%ebx
  0x0000000124987864: inc    %r13
  0x0000000124987867: movabs $0x1151d5220,%r10
  0x0000000124987871: jmpq   *(%r10,%rbx,8)
  0x0000000124987875: data16 xchg %ax,%ax
  0x0000000124987878: add    %al,(%rax)
  0x000000012498787a: add    %al,(%rax)
  0x000000012498787c: add    %al,(%rax)
  0x000000012498787e: add    %al,(%rax)

----------------------------------------------------------------------
saload  53 saload  [0x00000001249878a0, 0x00000001249878e0]  64 bytes

  0x00000001249878a0: mov    (%rsp),%eax
  0x00000001249878a3: add    $0x8,%rsp
  0x00000001249878a7: pop    %rdx
  0x00000001249878a8: movslq %eax,%rax
  0x00000001249878ab: cmp    0xc(%rdx),%eax
  0x00000001249878ae: mov    %eax,%ebx
  0x00000001249878b0: jb     0x00000001249878ba
  0x00000001249878b2: mov    %rdx,%rsi
  0x00000001249878b5: jmpq   0x0000000124982aa0
  0x00000001249878ba: movswl 0x10(%rdx,%rax,2),%eax
  0x00000001249878bf: movzbl 0x1(%r13),%ebx
  0x00000001249878c4: inc    %r13
  0x00000001249878c7: movabs $0x1151d5220,%r10
  0x00000001249878d1: jmpq   *(%r10,%rbx,8)
  0x00000001249878d5: data16 xchg %ax,%ax
  0x00000001249878d8: add    %al,(%rax)
  0x00000001249878da: add    %al,(%rax)
  0x00000001249878dc: add    %al,(%rax)
  0x00000001249878de: add    %al,(%rax)

----------------------------------------------------------------------
istore  54 istore  [0x0000000124987900, 0x0000000124987960]  96 bytes

  0x0000000124987900: mov    (%rsp),%eax
  0x0000000124987903: add    $0x8,%rsp
  0x0000000124987907: movzbl 0x1(%r13),%ebx
  0x000000012498790c: neg    %rbx
  0x000000012498790f: mov    %eax,(%r14,%rbx,8)
  0x0000000124987913: movzbl 0x2(%r13),%ebx
  0x0000000124987918: add    $0x2,%r13
  0x000000012498791c: movabs $0x1151d7a20,%r10
  0x0000000124987926: jmpq   *(%r10,%rbx,8)
  0x000000012498792a: mov    (%rsp),%eax
  0x000000012498792d: add    $0x8,%rsp
  0x0000000124987931: movzwl 0x2(%r13),%ebx
  0x0000000124987936: bswap  %ebx
  0x0000000124987938: shr    $0x10,%ebx
  0x000000012498793b: neg    %rbx
  0x000000012498793e: mov    %eax,(%r14,%rbx,8)
  0x0000000124987942: movzbl 0x4(%r13),%ebx
  0x0000000124987947: add    $0x4,%r13
  0x000000012498794b: movabs $0x1151d7a20,%r10
  0x0000000124987955: jmpq   *(%r10,%rbx,8)
  0x0000000124987959: nopl   0x0(%rax)

----------------------------------------------------------------------
lstore  55 lstore  [0x0000000124987980, 0x00000001249879e0]  96 bytes

  0x0000000124987980: mov    (%rsp),%rax
  0x0000000124987984: add    $0x10,%rsp
  0x0000000124987988: movzbl 0x1(%r13),%ebx
  0x000000012498798d: neg    %rbx
  0x0000000124987990: mov    %rax,-0x8(%r14,%rbx,8)
  0x0000000124987995: movzbl 0x2(%r13),%ebx
  0x000000012498799a: add    $0x2,%r13
  0x000000012498799e: movabs $0x1151d7a20,%r10
  0x00000001249879a8: jmpq   *(%r10,%rbx,8)
  0x00000001249879ac: mov    (%rsp),%rax
  0x00000001249879b0: add    $0x10,%rsp
  0x00000001249879b4: movzwl 0x2(%r13),%ebx
  0x00000001249879b9: bswap  %ebx
  0x00000001249879bb: shr    $0x10,%ebx
  0x00000001249879be: neg    %rbx
  0x00000001249879c1: mov    %rax,-0x8(%r14,%rbx,8)
  0x00000001249879c6: movzbl 0x4(%r13),%ebx
  0x00000001249879cb: add    $0x4,%r13
  0x00000001249879cf: movabs $0x1151d7a20,%r10
  0x00000001249879d9: jmpq   *(%r10,%rbx,8)
  0x00000001249879dd: data16 xchg %ax,%ax

----------------------------------------------------------------------
fstore  56 fstore  [0x0000000124987a00, 0x0000000124987a80]  128 bytes

  0x0000000124987a00: vmovss (%rsp),%xmm0
  0x0000000124987a05: add    $0x8,%rsp
  0x0000000124987a09: movzbl 0x1(%r13),%ebx
  0x0000000124987a0e: neg    %rbx
  0x0000000124987a11: vmovss %xmm0,(%r14,%rbx,8)
  0x0000000124987a17: movzbl 0x2(%r13),%ebx
  0x0000000124987a1c: add    $0x2,%r13
  0x0000000124987a20: movabs $0x1151d7a20,%r10
  0x0000000124987a2a: jmpq   *(%r10,%rbx,8)
  0x0000000124987a2e: vmovss (%rsp),%xmm0
  0x0000000124987a33: add    $0x8,%rsp
  0x0000000124987a37: movzwl 0x2(%r13),%ebx
  0x0000000124987a3c: bswap  %ebx
  0x0000000124987a3e: shr    $0x10,%ebx
  0x0000000124987a41: neg    %rbx
  0x0000000124987a44: vmovss %xmm0,(%r14,%rbx,8)
  0x0000000124987a4a: movzbl 0x4(%r13),%ebx
  0x0000000124987a4f: add    $0x4,%r13
  0x0000000124987a53: movabs $0x1151d7a20,%r10
  0x0000000124987a5d: jmpq   *(%r10,%rbx,8)
  0x0000000124987a61: nopl   0x0(%rax)
  0x0000000124987a68: add    %al,(%rax)
  0x0000000124987a6a: add    %al,(%rax)
  0x0000000124987a6c: add    %al,(%rax)
  0x0000000124987a6e: add    %al,(%rax)
  0x0000000124987a70: add    %al,(%rax)
  0x0000000124987a72: add    %al,(%rax)
  0x0000000124987a74: add    %al,(%rax)
  0x0000000124987a76: add    %al,(%rax)
  0x0000000124987a78: add    %al,(%rax)
  0x0000000124987a7a: add    %al,(%rax)
  0x0000000124987a7c: add    %al,(%rax)
  0x0000000124987a7e: add    %al,(%rax)

----------------------------------------------------------------------
dstore  57 dstore  [0x0000000124987aa0, 0x0000000124987b20]  128 bytes

  0x0000000124987aa0: vmovsd (%rsp),%xmm0
  0x0000000124987aa5: add    $0x10,%rsp
  0x0000000124987aa9: movzbl 0x1(%r13),%ebx
  0x0000000124987aae: neg    %rbx
  0x0000000124987ab1: vmovsd %xmm0,-0x8(%r14,%rbx,8)
  0x0000000124987ab8: movzbl 0x2(%r13),%ebx
  0x0000000124987abd: add    $0x2,%r13
  0x0000000124987ac1: movabs $0x1151d7a20,%r10
  0x0000000124987acb: jmpq   *(%r10,%rbx,8)
  0x0000000124987acf: vmovsd (%rsp),%xmm0
  0x0000000124987ad4: add    $0x10,%rsp
  0x0000000124987ad8: movzwl 0x2(%r13),%ebx
  0x0000000124987add: bswap  %ebx
  0x0000000124987adf: shr    $0x10,%ebx
  0x0000000124987ae2: neg    %rbx
  0x0000000124987ae5: vmovsd %xmm0,-0x8(%r14,%rbx,8)
  0x0000000124987aec: movzbl 0x4(%r13),%ebx
  0x0000000124987af1: add    $0x4,%r13
  0x0000000124987af5: movabs $0x1151d7a20,%r10
  0x0000000124987aff: jmpq   *(%r10,%rbx,8)
  0x0000000124987b03: nopl   0x0(%rax,%rax,1)
  0x0000000124987b08: add    %al,(%rax)
  0x0000000124987b0a: add    %al,(%rax)
  0x0000000124987b0c: add    %al,(%rax)
  0x0000000124987b0e: add    %al,(%rax)
  0x0000000124987b10: add    %al,(%rax)
  0x0000000124987b12: add    %al,(%rax)
  0x0000000124987b14: add    %al,(%rax)
  0x0000000124987b16: add    %al,(%rax)
  0x0000000124987b18: add    %al,(%rax)
  0x0000000124987b1a: add    %al,(%rax)
  0x0000000124987b1c: add    %al,(%rax)
  0x0000000124987b1e: add    %al,(%rax)

----------------------------------------------------------------------
astore  58 astore  [0x0000000124987b40, 0x0000000124987be0]  160 bytes

  0x0000000124987b40: push   %rax
  0x0000000124987b41: jmpq   0x0000000124987b7f
  0x0000000124987b46: sub    $0x8,%rsp
  0x0000000124987b4a: vmovss %xmm0,(%rsp)
  0x0000000124987b4f: jmpq   0x0000000124987b7f
  0x0000000124987b54: sub    $0x10,%rsp
  0x0000000124987b58: vmovsd %xmm0,(%rsp)
  0x0000000124987b5d: jmpq   0x0000000124987b7f
  0x0000000124987b62: sub    $0x10,%rsp
  0x0000000124987b66: mov    %rax,(%rsp)
  0x0000000124987b6a: movabs $0x0,%r10
  0x0000000124987b74: mov    %r10,0x8(%rsp)
  0x0000000124987b79: jmpq   0x0000000124987b7f
  0x0000000124987b7e: push   %rax
  0x0000000124987b7f: pop    %rax
  0x0000000124987b80: movzbl 0x1(%r13),%ebx
  0x0000000124987b85: neg    %rbx
  0x0000000124987b88: mov    %rax,(%r14,%rbx,8)
  0x0000000124987b8c: movzbl 0x2(%r13),%ebx
  0x0000000124987b91: add    $0x2,%r13
  0x0000000124987b95: movabs $0x1151d7a20,%r10
  0x0000000124987b9f: jmpq   *(%r10,%rbx,8)
  0x0000000124987ba3: pop    %rax
  0x0000000124987ba4: movzwl 0x2(%r13),%ebx
  0x0000000124987ba9: bswap  %ebx
  0x0000000124987bab: shr    $0x10,%ebx
  0x0000000124987bae: neg    %rbx
  0x0000000124987bb1: mov    %rax,(%r14,%rbx,8)
  0x0000000124987bb5: movzbl 0x4(%r13),%ebx
  0x0000000124987bba: add    $0x4,%r13
  0x0000000124987bbe: movabs $0x1151d7a20,%r10
  0x0000000124987bc8: jmpq   *(%r10,%rbx,8)
  0x0000000124987bcc: nopl   0x0(%rax)
  0x0000000124987bd0: add    %al,(%rax)
  0x0000000124987bd2: add    %al,(%rax)
  0x0000000124987bd4: add    %al,(%rax)
  0x0000000124987bd6: add    %al,(%rax)
  0x0000000124987bd8: add    %al,(%rax)
  0x0000000124987bda: add    %al,(%rax)
  0x0000000124987bdc: add    %al,(%rax)
  0x0000000124987bde: add    %al,(%rax)

----------------------------------------------------------------------
istore_0  59 istore_0  [0x0000000124987c00, 0x0000000124987c20]  32 bytes

  0x0000000124987c00: mov    (%rsp),%eax
  0x0000000124987c03: add    $0x8,%rsp
  0x0000000124987c07: mov    %eax,(%r14)
  0x0000000124987c0a: movzbl 0x1(%r13),%ebx
  0x0000000124987c0f: inc    %r13
  0x0000000124987c12: movabs $0x1151d7a20,%r10
  0x0000000124987c1c: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
istore_1  60 istore_1  [0x0000000124987c40, 0x0000000124987c80]  64 bytes

  0x0000000124987c40: mov    (%rsp),%eax
  0x0000000124987c43: add    $0x8,%rsp
  0x0000000124987c47: mov    %eax,-0x8(%r14)
  0x0000000124987c4b: movzbl 0x1(%r13),%ebx
  0x0000000124987c50: inc    %r13
  0x0000000124987c53: movabs $0x1151d7a20,%r10
  0x0000000124987c5d: jmpq   *(%r10,%rbx,8)
  0x0000000124987c61: nopl   0x0(%rax)
  0x0000000124987c68: add    %al,(%rax)
  0x0000000124987c6a: add    %al,(%rax)
  0x0000000124987c6c: add    %al,(%rax)
  0x0000000124987c6e: add    %al,(%rax)
  0x0000000124987c70: add    %al,(%rax)
  0x0000000124987c72: add    %al,(%rax)
  0x0000000124987c74: add    %al,(%rax)
  0x0000000124987c76: add    %al,(%rax)
  0x0000000124987c78: add    %al,(%rax)
  0x0000000124987c7a: add    %al,(%rax)
  0x0000000124987c7c: add    %al,(%rax)
  0x0000000124987c7e: add    %al,(%rax)

----------------------------------------------------------------------
istore_2  61 istore_2  [0x0000000124987ca0, 0x0000000124987ce0]  64 bytes

  0x0000000124987ca0: mov    (%rsp),%eax
  0x0000000124987ca3: add    $0x8,%rsp
  0x0000000124987ca7: mov    %eax,-0x10(%r14)
  0x0000000124987cab: movzbl 0x1(%r13),%ebx
  0x0000000124987cb0: inc    %r13
  0x0000000124987cb3: movabs $0x1151d7a20,%r10
  0x0000000124987cbd: jmpq   *(%r10,%rbx,8)
  0x0000000124987cc1: nopl   0x0(%rax)
  0x0000000124987cc8: add    %al,(%rax)
  0x0000000124987cca: add    %al,(%rax)
  0x0000000124987ccc: add    %al,(%rax)
  0x0000000124987cce: add    %al,(%rax)
  0x0000000124987cd0: add    %al,(%rax)
  0x0000000124987cd2: add    %al,(%rax)
  0x0000000124987cd4: add    %al,(%rax)
  0x0000000124987cd6: add    %al,(%rax)
  0x0000000124987cd8: add    %al,(%rax)
  0x0000000124987cda: add    %al,(%rax)
  0x0000000124987cdc: add    %al,(%rax)
  0x0000000124987cde: add    %al,(%rax)

----------------------------------------------------------------------
istore_3  62 istore_3  [0x0000000124987d00, 0x0000000124987d40]  64 bytes

  0x0000000124987d00: mov    (%rsp),%eax
  0x0000000124987d03: add    $0x8,%rsp
  0x0000000124987d07: mov    %eax,-0x18(%r14)
  0x0000000124987d0b: movzbl 0x1(%r13),%ebx
  0x0000000124987d10: inc    %r13
  0x0000000124987d13: movabs $0x1151d7a20,%r10
  0x0000000124987d1d: jmpq   *(%r10,%rbx,8)
  0x0000000124987d21: nopl   0x0(%rax)
  0x0000000124987d28: add    %al,(%rax)
  0x0000000124987d2a: add    %al,(%rax)
  0x0000000124987d2c: add    %al,(%rax)
  0x0000000124987d2e: add    %al,(%rax)
  0x0000000124987d30: add    %al,(%rax)
  0x0000000124987d32: add    %al,(%rax)
  0x0000000124987d34: add    %al,(%rax)
  0x0000000124987d36: add    %al,(%rax)
  0x0000000124987d38: add    %al,(%rax)
  0x0000000124987d3a: add    %al,(%rax)
  0x0000000124987d3c: add    %al,(%rax)
  0x0000000124987d3e: add    %al,(%rax)

----------------------------------------------------------------------
lstore_0  63 lstore_0  [0x0000000124987d60, 0x0000000124987da0]  64 bytes

  0x0000000124987d60: mov    (%rsp),%rax
  0x0000000124987d64: add    $0x10,%rsp
  0x0000000124987d68: mov    %rax,-0x8(%r14)
  0x0000000124987d6c: movzbl 0x1(%r13),%ebx
  0x0000000124987d71: inc    %r13
  0x0000000124987d74: movabs $0x1151d7a20,%r10
  0x0000000124987d7e: jmpq   *(%r10,%rbx,8)
  0x0000000124987d82: nopw   0x0(%rax,%rax,1)
  0x0000000124987d88: add    %al,(%rax)
  0x0000000124987d8a: add    %al,(%rax)
  0x0000000124987d8c: add    %al,(%rax)
  0x0000000124987d8e: add    %al,(%rax)
  0x0000000124987d90: add    %al,(%rax)
  0x0000000124987d92: add    %al,(%rax)
  0x0000000124987d94: add    %al,(%rax)
  0x0000000124987d96: add    %al,(%rax)
  0x0000000124987d98: add    %al,(%rax)
  0x0000000124987d9a: add    %al,(%rax)
  0x0000000124987d9c: add    %al,(%rax)
  0x0000000124987d9e: add    %al,(%rax)

----------------------------------------------------------------------
lstore_1  64 lstore_1  [0x0000000124987dc0, 0x0000000124987e00]  64 bytes

  0x0000000124987dc0: mov    (%rsp),%rax
  0x0000000124987dc4: add    $0x10,%rsp
  0x0000000124987dc8: mov    %rax,-0x10(%r14)
  0x0000000124987dcc: movzbl 0x1(%r13),%ebx
  0x0000000124987dd1: inc    %r13
  0x0000000124987dd4: movabs $0x1151d7a20,%r10
  0x0000000124987dde: jmpq   *(%r10,%rbx,8)
  0x0000000124987de2: nopw   0x0(%rax,%rax,1)
  0x0000000124987de8: add    %al,(%rax)
  0x0000000124987dea: add    %al,(%rax)
  0x0000000124987dec: add    %al,(%rax)
  0x0000000124987dee: add    %al,(%rax)
  0x0000000124987df0: add    %al,(%rax)
  0x0000000124987df2: add    %al,(%rax)
  0x0000000124987df4: add    %al,(%rax)
  0x0000000124987df6: add    %al,(%rax)
  0x0000000124987df8: add    %al,(%rax)
  0x0000000124987dfa: add    %al,(%rax)
  0x0000000124987dfc: add    %al,(%rax)
  0x0000000124987dfe: add    %al,(%rax)

----------------------------------------------------------------------
lstore_2  65 lstore_2  [0x0000000124987e20, 0x0000000124987e60]  64 bytes

  0x0000000124987e20: mov    (%rsp),%rax
  0x0000000124987e24: add    $0x10,%rsp
  0x0000000124987e28: mov    %rax,-0x18(%r14)
  0x0000000124987e2c: movzbl 0x1(%r13),%ebx
  0x0000000124987e31: inc    %r13
  0x0000000124987e34: movabs $0x1151d7a20,%r10
  0x0000000124987e3e: jmpq   *(%r10,%rbx,8)
  0x0000000124987e42: nopw   0x0(%rax,%rax,1)
  0x0000000124987e48: add    %al,(%rax)
  0x0000000124987e4a: add    %al,(%rax)
  0x0000000124987e4c: add    %al,(%rax)
  0x0000000124987e4e: add    %al,(%rax)
  0x0000000124987e50: add    %al,(%rax)
  0x0000000124987e52: add    %al,(%rax)
  0x0000000124987e54: add    %al,(%rax)
  0x0000000124987e56: add    %al,(%rax)
  0x0000000124987e58: add    %al,(%rax)
  0x0000000124987e5a: add    %al,(%rax)
  0x0000000124987e5c: add    %al,(%rax)
  0x0000000124987e5e: add    %al,(%rax)

----------------------------------------------------------------------
lstore_3  66 lstore_3  [0x0000000124987e80, 0x0000000124987ec0]  64 bytes

  0x0000000124987e80: mov    (%rsp),%rax
  0x0000000124987e84: add    $0x10,%rsp
  0x0000000124987e88: mov    %rax,-0x20(%r14)
  0x0000000124987e8c: movzbl 0x1(%r13),%ebx
  0x0000000124987e91: inc    %r13
  0x0000000124987e94: movabs $0x1151d7a20,%r10
  0x0000000124987e9e: jmpq   *(%r10,%rbx,8)
  0x0000000124987ea2: nopw   0x0(%rax,%rax,1)
  0x0000000124987ea8: add    %al,(%rax)
  0x0000000124987eaa: add    %al,(%rax)
  0x0000000124987eac: add    %al,(%rax)
  0x0000000124987eae: add    %al,(%rax)
  0x0000000124987eb0: add    %al,(%rax)
  0x0000000124987eb2: add    %al,(%rax)
  0x0000000124987eb4: add    %al,(%rax)
  0x0000000124987eb6: add    %al,(%rax)
  0x0000000124987eb8: add    %al,(%rax)
  0x0000000124987eba: add    %al,(%rax)
  0x0000000124987ebc: add    %al,(%rax)
  0x0000000124987ebe: add    %al,(%rax)

----------------------------------------------------------------------
fstore_0  67 fstore_0  [0x0000000124987ee0, 0x0000000124987f20]  64 bytes

  0x0000000124987ee0: vmovss (%rsp),%xmm0
  0x0000000124987ee5: add    $0x8,%rsp
  0x0000000124987ee9: vmovss %xmm0,(%r14)
  0x0000000124987eee: movzbl 0x1(%r13),%ebx
  0x0000000124987ef3: inc    %r13
  0x0000000124987ef6: movabs $0x1151d7a20,%r10
  0x0000000124987f00: jmpq   *(%r10,%rbx,8)
  0x0000000124987f04: nopl   0x0(%rax)
  0x0000000124987f08: add    %al,(%rax)
  0x0000000124987f0a: add    %al,(%rax)
  0x0000000124987f0c: add    %al,(%rax)
  0x0000000124987f0e: add    %al,(%rax)
  0x0000000124987f10: add    %al,(%rax)
  0x0000000124987f12: add    %al,(%rax)
  0x0000000124987f14: add    %al,(%rax)
  0x0000000124987f16: add    %al,(%rax)
  0x0000000124987f18: add    %al,(%rax)
  0x0000000124987f1a: add    %al,(%rax)
  0x0000000124987f1c: add    %al,(%rax)
  0x0000000124987f1e: add    %al,(%rax)

----------------------------------------------------------------------
fstore_1  68 fstore_1  [0x0000000124987f40, 0x0000000124987f80]  64 bytes

  0x0000000124987f40: vmovss (%rsp),%xmm0
  0x0000000124987f45: add    $0x8,%rsp
  0x0000000124987f49: vmovss %xmm0,-0x8(%r14)
  0x0000000124987f4f: movzbl 0x1(%r13),%ebx
  0x0000000124987f54: inc    %r13
  0x0000000124987f57: movabs $0x1151d7a20,%r10
  0x0000000124987f61: jmpq   *(%r10,%rbx,8)
  0x0000000124987f65: data16 xchg %ax,%ax
  0x0000000124987f68: add    %al,(%rax)
  0x0000000124987f6a: add    %al,(%rax)
  0x0000000124987f6c: add    %al,(%rax)
  0x0000000124987f6e: add    %al,(%rax)
  0x0000000124987f70: add    %al,(%rax)
  0x0000000124987f72: add    %al,(%rax)
  0x0000000124987f74: add    %al,(%rax)
  0x0000000124987f76: add    %al,(%rax)
  0x0000000124987f78: add    %al,(%rax)
  0x0000000124987f7a: add    %al,(%rax)
  0x0000000124987f7c: add    %al,(%rax)
  0x0000000124987f7e: add    %al,(%rax)

----------------------------------------------------------------------
fstore_2  69 fstore_2  [0x0000000124987fa0, 0x0000000124987fe0]  64 bytes

  0x0000000124987fa0: vmovss (%rsp),%xmm0
  0x0000000124987fa5: add    $0x8,%rsp
  0x0000000124987fa9: vmovss %xmm0,-0x10(%r14)
  0x0000000124987faf: movzbl 0x1(%r13),%ebx
  0x0000000124987fb4: inc    %r13
  0x0000000124987fb7: movabs $0x1151d7a20,%r10
  0x0000000124987fc1: jmpq   *(%r10,%rbx,8)
  0x0000000124987fc5: data16 xchg %ax,%ax
  0x0000000124987fc8: add    %al,(%rax)
  0x0000000124987fca: add    %al,(%rax)
  0x0000000124987fcc: add    %al,(%rax)
  0x0000000124987fce: add    %al,(%rax)
  0x0000000124987fd0: add    %al,(%rax)
  0x0000000124987fd2: add    %al,(%rax)
  0x0000000124987fd4: add    %al,(%rax)
  0x0000000124987fd6: add    %al,(%rax)
  0x0000000124987fd8: add    %al,(%rax)
  0x0000000124987fda: add    %al,(%rax)
  0x0000000124987fdc: add    %al,(%rax)
  0x0000000124987fde: add    %al,(%rax)

----------------------------------------------------------------------
fstore_3  70 fstore_3  [0x0000000124988000, 0x0000000124988040]  64 bytes

  0x0000000124988000: vmovss (%rsp),%xmm0
  0x0000000124988005: add    $0x8,%rsp
  0x0000000124988009: vmovss %xmm0,-0x18(%r14)
  0x000000012498800f: movzbl 0x1(%r13),%ebx
  0x0000000124988014: inc    %r13
  0x0000000124988017: movabs $0x1151d7a20,%r10
  0x0000000124988021: jmpq   *(%r10,%rbx,8)
  0x0000000124988025: data16 xchg %ax,%ax
  0x0000000124988028: add    %al,(%rax)
  0x000000012498802a: add    %al,(%rax)
  0x000000012498802c: add    %al,(%rax)
  0x000000012498802e: add    %al,(%rax)
  0x0000000124988030: add    %al,(%rax)
  0x0000000124988032: add    %al,(%rax)
  0x0000000124988034: add    %al,(%rax)
  0x0000000124988036: add    %al,(%rax)
  0x0000000124988038: add    %al,(%rax)
  0x000000012498803a: add    %al,(%rax)
  0x000000012498803c: add    %al,(%rax)
  0x000000012498803e: add    %al,(%rax)

----------------------------------------------------------------------
dstore_0  71 dstore_0  [0x0000000124988060, 0x00000001249880a0]  64 bytes

  0x0000000124988060: vmovsd (%rsp),%xmm0
  0x0000000124988065: add    $0x10,%rsp
  0x0000000124988069: vmovsd %xmm0,-0x8(%r14)
  0x000000012498806f: movzbl 0x1(%r13),%ebx
  0x0000000124988074: inc    %r13
  0x0000000124988077: movabs $0x1151d7a20,%r10
  0x0000000124988081: jmpq   *(%r10,%rbx,8)
  0x0000000124988085: data16 xchg %ax,%ax
  0x0000000124988088: add    %al,(%rax)
  0x000000012498808a: add    %al,(%rax)
  0x000000012498808c: add    %al,(%rax)
  0x000000012498808e: add    %al,(%rax)
  0x0000000124988090: add    %al,(%rax)
  0x0000000124988092: add    %al,(%rax)
  0x0000000124988094: add    %al,(%rax)
  0x0000000124988096: add    %al,(%rax)
  0x0000000124988098: add    %al,(%rax)
  0x000000012498809a: add    %al,(%rax)
  0x000000012498809c: add    %al,(%rax)
  0x000000012498809e: add    %al,(%rax)

----------------------------------------------------------------------
dstore_1  72 dstore_1  [0x00000001249880c0, 0x0000000124988100]  64 bytes

  0x00000001249880c0: vmovsd (%rsp),%xmm0
  0x00000001249880c5: add    $0x10,%rsp
  0x00000001249880c9: vmovsd %xmm0,-0x10(%r14)
  0x00000001249880cf: movzbl 0x1(%r13),%ebx
  0x00000001249880d4: inc    %r13
  0x00000001249880d7: movabs $0x1151d7a20,%r10
  0x00000001249880e1: jmpq   *(%r10,%rbx,8)
  0x00000001249880e5: data16 xchg %ax,%ax
  0x00000001249880e8: add    %al,(%rax)
  0x00000001249880ea: add    %al,(%rax)
  0x00000001249880ec: add    %al,(%rax)
  0x00000001249880ee: add    %al,(%rax)
  0x00000001249880f0: add    %al,(%rax)
  0x00000001249880f2: add    %al,(%rax)
  0x00000001249880f4: add    %al,(%rax)
  0x00000001249880f6: add    %al,(%rax)
  0x00000001249880f8: add    %al,(%rax)
  0x00000001249880fa: add    %al,(%rax)
  0x00000001249880fc: add    %al,(%rax)
  0x00000001249880fe: add    %al,(%rax)

----------------------------------------------------------------------
dstore_2  73 dstore_2  [0x0000000124988120, 0x0000000124988160]  64 bytes

  0x0000000124988120: vmovsd (%rsp),%xmm0
  0x0000000124988125: add    $0x10,%rsp
  0x0000000124988129: vmovsd %xmm0,-0x18(%r14)
  0x000000012498812f: movzbl 0x1(%r13),%ebx
  0x0000000124988134: inc    %r13
  0x0000000124988137: movabs $0x1151d7a20,%r10
  0x0000000124988141: jmpq   *(%r10,%rbx,8)
  0x0000000124988145: data16 xchg %ax,%ax
  0x0000000124988148: add    %al,(%rax)
  0x000000012498814a: add    %al,(%rax)
  0x000000012498814c: add    %al,(%rax)
  0x000000012498814e: add    %al,(%rax)
  0x0000000124988150: add    %al,(%rax)
  0x0000000124988152: add    %al,(%rax)
  0x0000000124988154: add    %al,(%rax)
  0x0000000124988156: add    %al,(%rax)
  0x0000000124988158: add    %al,(%rax)
  0x000000012498815a: add    %al,(%rax)
  0x000000012498815c: add    %al,(%rax)
  0x000000012498815e: add    %al,(%rax)

----------------------------------------------------------------------
dstore_3  74 dstore_3  [0x0000000124988180, 0x00000001249881c0]  64 bytes

  0x0000000124988180: vmovsd (%rsp),%xmm0
  0x0000000124988185: add    $0x10,%rsp
  0x0000000124988189: vmovsd %xmm0,-0x20(%r14)
  0x000000012498818f: movzbl 0x1(%r13),%ebx
  0x0000000124988194: inc    %r13
  0x0000000124988197: movabs $0x1151d7a20,%r10
  0x00000001249881a1: jmpq   *(%r10,%rbx,8)
  0x00000001249881a5: data16 xchg %ax,%ax
  0x00000001249881a8: add    %al,(%rax)
  0x00000001249881aa: add    %al,(%rax)
  0x00000001249881ac: add    %al,(%rax)
  0x00000001249881ae: add    %al,(%rax)
  0x00000001249881b0: add    %al,(%rax)
  0x00000001249881b2: add    %al,(%rax)
  0x00000001249881b4: add    %al,(%rax)
  0x00000001249881b6: add    %al,(%rax)
  0x00000001249881b8: add    %al,(%rax)
  0x00000001249881ba: add    %al,(%rax)
  0x00000001249881bc: add    %al,(%rax)
  0x00000001249881be: add    %al,(%rax)

----------------------------------------------------------------------
astore_0  75 astore_0  [0x00000001249881e0, 0x0000000124988240]  96 bytes

  0x00000001249881e0: push   %rax
  0x00000001249881e1: jmpq   0x000000012498821f
  0x00000001249881e6: sub    $0x8,%rsp
  0x00000001249881ea: vmovss %xmm0,(%rsp)
  0x00000001249881ef: jmpq   0x000000012498821f
  0x00000001249881f4: sub    $0x10,%rsp
  0x00000001249881f8: vmovsd %xmm0,(%rsp)
  0x00000001249881fd: jmpq   0x000000012498821f
  0x0000000124988202: sub    $0x10,%rsp
  0x0000000124988206: mov    %rax,(%rsp)
  0x000000012498820a: movabs $0x0,%r10
  0x0000000124988214: mov    %r10,0x8(%rsp)
  0x0000000124988219: jmpq   0x000000012498821f
  0x000000012498821e: push   %rax
  0x000000012498821f: pop    %rax
  0x0000000124988220: mov    %rax,(%r14)
  0x0000000124988223: movzbl 0x1(%r13),%ebx
  0x0000000124988228: inc    %r13
  0x000000012498822b: movabs $0x1151d7a20,%r10
  0x0000000124988235: jmpq   *(%r10,%rbx,8)
  0x0000000124988239: nopl   0x0(%rax)

----------------------------------------------------------------------
astore_1  76 astore_1  [0x0000000124988260, 0x00000001249882c0]  96 bytes

  0x0000000124988260: push   %rax
  0x0000000124988261: jmpq   0x000000012498829f
  0x0000000124988266: sub    $0x8,%rsp
  0x000000012498826a: vmovss %xmm0,(%rsp)
  0x000000012498826f: jmpq   0x000000012498829f
  0x0000000124988274: sub    $0x10,%rsp
  0x0000000124988278: vmovsd %xmm0,(%rsp)
  0x000000012498827d: jmpq   0x000000012498829f
  0x0000000124988282: sub    $0x10,%rsp
  0x0000000124988286: mov    %rax,(%rsp)
  0x000000012498828a: movabs $0x0,%r10
  0x0000000124988294: mov    %r10,0x8(%rsp)
  0x0000000124988299: jmpq   0x000000012498829f
  0x000000012498829e: push   %rax
  0x000000012498829f: pop    %rax
  0x00000001249882a0: mov    %rax,-0x8(%r14)
  0x00000001249882a4: movzbl 0x1(%r13),%ebx
  0x00000001249882a9: inc    %r13
  0x00000001249882ac: movabs $0x1151d7a20,%r10
  0x00000001249882b6: jmpq   *(%r10,%rbx,8)
  0x00000001249882ba: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
astore_2  77 astore_2  [0x00000001249882e0, 0x0000000124988340]  96 bytes

  0x00000001249882e0: push   %rax
  0x00000001249882e1: jmpq   0x000000012498831f
  0x00000001249882e6: sub    $0x8,%rsp
  0x00000001249882ea: vmovss %xmm0,(%rsp)
  0x00000001249882ef: jmpq   0x000000012498831f
  0x00000001249882f4: sub    $0x10,%rsp
  0x00000001249882f8: vmovsd %xmm0,(%rsp)
  0x00000001249882fd: jmpq   0x000000012498831f
  0x0000000124988302: sub    $0x10,%rsp
  0x0000000124988306: mov    %rax,(%rsp)
  0x000000012498830a: movabs $0x0,%r10
  0x0000000124988314: mov    %r10,0x8(%rsp)
  0x0000000124988319: jmpq   0x000000012498831f
  0x000000012498831e: push   %rax
  0x000000012498831f: pop    %rax
  0x0000000124988320: mov    %rax,-0x10(%r14)
  0x0000000124988324: movzbl 0x1(%r13),%ebx
  0x0000000124988329: inc    %r13
  0x000000012498832c: movabs $0x1151d7a20,%r10
  0x0000000124988336: jmpq   *(%r10,%rbx,8)
  0x000000012498833a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
astore_3  78 astore_3  [0x0000000124988360, 0x00000001249883c0]  96 bytes

  0x0000000124988360: push   %rax
  0x0000000124988361: jmpq   0x000000012498839f
  0x0000000124988366: sub    $0x8,%rsp
  0x000000012498836a: vmovss %xmm0,(%rsp)
  0x000000012498836f: jmpq   0x000000012498839f
  0x0000000124988374: sub    $0x10,%rsp
  0x0000000124988378: vmovsd %xmm0,(%rsp)
  0x000000012498837d: jmpq   0x000000012498839f
  0x0000000124988382: sub    $0x10,%rsp
  0x0000000124988386: mov    %rax,(%rsp)
  0x000000012498838a: movabs $0x0,%r10
  0x0000000124988394: mov    %r10,0x8(%rsp)
  0x0000000124988399: jmpq   0x000000012498839f
  0x000000012498839e: push   %rax
  0x000000012498839f: pop    %rax
  0x00000001249883a0: mov    %rax,-0x18(%r14)
  0x00000001249883a4: movzbl 0x1(%r13),%ebx
  0x00000001249883a9: inc    %r13
  0x00000001249883ac: movabs $0x1151d7a20,%r10
  0x00000001249883b6: jmpq   *(%r10,%rbx,8)
  0x00000001249883ba: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
iastore  79 iastore  [0x00000001249883e0, 0x0000000124988420]  64 bytes

  0x00000001249883e0: mov    (%rsp),%eax
  0x00000001249883e3: add    $0x8,%rsp
  0x00000001249883e7: mov    (%rsp),%ebx
  0x00000001249883ea: add    $0x8,%rsp
  0x00000001249883ee: pop    %rdx
  0x00000001249883ef: movslq %ebx,%rbx
  0x00000001249883f2: cmp    0xc(%rdx),%ebx
  0x00000001249883f5: jb     0x00000001249883ff
  0x00000001249883f7: mov    %rdx,%rsi
  0x00000001249883fa: jmpq   0x0000000124982aa0
  0x00000001249883ff: mov    %eax,0x10(%rdx,%rbx,4)
  0x0000000124988403: movzbl 0x1(%r13),%ebx
  0x0000000124988408: inc    %r13
  0x000000012498840b: movabs $0x1151d7a20,%r10
  0x0000000124988415: jmpq   *(%r10,%rbx,8)
  0x0000000124988419: nopl   0x0(%rax)

----------------------------------------------------------------------
lastore  80 lastore  [0x0000000124988440, 0x0000000124988480]  64 bytes

  0x0000000124988440: mov    (%rsp),%rax
  0x0000000124988444: add    $0x10,%rsp
  0x0000000124988448: mov    (%rsp),%ebx
  0x000000012498844b: add    $0x8,%rsp
  0x000000012498844f: pop    %rcx
  0x0000000124988450: movslq %ebx,%rbx
  0x0000000124988453: cmp    0xc(%rcx),%ebx
  0x0000000124988456: jb     0x0000000124988460
  0x0000000124988458: mov    %rcx,%rsi
  0x000000012498845b: jmpq   0x0000000124982aa0
  0x0000000124988460: mov    %rax,0x10(%rcx,%rbx,8)
  0x0000000124988465: movzbl 0x1(%r13),%ebx
  0x000000012498846a: inc    %r13
  0x000000012498846d: movabs $0x1151d7a20,%r10
  0x0000000124988477: jmpq   *(%r10,%rbx,8)
  0x000000012498847b: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
fastore  81 fastore  [0x00000001249884a0, 0x00000001249884e0]  64 bytes

  0x00000001249884a0: vmovss (%rsp),%xmm0
  0x00000001249884a5: add    $0x8,%rsp
  0x00000001249884a9: mov    (%rsp),%ebx
  0x00000001249884ac: add    $0x8,%rsp
  0x00000001249884b0: pop    %rdx
  0x00000001249884b1: movslq %ebx,%rbx
  0x00000001249884b4: cmp    0xc(%rdx),%ebx
  0x00000001249884b7: jb     0x00000001249884c1
  0x00000001249884b9: mov    %rdx,%rsi
  0x00000001249884bc: jmpq   0x0000000124982aa0
  0x00000001249884c1: vmovss %xmm0,0x10(%rdx,%rbx,4)
  0x00000001249884c7: movzbl 0x1(%r13),%ebx
  0x00000001249884cc: inc    %r13
  0x00000001249884cf: movabs $0x1151d7a20,%r10
  0x00000001249884d9: jmpq   *(%r10,%rbx,8)
  0x00000001249884dd: data16 xchg %ax,%ax

----------------------------------------------------------------------
dastore  82 dastore  [0x0000000124988500, 0x0000000124988540]  64 bytes

  0x0000000124988500: vmovsd (%rsp),%xmm0
  0x0000000124988505: add    $0x10,%rsp
  0x0000000124988509: mov    (%rsp),%ebx
  0x000000012498850c: add    $0x8,%rsp
  0x0000000124988510: pop    %rdx
  0x0000000124988511: movslq %ebx,%rbx
  0x0000000124988514: cmp    0xc(%rdx),%ebx
  0x0000000124988517: jb     0x0000000124988521
  0x0000000124988519: mov    %rdx,%rsi
  0x000000012498851c: jmpq   0x0000000124982aa0
  0x0000000124988521: vmovsd %xmm0,0x10(%rdx,%rbx,8)
  0x0000000124988527: movzbl 0x1(%r13),%ebx
  0x000000012498852c: inc    %r13
  0x000000012498852f: movabs $0x1151d7a20,%r10
  0x0000000124988539: jmpq   *(%r10,%rbx,8)
  0x000000012498853d: data16 xchg %ax,%ax

----------------------------------------------------------------------
aastore  83 aastore  [0x0000000124988560, 0x00000001249888c0]  864 bytes

  0x0000000124988560: push   %rax
  0x0000000124988561: jmpq   0x000000012498859f
  0x0000000124988566: sub    $0x8,%rsp
  0x000000012498856a: vmovss %xmm0,(%rsp)
  0x000000012498856f: jmpq   0x000000012498859f
  0x0000000124988574: sub    $0x10,%rsp
  0x0000000124988578: vmovsd %xmm0,(%rsp)
  0x000000012498857d: jmpq   0x000000012498859f
  0x0000000124988582: sub    $0x10,%rsp
  0x0000000124988586: mov    %rax,(%rsp)
  0x000000012498858a: movabs $0x0,%r10
  0x0000000124988594: mov    %r10,0x8(%rsp)
  0x0000000124988599: jmpq   0x000000012498859f
  0x000000012498859e: push   %rax
  0x000000012498859f: mov    (%rsp),%rax
  0x00000001249885a3: mov    0x8(%rsp),%ecx
  0x00000001249885a7: mov    0x10(%rsp),%rdx
  0x00000001249885ac: movslq %ecx,%rcx
  0x00000001249885af: cmp    0xc(%rdx),%ecx
  0x00000001249885b2: mov    %ecx,%ebx
  0x00000001249885b4: jb     0x00000001249885be
  0x00000001249885b6: mov    %rdx,%rsi
  0x00000001249885b9: jmpq   0x0000000124982aa0
  0x00000001249885be: test   %rax,%rax
  0x00000001249885c1: je     0x0000000124988817
  0x00000001249885c7: mov    0x8(%rax),%ebx
  0x00000001249885ca: movabs $0x800000000,%r12
  0x00000001249885d4: add    %r12,%rbx
  0x00000001249885d7: xor    %r12,%r12
  0x00000001249885da: mov    0x8(%rdx),%eax
  0x00000001249885dd: movabs $0x800000000,%r12
  0x00000001249885e7: add    %r12,%rax
  0x00000001249885ea: xor    %r12,%r12
  0x00000001249885ed: mov    0xe8(%rax),%rax
  0x00000001249885f4: mov    -0x28(%rbp),%rcx
  0x00000001249885f8: test   %rcx,%rcx
  0x00000001249885fb: je     0x000000012498868b
  0x0000000124988601: mov    0x18(%rcx),%rdi
  0x0000000124988605: cmp    %rbx,%rdi
  0x0000000124988608: jne    0x000000012498861d
  0x000000012498860e: addq   $0x1,0x20(%rcx)
  0x0000000124988613: sbbq   $0x0,0x20(%rcx)
  0x0000000124988618: jmpq   0x0000000124988683
  0x000000012498861d: test   %rdi,%rdi
  0x0000000124988620: je     0x000000012498865d
  0x0000000124988626: mov    0x28(%rcx),%rdi
  0x000000012498862a: cmp    %rbx,%rdi
  0x000000012498862d: jne    0x0000000124988642
  0x0000000124988633: addq   $0x1,0x30(%rcx)
  0x0000000124988638: sbbq   $0x0,0x30(%rcx)
  0x000000012498863d: jmpq   0x0000000124988683
  0x0000000124988642: test   %rdi,%rdi
  0x0000000124988645: jne    0x0000000124988683
  0x000000012498864b: mov    %rbx,0x28(%rcx)
  0x000000012498864f: mov    $0x1,%edi
  0x0000000124988654: mov    %rdi,0x30(%rcx)
  0x0000000124988658: jmpq   0x0000000124988683
  0x000000012498865d: cmp    0x28(%rcx),%rbx
  0x0000000124988661: jne    0x0000000124988676
  0x0000000124988667: addq   $0x1,0x30(%rcx)
  0x000000012498866c: sbbq   $0x0,0x30(%rcx)
  0x0000000124988671: jmpq   0x0000000124988683
  0x0000000124988676: mov    %rbx,0x18(%rcx)
  0x000000012498867a: mov    $0x1,%edi
  0x000000012498867f: mov    %rdi,0x20(%rcx)
  0x0000000124988683: add    $0x38,%rcx
  0x0000000124988687: mov    %rcx,-0x28(%rbp)
  0x000000012498868b: cmp    %rax,%rbx
  0x000000012498868e: je     0x00000001249886ee
  0x0000000124988694: mov    0x10(%rax),%ecx
  0x0000000124988697: cmp    (%rbx,%rcx,1),%rax
  0x000000012498869b: je     0x00000001249886ee
  0x00000001249886a1: cmp    $0x20,%ecx
  0x00000001249886a4: jne    0x00000001249886cc
  0x00000001249886aa: push   %rax
  0x00000001249886ab: mov    %rax,%rax
  0x00000001249886ae: push   %rdi
  0x00000001249886af: mov    0x28(%rbx),%rdi
  0x00000001249886b3: mov    (%rdi),%ecx
  0x00000001249886b5: add    $0x8,%rdi
  0x00000001249886b9: test   %rax,%rax
  0x00000001249886bc: repnz scas %es:(%rdi),%rax
  0x00000001249886bf: pop    %rdi
  0x00000001249886c0: pop    %rax
  0x00000001249886c1: jne    0x00000001249886cc
  0x00000001249886c3: mov    %rax,0x20(%rbx)
  0x00000001249886c7: jmpq   0x00000001249886ee
  0x00000001249886cc: mov    -0x28(%rbp),%rcx
  0x00000001249886d0: test   %rcx,%rcx
  0x00000001249886d3: je     0x00000001249886e9
  0x00000001249886d9: addq   $0xffffffffffffffff,-0x30(%rcx)
  0x00000001249886de: js     0x00000001249886e9
  0x00000001249886e4: addq   $0x1,-0x30(%rcx)
  0x00000001249886e9: jmpq   0x0000000124982b4b
  0x00000001249886ee: mov    (%rsp),%rax
  0x00000001249886f2: mov    0x8(%rsp),%ecx
  0x00000001249886f6: lea    0x10(%rdx,%rcx,4),%rdx
  0x00000001249886fb: cmpb   $0x0,0x30(%r15)
  0x0000000124988700: je     0x0000000124988767
  0x0000000124988706: mov    (%rdx),%ebx
  0x0000000124988708: shl    $0x3,%rbx
  0x000000012498870c: cmp    $0x0,%rbx
  0x0000000124988710: je     0x0000000124988767
  0x0000000124988716: mov    0x38(%r15),%r8
  0x000000012498871a: cmp    $0x0,%r8
  0x000000012498871e: je     0x0000000124988738
  0x0000000124988724: sub    $0x8,%r8
  0x0000000124988728: mov    %r8,0x38(%r15)
  0x000000012498872c: add    0x48(%r15),%r8
  0x0000000124988730: mov    %rbx,(%r8)
  0x0000000124988733: jmpq   0x0000000124988767
  0x0000000124988738: push   %rax
  0x0000000124988739: push   %rdx
  0x000000012498873a: push   %rbx
  0x000000012498873b: mov    %r15,%rsi
  0x000000012498873e: mov    %rbx,%rdi
  0x0000000124988741: test   $0xf,%esp
  0x0000000124988747: je     0x000000012498875f
  0x000000012498874d: sub    $0x8,%rsp
  0x0000000124988751: callq  0x0000000114b0185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x0000000124988756: add    $0x8,%rsp
  0x000000012498875a: jmpq   0x0000000124988764
  0x000000012498875f: callq  0x0000000114b0185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x0000000124988764: pop    %rbx
  0x0000000124988765: pop    %rdx
  0x0000000124988766: pop    %rax
  0x0000000124988767: mov    %rax,%rbx
  0x000000012498876a: shr    $0x3,%rax
  0x000000012498876e: mov    %eax,(%rdx)
  0x0000000124988770: mov    %rdx,%r8
  0x0000000124988773: xor    %rbx,%r8
  0x0000000124988776: shr    $0x16,%r8
  0x000000012498877a: je     0x0000000124988812
  0x0000000124988780: cmp    $0x0,%rbx
  0x0000000124988784: je     0x0000000124988812
  0x000000012498878a: mov    %rdx,%r8
  0x000000012498878d: shr    $0x9,%r8
  0x0000000124988791: movabs $0x1155db000,%rbx
  0x000000012498879b: add    %rbx,%r8
  0x000000012498879e: cmpb   $0x20,(%r8)
  0x00000001249887a2: je     0x0000000124988812
  0x00000001249887a8: lock addl $0x0,-0x40(%rsp)
  0x00000001249887ae: cmpb   $0x0,(%r8)
  0x00000001249887b2: je     0x0000000124988812
  0x00000001249887b8: movb   $0x0,(%r8)
  0x00000001249887bc: cmpl   $0x0,0x70(%r15)
  0x00000001249887c4: je     0x00000001249887e5
  0x00000001249887ca: subl   $0x8,0x70(%r15)
  0x00000001249887cf: mov    0x80(%r15),%rbx
  0x00000001249887d6: movslq 0x70(%r15),%r10
  0x00000001249887da: add    %r10,%rbx
  0x00000001249887dd: mov    %r8,(%rbx)
  0x00000001249887e0: jmpq   0x0000000124988812
  0x00000001249887e5: push   %rdx
  0x00000001249887e6: push   %rbx
  0x00000001249887e7: mov    %r15,%rsi
  0x00000001249887ea: mov    %r8,%rdi
  0x00000001249887ed: test   $0xf,%esp
  0x00000001249887f3: je     0x000000012498880b
  0x00000001249887f9: sub    $0x8,%rsp
  0x00000001249887fd: callq  0x0000000114b01882 = G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*)
  0x0000000124988802: add    $0x8,%rsp
  0x0000000124988806: jmpq   0x0000000124988810
  0x000000012498880b: callq  0x0000000114b01882 = G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*)
  0x0000000124988810: pop    %rbx
  0x0000000124988811: pop    %rdx
  0x0000000124988812: jmpq   0x00000001249888a5
  0x0000000124988817: mov    -0x28(%rbp),%rbx
  0x000000012498881b: test   %rbx,%rbx
  0x000000012498881e: je     0x0000000124988830
  0x0000000124988824: orb    $0x1,0x1(%rbx)
  0x0000000124988828: add    $0x38,%rbx
  0x000000012498882c: mov    %rbx,-0x28(%rbp)
  0x0000000124988830: lea    0x10(%rdx,%rcx,4),%rdx
  0x0000000124988835: cmpb   $0x0,0x30(%r15)
  0x000000012498883a: je     0x000000012498889f
  0x0000000124988840: mov    (%rdx),%ebx
  0x0000000124988842: shl    $0x3,%rbx
  0x0000000124988846: cmp    $0x0,%rbx
  0x000000012498884a: je     0x000000012498889f
  0x0000000124988850: mov    0x38(%r15),%r8
  0x0000000124988854: cmp    $0x0,%r8
  0x0000000124988858: je     0x0000000124988872
  0x000000012498885e: sub    $0x8,%r8
  0x0000000124988862: mov    %r8,0x38(%r15)
  0x0000000124988866: add    0x48(%r15),%r8
  0x000000012498886a: mov    %rbx,(%r8)
  0x000000012498886d: jmpq   0x000000012498889f
  0x0000000124988872: push   %rdx
  0x0000000124988873: push   %rbx
  0x0000000124988874: mov    %r15,%rsi
  0x0000000124988877: mov    %rbx,%rdi
  0x000000012498887a: test   $0xf,%esp
  0x0000000124988880: je     0x0000000124988898
  0x0000000124988886: sub    $0x8,%rsp
  0x000000012498888a: callq  0x0000000114b0185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x000000012498888f: add    $0x8,%rsp
  0x0000000124988893: jmpq   0x000000012498889d
  0x0000000124988898: callq  0x0000000114b0185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x000000012498889d: pop    %rbx
  0x000000012498889e: pop    %rdx
  0x000000012498889f: movl   $0x0,(%rdx)
  0x00000001249888a5: add    $0x18,%rsp
  0x00000001249888a9: movzbl 0x1(%r13),%ebx
  0x00000001249888ae: inc    %r13
  0x00000001249888b1: movabs $0x1151d7a20,%r10
  0x00000001249888bb: jmpq   *(%r10,%rbx,8)
  0x00000001249888bf: nop

----------------------------------------------------------------------
bastore  84 bastore  [0x00000001249888e0, 0x0000000124988940]  96 bytes

  0x00000001249888e0: mov    (%rsp),%eax
  0x00000001249888e3: add    $0x8,%rsp
  0x00000001249888e7: mov    (%rsp),%ebx
  0x00000001249888ea: add    $0x8,%rsp
  0x00000001249888ee: pop    %rdx
  0x00000001249888ef: movslq %ebx,%rbx
  0x00000001249888f2: cmp    0xc(%rdx),%ebx
  0x00000001249888f5: jb     0x00000001249888ff
  0x00000001249888f7: mov    %rdx,%rsi
  0x00000001249888fa: jmpq   0x0000000124982aa0
  0x00000001249888ff: mov    0x8(%rdx),%ecx
  0x0000000124988902: movabs $0x800000000,%r12
  0x000000012498890c: add    %r12,%rcx
  0x000000012498890f: xor    %r12,%r12
  0x0000000124988912: mov    0x8(%rcx),%ecx
  0x0000000124988915: test   $0x400,%ecx
  0x000000012498891b: je     0x0000000124988920
  0x000000012498891d: and    $0x1,%eax
  0x0000000124988920: mov    %al,0x10(%rdx,%rbx,1)
  0x0000000124988924: movzbl 0x1(%r13),%ebx
  0x0000000124988929: inc    %r13
  0x000000012498892c: movabs $0x1151d7a20,%r10
  0x0000000124988936: jmpq   *(%r10,%rbx,8)
  0x000000012498893a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
castore  85 castore  [0x0000000124988960, 0x00000001249889a0]  64 bytes

  0x0000000124988960: mov    (%rsp),%eax
  0x0000000124988963: add    $0x8,%rsp
  0x0000000124988967: mov    (%rsp),%ebx
  0x000000012498896a: add    $0x8,%rsp
  0x000000012498896e: pop    %rdx
  0x000000012498896f: movslq %ebx,%rbx
  0x0000000124988972: cmp    0xc(%rdx),%ebx
  0x0000000124988975: jb     0x000000012498897f
  0x0000000124988977: mov    %rdx,%rsi
  0x000000012498897a: jmpq   0x0000000124982aa0
  0x000000012498897f: mov    %ax,0x10(%rdx,%rbx,2)
  0x0000000124988984: movzbl 0x1(%r13),%ebx
  0x0000000124988989: inc    %r13
  0x000000012498898c: movabs $0x1151d7a20,%r10
  0x0000000124988996: jmpq   *(%r10,%rbx,8)
  0x000000012498899a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
sastore  86 sastore  [0x00000001249889c0, 0x0000000124988a00]  64 bytes

  0x00000001249889c0: mov    (%rsp),%eax
  0x00000001249889c3: add    $0x8,%rsp
  0x00000001249889c7: mov    (%rsp),%ebx
  0x00000001249889ca: add    $0x8,%rsp
  0x00000001249889ce: pop    %rdx
  0x00000001249889cf: movslq %ebx,%rbx
  0x00000001249889d2: cmp    0xc(%rdx),%ebx
  0x00000001249889d5: jb     0x00000001249889df
  0x00000001249889d7: mov    %rdx,%rsi
  0x00000001249889da: jmpq   0x0000000124982aa0
  0x00000001249889df: mov    %ax,0x10(%rdx,%rbx,2)
  0x00000001249889e4: movzbl 0x1(%r13),%ebx
  0x00000001249889e9: inc    %r13
  0x00000001249889ec: movabs $0x1151d7a20,%r10
  0x00000001249889f6: jmpq   *(%r10,%rbx,8)
  0x00000001249889fa: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
pop  87 pop  [0x0000000124988a20, 0x0000000124988a80]  96 bytes

  0x0000000124988a20: push   %rax
  0x0000000124988a21: jmpq   0x0000000124988a5f
  0x0000000124988a26: sub    $0x8,%rsp
  0x0000000124988a2a: vmovss %xmm0,(%rsp)
  0x0000000124988a2f: jmpq   0x0000000124988a5f
  0x0000000124988a34: sub    $0x10,%rsp
  0x0000000124988a38: vmovsd %xmm0,(%rsp)
  0x0000000124988a3d: jmpq   0x0000000124988a5f
  0x0000000124988a42: sub    $0x10,%rsp
  0x0000000124988a46: mov    %rax,(%rsp)
  0x0000000124988a4a: movabs $0x0,%r10
  0x0000000124988a54: mov    %r10,0x8(%rsp)
  0x0000000124988a59: jmpq   0x0000000124988a5f
  0x0000000124988a5e: push   %rax
  0x0000000124988a5f: add    $0x8,%rsp
  0x0000000124988a63: movzbl 0x1(%r13),%ebx
  0x0000000124988a68: inc    %r13
  0x0000000124988a6b: movabs $0x1151d7a20,%r10
  0x0000000124988a75: jmpq   *(%r10,%rbx,8)
  0x0000000124988a79: nopl   0x0(%rax)

----------------------------------------------------------------------
pop2  88 pop2  [0x0000000124988aa0, 0x0000000124988b00]  96 bytes

  0x0000000124988aa0: push   %rax
  0x0000000124988aa1: jmpq   0x0000000124988adf
  0x0000000124988aa6: sub    $0x8,%rsp
  0x0000000124988aaa: vmovss %xmm0,(%rsp)
  0x0000000124988aaf: jmpq   0x0000000124988adf
  0x0000000124988ab4: sub    $0x10,%rsp
  0x0000000124988ab8: vmovsd %xmm0,(%rsp)
  0x0000000124988abd: jmpq   0x0000000124988adf
  0x0000000124988ac2: sub    $0x10,%rsp
  0x0000000124988ac6: mov    %rax,(%rsp)
  0x0000000124988aca: movabs $0x0,%r10
  0x0000000124988ad4: mov    %r10,0x8(%rsp)
  0x0000000124988ad9: jmpq   0x0000000124988adf
  0x0000000124988ade: push   %rax
  0x0000000124988adf: add    $0x10,%rsp
  0x0000000124988ae3: movzbl 0x1(%r13),%ebx
  0x0000000124988ae8: inc    %r13
  0x0000000124988aeb: movabs $0x1151d7a20,%r10
  0x0000000124988af5: jmpq   *(%r10,%rbx,8)
  0x0000000124988af9: nopl   0x0(%rax)

----------------------------------------------------------------------
dup  89 dup  [0x0000000124988b20, 0x0000000124988b80]  96 bytes

  0x0000000124988b20: push   %rax
  0x0000000124988b21: jmpq   0x0000000124988b5f
  0x0000000124988b26: sub    $0x8,%rsp
  0x0000000124988b2a: vmovss %xmm0,(%rsp)
  0x0000000124988b2f: jmpq   0x0000000124988b5f
  0x0000000124988b34: sub    $0x10,%rsp
  0x0000000124988b38: vmovsd %xmm0,(%rsp)
  0x0000000124988b3d: jmpq   0x0000000124988b5f
  0x0000000124988b42: sub    $0x10,%rsp
  0x0000000124988b46: mov    %rax,(%rsp)
  0x0000000124988b4a: movabs $0x0,%r10
  0x0000000124988b54: mov    %r10,0x8(%rsp)
  0x0000000124988b59: jmpq   0x0000000124988b5f
  0x0000000124988b5e: push   %rax
  0x0000000124988b5f: mov    (%rsp),%rax
  0x0000000124988b63: push   %rax
  0x0000000124988b64: movzbl 0x1(%r13),%ebx
  0x0000000124988b69: inc    %r13
  0x0000000124988b6c: movabs $0x1151d7a20,%r10
  0x0000000124988b76: jmpq   *(%r10,%rbx,8)
  0x0000000124988b7a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
dup_x1  90 dup_x1  [0x0000000124988ba0, 0x0000000124988c20]  128 bytes

  0x0000000124988ba0: push   %rax
  0x0000000124988ba1: jmpq   0x0000000124988bdf
  0x0000000124988ba6: sub    $0x8,%rsp
  0x0000000124988baa: vmovss %xmm0,(%rsp)
  0x0000000124988baf: jmpq   0x0000000124988bdf
  0x0000000124988bb4: sub    $0x10,%rsp
  0x0000000124988bb8: vmovsd %xmm0,(%rsp)
  0x0000000124988bbd: jmpq   0x0000000124988bdf
  0x0000000124988bc2: sub    $0x10,%rsp
  0x0000000124988bc6: mov    %rax,(%rsp)
  0x0000000124988bca: movabs $0x0,%r10
  0x0000000124988bd4: mov    %r10,0x8(%rsp)
  0x0000000124988bd9: jmpq   0x0000000124988bdf
  0x0000000124988bde: push   %rax
  0x0000000124988bdf: mov    (%rsp),%rax
  0x0000000124988be3: mov    0x8(%rsp),%rcx
  0x0000000124988be8: mov    %rax,0x8(%rsp)
  0x0000000124988bed: mov    %rcx,(%rsp)
  0x0000000124988bf1: push   %rax
  0x0000000124988bf2: movzbl 0x1(%r13),%ebx
  0x0000000124988bf7: inc    %r13
  0x0000000124988bfa: movabs $0x1151d7a20,%r10
  0x0000000124988c04: jmpq   *(%r10,%rbx,8)
  0x0000000124988c08: add    %al,(%rax)
  0x0000000124988c0a: add    %al,(%rax)
  0x0000000124988c0c: add    %al,(%rax)
  0x0000000124988c0e: add    %al,(%rax)
  0x0000000124988c10: add    %al,(%rax)
  0x0000000124988c12: add    %al,(%rax)
  0x0000000124988c14: add    %al,(%rax)
  0x0000000124988c16: add    %al,(%rax)
  0x0000000124988c18: add    %al,(%rax)
  0x0000000124988c1a: add    %al,(%rax)
  0x0000000124988c1c: add    %al,(%rax)
  0x0000000124988c1e: add    %al,(%rax)

----------------------------------------------------------------------
dup_x2  91 dup_x2  [0x0000000124988c40, 0x0000000124988cc0]  128 bytes

  0x0000000124988c40: push   %rax
  0x0000000124988c41: jmpq   0x0000000124988c7f
  0x0000000124988c46: sub    $0x8,%rsp
  0x0000000124988c4a: vmovss %xmm0,(%rsp)
  0x0000000124988c4f: jmpq   0x0000000124988c7f
  0x0000000124988c54: sub    $0x10,%rsp
  0x0000000124988c58: vmovsd %xmm0,(%rsp)
  0x0000000124988c5d: jmpq   0x0000000124988c7f
  0x0000000124988c62: sub    $0x10,%rsp
  0x0000000124988c66: mov    %rax,(%rsp)
  0x0000000124988c6a: movabs $0x0,%r10
  0x0000000124988c74: mov    %r10,0x8(%rsp)
  0x0000000124988c79: jmpq   0x0000000124988c7f
  0x0000000124988c7e: push   %rax
  0x0000000124988c7f: mov    (%rsp),%rax
  0x0000000124988c83: mov    0x10(%rsp),%rcx
  0x0000000124988c88: mov    %rax,0x10(%rsp)
  0x0000000124988c8d: push   %rax
  0x0000000124988c8e: mov    0x10(%rsp),%rax
  0x0000000124988c93: mov    %rcx,0x10(%rsp)
  0x0000000124988c98: mov    %rax,0x8(%rsp)
  0x0000000124988c9d: movzbl 0x1(%r13),%ebx
  0x0000000124988ca2: inc    %r13
  0x0000000124988ca5: movabs $0x1151d7a20,%r10
  0x0000000124988caf: jmpq   *(%r10,%rbx,8)
  0x0000000124988cb3: nopl   0x0(%rax,%rax,1)
  0x0000000124988cb8: add    %al,(%rax)
  0x0000000124988cba: add    %al,(%rax)
  0x0000000124988cbc: add    %al,(%rax)
  0x0000000124988cbe: add    %al,(%rax)

----------------------------------------------------------------------
dup2  92 dup2  [0x0000000124988ce0, 0x0000000124988d60]  128 bytes

  0x0000000124988ce0: push   %rax
  0x0000000124988ce1: jmpq   0x0000000124988d1f
  0x0000000124988ce6: sub    $0x8,%rsp
  0x0000000124988cea: vmovss %xmm0,(%rsp)
  0x0000000124988cef: jmpq   0x0000000124988d1f
  0x0000000124988cf4: sub    $0x10,%rsp
  0x0000000124988cf8: vmovsd %xmm0,(%rsp)
  0x0000000124988cfd: jmpq   0x0000000124988d1f
  0x0000000124988d02: sub    $0x10,%rsp
  0x0000000124988d06: mov    %rax,(%rsp)
  0x0000000124988d0a: movabs $0x0,%r10
  0x0000000124988d14: mov    %r10,0x8(%rsp)
  0x0000000124988d19: jmpq   0x0000000124988d1f
  0x0000000124988d1e: push   %rax
  0x0000000124988d1f: mov    0x8(%rsp),%rax
  0x0000000124988d24: push   %rax
  0x0000000124988d25: mov    0x8(%rsp),%rax
  0x0000000124988d2a: push   %rax
  0x0000000124988d2b: movzbl 0x1(%r13),%ebx
  0x0000000124988d30: inc    %r13
  0x0000000124988d33: movabs $0x1151d7a20,%r10
  0x0000000124988d3d: jmpq   *(%r10,%rbx,8)
  0x0000000124988d41: nopl   0x0(%rax)
  0x0000000124988d48: add    %al,(%rax)
  0x0000000124988d4a: add    %al,(%rax)
  0x0000000124988d4c: add    %al,(%rax)
  0x0000000124988d4e: add    %al,(%rax)
  0x0000000124988d50: add    %al,(%rax)
  0x0000000124988d52: add    %al,(%rax)
  0x0000000124988d54: add    %al,(%rax)
  0x0000000124988d56: add    %al,(%rax)
  0x0000000124988d58: add    %al,(%rax)
  0x0000000124988d5a: add    %al,(%rax)
  0x0000000124988d5c: add    %al,(%rax)
  0x0000000124988d5e: add    %al,(%rax)

----------------------------------------------------------------------
dup2_x1  93 dup2_x1  [0x0000000124988d80, 0x0000000124988e00]  128 bytes

  0x0000000124988d80: push   %rax
  0x0000000124988d81: jmpq   0x0000000124988dbf
  0x0000000124988d86: sub    $0x8,%rsp
  0x0000000124988d8a: vmovss %xmm0,(%rsp)
  0x0000000124988d8f: jmpq   0x0000000124988dbf
  0x0000000124988d94: sub    $0x10,%rsp
  0x0000000124988d98: vmovsd %xmm0,(%rsp)
  0x0000000124988d9d: jmpq   0x0000000124988dbf
  0x0000000124988da2: sub    $0x10,%rsp
  0x0000000124988da6: mov    %rax,(%rsp)
  0x0000000124988daa: movabs $0x0,%r10
  0x0000000124988db4: mov    %r10,0x8(%rsp)
  0x0000000124988db9: jmpq   0x0000000124988dbf
  0x0000000124988dbe: push   %rax
  0x0000000124988dbf: mov    (%rsp),%rcx
  0x0000000124988dc3: mov    0x8(%rsp),%rax
  0x0000000124988dc8: push   %rax
  0x0000000124988dc9: push   %rcx
  0x0000000124988dca: mov    %rcx,0x18(%rsp)
  0x0000000124988dcf: mov    0x20(%rsp),%rcx
  0x0000000124988dd4: mov    %rcx,0x10(%rsp)
  0x0000000124988dd9: mov    %rax,0x20(%rsp)
  0x0000000124988dde: movzbl 0x1(%r13),%ebx
  0x0000000124988de3: inc    %r13
  0x0000000124988de6: movabs $0x1151d7a20,%r10
  0x0000000124988df0: jmpq   *(%r10,%rbx,8)
  0x0000000124988df4: nopl   0x0(%rax)
  0x0000000124988df8: add    %al,(%rax)
  0x0000000124988dfa: add    %al,(%rax)
  0x0000000124988dfc: add    %al,(%rax)
  0x0000000124988dfe: add    %al,(%rax)

----------------------------------------------------------------------
dup2_x2  94 dup2_x2  [0x0000000124988e20, 0x0000000124988ec0]  160 bytes

  0x0000000124988e20: push   %rax
  0x0000000124988e21: jmpq   0x0000000124988e5f
  0x0000000124988e26: sub    $0x8,%rsp
  0x0000000124988e2a: vmovss %xmm0,(%rsp)
  0x0000000124988e2f: jmpq   0x0000000124988e5f
  0x0000000124988e34: sub    $0x10,%rsp
  0x0000000124988e38: vmovsd %xmm0,(%rsp)
  0x0000000124988e3d: jmpq   0x0000000124988e5f
  0x0000000124988e42: sub    $0x10,%rsp
  0x0000000124988e46: mov    %rax,(%rsp)
  0x0000000124988e4a: movabs $0x0,%r10
  0x0000000124988e54: mov    %r10,0x8(%rsp)
  0x0000000124988e59: jmpq   0x0000000124988e5f
  0x0000000124988e5e: push   %rax
  0x0000000124988e5f: mov    (%rsp),%rcx
  0x0000000124988e63: mov    0x8(%rsp),%rax
  0x0000000124988e68: push   %rax
  0x0000000124988e69: push   %rcx
  0x0000000124988e6a: mov    0x20(%rsp),%rax
  0x0000000124988e6f: mov    %rax,0x10(%rsp)
  0x0000000124988e74: mov    %rcx,0x20(%rsp)
  0x0000000124988e79: mov    0x28(%rsp),%rcx
  0x0000000124988e7e: mov    0x18(%rsp),%rax
  0x0000000124988e83: mov    %rcx,0x18(%rsp)
  0x0000000124988e88: mov    %rax,0x28(%rsp)
  0x0000000124988e8d: movzbl 0x1(%r13),%ebx
  0x0000000124988e92: inc    %r13
  0x0000000124988e95: movabs $0x1151d7a20,%r10
  0x0000000124988e9f: jmpq   *(%r10,%rbx,8)
  0x0000000124988ea3: nopl   0x0(%rax,%rax,1)
  0x0000000124988ea8: add    %al,(%rax)
  0x0000000124988eaa: add    %al,(%rax)
  0x0000000124988eac: add    %al,(%rax)
  0x0000000124988eae: add    %al,(%rax)
  0x0000000124988eb0: add    %al,(%rax)
  0x0000000124988eb2: add    %al,(%rax)
  0x0000000124988eb4: add    %al,(%rax)
  0x0000000124988eb6: add    %al,(%rax)
  0x0000000124988eb8: add    %al,(%rax)
  0x0000000124988eba: add    %al,(%rax)
  0x0000000124988ebc: add    %al,(%rax)
  0x0000000124988ebe: add    %al,(%rax)

----------------------------------------------------------------------
swap  95 swap  [0x0000000124988ee0, 0x0000000124988f60]  128 bytes

  0x0000000124988ee0: push   %rax
  0x0000000124988ee1: jmpq   0x0000000124988f1f
  0x0000000124988ee6: sub    $0x8,%rsp
  0x0000000124988eea: vmovss %xmm0,(%rsp)
  0x0000000124988eef: jmpq   0x0000000124988f1f
  0x0000000124988ef4: sub    $0x10,%rsp
  0x0000000124988ef8: vmovsd %xmm0,(%rsp)
  0x0000000124988efd: jmpq   0x0000000124988f1f
  0x0000000124988f02: sub    $0x10,%rsp
  0x0000000124988f06: mov    %rax,(%rsp)
  0x0000000124988f0a: movabs $0x0,%r10
  0x0000000124988f14: mov    %r10,0x8(%rsp)
  0x0000000124988f19: jmpq   0x0000000124988f1f
  0x0000000124988f1e: push   %rax
  0x0000000124988f1f: mov    0x8(%rsp),%rcx
  0x0000000124988f24: mov    (%rsp),%rax
  0x0000000124988f28: mov    %rcx,(%rsp)
  0x0000000124988f2c: mov    %rax,0x8(%rsp)
  0x0000000124988f31: movzbl 0x1(%r13),%ebx
  0x0000000124988f36: inc    %r13
  0x0000000124988f39: movabs $0x1151d7a20,%r10
  0x0000000124988f43: jmpq   *(%r10,%rbx,8)
  0x0000000124988f47: nop
  0x0000000124988f48: add    %al,(%rax)
  0x0000000124988f4a: add    %al,(%rax)
  0x0000000124988f4c: add    %al,(%rax)
  0x0000000124988f4e: add    %al,(%rax)
  0x0000000124988f50: add    %al,(%rax)
  0x0000000124988f52: add    %al,(%rax)
  0x0000000124988f54: add    %al,(%rax)
  0x0000000124988f56: add    %al,(%rax)
  0x0000000124988f58: add    %al,(%rax)
  0x0000000124988f5a: add    %al,(%rax)
  0x0000000124988f5c: add    %al,(%rax)
  0x0000000124988f5e: add    %al,(%rax)

----------------------------------------------------------------------
iadd  96 iadd  [0x0000000124988f80, 0x0000000124988fc0]  64 bytes

  0x0000000124988f80: mov    (%rsp),%eax
  0x0000000124988f83: add    $0x8,%rsp
  0x0000000124988f87: mov    (%rsp),%edx
  0x0000000124988f8a: add    $0x8,%rsp
  0x0000000124988f8e: add    %edx,%eax
  0x0000000124988f90: movzbl 0x1(%r13),%ebx
  0x0000000124988f95: inc    %r13
  0x0000000124988f98: movabs $0x1151d5220,%r10
  0x0000000124988fa2: jmpq   *(%r10,%rbx,8)
  0x0000000124988fa6: xchg   %ax,%ax
  0x0000000124988fa8: add    %al,(%rax)
  0x0000000124988faa: add    %al,(%rax)
  0x0000000124988fac: add    %al,(%rax)
  0x0000000124988fae: add    %al,(%rax)
  0x0000000124988fb0: add    %al,(%rax)
  0x0000000124988fb2: add    %al,(%rax)
  0x0000000124988fb4: add    %al,(%rax)
  0x0000000124988fb6: add    %al,(%rax)
  0x0000000124988fb8: add    %al,(%rax)
  0x0000000124988fba: add    %al,(%rax)
  0x0000000124988fbc: add    %al,(%rax)
  0x0000000124988fbe: add    %al,(%rax)

----------------------------------------------------------------------
ladd  97 ladd  [0x0000000124988fe0, 0x0000000124989020]  64 bytes

  0x0000000124988fe0: mov    (%rsp),%rax
  0x0000000124988fe4: add    $0x10,%rsp
  0x0000000124988fe8: mov    (%rsp),%rdx
  0x0000000124988fec: add    $0x10,%rsp
  0x0000000124988ff0: add    %rdx,%rax
  0x0000000124988ff3: movzbl 0x1(%r13),%ebx
  0x0000000124988ff8: inc    %r13
  0x0000000124988ffb: movabs $0x1151d5a20,%r10
  0x0000000124989005: jmpq   *(%r10,%rbx,8)
  0x0000000124989009: nopl   0x0(%rax)
  0x0000000124989010: add    %al,(%rax)
  0x0000000124989012: add    %al,(%rax)
  0x0000000124989014: add    %al,(%rax)
  0x0000000124989016: add    %al,(%rax)
  0x0000000124989018: add    %al,(%rax)
  0x000000012498901a: add    %al,(%rax)
  0x000000012498901c: add    %al,(%rax)
  0x000000012498901e: add    %al,(%rax)

----------------------------------------------------------------------
fadd  98 fadd  [0x0000000124989040, 0x0000000124989080]  64 bytes

  0x0000000124989040: vmovss (%rsp),%xmm0
  0x0000000124989045: add    $0x8,%rsp
  0x0000000124989049: vaddss (%rsp),%xmm0,%xmm0
  0x000000012498904e: add    $0x8,%rsp
  0x0000000124989052: movzbl 0x1(%r13),%ebx
  0x0000000124989057: inc    %r13
  0x000000012498905a: movabs $0x1151d6220,%r10
  0x0000000124989064: jmpq   *(%r10,%rbx,8)
  0x0000000124989068: add    %al,(%rax)
  0x000000012498906a: add    %al,(%rax)
  0x000000012498906c: add    %al,(%rax)
  0x000000012498906e: add    %al,(%rax)
  0x0000000124989070: add    %al,(%rax)
  0x0000000124989072: add    %al,(%rax)
  0x0000000124989074: add    %al,(%rax)
  0x0000000124989076: add    %al,(%rax)
  0x0000000124989078: add    %al,(%rax)
  0x000000012498907a: add    %al,(%rax)
  0x000000012498907c: add    %al,(%rax)
  0x000000012498907e: add    %al,(%rax)

----------------------------------------------------------------------
dadd  99 dadd  [0x00000001249890a0, 0x00000001249890e0]  64 bytes

  0x00000001249890a0: vmovsd (%rsp),%xmm0
  0x00000001249890a5: add    $0x10,%rsp
  0x00000001249890a9: vaddsd (%rsp),%xmm0,%xmm0
  0x00000001249890ae: add    $0x10,%rsp
  0x00000001249890b2: movzbl 0x1(%r13),%ebx
  0x00000001249890b7: inc    %r13
  0x00000001249890ba: movabs $0x1151d6a20,%r10
  0x00000001249890c4: jmpq   *(%r10,%rbx,8)
  0x00000001249890c8: add    %al,(%rax)
  0x00000001249890ca: add    %al,(%rax)
  0x00000001249890cc: add    %al,(%rax)
  0x00000001249890ce: add    %al,(%rax)
  0x00000001249890d0: add    %al,(%rax)
  0x00000001249890d2: add    %al,(%rax)
  0x00000001249890d4: add    %al,(%rax)
  0x00000001249890d6: add    %al,(%rax)
  0x00000001249890d8: add    %al,(%rax)
  0x00000001249890da: add    %al,(%rax)
  0x00000001249890dc: add    %al,(%rax)
  0x00000001249890de: add    %al,(%rax)

----------------------------------------------------------------------
isub  100 isub  [0x0000000124989100, 0x0000000124989140]  64 bytes

  0x0000000124989100: mov    (%rsp),%eax
  0x0000000124989103: add    $0x8,%rsp
  0x0000000124989107: mov    %eax,%edx
  0x0000000124989109: mov    (%rsp),%eax
  0x000000012498910c: add    $0x8,%rsp
  0x0000000124989110: sub    %edx,%eax
  0x0000000124989112: movzbl 0x1(%r13),%ebx
  0x0000000124989117: inc    %r13
  0x000000012498911a: movabs $0x1151d5220,%r10
  0x0000000124989124: jmpq   *(%r10,%rbx,8)
  0x0000000124989128: add    %al,(%rax)
  0x000000012498912a: add    %al,(%rax)
  0x000000012498912c: add    %al,(%rax)
  0x000000012498912e: add    %al,(%rax)
  0x0000000124989130: add    %al,(%rax)
  0x0000000124989132: add    %al,(%rax)
  0x0000000124989134: add    %al,(%rax)
  0x0000000124989136: add    %al,(%rax)
  0x0000000124989138: add    %al,(%rax)
  0x000000012498913a: add    %al,(%rax)
  0x000000012498913c: add    %al,(%rax)
  0x000000012498913e: add    %al,(%rax)

----------------------------------------------------------------------
lsub  101 lsub  [0x0000000124989160, 0x00000001249891a0]  64 bytes

  0x0000000124989160: mov    (%rsp),%rax
  0x0000000124989164: add    $0x10,%rsp
  0x0000000124989168: mov    %rax,%rdx
  0x000000012498916b: mov    (%rsp),%rax
  0x000000012498916f: add    $0x10,%rsp
  0x0000000124989173: sub    %rdx,%rax
  0x0000000124989176: movzbl 0x1(%r13),%ebx
  0x000000012498917b: inc    %r13
  0x000000012498917e: movabs $0x1151d5a20,%r10
  0x0000000124989188: jmpq   *(%r10,%rbx,8)
  0x000000012498918c: nopl   0x0(%rax)
  0x0000000124989190: add    %al,(%rax)
  0x0000000124989192: add    %al,(%rax)
  0x0000000124989194: add    %al,(%rax)
  0x0000000124989196: add    %al,(%rax)
  0x0000000124989198: add    %al,(%rax)
  0x000000012498919a: add    %al,(%rax)
  0x000000012498919c: add    %al,(%rax)
  0x000000012498919e: add    %al,(%rax)

----------------------------------------------------------------------
fsub  102 fsub  [0x00000001249891c0, 0x0000000124989200]  64 bytes

  0x00000001249891c0: vmovss (%rsp),%xmm0
  0x00000001249891c5: add    $0x8,%rsp
  0x00000001249891c9: vmovaps %xmm0,%xmm1
  0x00000001249891cd: vmovss (%rsp),%xmm0
  0x00000001249891d2: add    $0x8,%rsp
  0x00000001249891d6: vsubss %xmm1,%xmm0,%xmm0
  0x00000001249891da: movzbl 0x1(%r13),%ebx
  0x00000001249891df: inc    %r13
  0x00000001249891e2: movabs $0x1151d6220,%r10
  0x00000001249891ec: jmpq   *(%r10,%rbx,8)
  0x00000001249891f0: add    %al,(%rax)
  0x00000001249891f2: add    %al,(%rax)
  0x00000001249891f4: add    %al,(%rax)
  0x00000001249891f6: add    %al,(%rax)
  0x00000001249891f8: add    %al,(%rax)
  0x00000001249891fa: add    %al,(%rax)
  0x00000001249891fc: add    %al,(%rax)
  0x00000001249891fe: add    %al,(%rax)

----------------------------------------------------------------------
dsub  103 dsub  [0x0000000124989220, 0x0000000124989260]  64 bytes

  0x0000000124989220: vmovsd (%rsp),%xmm0
  0x0000000124989225: add    $0x10,%rsp
  0x0000000124989229: vmovapd %xmm0,%xmm1
  0x000000012498922d: vmovsd (%rsp),%xmm0
  0x0000000124989232: add    $0x10,%rsp
  0x0000000124989236: vsubsd %xmm1,%xmm0,%xmm0
  0x000000012498923a: movzbl 0x1(%r13),%ebx
  0x000000012498923f: inc    %r13
  0x0000000124989242: movabs $0x1151d6a20,%r10
  0x000000012498924c: jmpq   *(%r10,%rbx,8)
  0x0000000124989250: add    %al,(%rax)
  0x0000000124989252: add    %al,(%rax)
  0x0000000124989254: add    %al,(%rax)
  0x0000000124989256: add    %al,(%rax)
  0x0000000124989258: add    %al,(%rax)
  0x000000012498925a: add    %al,(%rax)
  0x000000012498925c: add    %al,(%rax)
  0x000000012498925e: add    %al,(%rax)

----------------------------------------------------------------------
imul  104 imul  [0x0000000124989280, 0x00000001249892c0]  64 bytes

  0x0000000124989280: mov    (%rsp),%eax
  0x0000000124989283: add    $0x8,%rsp
  0x0000000124989287: mov    (%rsp),%edx
  0x000000012498928a: add    $0x8,%rsp
  0x000000012498928e: imul   %edx,%eax
  0x0000000124989291: movzbl 0x1(%r13),%ebx
  0x0000000124989296: inc    %r13
  0x0000000124989299: movabs $0x1151d5220,%r10
  0x00000001249892a3: jmpq   *(%r10,%rbx,8)
  0x00000001249892a7: nop
  0x00000001249892a8: add    %al,(%rax)
  0x00000001249892aa: add    %al,(%rax)
  0x00000001249892ac: add    %al,(%rax)
  0x00000001249892ae: add    %al,(%rax)
  0x00000001249892b0: add    %al,(%rax)
  0x00000001249892b2: add    %al,(%rax)
  0x00000001249892b4: add    %al,(%rax)
  0x00000001249892b6: add    %al,(%rax)
  0x00000001249892b8: add    %al,(%rax)
  0x00000001249892ba: add    %al,(%rax)
  0x00000001249892bc: add    %al,(%rax)
  0x00000001249892be: add    %al,(%rax)

----------------------------------------------------------------------
lmul  105 lmul  [0x00000001249892e0, 0x0000000124989320]  64 bytes

  0x00000001249892e0: mov    (%rsp),%rax
  0x00000001249892e4: add    $0x10,%rsp
  0x00000001249892e8: mov    (%rsp),%rdx
  0x00000001249892ec: add    $0x10,%rsp
  0x00000001249892f0: imul   %rdx,%rax
  0x00000001249892f4: movzbl 0x1(%r13),%ebx
  0x00000001249892f9: inc    %r13
  0x00000001249892fc: movabs $0x1151d5a20,%r10
  0x0000000124989306: jmpq   *(%r10,%rbx,8)
  0x000000012498930a: nopw   0x0(%rax,%rax,1)
  0x0000000124989310: add    %al,(%rax)
  0x0000000124989312: add    %al,(%rax)
  0x0000000124989314: add    %al,(%rax)
  0x0000000124989316: add    %al,(%rax)
  0x0000000124989318: add    %al,(%rax)
  0x000000012498931a: add    %al,(%rax)
  0x000000012498931c: add    %al,(%rax)
  0x000000012498931e: add    %al,(%rax)

----------------------------------------------------------------------
fmul  106 fmul  [0x0000000124989340, 0x0000000124989380]  64 bytes

  0x0000000124989340: vmovss (%rsp),%xmm0
  0x0000000124989345: add    $0x8,%rsp
  0x0000000124989349: vmulss (%rsp),%xmm0,%xmm0
  0x000000012498934e: add    $0x8,%rsp
  0x0000000124989352: movzbl 0x1(%r13),%ebx
  0x0000000124989357: inc    %r13
  0x000000012498935a: movabs $0x1151d6220,%r10
  0x0000000124989364: jmpq   *(%r10,%rbx,8)
  0x0000000124989368: add    %al,(%rax)
  0x000000012498936a: add    %al,(%rax)
  0x000000012498936c: add    %al,(%rax)
  0x000000012498936e: add    %al,(%rax)
  0x0000000124989370: add    %al,(%rax)
  0x0000000124989372: add    %al,(%rax)
  0x0000000124989374: add    %al,(%rax)
  0x0000000124989376: add    %al,(%rax)
  0x0000000124989378: add    %al,(%rax)
  0x000000012498937a: add    %al,(%rax)
  0x000000012498937c: add    %al,(%rax)
  0x000000012498937e: add    %al,(%rax)

----------------------------------------------------------------------
dmul  107 dmul  [0x00000001249893a0, 0x00000001249893e0]  64 bytes

  0x00000001249893a0: vmovsd (%rsp),%xmm0
  0x00000001249893a5: add    $0x10,%rsp
  0x00000001249893a9: vmulsd (%rsp),%xmm0,%xmm0
  0x00000001249893ae: add    $0x10,%rsp
  0x00000001249893b2: movzbl 0x1(%r13),%ebx
  0x00000001249893b7: inc    %r13
  0x00000001249893ba: movabs $0x1151d6a20,%r10
  0x00000001249893c4: jmpq   *(%r10,%rbx,8)
  0x00000001249893c8: add    %al,(%rax)
  0x00000001249893ca: add    %al,(%rax)
  0x00000001249893cc: add    %al,(%rax)
  0x00000001249893ce: add    %al,(%rax)
  0x00000001249893d0: add    %al,(%rax)
  0x00000001249893d2: add    %al,(%rax)
  0x00000001249893d4: add    %al,(%rax)
  0x00000001249893d6: add    %al,(%rax)
  0x00000001249893d8: add    %al,(%rax)
  0x00000001249893da: add    %al,(%rax)
  0x00000001249893dc: add    %al,(%rax)
  0x00000001249893de: add    %al,(%rax)

----------------------------------------------------------------------
idiv  108 idiv  [0x0000000124989400, 0x0000000124989440]  64 bytes

  0x0000000124989400: mov    (%rsp),%eax
  0x0000000124989403: add    $0x8,%rsp
  0x0000000124989407: mov    %eax,%ecx
  0x0000000124989409: mov    (%rsp),%eax
  0x000000012498940c: add    $0x8,%rsp
  0x0000000124989410: cmp    $0x80000000,%eax
  0x0000000124989416: jne    0x0000000124989427
  0x000000012498941c: xor    %edx,%edx
  0x000000012498941e: cmp    $0xffffffff,%ecx
  0x0000000124989421: je     0x000000012498942a
  0x0000000124989427: cltd   
  0x0000000124989428: idiv   %ecx
  0x000000012498942a: movzbl 0x1(%r13),%ebx
  0x000000012498942f: inc    %r13
  0x0000000124989432: movabs $0x1151d5220,%r10
  0x000000012498943c: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
ldiv  109 ldiv  [0x0000000124989460, 0x00000001249894c0]  96 bytes

  0x0000000124989460: mov    (%rsp),%rax
  0x0000000124989464: add    $0x10,%rsp
  0x0000000124989468: mov    %rax,%rcx
  0x000000012498946b: mov    (%rsp),%rax
  0x000000012498946f: add    $0x10,%rsp
  0x0000000124989473: test   %rcx,%rcx
  0x0000000124989476: je     0x0000000124982c1b
  0x000000012498947c: cmp    -0xf91a943(%rip),%rax        # 0x000000011506eb40 = MacroAssembler::corrected_idivq(RegisterImpl*)::min_long
  0x0000000124989483: jne    0x0000000124989495
  0x0000000124989489: xor    %edx,%edx
  0x000000012498948b: cmp    $0xffffffffffffffff,%rcx
  0x000000012498948f: je     0x000000012498949a
  0x0000000124989495: cqto   
  0x0000000124989497: idiv   %rcx
  0x000000012498949a: movzbl 0x1(%r13),%ebx
  0x000000012498949f: inc    %r13
  0x00000001249894a2: movabs $0x1151d5a20,%r10
  0x00000001249894ac: jmpq   *(%r10,%rbx,8)
  0x00000001249894b0: add    %al,(%rax)
  0x00000001249894b2: add    %al,(%rax)
  0x00000001249894b4: add    %al,(%rax)
  0x00000001249894b6: add    %al,(%rax)
  0x00000001249894b8: add    %al,(%rax)
  0x00000001249894ba: add    %al,(%rax)
  0x00000001249894bc: add    %al,(%rax)
  0x00000001249894be: add    %al,(%rax)

----------------------------------------------------------------------
fdiv  110 fdiv  [0x00000001249894e0, 0x0000000124989520]  64 bytes

  0x00000001249894e0: vmovss (%rsp),%xmm0
  0x00000001249894e5: add    $0x8,%rsp
  0x00000001249894e9: vmovaps %xmm0,%xmm1
  0x00000001249894ed: vmovss (%rsp),%xmm0
  0x00000001249894f2: add    $0x8,%rsp
  0x00000001249894f6: vdivss %xmm1,%xmm0,%xmm0
  0x00000001249894fa: movzbl 0x1(%r13),%ebx
  0x00000001249894ff: inc    %r13
  0x0000000124989502: movabs $0x1151d6220,%r10
  0x000000012498950c: jmpq   *(%r10,%rbx,8)
  0x0000000124989510: add    %al,(%rax)
  0x0000000124989512: add    %al,(%rax)
  0x0000000124989514: add    %al,(%rax)
  0x0000000124989516: add    %al,(%rax)
  0x0000000124989518: add    %al,(%rax)
  0x000000012498951a: add    %al,(%rax)
  0x000000012498951c: add    %al,(%rax)
  0x000000012498951e: add    %al,(%rax)

----------------------------------------------------------------------
ddiv  111 ddiv  [0x0000000124989540, 0x0000000124989580]  64 bytes

  0x0000000124989540: vmovsd (%rsp),%xmm0
  0x0000000124989545: add    $0x10,%rsp
  0x0000000124989549: vmovapd %xmm0,%xmm1
  0x000000012498954d: vmovsd (%rsp),%xmm0
  0x0000000124989552: add    $0x10,%rsp
  0x0000000124989556: vdivsd %xmm1,%xmm0,%xmm0
  0x000000012498955a: movzbl 0x1(%r13),%ebx
  0x000000012498955f: inc    %r13
  0x0000000124989562: movabs $0x1151d6a20,%r10
  0x000000012498956c: jmpq   *(%r10,%rbx,8)
  0x0000000124989570: add    %al,(%rax)
  0x0000000124989572: add    %al,(%rax)
  0x0000000124989574: add    %al,(%rax)
  0x0000000124989576: add    %al,(%rax)
  0x0000000124989578: add    %al,(%rax)
  0x000000012498957a: add    %al,(%rax)
  0x000000012498957c: add    %al,(%rax)
  0x000000012498957e: add    %al,(%rax)

----------------------------------------------------------------------
irem  112 irem  [0x00000001249895a0, 0x0000000124989600]  96 bytes

  0x00000001249895a0: mov    (%rsp),%eax
  0x00000001249895a3: add    $0x8,%rsp
  0x00000001249895a7: mov    %eax,%ecx
  0x00000001249895a9: mov    (%rsp),%eax
  0x00000001249895ac: add    $0x8,%rsp
  0x00000001249895b0: cmp    $0x80000000,%eax
  0x00000001249895b6: jne    0x00000001249895c7
  0x00000001249895bc: xor    %edx,%edx
  0x00000001249895be: cmp    $0xffffffff,%ecx
  0x00000001249895c1: je     0x00000001249895ca
  0x00000001249895c7: cltd   
  0x00000001249895c8: idiv   %ecx
  0x00000001249895ca: mov    %edx,%eax
  0x00000001249895cc: movzbl 0x1(%r13),%ebx
  0x00000001249895d1: inc    %r13
  0x00000001249895d4: movabs $0x1151d5220,%r10
  0x00000001249895de: jmpq   *(%r10,%rbx,8)
  0x00000001249895e2: nopw   0x0(%rax,%rax,1)
  0x00000001249895e8: add    %al,(%rax)
  0x00000001249895ea: add    %al,(%rax)
  0x00000001249895ec: add    %al,(%rax)
  0x00000001249895ee: add    %al,(%rax)
  0x00000001249895f0: add    %al,(%rax)
  0x00000001249895f2: add    %al,(%rax)
  0x00000001249895f4: add    %al,(%rax)
  0x00000001249895f6: add    %al,(%rax)
  0x00000001249895f8: add    %al,(%rax)
  0x00000001249895fa: add    %al,(%rax)
  0x00000001249895fc: add    %al,(%rax)
  0x00000001249895fe: add    %al,(%rax)

----------------------------------------------------------------------
lrem  113 lrem  [0x0000000124989620, 0x0000000124989680]  96 bytes

  0x0000000124989620: mov    (%rsp),%rax
  0x0000000124989624: add    $0x10,%rsp
  0x0000000124989628: mov    %rax,%rcx
  0x000000012498962b: mov    (%rsp),%rax
  0x000000012498962f: add    $0x10,%rsp
  0x0000000124989633: test   %rcx,%rcx
  0x0000000124989636: je     0x0000000124982c1b
  0x000000012498963c: cmp    -0xf91ab03(%rip),%rax        # 0x000000011506eb40 = MacroAssembler::corrected_idivq(RegisterImpl*)::min_long
  0x0000000124989643: jne    0x0000000124989655
  0x0000000124989649: xor    %edx,%edx
  0x000000012498964b: cmp    $0xffffffffffffffff,%rcx
  0x000000012498964f: je     0x000000012498965a
  0x0000000124989655: cqto   
  0x0000000124989657: idiv   %rcx
  0x000000012498965a: mov    %rdx,%rax
  0x000000012498965d: movzbl 0x1(%r13),%ebx
  0x0000000124989662: inc    %r13
  0x0000000124989665: movabs $0x1151d5a20,%r10
  0x000000012498966f: jmpq   *(%r10,%rbx,8)
  0x0000000124989673: nopl   0x0(%rax,%rax,1)
  0x0000000124989678: add    %al,(%rax)
  0x000000012498967a: add    %al,(%rax)
  0x000000012498967c: add    %al,(%rax)
  0x000000012498967e: add    %al,(%rax)

----------------------------------------------------------------------
frem  114 frem  [0x00000001249896a0, 0x0000000124989700]  96 bytes

  0x00000001249896a0: vmovss (%rsp),%xmm0
  0x00000001249896a5: add    $0x8,%rsp
  0x00000001249896a9: vmovaps %xmm0,%xmm1
  0x00000001249896ad: vmovss (%rsp),%xmm0
  0x00000001249896b2: add    $0x8,%rsp
  0x00000001249896b6: test   $0xf,%esp
  0x00000001249896bc: je     0x00000001249896d4
  0x00000001249896c2: sub    $0x8,%rsp
  0x00000001249896c6: callq  0x0000000114e963ac = SharedRuntime::frem(float, float)
  0x00000001249896cb: add    $0x8,%rsp
  0x00000001249896cf: jmpq   0x00000001249896d9
  0x00000001249896d4: callq  0x0000000114e963ac = SharedRuntime::frem(float, float)
  0x00000001249896d9: movzbl 0x1(%r13),%ebx
  0x00000001249896de: inc    %r13
  0x00000001249896e1: movabs $0x1151d6220,%r10
  0x00000001249896eb: jmpq   *(%r10,%rbx,8)
  0x00000001249896ef: nop
  0x00000001249896f0: add    %al,(%rax)
  0x00000001249896f2: add    %al,(%rax)
  0x00000001249896f4: add    %al,(%rax)
  0x00000001249896f6: add    %al,(%rax)
  0x00000001249896f8: add    %al,(%rax)
  0x00000001249896fa: add    %al,(%rax)
  0x00000001249896fc: add    %al,(%rax)
  0x00000001249896fe: add    %al,(%rax)

----------------------------------------------------------------------
drem  115 drem  [0x0000000124989720, 0x0000000124989780]  96 bytes

  0x0000000124989720: vmovsd (%rsp),%xmm0
  0x0000000124989725: add    $0x10,%rsp
  0x0000000124989729: vmovapd %xmm0,%xmm1
  0x000000012498972d: vmovsd (%rsp),%xmm0
  0x0000000124989732: add    $0x10,%rsp
  0x0000000124989736: test   $0xf,%esp
  0x000000012498973c: je     0x0000000124989754
  0x0000000124989742: sub    $0x8,%rsp
  0x0000000124989746: callq  0x0000000114e963b6 = SharedRuntime::drem(double, double)
  0x000000012498974b: add    $0x8,%rsp
  0x000000012498974f: jmpq   0x0000000124989759
  0x0000000124989754: callq  0x0000000114e963b6 = SharedRuntime::drem(double, double)
  0x0000000124989759: movzbl 0x1(%r13),%ebx
  0x000000012498975e: inc    %r13
  0x0000000124989761: movabs $0x1151d6a20,%r10
  0x000000012498976b: jmpq   *(%r10,%rbx,8)
  0x000000012498976f: nop
  0x0000000124989770: add    %al,(%rax)
  0x0000000124989772: add    %al,(%rax)
  0x0000000124989774: add    %al,(%rax)
  0x0000000124989776: add    %al,(%rax)
  0x0000000124989778: add    %al,(%rax)
  0x000000012498977a: add    %al,(%rax)
  0x000000012498977c: add    %al,(%rax)
  0x000000012498977e: add    %al,(%rax)

----------------------------------------------------------------------
ineg  116 ineg  [0x00000001249897a0, 0x00000001249897c0]  32 bytes

  0x00000001249897a0: mov    (%rsp),%eax
  0x00000001249897a3: add    $0x8,%rsp
  0x00000001249897a7: neg    %eax
  0x00000001249897a9: movzbl 0x1(%r13),%ebx
  0x00000001249897ae: inc    %r13
  0x00000001249897b1: movabs $0x1151d5220,%r10
  0x00000001249897bb: jmpq   *(%r10,%rbx,8)
  0x00000001249897bf: nop

----------------------------------------------------------------------
lneg  117 lneg  [0x00000001249897e0, 0x0000000124989820]  64 bytes

  0x00000001249897e0: mov    (%rsp),%rax
  0x00000001249897e4: add    $0x10,%rsp
  0x00000001249897e8: neg    %rax
  0x00000001249897eb: movzbl 0x1(%r13),%ebx
  0x00000001249897f0: inc    %r13
  0x00000001249897f3: movabs $0x1151d5a20,%r10
  0x00000001249897fd: jmpq   *(%r10,%rbx,8)
  0x0000000124989801: nopl   0x0(%rax)
  0x0000000124989808: add    %al,(%rax)
  0x000000012498980a: add    %al,(%rax)
  0x000000012498980c: add    %al,(%rax)
  0x000000012498980e: add    %al,(%rax)
  0x0000000124989810: add    %al,(%rax)
  0x0000000124989812: add    %al,(%rax)
  0x0000000124989814: add    %al,(%rax)
  0x0000000124989816: add    %al,(%rax)
  0x0000000124989818: add    %al,(%rax)
  0x000000012498981a: add    %al,(%rax)
  0x000000012498981c: add    %al,(%rax)
  0x000000012498981e: add    %al,(%rax)

----------------------------------------------------------------------
fneg  118 fneg  [0x0000000124989840, 0x0000000124989880]  64 bytes

  0x0000000124989840: vmovss (%rsp),%xmm0
  0x0000000124989845: add    $0x8,%rsp
  0x0000000124989849: vxorps -0xf7974e1(%rip),%xmm0,%xmm0        # 0x00000001151f2370 = float_signflip_pool
  0x0000000124989851: movzbl 0x1(%r13),%ebx
  0x0000000124989856: inc    %r13
  0x0000000124989859: movabs $0x1151d6220,%r10
  0x0000000124989863: jmpq   *(%r10,%rbx,8)
  0x0000000124989867: nop
  0x0000000124989868: add    %al,(%rax)
  0x000000012498986a: add    %al,(%rax)
  0x000000012498986c: add    %al,(%rax)
  0x000000012498986e: add    %al,(%rax)
  0x0000000124989870: add    %al,(%rax)
  0x0000000124989872: add    %al,(%rax)
  0x0000000124989874: add    %al,(%rax)
  0x0000000124989876: add    %al,(%rax)
  0x0000000124989878: add    %al,(%rax)
  0x000000012498987a: add    %al,(%rax)
  0x000000012498987c: add    %al,(%rax)
  0x000000012498987e: add    %al,(%rax)

----------------------------------------------------------------------
dneg  119 dneg  [0x00000001249898a0, 0x00000001249898e0]  64 bytes

  0x00000001249898a0: vmovsd (%rsp),%xmm0
  0x00000001249898a5: add    $0x10,%rsp
  0x00000001249898a9: vxorpd -0xf797511(%rip),%xmm0,%xmm0        # 0x00000001151f23a0 = double_signflip_pool
  0x00000001249898b1: movzbl 0x1(%r13),%ebx
  0x00000001249898b6: inc    %r13
  0x00000001249898b9: movabs $0x1151d6a20,%r10
  0x00000001249898c3: jmpq   *(%r10,%rbx,8)
  0x00000001249898c7: nop
  0x00000001249898c8: add    %al,(%rax)
  0x00000001249898ca: add    %al,(%rax)
  0x00000001249898cc: add    %al,(%rax)
  0x00000001249898ce: add    %al,(%rax)
  0x00000001249898d0: add    %al,(%rax)
  0x00000001249898d2: add    %al,(%rax)
  0x00000001249898d4: add    %al,(%rax)
  0x00000001249898d6: add    %al,(%rax)
  0x00000001249898d8: add    %al,(%rax)
  0x00000001249898da: add    %al,(%rax)
  0x00000001249898dc: add    %al,(%rax)
  0x00000001249898de: add    %al,(%rax)

----------------------------------------------------------------------
ishl  120 ishl  [0x0000000124989900, 0x0000000124989940]  64 bytes

  0x0000000124989900: mov    (%rsp),%eax
  0x0000000124989903: add    $0x8,%rsp
  0x0000000124989907: mov    %eax,%ecx
  0x0000000124989909: mov    (%rsp),%eax
  0x000000012498990c: add    $0x8,%rsp
  0x0000000124989910: shl    %cl,%eax
  0x0000000124989912: movzbl 0x1(%r13),%ebx
  0x0000000124989917: inc    %r13
  0x000000012498991a: movabs $0x1151d5220,%r10
  0x0000000124989924: jmpq   *(%r10,%rbx,8)
  0x0000000124989928: add    %al,(%rax)
  0x000000012498992a: add    %al,(%rax)
  0x000000012498992c: add    %al,(%rax)
  0x000000012498992e: add    %al,(%rax)
  0x0000000124989930: add    %al,(%rax)
  0x0000000124989932: add    %al,(%rax)
  0x0000000124989934: add    %al,(%rax)
  0x0000000124989936: add    %al,(%rax)
  0x0000000124989938: add    %al,(%rax)
  0x000000012498993a: add    %al,(%rax)
  0x000000012498993c: add    %al,(%rax)
  0x000000012498993e: add    %al,(%rax)

----------------------------------------------------------------------
lshl  121 lshl  [0x0000000124989960, 0x00000001249899a0]  64 bytes

  0x0000000124989960: mov    (%rsp),%eax
  0x0000000124989963: add    $0x8,%rsp
  0x0000000124989967: mov    %eax,%ecx
  0x0000000124989969: mov    (%rsp),%rax
  0x000000012498996d: add    $0x10,%rsp
  0x0000000124989971: shl    %cl,%rax
  0x0000000124989974: movzbl 0x1(%r13),%ebx
  0x0000000124989979: inc    %r13
  0x000000012498997c: movabs $0x1151d5a20,%r10
  0x0000000124989986: jmpq   *(%r10,%rbx,8)
  0x000000012498998a: nopw   0x0(%rax,%rax,1)
  0x0000000124989990: add    %al,(%rax)
  0x0000000124989992: add    %al,(%rax)
  0x0000000124989994: add    %al,(%rax)
  0x0000000124989996: add    %al,(%rax)
  0x0000000124989998: add    %al,(%rax)
  0x000000012498999a: add    %al,(%rax)
  0x000000012498999c: add    %al,(%rax)
  0x000000012498999e: add    %al,(%rax)

----------------------------------------------------------------------
ishr  122 ishr  [0x00000001249899c0, 0x0000000124989a00]  64 bytes

  0x00000001249899c0: mov    (%rsp),%eax
  0x00000001249899c3: add    $0x8,%rsp
  0x00000001249899c7: mov    %eax,%ecx
  0x00000001249899c9: mov    (%rsp),%eax
  0x00000001249899cc: add    $0x8,%rsp
  0x00000001249899d0: sar    %cl,%eax
  0x00000001249899d2: movzbl 0x1(%r13),%ebx
  0x00000001249899d7: inc    %r13
  0x00000001249899da: movabs $0x1151d5220,%r10
  0x00000001249899e4: jmpq   *(%r10,%rbx,8)
  0x00000001249899e8: add    %al,(%rax)
  0x00000001249899ea: add    %al,(%rax)
  0x00000001249899ec: add    %al,(%rax)
  0x00000001249899ee: add    %al,(%rax)
  0x00000001249899f0: add    %al,(%rax)
  0x00000001249899f2: add    %al,(%rax)
  0x00000001249899f4: add    %al,(%rax)
  0x00000001249899f6: add    %al,(%rax)
  0x00000001249899f8: add    %al,(%rax)
  0x00000001249899fa: add    %al,(%rax)
  0x00000001249899fc: add    %al,(%rax)
  0x00000001249899fe: add    %al,(%rax)

----------------------------------------------------------------------
lshr  123 lshr  [0x0000000124989a20, 0x0000000124989a60]  64 bytes

  0x0000000124989a20: mov    (%rsp),%eax
  0x0000000124989a23: add    $0x8,%rsp
  0x0000000124989a27: mov    %eax,%ecx
  0x0000000124989a29: mov    (%rsp),%rax
  0x0000000124989a2d: add    $0x10,%rsp
  0x0000000124989a31: sar    %cl,%rax
  0x0000000124989a34: movzbl 0x1(%r13),%ebx
  0x0000000124989a39: inc    %r13
  0x0000000124989a3c: movabs $0x1151d5a20,%r10
  0x0000000124989a46: jmpq   *(%r10,%rbx,8)
  0x0000000124989a4a: nopw   0x0(%rax,%rax,1)
  0x0000000124989a50: add    %al,(%rax)
  0x0000000124989a52: add    %al,(%rax)
  0x0000000124989a54: add    %al,(%rax)
  0x0000000124989a56: add    %al,(%rax)
  0x0000000124989a58: add    %al,(%rax)
  0x0000000124989a5a: add    %al,(%rax)
  0x0000000124989a5c: add    %al,(%rax)
  0x0000000124989a5e: add    %al,(%rax)

----------------------------------------------------------------------
iushr  124 iushr  [0x0000000124989a80, 0x0000000124989ac0]  64 bytes

  0x0000000124989a80: mov    (%rsp),%eax
  0x0000000124989a83: add    $0x8,%rsp
  0x0000000124989a87: mov    %eax,%ecx
  0x0000000124989a89: mov    (%rsp),%eax
  0x0000000124989a8c: add    $0x8,%rsp
  0x0000000124989a90: shr    %cl,%eax
  0x0000000124989a92: movzbl 0x1(%r13),%ebx
  0x0000000124989a97: inc    %r13
  0x0000000124989a9a: movabs $0x1151d5220,%r10
  0x0000000124989aa4: jmpq   *(%r10,%rbx,8)
  0x0000000124989aa8: add    %al,(%rax)
  0x0000000124989aaa: add    %al,(%rax)
  0x0000000124989aac: add    %al,(%rax)
  0x0000000124989aae: add    %al,(%rax)
  0x0000000124989ab0: add    %al,(%rax)
  0x0000000124989ab2: add    %al,(%rax)
  0x0000000124989ab4: add    %al,(%rax)
  0x0000000124989ab6: add    %al,(%rax)
  0x0000000124989ab8: add    %al,(%rax)
  0x0000000124989aba: add    %al,(%rax)
  0x0000000124989abc: add    %al,(%rax)
  0x0000000124989abe: add    %al,(%rax)

----------------------------------------------------------------------
lushr  125 lushr  [0x0000000124989ae0, 0x0000000124989b20]  64 bytes

  0x0000000124989ae0: mov    (%rsp),%eax
  0x0000000124989ae3: add    $0x8,%rsp
  0x0000000124989ae7: mov    %eax,%ecx
  0x0000000124989ae9: mov    (%rsp),%rax
  0x0000000124989aed: add    $0x10,%rsp
  0x0000000124989af1: shr    %cl,%rax
  0x0000000124989af4: movzbl 0x1(%r13),%ebx
  0x0000000124989af9: inc    %r13
  0x0000000124989afc: movabs $0x1151d5a20,%r10
  0x0000000124989b06: jmpq   *(%r10,%rbx,8)
  0x0000000124989b0a: nopw   0x0(%rax,%rax,1)
  0x0000000124989b10: add    %al,(%rax)
  0x0000000124989b12: add    %al,(%rax)
  0x0000000124989b14: add    %al,(%rax)
  0x0000000124989b16: add    %al,(%rax)
  0x0000000124989b18: add    %al,(%rax)
  0x0000000124989b1a: add    %al,(%rax)
  0x0000000124989b1c: add    %al,(%rax)
  0x0000000124989b1e: add    %al,(%rax)

----------------------------------------------------------------------
iand  126 iand  [0x0000000124989b40, 0x0000000124989b80]  64 bytes

  0x0000000124989b40: mov    (%rsp),%eax
  0x0000000124989b43: add    $0x8,%rsp
  0x0000000124989b47: mov    (%rsp),%edx
  0x0000000124989b4a: add    $0x8,%rsp
  0x0000000124989b4e: and    %edx,%eax
  0x0000000124989b50: movzbl 0x1(%r13),%ebx
  0x0000000124989b55: inc    %r13
  0x0000000124989b58: movabs $0x1151d5220,%r10
  0x0000000124989b62: jmpq   *(%r10,%rbx,8)
  0x0000000124989b66: xchg   %ax,%ax
  0x0000000124989b68: add    %al,(%rax)
  0x0000000124989b6a: add    %al,(%rax)
  0x0000000124989b6c: add    %al,(%rax)
  0x0000000124989b6e: add    %al,(%rax)
  0x0000000124989b70: add    %al,(%rax)
  0x0000000124989b72: add    %al,(%rax)
  0x0000000124989b74: add    %al,(%rax)
  0x0000000124989b76: add    %al,(%rax)
  0x0000000124989b78: add    %al,(%rax)
  0x0000000124989b7a: add    %al,(%rax)
  0x0000000124989b7c: add    %al,(%rax)
  0x0000000124989b7e: add    %al,(%rax)

----------------------------------------------------------------------
land  127 land  [0x0000000124989ba0, 0x0000000124989be0]  64 bytes

  0x0000000124989ba0: mov    (%rsp),%rax
  0x0000000124989ba4: add    $0x10,%rsp
  0x0000000124989ba8: mov    (%rsp),%rdx
  0x0000000124989bac: add    $0x10,%rsp
  0x0000000124989bb0: and    %rdx,%rax
  0x0000000124989bb3: movzbl 0x1(%r13),%ebx
  0x0000000124989bb8: inc    %r13
  0x0000000124989bbb: movabs $0x1151d5a20,%r10
  0x0000000124989bc5: jmpq   *(%r10,%rbx,8)
  0x0000000124989bc9: nopl   0x0(%rax)
  0x0000000124989bd0: add    %al,(%rax)
  0x0000000124989bd2: add    %al,(%rax)
  0x0000000124989bd4: add    %al,(%rax)
  0x0000000124989bd6: add    %al,(%rax)
  0x0000000124989bd8: add    %al,(%rax)
  0x0000000124989bda: add    %al,(%rax)
  0x0000000124989bdc: add    %al,(%rax)
  0x0000000124989bde: add    %al,(%rax)

----------------------------------------------------------------------
ior  128 ior  [0x0000000124989c00, 0x0000000124989c40]  64 bytes

  0x0000000124989c00: mov    (%rsp),%eax
  0x0000000124989c03: add    $0x8,%rsp
  0x0000000124989c07: mov    (%rsp),%edx
  0x0000000124989c0a: add    $0x8,%rsp
  0x0000000124989c0e: or     %edx,%eax
  0x0000000124989c10: movzbl 0x1(%r13),%ebx
  0x0000000124989c15: inc    %r13
  0x0000000124989c18: movabs $0x1151d5220,%r10
  0x0000000124989c22: jmpq   *(%r10,%rbx,8)
  0x0000000124989c26: xchg   %ax,%ax
  0x0000000124989c28: add    %al,(%rax)
  0x0000000124989c2a: add    %al,(%rax)
  0x0000000124989c2c: add    %al,(%rax)
  0x0000000124989c2e: add    %al,(%rax)
  0x0000000124989c30: add    %al,(%rax)
  0x0000000124989c32: add    %al,(%rax)
  0x0000000124989c34: add    %al,(%rax)
  0x0000000124989c36: add    %al,(%rax)
  0x0000000124989c38: add    %al,(%rax)
  0x0000000124989c3a: add    %al,(%rax)
  0x0000000124989c3c: add    %al,(%rax)
  0x0000000124989c3e: add    %al,(%rax)

----------------------------------------------------------------------
lor  129 lor  [0x0000000124989c60, 0x0000000124989ca0]  64 bytes

  0x0000000124989c60: mov    (%rsp),%rax
  0x0000000124989c64: add    $0x10,%rsp
  0x0000000124989c68: mov    (%rsp),%rdx
  0x0000000124989c6c: add    $0x10,%rsp
  0x0000000124989c70: or     %rdx,%rax
  0x0000000124989c73: movzbl 0x1(%r13),%ebx
  0x0000000124989c78: inc    %r13
  0x0000000124989c7b: movabs $0x1151d5a20,%r10
  0x0000000124989c85: jmpq   *(%r10,%rbx,8)
  0x0000000124989c89: nopl   0x0(%rax)
  0x0000000124989c90: add    %al,(%rax)
  0x0000000124989c92: add    %al,(%rax)
  0x0000000124989c94: add    %al,(%rax)
  0x0000000124989c96: add    %al,(%rax)
  0x0000000124989c98: add    %al,(%rax)
  0x0000000124989c9a: add    %al,(%rax)
  0x0000000124989c9c: add    %al,(%rax)
  0x0000000124989c9e: add    %al,(%rax)

----------------------------------------------------------------------
ixor  130 ixor  [0x0000000124989cc0, 0x0000000124989d00]  64 bytes

  0x0000000124989cc0: mov    (%rsp),%eax
  0x0000000124989cc3: add    $0x8,%rsp
  0x0000000124989cc7: mov    (%rsp),%edx
  0x0000000124989cca: add    $0x8,%rsp
  0x0000000124989cce: xor    %edx,%eax
  0x0000000124989cd0: movzbl 0x1(%r13),%ebx
  0x0000000124989cd5: inc    %r13
  0x0000000124989cd8: movabs $0x1151d5220,%r10
  0x0000000124989ce2: jmpq   *(%r10,%rbx,8)
  0x0000000124989ce6: xchg   %ax,%ax
  0x0000000124989ce8: add    %al,(%rax)
  0x0000000124989cea: add    %al,(%rax)
  0x0000000124989cec: add    %al,(%rax)
  0x0000000124989cee: add    %al,(%rax)
  0x0000000124989cf0: add    %al,(%rax)
  0x0000000124989cf2: add    %al,(%rax)
  0x0000000124989cf4: add    %al,(%rax)
  0x0000000124989cf6: add    %al,(%rax)
  0x0000000124989cf8: add    %al,(%rax)
  0x0000000124989cfa: add    %al,(%rax)
  0x0000000124989cfc: add    %al,(%rax)
  0x0000000124989cfe: add    %al,(%rax)

----------------------------------------------------------------------
lxor  131 lxor  [0x0000000124989d20, 0x0000000124989d60]  64 bytes

  0x0000000124989d20: mov    (%rsp),%rax
  0x0000000124989d24: add    $0x10,%rsp
  0x0000000124989d28: mov    (%rsp),%rdx
  0x0000000124989d2c: add    $0x10,%rsp
  0x0000000124989d30: xor    %rdx,%rax
  0x0000000124989d33: movzbl 0x1(%r13),%ebx
  0x0000000124989d38: inc    %r13
  0x0000000124989d3b: movabs $0x1151d5a20,%r10
  0x0000000124989d45: jmpq   *(%r10,%rbx,8)
  0x0000000124989d49: nopl   0x0(%rax)
  0x0000000124989d50: add    %al,(%rax)
  0x0000000124989d52: add    %al,(%rax)
  0x0000000124989d54: add    %al,(%rax)
  0x0000000124989d56: add    %al,(%rax)
  0x0000000124989d58: add    %al,(%rax)
  0x0000000124989d5a: add    %al,(%rax)
  0x0000000124989d5c: add    %al,(%rax)
  0x0000000124989d5e: add    %al,(%rax)

----------------------------------------------------------------------
iinc  132 iinc  [0x0000000124989d80, 0x0000000124989e20]  160 bytes

  0x0000000124989d80: push   %rax
  0x0000000124989d81: jmpq   0x0000000124989dbf
  0x0000000124989d86: sub    $0x8,%rsp
  0x0000000124989d8a: vmovss %xmm0,(%rsp)
  0x0000000124989d8f: jmpq   0x0000000124989dbf
  0x0000000124989d94: sub    $0x10,%rsp
  0x0000000124989d98: vmovsd %xmm0,(%rsp)
  0x0000000124989d9d: jmpq   0x0000000124989dbf
  0x0000000124989da2: sub    $0x10,%rsp
  0x0000000124989da6: mov    %rax,(%rsp)
  0x0000000124989daa: movabs $0x0,%r10
  0x0000000124989db4: mov    %r10,0x8(%rsp)
  0x0000000124989db9: jmpq   0x0000000124989dbf
  0x0000000124989dbe: push   %rax
  0x0000000124989dbf: movsbl 0x2(%r13),%edx
  0x0000000124989dc4: movzbl 0x1(%r13),%ebx
  0x0000000124989dc9: neg    %rbx
  0x0000000124989dcc: add    %edx,(%r14,%rbx,8)
  0x0000000124989dd0: movzbl 0x3(%r13),%ebx
  0x0000000124989dd5: add    $0x3,%r13
  0x0000000124989dd9: movabs $0x1151d7a20,%r10
  0x0000000124989de3: jmpq   *(%r10,%rbx,8)
  0x0000000124989de7: mov    0x4(%r13),%edx
  0x0000000124989deb: movzwl 0x2(%r13),%ebx
  0x0000000124989df0: bswap  %ebx
  0x0000000124989df2: shr    $0x10,%ebx
  0x0000000124989df5: neg    %rbx
  0x0000000124989df8: bswap  %edx
  0x0000000124989dfa: sar    $0x10,%edx
  0x0000000124989dfd: add    %edx,(%r14,%rbx,8)
  0x0000000124989e01: movzbl 0x6(%r13),%ebx
  0x0000000124989e06: add    $0x6,%r13
  0x0000000124989e0a: movabs $0x1151d7a20,%r10
  0x0000000124989e14: jmpq   *(%r10,%rbx,8)
  0x0000000124989e18: add    %al,(%rax)
  0x0000000124989e1a: add    %al,(%rax)
  0x0000000124989e1c: add    %al,(%rax)
  0x0000000124989e1e: add    %al,(%rax)

----------------------------------------------------------------------
i2l  133 i2l  [0x0000000124989e40, 0x0000000124989e60]  32 bytes

  0x0000000124989e40: mov    (%rsp),%eax
  0x0000000124989e43: add    $0x8,%rsp
  0x0000000124989e47: movslq %eax,%rax
  0x0000000124989e4a: movzbl 0x1(%r13),%ebx
  0x0000000124989e4f: inc    %r13
  0x0000000124989e52: movabs $0x1151d5a20,%r10
  0x0000000124989e5c: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
i2f  134 i2f  [0x0000000124989e80, 0x0000000124989ec0]  64 bytes

  0x0000000124989e80: mov    (%rsp),%eax
  0x0000000124989e83: add    $0x8,%rsp
  0x0000000124989e87: vcvtsi2ss %eax,%xmm0,%xmm0
  0x0000000124989e8b: movzbl 0x1(%r13),%ebx
  0x0000000124989e90: inc    %r13
  0x0000000124989e93: movabs $0x1151d6220,%r10
  0x0000000124989e9d: jmpq   *(%r10,%rbx,8)
  0x0000000124989ea1: nopl   0x0(%rax)
  0x0000000124989ea8: add    %al,(%rax)
  0x0000000124989eaa: add    %al,(%rax)
  0x0000000124989eac: add    %al,(%rax)
  0x0000000124989eae: add    %al,(%rax)
  0x0000000124989eb0: add    %al,(%rax)
  0x0000000124989eb2: add    %al,(%rax)
  0x0000000124989eb4: add    %al,(%rax)
  0x0000000124989eb6: add    %al,(%rax)
  0x0000000124989eb8: add    %al,(%rax)
  0x0000000124989eba: add    %al,(%rax)
  0x0000000124989ebc: add    %al,(%rax)
  0x0000000124989ebe: add    %al,(%rax)

----------------------------------------------------------------------
i2d  135 i2d  [0x0000000124989ee0, 0x0000000124989f20]  64 bytes

  0x0000000124989ee0: mov    (%rsp),%eax
  0x0000000124989ee3: add    $0x8,%rsp
  0x0000000124989ee7: vcvtsi2sd %eax,%xmm0,%xmm0
  0x0000000124989eeb: movzbl 0x1(%r13),%ebx
  0x0000000124989ef0: inc    %r13
  0x0000000124989ef3: movabs $0x1151d6a20,%r10
  0x0000000124989efd: jmpq   *(%r10,%rbx,8)
  0x0000000124989f01: nopl   0x0(%rax)
  0x0000000124989f08: add    %al,(%rax)
  0x0000000124989f0a: add    %al,(%rax)
  0x0000000124989f0c: add    %al,(%rax)
  0x0000000124989f0e: add    %al,(%rax)
  0x0000000124989f10: add    %al,(%rax)
  0x0000000124989f12: add    %al,(%rax)
  0x0000000124989f14: add    %al,(%rax)
  0x0000000124989f16: add    %al,(%rax)
  0x0000000124989f18: add    %al,(%rax)
  0x0000000124989f1a: add    %al,(%rax)
  0x0000000124989f1c: add    %al,(%rax)
  0x0000000124989f1e: add    %al,(%rax)

----------------------------------------------------------------------
l2i  136 l2i  [0x0000000124989f40, 0x0000000124989f60]  32 bytes

  0x0000000124989f40: mov    (%rsp),%rax
  0x0000000124989f44: add    $0x10,%rsp
  0x0000000124989f48: mov    %eax,%eax
  0x0000000124989f4a: movzbl 0x1(%r13),%ebx
  0x0000000124989f4f: inc    %r13
  0x0000000124989f52: movabs $0x1151d5220,%r10
  0x0000000124989f5c: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
l2f  137 l2f  [0x0000000124989f80, 0x0000000124989fc0]  64 bytes

  0x0000000124989f80: mov    (%rsp),%rax
  0x0000000124989f84: add    $0x10,%rsp
  0x0000000124989f88: vcvtsi2ss %rax,%xmm0,%xmm0
  0x0000000124989f8d: movzbl 0x1(%r13),%ebx
  0x0000000124989f92: inc    %r13
  0x0000000124989f95: movabs $0x1151d6220,%r10
  0x0000000124989f9f: jmpq   *(%r10,%rbx,8)
  0x0000000124989fa3: nopl   0x0(%rax,%rax,1)
  0x0000000124989fa8: add    %al,(%rax)
  0x0000000124989faa: add    %al,(%rax)
  0x0000000124989fac: add    %al,(%rax)
  0x0000000124989fae: add    %al,(%rax)
  0x0000000124989fb0: add    %al,(%rax)
  0x0000000124989fb2: add    %al,(%rax)
  0x0000000124989fb4: add    %al,(%rax)
  0x0000000124989fb6: add    %al,(%rax)
  0x0000000124989fb8: add    %al,(%rax)
  0x0000000124989fba: add    %al,(%rax)
  0x0000000124989fbc: add    %al,(%rax)
  0x0000000124989fbe: add    %al,(%rax)

----------------------------------------------------------------------
l2d  138 l2d  [0x0000000124989fe0, 0x000000012498a020]  64 bytes

  0x0000000124989fe0: mov    (%rsp),%rax
  0x0000000124989fe4: add    $0x10,%rsp
  0x0000000124989fe8: vcvtsi2sd %rax,%xmm0,%xmm0
  0x0000000124989fed: movzbl 0x1(%r13),%ebx
  0x0000000124989ff2: inc    %r13
  0x0000000124989ff5: movabs $0x1151d6a20,%r10
  0x0000000124989fff: jmpq   *(%r10,%rbx,8)
  0x000000012498a003: nopl   0x0(%rax,%rax,1)
  0x000000012498a008: add    %al,(%rax)
  0x000000012498a00a: add    %al,(%rax)
  0x000000012498a00c: add    %al,(%rax)
  0x000000012498a00e: add    %al,(%rax)
  0x000000012498a010: add    %al,(%rax)
  0x000000012498a012: add    %al,(%rax)
  0x000000012498a014: add    %al,(%rax)
  0x000000012498a016: add    %al,(%rax)
  0x000000012498a018: add    %al,(%rax)
  0x000000012498a01a: add    %al,(%rax)
  0x000000012498a01c: add    %al,(%rax)
  0x000000012498a01e: add    %al,(%rax)

----------------------------------------------------------------------
f2i  139 f2i  [0x000000012498a040, 0x000000012498a0a0]  96 bytes

  0x000000012498a040: vmovss (%rsp),%xmm0
  0x000000012498a045: add    $0x8,%rsp
  0x000000012498a049: vcvttss2si %xmm0,%eax
  0x000000012498a04d: cmp    $0x80000000,%eax
  0x000000012498a053: jne    0x000000012498a07c
  0x000000012498a059: test   $0xf,%esp
  0x000000012498a05f: je     0x000000012498a077
  0x000000012498a065: sub    $0x8,%rsp
  0x000000012498a069: callq  0x0000000114e963c0 = SharedRuntime::f2i(float)
  0x000000012498a06e: add    $0x8,%rsp
  0x000000012498a072: jmpq   0x000000012498a07c
  0x000000012498a077: callq  0x0000000114e963c0 = SharedRuntime::f2i(float)
  0x000000012498a07c: movzbl 0x1(%r13),%ebx
  0x000000012498a081: inc    %r13
  0x000000012498a084: movabs $0x1151d5220,%r10
  0x000000012498a08e: jmpq   *(%r10,%rbx,8)
  0x000000012498a092: nopw   0x0(%rax,%rax,1)
  0x000000012498a098: add    %al,(%rax)
  0x000000012498a09a: add    %al,(%rax)
  0x000000012498a09c: add    %al,(%rax)
  0x000000012498a09e: add    %al,(%rax)

----------------------------------------------------------------------
f2l  140 f2l  [0x000000012498a0c0, 0x000000012498a120]  96 bytes

  0x000000012498a0c0: vmovss (%rsp),%xmm0
  0x000000012498a0c5: add    $0x8,%rsp
  0x000000012498a0c9: vcvttss2si %xmm0,%rax
  0x000000012498a0ce: cmp    -0xf91a345(%rip),%rax        # 0x000000011506fd90 = TemplateTable::convert()::is_nan
  0x000000012498a0d5: jne    0x000000012498a0fe
  0x000000012498a0db: test   $0xf,%esp
  0x000000012498a0e1: je     0x000000012498a0f9
  0x000000012498a0e7: sub    $0x8,%rsp
  0x000000012498a0eb: callq  0x0000000114e963f4 = SharedRuntime::f2l(float)
  0x000000012498a0f0: add    $0x8,%rsp
  0x000000012498a0f4: jmpq   0x000000012498a0fe
  0x000000012498a0f9: callq  0x0000000114e963f4 = SharedRuntime::f2l(float)
  0x000000012498a0fe: movzbl 0x1(%r13),%ebx
  0x000000012498a103: inc    %r13
  0x000000012498a106: movabs $0x1151d5a20,%r10
  0x000000012498a110: jmpq   *(%r10,%rbx,8)
  0x000000012498a114: nopl   0x0(%rax)
  0x000000012498a118: add    %al,(%rax)
  0x000000012498a11a: add    %al,(%rax)
  0x000000012498a11c: add    %al,(%rax)
  0x000000012498a11e: add    %al,(%rax)

----------------------------------------------------------------------
f2d  141 f2d  [0x000000012498a140, 0x000000012498a180]  64 bytes

  0x000000012498a140: vmovss (%rsp),%xmm0
  0x000000012498a145: add    $0x8,%rsp
  0x000000012498a149: vcvtss2sd %xmm0,%xmm0,%xmm0
  0x000000012498a14d: movzbl 0x1(%r13),%ebx
  0x000000012498a152: inc    %r13
  0x000000012498a155: movabs $0x1151d6a20,%r10
  0x000000012498a15f: jmpq   *(%r10,%rbx,8)
  0x000000012498a163: nopl   0x0(%rax,%rax,1)
  0x000000012498a168: add    %al,(%rax)
  0x000000012498a16a: add    %al,(%rax)
  0x000000012498a16c: add    %al,(%rax)
  0x000000012498a16e: add    %al,(%rax)
  0x000000012498a170: add    %al,(%rax)
  0x000000012498a172: add    %al,(%rax)
  0x000000012498a174: add    %al,(%rax)
  0x000000012498a176: add    %al,(%rax)
  0x000000012498a178: add    %al,(%rax)
  0x000000012498a17a: add    %al,(%rax)
  0x000000012498a17c: add    %al,(%rax)
  0x000000012498a17e: add    %al,(%rax)

----------------------------------------------------------------------
d2i  142 d2i  [0x000000012498a1a0, 0x000000012498a200]  96 bytes

  0x000000012498a1a0: vmovsd (%rsp),%xmm0
  0x000000012498a1a5: add    $0x10,%rsp
  0x000000012498a1a9: vcvttsd2si %xmm0,%eax
  0x000000012498a1ad: cmp    $0x80000000,%eax
  0x000000012498a1b3: jne    0x000000012498a1dc
  0x000000012498a1b9: test   $0xf,%esp
  0x000000012498a1bf: je     0x000000012498a1d7
  0x000000012498a1c5: sub    $0x8,%rsp
  0x000000012498a1c9: callq  0x0000000114e9642e = SharedRuntime::d2i(double)
  0x000000012498a1ce: add    $0x8,%rsp
  0x000000012498a1d2: jmpq   0x000000012498a1dc
  0x000000012498a1d7: callq  0x0000000114e9642e = SharedRuntime::d2i(double)
  0x000000012498a1dc: movzbl 0x1(%r13),%ebx
  0x000000012498a1e1: inc    %r13
  0x000000012498a1e4: movabs $0x1151d5220,%r10
  0x000000012498a1ee: jmpq   *(%r10,%rbx,8)
  0x000000012498a1f2: nopw   0x0(%rax,%rax,1)
  0x000000012498a1f8: add    %al,(%rax)
  0x000000012498a1fa: add    %al,(%rax)
  0x000000012498a1fc: add    %al,(%rax)
  0x000000012498a1fe: add    %al,(%rax)

----------------------------------------------------------------------
d2l  143 d2l  [0x000000012498a220, 0x000000012498a280]  96 bytes

  0x000000012498a220: vmovsd (%rsp),%xmm0
  0x000000012498a225: add    $0x10,%rsp
  0x000000012498a229: vcvttsd2si %xmm0,%rax
  0x000000012498a22e: cmp    -0xf91a4a5(%rip),%rax        # 0x000000011506fd90 = TemplateTable::convert()::is_nan
  0x000000012498a235: jne    0x000000012498a25e
  0x000000012498a23b: test   $0xf,%esp
  0x000000012498a241: je     0x000000012498a259
  0x000000012498a247: sub    $0x8,%rsp
  0x000000012498a24b: callq  0x0000000114e96464 = SharedRuntime::d2l(double)
  0x000000012498a250: add    $0x8,%rsp
  0x000000012498a254: jmpq   0x000000012498a25e
  0x000000012498a259: callq  0x0000000114e96464 = SharedRuntime::d2l(double)
  0x000000012498a25e: movzbl 0x1(%r13),%ebx
  0x000000012498a263: inc    %r13
  0x000000012498a266: movabs $0x1151d5a20,%r10
  0x000000012498a270: jmpq   *(%r10,%rbx,8)
  0x000000012498a274: nopl   0x0(%rax)
  0x000000012498a278: add    %al,(%rax)
  0x000000012498a27a: add    %al,(%rax)
  0x000000012498a27c: add    %al,(%rax)
  0x000000012498a27e: add    %al,(%rax)

----------------------------------------------------------------------
d2f  144 d2f  [0x000000012498a2a0, 0x000000012498a2e0]  64 bytes

  0x000000012498a2a0: vmovsd (%rsp),%xmm0
  0x000000012498a2a5: add    $0x10,%rsp
  0x000000012498a2a9: vcvtsd2ss %xmm0,%xmm0,%xmm0
  0x000000012498a2ad: movzbl 0x1(%r13),%ebx
  0x000000012498a2b2: inc    %r13
  0x000000012498a2b5: movabs $0x1151d6220,%r10
  0x000000012498a2bf: jmpq   *(%r10,%rbx,8)
  0x000000012498a2c3: nopl   0x0(%rax,%rax,1)
  0x000000012498a2c8: add    %al,(%rax)
  0x000000012498a2ca: add    %al,(%rax)
  0x000000012498a2cc: add    %al,(%rax)
  0x000000012498a2ce: add    %al,(%rax)
  0x000000012498a2d0: add    %al,(%rax)
  0x000000012498a2d2: add    %al,(%rax)
  0x000000012498a2d4: add    %al,(%rax)
  0x000000012498a2d6: add    %al,(%rax)
  0x000000012498a2d8: add    %al,(%rax)
  0x000000012498a2da: add    %al,(%rax)
  0x000000012498a2dc: add    %al,(%rax)
  0x000000012498a2de: add    %al,(%rax)

----------------------------------------------------------------------
i2b  145 i2b  [0x000000012498a300, 0x000000012498a320]  32 bytes

  0x000000012498a300: mov    (%rsp),%eax
  0x000000012498a303: add    $0x8,%rsp
  0x000000012498a307: movsbl %al,%eax
  0x000000012498a30a: movzbl 0x1(%r13),%ebx
  0x000000012498a30f: inc    %r13
  0x000000012498a312: movabs $0x1151d5220,%r10
  0x000000012498a31c: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
i2c  146 i2c  [0x000000012498a340, 0x000000012498a360]  32 bytes

  0x000000012498a340: mov    (%rsp),%eax
  0x000000012498a343: add    $0x8,%rsp
  0x000000012498a347: movzwl %ax,%eax
  0x000000012498a34a: movzbl 0x1(%r13),%ebx
  0x000000012498a34f: inc    %r13
  0x000000012498a352: movabs $0x1151d5220,%r10
  0x000000012498a35c: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
i2s  147 i2s  [0x000000012498a380, 0x000000012498a3a0]  32 bytes

  0x000000012498a380: mov    (%rsp),%eax
  0x000000012498a383: add    $0x8,%rsp
  0x000000012498a387: movswl %ax,%eax
  0x000000012498a38a: movzbl 0x1(%r13),%ebx
  0x000000012498a38f: inc    %r13
  0x000000012498a392: movabs $0x1151d5220,%r10
  0x000000012498a39c: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
lcmp  148 lcmp  [0x000000012498a3c0, 0x000000012498a400]  64 bytes

  0x000000012498a3c0: mov    (%rsp),%rax
  0x000000012498a3c4: add    $0x10,%rsp
  0x000000012498a3c8: mov    (%rsp),%rdx
  0x000000012498a3cc: add    $0x10,%rsp
  0x000000012498a3d0: cmp    %rax,%rdx
  0x000000012498a3d3: mov    $0xffffffff,%eax
  0x000000012498a3d8: jl     0x000000012498a3e0
  0x000000012498a3da: setne  %al
  0x000000012498a3dd: movzbl %al,%eax
  0x000000012498a3e0: movzbl 0x1(%r13),%ebx
  0x000000012498a3e5: inc    %r13
  0x000000012498a3e8: movabs $0x1151d5220,%r10
  0x000000012498a3f2: jmpq   *(%r10,%rbx,8)
  0x000000012498a3f6: xchg   %ax,%ax
  0x000000012498a3f8: add    %al,(%rax)
  0x000000012498a3fa: add    %al,(%rax)
  0x000000012498a3fc: add    %al,(%rax)
  0x000000012498a3fe: add    %al,(%rax)

----------------------------------------------------------------------
fcmpl  149 fcmpl  [0x000000012498a420, 0x000000012498a460]  64 bytes

  0x000000012498a420: vmovss (%rsp),%xmm0
  0x000000012498a425: add    $0x8,%rsp
  0x000000012498a429: vmovss (%rsp),%xmm1
  0x000000012498a42e: add    $0x8,%rsp
  0x000000012498a432: vucomiss %xmm0,%xmm1
  0x000000012498a436: mov    $0xffffffff,%eax
  0x000000012498a43b: jp     0x000000012498a445
  0x000000012498a43d: jb     0x000000012498a445
  0x000000012498a43f: setne  %dl
  0x000000012498a442: movzbl %dl,%eax
  0x000000012498a445: movzbl 0x1(%r13),%ebx
  0x000000012498a44a: inc    %r13
  0x000000012498a44d: movabs $0x1151d5220,%r10
  0x000000012498a457: jmpq   *(%r10,%rbx,8)
  0x000000012498a45b: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
fcmpg  150 fcmpg  [0x000000012498a480, 0x000000012498a4c0]  64 bytes

  0x000000012498a480: vmovss (%rsp),%xmm0
  0x000000012498a485: add    $0x8,%rsp
  0x000000012498a489: vmovss (%rsp),%xmm1
  0x000000012498a48e: add    $0x8,%rsp
  0x000000012498a492: vucomiss %xmm0,%xmm1
  0x000000012498a496: mov    $0x1,%eax
  0x000000012498a49b: jp     0x000000012498a4a8
  0x000000012498a49d: ja     0x000000012498a4a8
  0x000000012498a49f: mov    $0x0,%eax
  0x000000012498a4a4: je     0x000000012498a4a8
  0x000000012498a4a6: dec    %eax
  0x000000012498a4a8: movzbl 0x1(%r13),%ebx
  0x000000012498a4ad: inc    %r13
  0x000000012498a4b0: movabs $0x1151d5220,%r10
  0x000000012498a4ba: jmpq   *(%r10,%rbx,8)
  0x000000012498a4be: xchg   %ax,%ax

----------------------------------------------------------------------
dcmpl  151 dcmpl  [0x000000012498a4e0, 0x000000012498a520]  64 bytes

  0x000000012498a4e0: vmovsd (%rsp),%xmm0
  0x000000012498a4e5: add    $0x10,%rsp
  0x000000012498a4e9: vmovsd (%rsp),%xmm1
  0x000000012498a4ee: add    $0x10,%rsp
  0x000000012498a4f2: vucomisd %xmm0,%xmm1
  0x000000012498a4f6: mov    $0xffffffff,%eax
  0x000000012498a4fb: jp     0x000000012498a505
  0x000000012498a4fd: jb     0x000000012498a505
  0x000000012498a4ff: setne  %dl
  0x000000012498a502: movzbl %dl,%eax
  0x000000012498a505: movzbl 0x1(%r13),%ebx
  0x000000012498a50a: inc    %r13
  0x000000012498a50d: movabs $0x1151d5220,%r10
  0x000000012498a517: jmpq   *(%r10,%rbx,8)
  0x000000012498a51b: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
dcmpg  152 dcmpg  [0x000000012498a540, 0x000000012498a580]  64 bytes

  0x000000012498a540: vmovsd (%rsp),%xmm0
  0x000000012498a545: add    $0x10,%rsp
  0x000000012498a549: vmovsd (%rsp),%xmm1
  0x000000012498a54e: add    $0x10,%rsp
  0x000000012498a552: vucomisd %xmm0,%xmm1
  0x000000012498a556: mov    $0x1,%eax
  0x000000012498a55b: jp     0x000000012498a568
  0x000000012498a55d: ja     0x000000012498a568
  0x000000012498a55f: mov    $0x0,%eax
  0x000000012498a564: je     0x000000012498a568
  0x000000012498a566: dec    %eax
  0x000000012498a568: movzbl 0x1(%r13),%ebx
  0x000000012498a56d: inc    %r13
  0x000000012498a570: movabs $0x1151d5220,%r10
  0x000000012498a57a: jmpq   *(%r10,%rbx,8)
  0x000000012498a57e: xchg   %ax,%ax

----------------------------------------------------------------------
ifeq  153 ifeq  [0x000000012498a5a0, 0x000000012498a9c0]  1056 bytes

  0x000000012498a5a0: mov    (%rsp),%eax
  0x000000012498a5a3: add    $0x8,%rsp
  0x000000012498a5a7: test   %eax,%eax
  0x000000012498a5a9: jne    0x000000012498a977
  0x000000012498a5af: mov    -0x18(%rbp),%rcx
  0x000000012498a5b3: mov    -0x28(%rbp),%rax
  0x000000012498a5b7: test   %rax,%rax
  0x000000012498a5ba: je     0x000000012498a5d8
  0x000000012498a5c0: mov    0x8(%rax),%rbx
  0x000000012498a5c4: add    $0x1,%rbx
  0x000000012498a5c8: sbb    $0x0,%rbx
  0x000000012498a5cc: mov    %rbx,0x8(%rax)
  0x000000012498a5d0: add    0x10(%rax),%rax
  0x000000012498a5d4: mov    %rax,-0x28(%rbp)
  0x000000012498a5d8: movswl 0x1(%r13),%edx
  0x000000012498a5dd: bswap  %edx
  0x000000012498a5df: sar    $0x10,%edx
  0x000000012498a5e2: movslq %edx,%rdx
  0x000000012498a5e5: add    %rdx,%r13
  0x000000012498a5e8: test   %edx,%edx
  0x000000012498a5ea: jns    0x000000012498a6ec
  0x000000012498a5f0: mov    0x18(%rcx),%rax
  0x000000012498a5f4: test   %rax,%rax
  0x000000012498a5f7: jne    0x000000012498a6ad
  0x000000012498a5fd: push   %rdx
  0x000000012498a5fe: push   %rcx
  0x000000012498a5ff: callq  0x000000012498a609
  0x000000012498a604: jmpq   0x000000012498a69e
  0x000000012498a609: mov    %rcx,%rsi
  0x000000012498a60c: lea    0x8(%rsp),%rax
  0x000000012498a611: mov    %r13,-0x40(%rbp)
  0x000000012498a615: mov    %r15,%rdi
  0x000000012498a618: vzeroupper 
  0x000000012498a61b: mov    %rbp,0x330(%r15)
  0x000000012498a622: mov    %rax,0x320(%r15)
  0x000000012498a629: test   $0xf,%esp
  0x000000012498a62f: je     0x000000012498a647
  0x000000012498a635: sub    $0x8,%rsp
  0x000000012498a639: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498a63e: add    $0x8,%rsp
  0x000000012498a642: jmpq   0x000000012498a64c
  0x000000012498a647: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498a64c: movabs $0x0,%r10
  0x000000012498a656: mov    %r10,0x320(%r15)
  0x000000012498a65d: movabs $0x0,%r10
  0x000000012498a667: mov    %r10,0x330(%r15)
  0x000000012498a66e: movabs $0x0,%r10
  0x000000012498a678: mov    %r10,0x328(%r15)
  0x000000012498a67f: vzeroupper 
  0x000000012498a682: cmpq   $0x0,0x8(%r15)
  0x000000012498a68a: je     0x000000012498a695
  0x000000012498a690: jmpq   0x0000000124975780
  0x000000012498a695: mov    -0x40(%rbp),%r13
  0x000000012498a699: mov    -0x38(%rbp),%r14
  0x000000012498a69d: retq   
  0x000000012498a69e: pop    %rcx
  0x000000012498a69f: pop    %rdx
  0x000000012498a6a0: mov    0x18(%rcx),%rax
  0x000000012498a6a4: test   %rax,%rax
  0x000000012498a6a7: je     0x000000012498a6ec
  0x000000012498a6ad: mov    0x10(%rcx),%rbx
  0x000000012498a6b1: test   %rbx,%rbx
  0x000000012498a6b4: je     0x000000012498a6d6
  0x000000012498a6b6: mov    0x108(%rbx),%eax
  0x000000012498a6bc: add    $0x8,%eax
  0x000000012498a6bf: mov    %eax,0x108(%rbx)
  0x000000012498a6c5: and    0x11c(%rbx),%eax
  0x000000012498a6cb: je     0x000000012498a806
  0x000000012498a6d1: jmpq   0x000000012498a6ec
  0x000000012498a6d6: mov    0x18(%rcx),%rcx
  0x000000012498a6da: mov    0x1c(%rcx),%eax
  0x000000012498a6dd: add    $0x8,%eax
  0x000000012498a6e0: mov    %eax,0x1c(%rcx)
  0x000000012498a6e3: and    0x34(%rcx),%eax
  0x000000012498a6e6: je     0x000000012498a806
  0x000000012498a6ec: movzbl 0x0(%r13),%ebx
  0x000000012498a6f1: testb  $0x8,0x108(%r15)
  0x000000012498a6f9: je     0x000000012498a707
  0x000000012498a6fb: movabs $0x1151dd020,%r10
  0x000000012498a705: jmp    0x000000012498a711
  0x000000012498a707: movabs $0x1151d7a20,%r10
  0x000000012498a711: jmpq   *(%r10,%rbx,8)
  0x000000012498a715: callq  0x000000012498a71f
  0x000000012498a71a: jmpq   0x000000012498a7b1
  0x000000012498a71f: lea    0x8(%rsp),%rax
  0x000000012498a724: mov    %r13,-0x40(%rbp)
  0x000000012498a728: mov    %r15,%rdi
  0x000000012498a72b: vzeroupper 
  0x000000012498a72e: mov    %rbp,0x330(%r15)
  0x000000012498a735: mov    %rax,0x320(%r15)
  0x000000012498a73c: test   $0xf,%esp
  0x000000012498a742: je     0x000000012498a75a
  0x000000012498a748: sub    $0x8,%rsp
  0x000000012498a74c: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498a751: add    $0x8,%rsp
  0x000000012498a755: jmpq   0x000000012498a75f
  0x000000012498a75a: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498a75f: movabs $0x0,%r10
  0x000000012498a769: mov    %r10,0x320(%r15)
  0x000000012498a770: movabs $0x0,%r10
  0x000000012498a77a: mov    %r10,0x330(%r15)
  0x000000012498a781: movabs $0x0,%r10
  0x000000012498a78b: mov    %r10,0x328(%r15)
  0x000000012498a792: vzeroupper 
  0x000000012498a795: cmpq   $0x0,0x8(%r15)
  0x000000012498a79d: je     0x000000012498a7a8
  0x000000012498a7a3: jmpq   0x0000000124975780
  0x000000012498a7a8: mov    -0x40(%rbp),%r13
  0x000000012498a7ac: mov    -0x38(%rbp),%r14
  0x000000012498a7b0: retq   
  0x000000012498a7b1: push   %rax
  0x000000012498a7b2: push   %rbx
  0x000000012498a7b3: mov    -0x18(%rbp),%rbx
  0x000000012498a7b7: mov    0x10(%rbx),%rax
  0x000000012498a7bb: test   %rax,%rax
  0x000000012498a7be: je     0x000000012498a7fb
  0x000000012498a7c4: mov    %r13,%rsi
  0x000000012498a7c7: mov    %rbx,%rdi
  0x000000012498a7ca: test   $0xf,%esp
  0x000000012498a7d0: je     0x000000012498a7e8
  0x000000012498a7d6: sub    $0x8,%rsp
  0x000000012498a7da: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012498a7df: add    $0x8,%rsp
  0x000000012498a7e3: jmpq   0x000000012498a7ed
  0x000000012498a7e8: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012498a7ed: mov    0x10(%rbx),%rbx
  0x000000012498a7f1: add    $0x138,%rbx
  0x000000012498a7f8: add    %rbx,%rax
  0x000000012498a7fb: mov    %rax,-0x28(%rbp)
  0x000000012498a7ff: pop    %rbx
  0x000000012498a800: pop    %rax
  0x000000012498a801: jmpq   0x000000012498a6ec
  0x000000012498a806: neg    %rdx
  0x000000012498a809: add    %r13,%rdx
  0x000000012498a80c: callq  0x000000012498a816
  0x000000012498a811: jmpq   0x000000012498a8ab
  0x000000012498a816: mov    %rdx,%rsi
  0x000000012498a819: lea    0x8(%rsp),%rax
  0x000000012498a81e: mov    %r13,-0x40(%rbp)
  0x000000012498a822: mov    %r15,%rdi
  0x000000012498a825: vzeroupper 
  0x000000012498a828: mov    %rbp,0x330(%r15)
  0x000000012498a82f: mov    %rax,0x320(%r15)
  0x000000012498a836: test   $0xf,%esp
  0x000000012498a83c: je     0x000000012498a854
  0x000000012498a842: sub    $0x8,%rsp
  0x000000012498a846: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498a84b: add    $0x8,%rsp
  0x000000012498a84f: jmpq   0x000000012498a859
  0x000000012498a854: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498a859: movabs $0x0,%r10
  0x000000012498a863: mov    %r10,0x320(%r15)
  0x000000012498a86a: movabs $0x0,%r10
  0x000000012498a874: mov    %r10,0x330(%r15)
  0x000000012498a87b: movabs $0x0,%r10
  0x000000012498a885: mov    %r10,0x328(%r15)
  0x000000012498a88c: vzeroupper 
  0x000000012498a88f: cmpq   $0x0,0x8(%r15)
  0x000000012498a897: je     0x000000012498a8a2
  0x000000012498a89d: jmpq   0x0000000124975780
  0x000000012498a8a2: mov    -0x40(%rbp),%r13
  0x000000012498a8a6: mov    -0x38(%rbp),%r14
  0x000000012498a8aa: retq   
  0x000000012498a8ab: test   %rax,%rax
  0x000000012498a8ae: je     0x000000012498a6ec
  0x000000012498a8b4: cmpb   $0x0,0x156(%rax)
  0x000000012498a8bb: jne    0x000000012498a6ec
  0x000000012498a8c1: mov    %rax,%rbx
  0x000000012498a8c4: callq  0x000000012498a8ce
  0x000000012498a8c9: jmpq   0x000000012498a960
  0x000000012498a8ce: lea    0x8(%rsp),%rax
  0x000000012498a8d3: mov    %r13,-0x40(%rbp)
  0x000000012498a8d7: mov    %r15,%rdi
  0x000000012498a8da: vzeroupper 
  0x000000012498a8dd: mov    %rbp,0x330(%r15)
  0x000000012498a8e4: mov    %rax,0x320(%r15)
  0x000000012498a8eb: test   $0xf,%esp
  0x000000012498a8f1: je     0x000000012498a909
  0x000000012498a8f7: sub    $0x8,%rsp
  0x000000012498a8fb: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x000000012498a900: add    $0x8,%rsp
  0x000000012498a904: jmpq   0x000000012498a90e
  0x000000012498a909: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x000000012498a90e: movabs $0x0,%r10
  0x000000012498a918: mov    %r10,0x320(%r15)
  0x000000012498a91f: movabs $0x0,%r10
  0x000000012498a929: mov    %r10,0x330(%r15)
  0x000000012498a930: movabs $0x0,%r10
  0x000000012498a93a: mov    %r10,0x328(%r15)
  0x000000012498a941: vzeroupper 
  0x000000012498a944: cmpq   $0x0,0x8(%r15)
  0x000000012498a94c: je     0x000000012498a957
  0x000000012498a952: jmpq   0x0000000124975780
  0x000000012498a957: mov    -0x40(%rbp),%r13
  0x000000012498a95b: mov    -0x38(%rbp),%r14
  0x000000012498a95f: retq   
  0x000000012498a960: mov    %rax,%rsi
  0x000000012498a963: mov    -0x8(%rbp),%rdx
  0x000000012498a967: leaveq 
  0x000000012498a968: pop    %rcx
  0x000000012498a969: mov    %rdx,%rsp
  0x000000012498a96c: and    $0xfffffffffffffff0,%rsp
  0x000000012498a970: push   %rcx
  0x000000012498a971: jmpq   *0x110(%rbx)
  0x000000012498a977: mov    -0x28(%rbp),%rax
  0x000000012498a97b: test   %rax,%rax
  0x000000012498a97e: je     0x000000012498a996
  0x000000012498a984: addq   $0x1,0x18(%rax)
  0x000000012498a989: sbbq   $0x0,0x18(%rax)
  0x000000012498a98e: add    $0x20,%rax
  0x000000012498a992: mov    %rax,-0x28(%rbp)
  0x000000012498a996: movzbl 0x3(%r13),%ebx
  0x000000012498a99b: add    $0x3,%r13
  0x000000012498a99f: movabs $0x1151d7a20,%r10
  0x000000012498a9a9: jmpq   *(%r10,%rbx,8)
  0x000000012498a9ad: data16 xchg %ax,%ax
  0x000000012498a9b0: add    %al,(%rax)
  0x000000012498a9b2: add    %al,(%rax)
  0x000000012498a9b4: add    %al,(%rax)
  0x000000012498a9b6: add    %al,(%rax)
  0x000000012498a9b8: add    %al,(%rax)
  0x000000012498a9ba: add    %al,(%rax)
  0x000000012498a9bc: add    %al,(%rax)
  0x000000012498a9be: add    %al,(%rax)

----------------------------------------------------------------------
ifne  154 ifne  [0x000000012498a9e0, 0x000000012498ae00]  1056 bytes

  0x000000012498a9e0: mov    (%rsp),%eax
  0x000000012498a9e3: add    $0x8,%rsp
  0x000000012498a9e7: test   %eax,%eax
  0x000000012498a9e9: je     0x000000012498adb7
  0x000000012498a9ef: mov    -0x18(%rbp),%rcx
  0x000000012498a9f3: mov    -0x28(%rbp),%rax
  0x000000012498a9f7: test   %rax,%rax
  0x000000012498a9fa: je     0x000000012498aa18
  0x000000012498aa00: mov    0x8(%rax),%rbx
  0x000000012498aa04: add    $0x1,%rbx
  0x000000012498aa08: sbb    $0x0,%rbx
  0x000000012498aa0c: mov    %rbx,0x8(%rax)
  0x000000012498aa10: add    0x10(%rax),%rax
  0x000000012498aa14: mov    %rax,-0x28(%rbp)
  0x000000012498aa18: movswl 0x1(%r13),%edx
  0x000000012498aa1d: bswap  %edx
  0x000000012498aa1f: sar    $0x10,%edx
  0x000000012498aa22: movslq %edx,%rdx
  0x000000012498aa25: add    %rdx,%r13
  0x000000012498aa28: test   %edx,%edx
  0x000000012498aa2a: jns    0x000000012498ab2c
  0x000000012498aa30: mov    0x18(%rcx),%rax
  0x000000012498aa34: test   %rax,%rax
  0x000000012498aa37: jne    0x000000012498aaed
  0x000000012498aa3d: push   %rdx
  0x000000012498aa3e: push   %rcx
  0x000000012498aa3f: callq  0x000000012498aa49
  0x000000012498aa44: jmpq   0x000000012498aade
  0x000000012498aa49: mov    %rcx,%rsi
  0x000000012498aa4c: lea    0x8(%rsp),%rax
  0x000000012498aa51: mov    %r13,-0x40(%rbp)
  0x000000012498aa55: mov    %r15,%rdi
  0x000000012498aa58: vzeroupper 
  0x000000012498aa5b: mov    %rbp,0x330(%r15)
  0x000000012498aa62: mov    %rax,0x320(%r15)
  0x000000012498aa69: test   $0xf,%esp
  0x000000012498aa6f: je     0x000000012498aa87
  0x000000012498aa75: sub    $0x8,%rsp
  0x000000012498aa79: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498aa7e: add    $0x8,%rsp
  0x000000012498aa82: jmpq   0x000000012498aa8c
  0x000000012498aa87: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498aa8c: movabs $0x0,%r10
  0x000000012498aa96: mov    %r10,0x320(%r15)
  0x000000012498aa9d: movabs $0x0,%r10
  0x000000012498aaa7: mov    %r10,0x330(%r15)
  0x000000012498aaae: movabs $0x0,%r10
  0x000000012498aab8: mov    %r10,0x328(%r15)
  0x000000012498aabf: vzeroupper 
  0x000000012498aac2: cmpq   $0x0,0x8(%r15)
  0x000000012498aaca: je     0x000000012498aad5
  0x000000012498aad0: jmpq   0x0000000124975780
  0x000000012498aad5: mov    -0x40(%rbp),%r13
  0x000000012498aad9: mov    -0x38(%rbp),%r14
  0x000000012498aadd: retq   
  0x000000012498aade: pop    %rcx
  0x000000012498aadf: pop    %rdx
  0x000000012498aae0: mov    0x18(%rcx),%rax
  0x000000012498aae4: test   %rax,%rax
  0x000000012498aae7: je     0x000000012498ab2c
  0x000000012498aaed: mov    0x10(%rcx),%rbx
  0x000000012498aaf1: test   %rbx,%rbx
  0x000000012498aaf4: je     0x000000012498ab16
  0x000000012498aaf6: mov    0x108(%rbx),%eax
  0x000000012498aafc: add    $0x8,%eax
  0x000000012498aaff: mov    %eax,0x108(%rbx)
  0x000000012498ab05: and    0x11c(%rbx),%eax
  0x000000012498ab0b: je     0x000000012498ac46
  0x000000012498ab11: jmpq   0x000000012498ab2c
  0x000000012498ab16: mov    0x18(%rcx),%rcx
  0x000000012498ab1a: mov    0x1c(%rcx),%eax
  0x000000012498ab1d: add    $0x8,%eax
  0x000000012498ab20: mov    %eax,0x1c(%rcx)
  0x000000012498ab23: and    0x34(%rcx),%eax
  0x000000012498ab26: je     0x000000012498ac46
  0x000000012498ab2c: movzbl 0x0(%r13),%ebx
  0x000000012498ab31: testb  $0x8,0x108(%r15)
  0x000000012498ab39: je     0x000000012498ab47
  0x000000012498ab3b: movabs $0x1151dd020,%r10
  0x000000012498ab45: jmp    0x000000012498ab51
  0x000000012498ab47: movabs $0x1151d7a20,%r10
  0x000000012498ab51: jmpq   *(%r10,%rbx,8)
  0x000000012498ab55: callq  0x000000012498ab5f
  0x000000012498ab5a: jmpq   0x000000012498abf1
  0x000000012498ab5f: lea    0x8(%rsp),%rax
  0x000000012498ab64: mov    %r13,-0x40(%rbp)
  0x000000012498ab68: mov    %r15,%rdi
  0x000000012498ab6b: vzeroupper 
  0x000000012498ab6e: mov    %rbp,0x330(%r15)
  0x000000012498ab75: mov    %rax,0x320(%r15)
  0x000000012498ab7c: test   $0xf,%esp
  0x000000012498ab82: je     0x000000012498ab9a
  0x000000012498ab88: sub    $0x8,%rsp
  0x000000012498ab8c: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498ab91: add    $0x8,%rsp
  0x000000012498ab95: jmpq   0x000000012498ab9f
  0x000000012498ab9a: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498ab9f: movabs $0x0,%r10
  0x000000012498aba9: mov    %r10,0x320(%r15)
  0x000000012498abb0: movabs $0x0,%r10
  0x000000012498abba: mov    %r10,0x330(%r15)
  0x000000012498abc1: movabs $0x0,%r10
  0x000000012498abcb: mov    %r10,0x328(%r15)
  0x000000012498abd2: vzeroupper 
  0x000000012498abd5: cmpq   $0x0,0x8(%r15)
  0x000000012498abdd: je     0x000000012498abe8
  0x000000012498abe3: jmpq   0x0000000124975780
  0x000000012498abe8: mov    -0x40(%rbp),%r13
  0x000000012498abec: mov    -0x38(%rbp),%r14
  0x000000012498abf0: retq   
  0x000000012498abf1: push   %rax
  0x000000012498abf2: push   %rbx
  0x000000012498abf3: mov    -0x18(%rbp),%rbx
  0x000000012498abf7: mov    0x10(%rbx),%rax
  0x000000012498abfb: test   %rax,%rax
  0x000000012498abfe: je     0x000000012498ac3b
  0x000000012498ac04: mov    %r13,%rsi
  0x000000012498ac07: mov    %rbx,%rdi
  0x000000012498ac0a: test   $0xf,%esp
  0x000000012498ac10: je     0x000000012498ac28
  0x000000012498ac16: sub    $0x8,%rsp
  0x000000012498ac1a: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012498ac1f: add    $0x8,%rsp
  0x000000012498ac23: jmpq   0x000000012498ac2d
  0x000000012498ac28: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012498ac2d: mov    0x10(%rbx),%rbx
  0x000000012498ac31: add    $0x138,%rbx
  0x000000012498ac38: add    %rbx,%rax
  0x000000012498ac3b: mov    %rax,-0x28(%rbp)
  0x000000012498ac3f: pop    %rbx
  0x000000012498ac40: pop    %rax
  0x000000012498ac41: jmpq   0x000000012498ab2c
  0x000000012498ac46: neg    %rdx
  0x000000012498ac49: add    %r13,%rdx
  0x000000012498ac4c: callq  0x000000012498ac56
  0x000000012498ac51: jmpq   0x000000012498aceb
  0x000000012498ac56: mov    %rdx,%rsi
  0x000000012498ac59: lea    0x8(%rsp),%rax
  0x000000012498ac5e: mov    %r13,-0x40(%rbp)
  0x000000012498ac62: mov    %r15,%rdi
  0x000000012498ac65: vzeroupper 
  0x000000012498ac68: mov    %rbp,0x330(%r15)
  0x000000012498ac6f: mov    %rax,0x320(%r15)
  0x000000012498ac76: test   $0xf,%esp
  0x000000012498ac7c: je     0x000000012498ac94
  0x000000012498ac82: sub    $0x8,%rsp
  0x000000012498ac86: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498ac8b: add    $0x8,%rsp
  0x000000012498ac8f: jmpq   0x000000012498ac99
  0x000000012498ac94: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498ac99: movabs $0x0,%r10
  0x000000012498aca3: mov    %r10,0x320(%r15)
  0x000000012498acaa: movabs $0x0,%r10
  0x000000012498acb4: mov    %r10,0x330(%r15)
  0x000000012498acbb: movabs $0x0,%r10
  0x000000012498acc5: mov    %r10,0x328(%r15)
  0x000000012498accc: vzeroupper 
  0x000000012498accf: cmpq   $0x0,0x8(%r15)
  0x000000012498acd7: je     0x000000012498ace2
  0x000000012498acdd: jmpq   0x0000000124975780
  0x000000012498ace2: mov    -0x40(%rbp),%r13
  0x000000012498ace6: mov    -0x38(%rbp),%r14
  0x000000012498acea: retq   
  0x000000012498aceb: test   %rax,%rax
  0x000000012498acee: je     0x000000012498ab2c
  0x000000012498acf4: cmpb   $0x0,0x156(%rax)
  0x000000012498acfb: jne    0x000000012498ab2c
  0x000000012498ad01: mov    %rax,%rbx
  0x000000012498ad04: callq  0x000000012498ad0e
  0x000000012498ad09: jmpq   0x000000012498ada0
  0x000000012498ad0e: lea    0x8(%rsp),%rax
  0x000000012498ad13: mov    %r13,-0x40(%rbp)
  0x000000012498ad17: mov    %r15,%rdi
  0x000000012498ad1a: vzeroupper 
  0x000000012498ad1d: mov    %rbp,0x330(%r15)
  0x000000012498ad24: mov    %rax,0x320(%r15)
  0x000000012498ad2b: test   $0xf,%esp
  0x000000012498ad31: je     0x000000012498ad49
  0x000000012498ad37: sub    $0x8,%rsp
  0x000000012498ad3b: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x000000012498ad40: add    $0x8,%rsp
  0x000000012498ad44: jmpq   0x000000012498ad4e
  0x000000012498ad49: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x000000012498ad4e: movabs $0x0,%r10
  0x000000012498ad58: mov    %r10,0x320(%r15)
  0x000000012498ad5f: movabs $0x0,%r10
  0x000000012498ad69: mov    %r10,0x330(%r15)
  0x000000012498ad70: movabs $0x0,%r10
  0x000000012498ad7a: mov    %r10,0x328(%r15)
  0x000000012498ad81: vzeroupper 
  0x000000012498ad84: cmpq   $0x0,0x8(%r15)
  0x000000012498ad8c: je     0x000000012498ad97
  0x000000012498ad92: jmpq   0x0000000124975780
  0x000000012498ad97: mov    -0x40(%rbp),%r13
  0x000000012498ad9b: mov    -0x38(%rbp),%r14
  0x000000012498ad9f: retq   
  0x000000012498ada0: mov    %rax,%rsi
  0x000000012498ada3: mov    -0x8(%rbp),%rdx
  0x000000012498ada7: leaveq 
  0x000000012498ada8: pop    %rcx
  0x000000012498ada9: mov    %rdx,%rsp
  0x000000012498adac: and    $0xfffffffffffffff0,%rsp
  0x000000012498adb0: push   %rcx
  0x000000012498adb1: jmpq   *0x110(%rbx)
  0x000000012498adb7: mov    -0x28(%rbp),%rax
  0x000000012498adbb: test   %rax,%rax
  0x000000012498adbe: je     0x000000012498add6
  0x000000012498adc4: addq   $0x1,0x18(%rax)
  0x000000012498adc9: sbbq   $0x0,0x18(%rax)
  0x000000012498adce: add    $0x20,%rax
  0x000000012498add2: mov    %rax,-0x28(%rbp)
  0x000000012498add6: movzbl 0x3(%r13),%ebx
  0x000000012498addb: add    $0x3,%r13
  0x000000012498addf: movabs $0x1151d7a20,%r10
  0x000000012498ade9: jmpq   *(%r10,%rbx,8)
  0x000000012498aded: data16 xchg %ax,%ax
  0x000000012498adf0: add    %al,(%rax)
  0x000000012498adf2: add    %al,(%rax)
  0x000000012498adf4: add    %al,(%rax)
  0x000000012498adf6: add    %al,(%rax)
  0x000000012498adf8: add    %al,(%rax)
  0x000000012498adfa: add    %al,(%rax)
  0x000000012498adfc: add    %al,(%rax)
  0x000000012498adfe: add    %al,(%rax)

----------------------------------------------------------------------
iflt  155 iflt  [0x000000012498ae20, 0x000000012498b240]  1056 bytes

  0x000000012498ae20: mov    (%rsp),%eax
  0x000000012498ae23: add    $0x8,%rsp
  0x000000012498ae27: test   %eax,%eax
  0x000000012498ae29: jge    0x000000012498b1f7
  0x000000012498ae2f: mov    -0x18(%rbp),%rcx
  0x000000012498ae33: mov    -0x28(%rbp),%rax
  0x000000012498ae37: test   %rax,%rax
  0x000000012498ae3a: je     0x000000012498ae58
  0x000000012498ae40: mov    0x8(%rax),%rbx
  0x000000012498ae44: add    $0x1,%rbx
  0x000000012498ae48: sbb    $0x0,%rbx
  0x000000012498ae4c: mov    %rbx,0x8(%rax)
  0x000000012498ae50: add    0x10(%rax),%rax
  0x000000012498ae54: mov    %rax,-0x28(%rbp)
  0x000000012498ae58: movswl 0x1(%r13),%edx
  0x000000012498ae5d: bswap  %edx
  0x000000012498ae5f: sar    $0x10,%edx
  0x000000012498ae62: movslq %edx,%rdx
  0x000000012498ae65: add    %rdx,%r13
  0x000000012498ae68: test   %edx,%edx
  0x000000012498ae6a: jns    0x000000012498af6c
  0x000000012498ae70: mov    0x18(%rcx),%rax
  0x000000012498ae74: test   %rax,%rax
  0x000000012498ae77: jne    0x000000012498af2d
  0x000000012498ae7d: push   %rdx
  0x000000012498ae7e: push   %rcx
  0x000000012498ae7f: callq  0x000000012498ae89
  0x000000012498ae84: jmpq   0x000000012498af1e
  0x000000012498ae89: mov    %rcx,%rsi
  0x000000012498ae8c: lea    0x8(%rsp),%rax
  0x000000012498ae91: mov    %r13,-0x40(%rbp)
  0x000000012498ae95: mov    %r15,%rdi
  0x000000012498ae98: vzeroupper 
  0x000000012498ae9b: mov    %rbp,0x330(%r15)
  0x000000012498aea2: mov    %rax,0x320(%r15)
  0x000000012498aea9: test   $0xf,%esp
  0x000000012498aeaf: je     0x000000012498aec7
  0x000000012498aeb5: sub    $0x8,%rsp
  0x000000012498aeb9: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498aebe: add    $0x8,%rsp
  0x000000012498aec2: jmpq   0x000000012498aecc
  0x000000012498aec7: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498aecc: movabs $0x0,%r10
  0x000000012498aed6: mov    %r10,0x320(%r15)
  0x000000012498aedd: movabs $0x0,%r10
  0x000000012498aee7: mov    %r10,0x330(%r15)
  0x000000012498aeee: movabs $0x0,%r10
  0x000000012498aef8: mov    %r10,0x328(%r15)
  0x000000012498aeff: vzeroupper 
  0x000000012498af02: cmpq   $0x0,0x8(%r15)
  0x000000012498af0a: je     0x000000012498af15
  0x000000012498af10: jmpq   0x0000000124975780
  0x000000012498af15: mov    -0x40(%rbp),%r13
  0x000000012498af19: mov    -0x38(%rbp),%r14
  0x000000012498af1d: retq   
  0x000000012498af1e: pop    %rcx
  0x000000012498af1f: pop    %rdx
  0x000000012498af20: mov    0x18(%rcx),%rax
  0x000000012498af24: test   %rax,%rax
  0x000000012498af27: je     0x000000012498af6c
  0x000000012498af2d: mov    0x10(%rcx),%rbx
  0x000000012498af31: test   %rbx,%rbx
  0x000000012498af34: je     0x000000012498af56
  0x000000012498af36: mov    0x108(%rbx),%eax
  0x000000012498af3c: add    $0x8,%eax
  0x000000012498af3f: mov    %eax,0x108(%rbx)
  0x000000012498af45: and    0x11c(%rbx),%eax
  0x000000012498af4b: je     0x000000012498b086
  0x000000012498af51: jmpq   0x000000012498af6c
  0x000000012498af56: mov    0x18(%rcx),%rcx
  0x000000012498af5a: mov    0x1c(%rcx),%eax
  0x000000012498af5d: add    $0x8,%eax
  0x000000012498af60: mov    %eax,0x1c(%rcx)
  0x000000012498af63: and    0x34(%rcx),%eax
  0x000000012498af66: je     0x000000012498b086
  0x000000012498af6c: movzbl 0x0(%r13),%ebx
  0x000000012498af71: testb  $0x8,0x108(%r15)
  0x000000012498af79: je     0x000000012498af87
  0x000000012498af7b: movabs $0x1151dd020,%r10
  0x000000012498af85: jmp    0x000000012498af91
  0x000000012498af87: movabs $0x1151d7a20,%r10
  0x000000012498af91: jmpq   *(%r10,%rbx,8)
  0x000000012498af95: callq  0x000000012498af9f
  0x000000012498af9a: jmpq   0x000000012498b031
  0x000000012498af9f: lea    0x8(%rsp),%rax
  0x000000012498afa4: mov    %r13,-0x40(%rbp)
  0x000000012498afa8: mov    %r15,%rdi
  0x000000012498afab: vzeroupper 
  0x000000012498afae: mov    %rbp,0x330(%r15)
  0x000000012498afb5: mov    %rax,0x320(%r15)
  0x000000012498afbc: test   $0xf,%esp
  0x000000012498afc2: je     0x000000012498afda
  0x000000012498afc8: sub    $0x8,%rsp
  0x000000012498afcc: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498afd1: add    $0x8,%rsp
  0x000000012498afd5: jmpq   0x000000012498afdf
  0x000000012498afda: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498afdf: movabs $0x0,%r10
  0x000000012498afe9: mov    %r10,0x320(%r15)
  0x000000012498aff0: movabs $0x0,%r10
  0x000000012498affa: mov    %r10,0x330(%r15)
  0x000000012498b001: movabs $0x0,%r10
  0x000000012498b00b: mov    %r10,0x328(%r15)
  0x000000012498b012: vzeroupper 
  0x000000012498b015: cmpq   $0x0,0x8(%r15)
  0x000000012498b01d: je     0x000000012498b028
  0x000000012498b023: jmpq   0x0000000124975780
  0x000000012498b028: mov    -0x40(%rbp),%r13
  0x000000012498b02c: mov    -0x38(%rbp),%r14
  0x000000012498b030: retq   
  0x000000012498b031: push   %rax
  0x000000012498b032: push   %rbx
  0x000000012498b033: mov    -0x18(%rbp),%rbx
  0x000000012498b037: mov    0x10(%rbx),%rax
  0x000000012498b03b: test   %rax,%rax
  0x000000012498b03e: je     0x000000012498b07b
  0x000000012498b044: mov    %r13,%rsi
  0x000000012498b047: mov    %rbx,%rdi
  0x000000012498b04a: test   $0xf,%esp
  0x000000012498b050: je     0x000000012498b068
  0x000000012498b056: sub    $0x8,%rsp
  0x000000012498b05a: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012498b05f: add    $0x8,%rsp
  0x000000012498b063: jmpq   0x000000012498b06d
  0x000000012498b068: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012498b06d: mov    0x10(%rbx),%rbx
  0x000000012498b071: add    $0x138,%rbx
  0x000000012498b078: add    %rbx,%rax
  0x000000012498b07b: mov    %rax,-0x28(%rbp)
  0x000000012498b07f: pop    %rbx
  0x000000012498b080: pop    %rax
  0x000000012498b081: jmpq   0x000000012498af6c
  0x000000012498b086: neg    %rdx
  0x000000012498b089: add    %r13,%rdx
  0x000000012498b08c: callq  0x000000012498b096
  0x000000012498b091: jmpq   0x000000012498b12b
  0x000000012498b096: mov    %rdx,%rsi
  0x000000012498b099: lea    0x8(%rsp),%rax
  0x000000012498b09e: mov    %r13,-0x40(%rbp)
  0x000000012498b0a2: mov    %r15,%rdi
  0x000000012498b0a5: vzeroupper 
  0x000000012498b0a8: mov    %rbp,0x330(%r15)
  0x000000012498b0af: mov    %rax,0x320(%r15)
  0x000000012498b0b6: test   $0xf,%esp
  0x000000012498b0bc: je     0x000000012498b0d4
  0x000000012498b0c2: sub    $0x8,%rsp
  0x000000012498b0c6: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498b0cb: add    $0x8,%rsp
  0x000000012498b0cf: jmpq   0x000000012498b0d9
  0x000000012498b0d4: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498b0d9: movabs $0x0,%r10
  0x000000012498b0e3: mov    %r10,0x320(%r15)
  0x000000012498b0ea: movabs $0x0,%r10
  0x000000012498b0f4: mov    %r10,0x330(%r15)
  0x000000012498b0fb: movabs $0x0,%r10
  0x000000012498b105: mov    %r10,0x328(%r15)
  0x000000012498b10c: vzeroupper 
  0x000000012498b10f: cmpq   $0x0,0x8(%r15)
  0x000000012498b117: je     0x000000012498b122
  0x000000012498b11d: jmpq   0x0000000124975780
  0x000000012498b122: mov    -0x40(%rbp),%r13
  0x000000012498b126: mov    -0x38(%rbp),%r14
  0x000000012498b12a: retq   
  0x000000012498b12b: test   %rax,%rax
  0x000000012498b12e: je     0x000000012498af6c
  0x000000012498b134: cmpb   $0x0,0x156(%rax)
  0x000000012498b13b: jne    0x000000012498af6c
  0x000000012498b141: mov    %rax,%rbx
  0x000000012498b144: callq  0x000000012498b14e
  0x000000012498b149: jmpq   0x000000012498b1e0
  0x000000012498b14e: lea    0x8(%rsp),%rax
  0x000000012498b153: mov    %r13,-0x40(%rbp)
  0x000000012498b157: mov    %r15,%rdi
  0x000000012498b15a: vzeroupper 
  0x000000012498b15d: mov    %rbp,0x330(%r15)
  0x000000012498b164: mov    %rax,0x320(%r15)
  0x000000012498b16b: test   $0xf,%esp
  0x000000012498b171: je     0x000000012498b189
  0x000000012498b177: sub    $0x8,%rsp
  0x000000012498b17b: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x000000012498b180: add    $0x8,%rsp
  0x000000012498b184: jmpq   0x000000012498b18e
  0x000000012498b189: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x000000012498b18e: movabs $0x0,%r10
  0x000000012498b198: mov    %r10,0x320(%r15)
  0x000000012498b19f: movabs $0x0,%r10
  0x000000012498b1a9: mov    %r10,0x330(%r15)
  0x000000012498b1b0: movabs $0x0,%r10
  0x000000012498b1ba: mov    %r10,0x328(%r15)
  0x000000012498b1c1: vzeroupper 
  0x000000012498b1c4: cmpq   $0x0,0x8(%r15)
  0x000000012498b1cc: je     0x000000012498b1d7
  0x000000012498b1d2: jmpq   0x0000000124975780
  0x000000012498b1d7: mov    -0x40(%rbp),%r13
  0x000000012498b1db: mov    -0x38(%rbp),%r14
  0x000000012498b1df: retq   
  0x000000012498b1e0: mov    %rax,%rsi
  0x000000012498b1e3: mov    -0x8(%rbp),%rdx
  0x000000012498b1e7: leaveq 
  0x000000012498b1e8: pop    %rcx
  0x000000012498b1e9: mov    %rdx,%rsp
  0x000000012498b1ec: and    $0xfffffffffffffff0,%rsp
  0x000000012498b1f0: push   %rcx
  0x000000012498b1f1: jmpq   *0x110(%rbx)
  0x000000012498b1f7: mov    -0x28(%rbp),%rax
  0x000000012498b1fb: test   %rax,%rax
  0x000000012498b1fe: je     0x000000012498b216
  0x000000012498b204: addq   $0x1,0x18(%rax)
  0x000000012498b209: sbbq   $0x0,0x18(%rax)
  0x000000012498b20e: add    $0x20,%rax
  0x000000012498b212: mov    %rax,-0x28(%rbp)
  0x000000012498b216: movzbl 0x3(%r13),%ebx
  0x000000012498b21b: add    $0x3,%r13
  0x000000012498b21f: movabs $0x1151d7a20,%r10
  0x000000012498b229: jmpq   *(%r10,%rbx,8)
  0x000000012498b22d: data16 xchg %ax,%ax
  0x000000012498b230: add    %al,(%rax)
  0x000000012498b232: add    %al,(%rax)
  0x000000012498b234: add    %al,(%rax)
  0x000000012498b236: add    %al,(%rax)
  0x000000012498b238: add    %al,(%rax)
  0x000000012498b23a: add    %al,(%rax)
  0x000000012498b23c: add    %al,(%rax)
  0x000000012498b23e: add    %al,(%rax)

----------------------------------------------------------------------
ifge  156 ifge  [0x000000012498b260, 0x000000012498b680]  1056 bytes

  0x000000012498b260: mov    (%rsp),%eax
  0x000000012498b263: add    $0x8,%rsp
  0x000000012498b267: test   %eax,%eax
  0x000000012498b269: jl     0x000000012498b637
  0x000000012498b26f: mov    -0x18(%rbp),%rcx
  0x000000012498b273: mov    -0x28(%rbp),%rax
  0x000000012498b277: test   %rax,%rax
  0x000000012498b27a: je     0x000000012498b298
  0x000000012498b280: mov    0x8(%rax),%rbx
  0x000000012498b284: add    $0x1,%rbx
  0x000000012498b288: sbb    $0x0,%rbx
  0x000000012498b28c: mov    %rbx,0x8(%rax)
  0x000000012498b290: add    0x10(%rax),%rax
  0x000000012498b294: mov    %rax,-0x28(%rbp)
  0x000000012498b298: movswl 0x1(%r13),%edx
  0x000000012498b29d: bswap  %edx
  0x000000012498b29f: sar    $0x10,%edx
  0x000000012498b2a2: movslq %edx,%rdx
  0x000000012498b2a5: add    %rdx,%r13
  0x000000012498b2a8: test   %edx,%edx
  0x000000012498b2aa: jns    0x000000012498b3ac
  0x000000012498b2b0: mov    0x18(%rcx),%rax
  0x000000012498b2b4: test   %rax,%rax
  0x000000012498b2b7: jne    0x000000012498b36d
  0x000000012498b2bd: push   %rdx
  0x000000012498b2be: push   %rcx
  0x000000012498b2bf: callq  0x000000012498b2c9
  0x000000012498b2c4: jmpq   0x000000012498b35e
  0x000000012498b2c9: mov    %rcx,%rsi
  0x000000012498b2cc: lea    0x8(%rsp),%rax
  0x000000012498b2d1: mov    %r13,-0x40(%rbp)
  0x000000012498b2d5: mov    %r15,%rdi
  0x000000012498b2d8: vzeroupper 
  0x000000012498b2db: mov    %rbp,0x330(%r15)
  0x000000012498b2e2: mov    %rax,0x320(%r15)
  0x000000012498b2e9: test   $0xf,%esp
  0x000000012498b2ef: je     0x000000012498b307
  0x000000012498b2f5: sub    $0x8,%rsp
  0x000000012498b2f9: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498b2fe: add    $0x8,%rsp
  0x000000012498b302: jmpq   0x000000012498b30c
  0x000000012498b307: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498b30c: movabs $0x0,%r10
  0x000000012498b316: mov    %r10,0x320(%r15)
  0x000000012498b31d: movabs $0x0,%r10
  0x000000012498b327: mov    %r10,0x330(%r15)
  0x000000012498b32e: movabs $0x0,%r10
  0x000000012498b338: mov    %r10,0x328(%r15)
  0x000000012498b33f: vzeroupper 
  0x000000012498b342: cmpq   $0x0,0x8(%r15)
  0x000000012498b34a: je     0x000000012498b355
  0x000000012498b350: jmpq   0x0000000124975780
  0x000000012498b355: mov    -0x40(%rbp),%r13
  0x000000012498b359: mov    -0x38(%rbp),%r14
  0x000000012498b35d: retq   
  0x000000012498b35e: pop    %rcx
  0x000000012498b35f: pop    %rdx
  0x000000012498b360: mov    0x18(%rcx),%rax
  0x000000012498b364: test   %rax,%rax
  0x000000012498b367: je     0x000000012498b3ac
  0x000000012498b36d: mov    0x10(%rcx),%rbx
  0x000000012498b371: test   %rbx,%rbx
  0x000000012498b374: je     0x000000012498b396
  0x000000012498b376: mov    0x108(%rbx),%eax
  0x000000012498b37c: add    $0x8,%eax
  0x000000012498b37f: mov    %eax,0x108(%rbx)
  0x000000012498b385: and    0x11c(%rbx),%eax
  0x000000012498b38b: je     0x000000012498b4c6
  0x000000012498b391: jmpq   0x000000012498b3ac
  0x000000012498b396: mov    0x18(%rcx),%rcx
  0x000000012498b39a: mov    0x1c(%rcx),%eax
  0x000000012498b39d: add    $0x8,%eax
  0x000000012498b3a0: mov    %eax,0x1c(%rcx)
  0x000000012498b3a3: and    0x34(%rcx),%eax
  0x000000012498b3a6: je     0x000000012498b4c6
  0x000000012498b3ac: movzbl 0x0(%r13),%ebx
  0x000000012498b3b1: testb  $0x8,0x108(%r15)
  0x000000012498b3b9: je     0x000000012498b3c7
  0x000000012498b3bb: movabs $0x1151dd020,%r10
  0x000000012498b3c5: jmp    0x000000012498b3d1
  0x000000012498b3c7: movabs $0x1151d7a20,%r10
  0x000000012498b3d1: jmpq   *(%r10,%rbx,8)
  0x000000012498b3d5: callq  0x000000012498b3df
  0x000000012498b3da: jmpq   0x000000012498b471
  0x000000012498b3df: lea    0x8(%rsp),%rax
  0x000000012498b3e4: mov    %r13,-0x40(%rbp)
  0x000000012498b3e8: mov    %r15,%rdi
  0x000000012498b3eb: vzeroupper 
  0x000000012498b3ee: mov    %rbp,0x330(%r15)
  0x000000012498b3f5: mov    %rax,0x320(%r15)
  0x000000012498b3fc: test   $0xf,%esp
  0x000000012498b402: je     0x000000012498b41a
  0x000000012498b408: sub    $0x8,%rsp
  0x000000012498b40c: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498b411: add    $0x8,%rsp
  0x000000012498b415: jmpq   0x000000012498b41f
  0x000000012498b41a: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498b41f: movabs $0x0,%r10
  0x000000012498b429: mov    %r10,0x320(%r15)
  0x000000012498b430: movabs $0x0,%r10
  0x000000012498b43a: mov    %r10,0x330(%r15)
  0x000000012498b441: movabs $0x0,%r10
  0x000000012498b44b: mov    %r10,0x328(%r15)
  0x000000012498b452: vzeroupper 
  0x000000012498b455: cmpq   $0x0,0x8(%r15)
  0x000000012498b45d: je     0x000000012498b468
  0x000000012498b463: jmpq   0x0000000124975780
  0x000000012498b468: mov    -0x40(%rbp),%r13
  0x000000012498b46c: mov    -0x38(%rbp),%r14
  0x000000012498b470: retq   
  0x000000012498b471: push   %rax
  0x000000012498b472: push   %rbx
  0x000000012498b473: mov    -0x18(%rbp),%rbx
  0x000000012498b477: mov    0x10(%rbx),%rax
  0x000000012498b47b: test   %rax,%rax
  0x000000012498b47e: je     0x000000012498b4bb
  0x000000012498b484: mov    %r13,%rsi
  0x000000012498b487: mov    %rbx,%rdi
  0x000000012498b48a: test   $0xf,%esp
  0x000000012498b490: je     0x000000012498b4a8
  0x000000012498b496: sub    $0x8,%rsp
  0x000000012498b49a: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012498b49f: add    $0x8,%rsp
  0x000000012498b4a3: jmpq   0x000000012498b4ad
  0x000000012498b4a8: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012498b4ad: mov    0x10(%rbx),%rbx
  0x000000012498b4b1: add    $0x138,%rbx
  0x000000012498b4b8: add    %rbx,%rax
  0x000000012498b4bb: mov    %rax,-0x28(%rbp)
  0x000000012498b4bf: pop    %rbx
  0x000000012498b4c0: pop    %rax
  0x000000012498b4c1: jmpq   0x000000012498b3ac
  0x000000012498b4c6: neg    %rdx
  0x000000012498b4c9: add    %r13,%rdx
  0x000000012498b4cc: callq  0x000000012498b4d6
  0x000000012498b4d1: jmpq   0x000000012498b56b
  0x000000012498b4d6: mov    %rdx,%rsi
  0x000000012498b4d9: lea    0x8(%rsp),%rax
  0x000000012498b4de: mov    %r13,-0x40(%rbp)
  0x000000012498b4e2: mov    %r15,%rdi
  0x000000012498b4e5: vzeroupper 
  0x000000012498b4e8: mov    %rbp,0x330(%r15)
  0x000000012498b4ef: mov    %rax,0x320(%r15)
  0x000000012498b4f6: test   $0xf,%esp
  0x000000012498b4fc: je     0x000000012498b514
  0x000000012498b502: sub    $0x8,%rsp
  0x000000012498b506: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498b50b: add    $0x8,%rsp
  0x000000012498b50f: jmpq   0x000000012498b519
  0x000000012498b514: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498b519: movabs $0x0,%r10
  0x000000012498b523: mov    %r10,0x320(%r15)
  0x000000012498b52a: movabs $0x0,%r10
  0x000000012498b534: mov    %r10,0x330(%r15)
  0x000000012498b53b: movabs $0x0,%r10
  0x000000012498b545: mov    %r10,0x328(%r15)
  0x000000012498b54c: vzeroupper 
  0x000000012498b54f: cmpq   $0x0,0x8(%r15)
  0x000000012498b557: je     0x000000012498b562
  0x000000012498b55d: jmpq   0x0000000124975780
  0x000000012498b562: mov    -0x40(%rbp),%r13
  0x000000012498b566: mov    -0x38(%rbp),%r14
  0x000000012498b56a: retq   
  0x000000012498b56b: test   %rax,%rax
  0x000000012498b56e: je     0x000000012498b3ac
  0x000000012498b574: cmpb   $0x0,0x156(%rax)
  0x000000012498b57b: jne    0x000000012498b3ac
  0x000000012498b581: mov    %rax,%rbx
  0x000000012498b584: callq  0x000000012498b58e
  0x000000012498b589: jmpq   0x000000012498b620
  0x000000012498b58e: lea    0x8(%rsp),%rax
  0x000000012498b593: mov    %r13,-0x40(%rbp)
  0x000000012498b597: mov    %r15,%rdi
  0x000000012498b59a: vzeroupper 
  0x000000012498b59d: mov    %rbp,0x330(%r15)
  0x000000012498b5a4: mov    %rax,0x320(%r15)
  0x000000012498b5ab: test   $0xf,%esp
  0x000000012498b5b1: je     0x000000012498b5c9
  0x000000012498b5b7: sub    $0x8,%rsp
  0x000000012498b5bb: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x000000012498b5c0: add    $0x8,%rsp
  0x000000012498b5c4: jmpq   0x000000012498b5ce
  0x000000012498b5c9: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x000000012498b5ce: movabs $0x0,%r10
  0x000000012498b5d8: mov    %r10,0x320(%r15)
  0x000000012498b5df: movabs $0x0,%r10
  0x000000012498b5e9: mov    %r10,0x330(%r15)
  0x000000012498b5f0: movabs $0x0,%r10
  0x000000012498b5fa: mov    %r10,0x328(%r15)
  0x000000012498b601: vzeroupper 
  0x000000012498b604: cmpq   $0x0,0x8(%r15)
  0x000000012498b60c: je     0x000000012498b617
  0x000000012498b612: jmpq   0x0000000124975780
  0x000000012498b617: mov    -0x40(%rbp),%r13
  0x000000012498b61b: mov    -0x38(%rbp),%r14
  0x000000012498b61f: retq   
  0x000000012498b620: mov    %rax,%rsi
  0x000000012498b623: mov    -0x8(%rbp),%rdx
  0x000000012498b627: leaveq 
  0x000000012498b628: pop    %rcx
  0x000000012498b629: mov    %rdx,%rsp
  0x000000012498b62c: and    $0xfffffffffffffff0,%rsp
  0x000000012498b630: push   %rcx
  0x000000012498b631: jmpq   *0x110(%rbx)
  0x000000012498b637: mov    -0x28(%rbp),%rax
  0x000000012498b63b: test   %rax,%rax
  0x000000012498b63e: je     0x000000012498b656
  0x000000012498b644: addq   $0x1,0x18(%rax)
  0x000000012498b649: sbbq   $0x0,0x18(%rax)
  0x000000012498b64e: add    $0x20,%rax
  0x000000012498b652: mov    %rax,-0x28(%rbp)
  0x000000012498b656: movzbl 0x3(%r13),%ebx
  0x000000012498b65b: add    $0x3,%r13
  0x000000012498b65f: movabs $0x1151d7a20,%r10
  0x000000012498b669: jmpq   *(%r10,%rbx,8)
  0x000000012498b66d: data16 xchg %ax,%ax
  0x000000012498b670: add    %al,(%rax)
  0x000000012498b672: add    %al,(%rax)
  0x000000012498b674: add    %al,(%rax)
  0x000000012498b676: add    %al,(%rax)
  0x000000012498b678: add    %al,(%rax)
  0x000000012498b67a: add    %al,(%rax)
  0x000000012498b67c: add    %al,(%rax)
  0x000000012498b67e: add    %al,(%rax)

----------------------------------------------------------------------
ifgt  157 ifgt  [0x000000012498b6a0, 0x000000012498bac0]  1056 bytes

  0x000000012498b6a0: mov    (%rsp),%eax
  0x000000012498b6a3: add    $0x8,%rsp
  0x000000012498b6a7: test   %eax,%eax
  0x000000012498b6a9: jle    0x000000012498ba77
  0x000000012498b6af: mov    -0x18(%rbp),%rcx
  0x000000012498b6b3: mov    -0x28(%rbp),%rax
  0x000000012498b6b7: test   %rax,%rax
  0x000000012498b6ba: je     0x000000012498b6d8
  0x000000012498b6c0: mov    0x8(%rax),%rbx
  0x000000012498b6c4: add    $0x1,%rbx
  0x000000012498b6c8: sbb    $0x0,%rbx
  0x000000012498b6cc: mov    %rbx,0x8(%rax)
  0x000000012498b6d0: add    0x10(%rax),%rax
  0x000000012498b6d4: mov    %rax,-0x28(%rbp)
  0x000000012498b6d8: movswl 0x1(%r13),%edx
  0x000000012498b6dd: bswap  %edx
  0x000000012498b6df: sar    $0x10,%edx
  0x000000012498b6e2: movslq %edx,%rdx
  0x000000012498b6e5: add    %rdx,%r13
  0x000000012498b6e8: test   %edx,%edx
  0x000000012498b6ea: jns    0x000000012498b7ec
  0x000000012498b6f0: mov    0x18(%rcx),%rax
  0x000000012498b6f4: test   %rax,%rax
  0x000000012498b6f7: jne    0x000000012498b7ad
  0x000000012498b6fd: push   %rdx
  0x000000012498b6fe: push   %rcx
  0x000000012498b6ff: callq  0x000000012498b709
  0x000000012498b704: jmpq   0x000000012498b79e
  0x000000012498b709: mov    %rcx,%rsi
  0x000000012498b70c: lea    0x8(%rsp),%rax
  0x000000012498b711: mov    %r13,-0x40(%rbp)
  0x000000012498b715: mov    %r15,%rdi
  0x000000012498b718: vzeroupper 
  0x000000012498b71b: mov    %rbp,0x330(%r15)
  0x000000012498b722: mov    %rax,0x320(%r15)
  0x000000012498b729: test   $0xf,%esp
  0x000000012498b72f: je     0x000000012498b747
  0x000000012498b735: sub    $0x8,%rsp
  0x000000012498b739: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498b73e: add    $0x8,%rsp
  0x000000012498b742: jmpq   0x000000012498b74c
  0x000000012498b747: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498b74c: movabs $0x0,%r10
  0x000000012498b756: mov    %r10,0x320(%r15)
  0x000000012498b75d: movabs $0x0,%r10
  0x000000012498b767: mov    %r10,0x330(%r15)
  0x000000012498b76e: movabs $0x0,%r10
  0x000000012498b778: mov    %r10,0x328(%r15)
  0x000000012498b77f: vzeroupper 
  0x000000012498b782: cmpq   $0x0,0x8(%r15)
  0x000000012498b78a: je     0x000000012498b795
  0x000000012498b790: jmpq   0x0000000124975780
  0x000000012498b795: mov    -0x40(%rbp),%r13
  0x000000012498b799: mov    -0x38(%rbp),%r14
  0x000000012498b79d: retq   
  0x000000012498b79e: pop    %rcx
  0x000000012498b79f: pop    %rdx
  0x000000012498b7a0: mov    0x18(%rcx),%rax
  0x000000012498b7a4: test   %rax,%rax
  0x000000012498b7a7: je     0x000000012498b7ec
  0x000000012498b7ad: mov    0x10(%rcx),%rbx
  0x000000012498b7b1: test   %rbx,%rbx
  0x000000012498b7b4: je     0x000000012498b7d6
  0x000000012498b7b6: mov    0x108(%rbx),%eax
  0x000000012498b7bc: add    $0x8,%eax
  0x000000012498b7bf: mov    %eax,0x108(%rbx)
  0x000000012498b7c5: and    0x11c(%rbx),%eax
  0x000000012498b7cb: je     0x000000012498b906
  0x000000012498b7d1: jmpq   0x000000012498b7ec
  0x000000012498b7d6: mov    0x18(%rcx),%rcx
  0x000000012498b7da: mov    0x1c(%rcx),%eax
  0x000000012498b7dd: add    $0x8,%eax
  0x000000012498b7e0: mov    %eax,0x1c(%rcx)
  0x000000012498b7e3: and    0x34(%rcx),%eax
  0x000000012498b7e6: je     0x000000012498b906
  0x000000012498b7ec: movzbl 0x0(%r13),%ebx
  0x000000012498b7f1: testb  $0x8,0x108(%r15)
  0x000000012498b7f9: je     0x000000012498b807
  0x000000012498b7fb: movabs $0x1151dd020,%r10
  0x000000012498b805: jmp    0x000000012498b811
  0x000000012498b807: movabs $0x1151d7a20,%r10
  0x000000012498b811: jmpq   *(%r10,%rbx,8)
  0x000000012498b815: callq  0x000000012498b81f
  0x000000012498b81a: jmpq   0x000000012498b8b1
  0x000000012498b81f: lea    0x8(%rsp),%rax
  0x000000012498b824: mov    %r13,-0x40(%rbp)
  0x000000012498b828: mov    %r15,%rdi
  0x000000012498b82b: vzeroupper 
  0x000000012498b82e: mov    %rbp,0x330(%r15)
  0x000000012498b835: mov    %rax,0x320(%r15)
  0x000000012498b83c: test   $0xf,%esp
  0x000000012498b842: je     0x000000012498b85a
  0x000000012498b848: sub    $0x8,%rsp
  0x000000012498b84c: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498b851: add    $0x8,%rsp
  0x000000012498b855: jmpq   0x000000012498b85f
  0x000000012498b85a: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498b85f: movabs $0x0,%r10
  0x000000012498b869: mov    %r10,0x320(%r15)
  0x000000012498b870: movabs $0x0,%r10
  0x000000012498b87a: mov    %r10,0x330(%r15)
  0x000000012498b881: movabs $0x0,%r10
  0x000000012498b88b: mov    %r10,0x328(%r15)
  0x000000012498b892: vzeroupper 
  0x000000012498b895: cmpq   $0x0,0x8(%r15)
  0x000000012498b89d: je     0x000000012498b8a8
  0x000000012498b8a3: jmpq   0x0000000124975780
  0x000000012498b8a8: mov    -0x40(%rbp),%r13
  0x000000012498b8ac: mov    -0x38(%rbp),%r14
  0x000000012498b8b0: retq   
  0x000000012498b8b1: push   %rax
  0x000000012498b8b2: push   %rbx
  0x000000012498b8b3: mov    -0x18(%rbp),%rbx
  0x000000012498b8b7: mov    0x10(%rbx),%rax
  0x000000012498b8bb: test   %rax,%rax
  0x000000012498b8be: je     0x000000012498b8fb
  0x000000012498b8c4: mov    %r13,%rsi
  0x000000012498b8c7: mov    %rbx,%rdi
  0x000000012498b8ca: test   $0xf,%esp
  0x000000012498b8d0: je     0x000000012498b8e8
  0x000000012498b8d6: sub    $0x8,%rsp
  0x000000012498b8da: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012498b8df: add    $0x8,%rsp
  0x000000012498b8e3: jmpq   0x000000012498b8ed
  0x000000012498b8e8: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012498b8ed: mov    0x10(%rbx),%rbx
  0x000000012498b8f1: add    $0x138,%rbx
  0x000000012498b8f8: add    %rbx,%rax
  0x000000012498b8fb: mov    %rax,-0x28(%rbp)
  0x000000012498b8ff: pop    %rbx
  0x000000012498b900: pop    %rax
  0x000000012498b901: jmpq   0x000000012498b7ec
  0x000000012498b906: neg    %rdx
  0x000000012498b909: add    %r13,%rdx
  0x000000012498b90c: callq  0x000000012498b916
  0x000000012498b911: jmpq   0x000000012498b9ab
  0x000000012498b916: mov    %rdx,%rsi
  0x000000012498b919: lea    0x8(%rsp),%rax
  0x000000012498b91e: mov    %r13,-0x40(%rbp)
  0x000000012498b922: mov    %r15,%rdi
  0x000000012498b925: vzeroupper 
  0x000000012498b928: mov    %rbp,0x330(%r15)
  0x000000012498b92f: mov    %rax,0x320(%r15)
  0x000000012498b936: test   $0xf,%esp
  0x000000012498b93c: je     0x000000012498b954
  0x000000012498b942: sub    $0x8,%rsp
  0x000000012498b946: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498b94b: add    $0x8,%rsp
  0x000000012498b94f: jmpq   0x000000012498b959
  0x000000012498b954: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498b959: movabs $0x0,%r10
  0x000000012498b963: mov    %r10,0x320(%r15)
  0x000000012498b96a: movabs $0x0,%r10
  0x000000012498b974: mov    %r10,0x330(%r15)
  0x000000012498b97b: movabs $0x0,%r10
  0x000000012498b985: mov    %r10,0x328(%r15)
  0x000000012498b98c: vzeroupper 
  0x000000012498b98f: cmpq   $0x0,0x8(%r15)
  0x000000012498b997: je     0x000000012498b9a2
  0x000000012498b99d: jmpq   0x0000000124975780
  0x000000012498b9a2: mov    -0x40(%rbp),%r13
  0x000000012498b9a6: mov    -0x38(%rbp),%r14
  0x000000012498b9aa: retq   
  0x000000012498b9ab: test   %rax,%rax
  0x000000012498b9ae: je     0x000000012498b7ec
  0x000000012498b9b4: cmpb   $0x0,0x156(%rax)
  0x000000012498b9bb: jne    0x000000012498b7ec
  0x000000012498b9c1: mov    %rax,%rbx
  0x000000012498b9c4: callq  0x000000012498b9ce
  0x000000012498b9c9: jmpq   0x000000012498ba60
  0x000000012498b9ce: lea    0x8(%rsp),%rax
  0x000000012498b9d3: mov    %r13,-0x40(%rbp)
  0x000000012498b9d7: mov    %r15,%rdi
  0x000000012498b9da: vzeroupper 
  0x000000012498b9dd: mov    %rbp,0x330(%r15)
  0x000000012498b9e4: mov    %rax,0x320(%r15)
  0x000000012498b9eb: test   $0xf,%esp
  0x000000012498b9f1: je     0x000000012498ba09
  0x000000012498b9f7: sub    $0x8,%rsp
  0x000000012498b9fb: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x000000012498ba00: add    $0x8,%rsp
  0x000000012498ba04: jmpq   0x000000012498ba0e
  0x000000012498ba09: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x000000012498ba0e: movabs $0x0,%r10
  0x000000012498ba18: mov    %r10,0x320(%r15)
  0x000000012498ba1f: movabs $0x0,%r10
  0x000000012498ba29: mov    %r10,0x330(%r15)
  0x000000012498ba30: movabs $0x0,%r10
  0x000000012498ba3a: mov    %r10,0x328(%r15)
  0x000000012498ba41: vzeroupper 
  0x000000012498ba44: cmpq   $0x0,0x8(%r15)
  0x000000012498ba4c: je     0x000000012498ba57
  0x000000012498ba52: jmpq   0x0000000124975780
  0x000000012498ba57: mov    -0x40(%rbp),%r13
  0x000000012498ba5b: mov    -0x38(%rbp),%r14
  0x000000012498ba5f: retq   
  0x000000012498ba60: mov    %rax,%rsi
  0x000000012498ba63: mov    -0x8(%rbp),%rdx
  0x000000012498ba67: leaveq 
  0x000000012498ba68: pop    %rcx
  0x000000012498ba69: mov    %rdx,%rsp
  0x000000012498ba6c: and    $0xfffffffffffffff0,%rsp
  0x000000012498ba70: push   %rcx
  0x000000012498ba71: jmpq   *0x110(%rbx)
  0x000000012498ba77: mov    -0x28(%rbp),%rax
  0x000000012498ba7b: test   %rax,%rax
  0x000000012498ba7e: je     0x000000012498ba96
  0x000000012498ba84: addq   $0x1,0x18(%rax)
  0x000000012498ba89: sbbq   $0x0,0x18(%rax)
  0x000000012498ba8e: add    $0x20,%rax
  0x000000012498ba92: mov    %rax,-0x28(%rbp)
  0x000000012498ba96: movzbl 0x3(%r13),%ebx
  0x000000012498ba9b: add    $0x3,%r13
  0x000000012498ba9f: movabs $0x1151d7a20,%r10
  0x000000012498baa9: jmpq   *(%r10,%rbx,8)
  0x000000012498baad: data16 xchg %ax,%ax
  0x000000012498bab0: add    %al,(%rax)
  0x000000012498bab2: add    %al,(%rax)
  0x000000012498bab4: add    %al,(%rax)
  0x000000012498bab6: add    %al,(%rax)
  0x000000012498bab8: add    %al,(%rax)
  0x000000012498baba: add    %al,(%rax)
  0x000000012498babc: add    %al,(%rax)
  0x000000012498babe: add    %al,(%rax)

----------------------------------------------------------------------
ifle  158 ifle  [0x000000012498bae0, 0x000000012498bf00]  1056 bytes

  0x000000012498bae0: mov    (%rsp),%eax
  0x000000012498bae3: add    $0x8,%rsp
  0x000000012498bae7: test   %eax,%eax
  0x000000012498bae9: jg     0x000000012498beb7
  0x000000012498baef: mov    -0x18(%rbp),%rcx
  0x000000012498baf3: mov    -0x28(%rbp),%rax
  0x000000012498baf7: test   %rax,%rax
  0x000000012498bafa: je     0x000000012498bb18
  0x000000012498bb00: mov    0x8(%rax),%rbx
  0x000000012498bb04: add    $0x1,%rbx
  0x000000012498bb08: sbb    $0x0,%rbx
  0x000000012498bb0c: mov    %rbx,0x8(%rax)
  0x000000012498bb10: add    0x10(%rax),%rax
  0x000000012498bb14: mov    %rax,-0x28(%rbp)
  0x000000012498bb18: movswl 0x1(%r13),%edx
  0x000000012498bb1d: bswap  %edx
  0x000000012498bb1f: sar    $0x10,%edx
  0x000000012498bb22: movslq %edx,%rdx
  0x000000012498bb25: add    %rdx,%r13
  0x000000012498bb28: test   %edx,%edx
  0x000000012498bb2a: jns    0x000000012498bc2c
  0x000000012498bb30: mov    0x18(%rcx),%rax
  0x000000012498bb34: test   %rax,%rax
  0x000000012498bb37: jne    0x000000012498bbed
  0x000000012498bb3d: push   %rdx
  0x000000012498bb3e: push   %rcx
  0x000000012498bb3f: callq  0x000000012498bb49
  0x000000012498bb44: jmpq   0x000000012498bbde
  0x000000012498bb49: mov    %rcx,%rsi
  0x000000012498bb4c: lea    0x8(%rsp),%rax
  0x000000012498bb51: mov    %r13,-0x40(%rbp)
  0x000000012498bb55: mov    %r15,%rdi
  0x000000012498bb58: vzeroupper 
  0x000000012498bb5b: mov    %rbp,0x330(%r15)
  0x000000012498bb62: mov    %rax,0x320(%r15)
  0x000000012498bb69: test   $0xf,%esp
  0x000000012498bb6f: je     0x000000012498bb87
  0x000000012498bb75: sub    $0x8,%rsp
  0x000000012498bb79: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498bb7e: add    $0x8,%rsp
  0x000000012498bb82: jmpq   0x000000012498bb8c
  0x000000012498bb87: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498bb8c: movabs $0x0,%r10
  0x000000012498bb96: mov    %r10,0x320(%r15)
  0x000000012498bb9d: movabs $0x0,%r10
  0x000000012498bba7: mov    %r10,0x330(%r15)
  0x000000012498bbae: movabs $0x0,%r10
  0x000000012498bbb8: mov    %r10,0x328(%r15)
  0x000000012498bbbf: vzeroupper 
  0x000000012498bbc2: cmpq   $0x0,0x8(%r15)
  0x000000012498bbca: je     0x000000012498bbd5
  0x000000012498bbd0: jmpq   0x0000000124975780
  0x000000012498bbd5: mov    -0x40(%rbp),%r13
  0x000000012498bbd9: mov    -0x38(%rbp),%r14
  0x000000012498bbdd: retq   
  0x000000012498bbde: pop    %rcx
  0x000000012498bbdf: pop    %rdx
  0x000000012498bbe0: mov    0x18(%rcx),%rax
  0x000000012498bbe4: test   %rax,%rax
  0x000000012498bbe7: je     0x000000012498bc2c
  0x000000012498bbed: mov    0x10(%rcx),%rbx
  0x000000012498bbf1: test   %rbx,%rbx
  0x000000012498bbf4: je     0x000000012498bc16
  0x000000012498bbf6: mov    0x108(%rbx),%eax
  0x000000012498bbfc: add    $0x8,%eax
  0x000000012498bbff: mov    %eax,0x108(%rbx)
  0x000000012498bc05: and    0x11c(%rbx),%eax
  0x000000012498bc0b: je     0x000000012498bd46
  0x000000012498bc11: jmpq   0x000000012498bc2c
  0x000000012498bc16: mov    0x18(%rcx),%rcx
  0x000000012498bc1a: mov    0x1c(%rcx),%eax
  0x000000012498bc1d: add    $0x8,%eax
  0x000000012498bc20: mov    %eax,0x1c(%rcx)
  0x000000012498bc23: and    0x34(%rcx),%eax
  0x000000012498bc26: je     0x000000012498bd46
  0x000000012498bc2c: movzbl 0x0(%r13),%ebx
  0x000000012498bc31: testb  $0x8,0x108(%r15)
  0x000000012498bc39: je     0x000000012498bc47
  0x000000012498bc3b: movabs $0x1151dd020,%r10
  0x000000012498bc45: jmp    0x000000012498bc51
  0x000000012498bc47: movabs $0x1151d7a20,%r10
  0x000000012498bc51: jmpq   *(%r10,%rbx,8)
  0x000000012498bc55: callq  0x000000012498bc5f
  0x000000012498bc5a: jmpq   0x000000012498bcf1
  0x000000012498bc5f: lea    0x8(%rsp),%rax
  0x000000012498bc64: mov    %r13,-0x40(%rbp)
  0x000000012498bc68: mov    %r15,%rdi
  0x000000012498bc6b: vzeroupper 
  0x000000012498bc6e: mov    %rbp,0x330(%r15)
  0x000000012498bc75: mov    %rax,0x320(%r15)
  0x000000012498bc7c: test   $0xf,%esp
  0x000000012498bc82: je     0x000000012498bc9a
  0x000000012498bc88: sub    $0x8,%rsp
  0x000000012498bc8c: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498bc91: add    $0x8,%rsp
  0x000000012498bc95: jmpq   0x000000012498bc9f
  0x000000012498bc9a: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498bc9f: movabs $0x0,%r10
  0x000000012498bca9: mov    %r10,0x320(%r15)
  0x000000012498bcb0: movabs $0x0,%r10
  0x000000012498bcba: mov    %r10,0x330(%r15)
  0x000000012498bcc1: movabs $0x0,%r10
  0x000000012498bccb: mov    %r10,0x328(%r15)
  0x000000012498bcd2: vzeroupper 
  0x000000012498bcd5: cmpq   $0x0,0x8(%r15)
  0x000000012498bcdd: je     0x000000012498bce8
  0x000000012498bce3: jmpq   0x0000000124975780
  0x000000012498bce8: mov    -0x40(%rbp),%r13
  0x000000012498bcec: mov    -0x38(%rbp),%r14
  0x000000012498bcf0: retq   
  0x000000012498bcf1: push   %rax
  0x000000012498bcf2: push   %rbx
  0x000000012498bcf3: mov    -0x18(%rbp),%rbx
  0x000000012498bcf7: mov    0x10(%rbx),%rax
  0x000000012498bcfb: test   %rax,%rax
  0x000000012498bcfe: je     0x000000012498bd3b
  0x000000012498bd04: mov    %r13,%rsi
  0x000000012498bd07: mov    %rbx,%rdi
  0x000000012498bd0a: test   $0xf,%esp
  0x000000012498bd10: je     0x000000012498bd28
  0x000000012498bd16: sub    $0x8,%rsp
  0x000000012498bd1a: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012498bd1f: add    $0x8,%rsp
  0x000000012498bd23: jmpq   0x000000012498bd2d
  0x000000012498bd28: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012498bd2d: mov    0x10(%rbx),%rbx
  0x000000012498bd31: add    $0x138,%rbx
  0x000000012498bd38: add    %rbx,%rax
  0x000000012498bd3b: mov    %rax,-0x28(%rbp)
  0x000000012498bd3f: pop    %rbx
  0x000000012498bd40: pop    %rax
  0x000000012498bd41: jmpq   0x000000012498bc2c
  0x000000012498bd46: neg    %rdx
  0x000000012498bd49: add    %r13,%rdx
  0x000000012498bd4c: callq  0x000000012498bd56
  0x000000012498bd51: jmpq   0x000000012498bdeb
  0x000000012498bd56: mov    %rdx,%rsi
  0x000000012498bd59: lea    0x8(%rsp),%rax
  0x000000012498bd5e: mov    %r13,-0x40(%rbp)
  0x000000012498bd62: mov    %r15,%rdi
  0x000000012498bd65: vzeroupper 
  0x000000012498bd68: mov    %rbp,0x330(%r15)
  0x000000012498bd6f: mov    %rax,0x320(%r15)
  0x000000012498bd76: test   $0xf,%esp
  0x000000012498bd7c: je     0x000000012498bd94
  0x000000012498bd82: sub    $0x8,%rsp
  0x000000012498bd86: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498bd8b: add    $0x8,%rsp
  0x000000012498bd8f: jmpq   0x000000012498bd99
  0x000000012498bd94: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498bd99: movabs $0x0,%r10
  0x000000012498bda3: mov    %r10,0x320(%r15)
  0x000000012498bdaa: movabs $0x0,%r10
  0x000000012498bdb4: mov    %r10,0x330(%r15)
  0x000000012498bdbb: movabs $0x0,%r10
  0x000000012498bdc5: mov    %r10,0x328(%r15)
  0x000000012498bdcc: vzeroupper 
  0x000000012498bdcf: cmpq   $0x0,0x8(%r15)
  0x000000012498bdd7: je     0x000000012498bde2
  0x000000012498bddd: jmpq   0x0000000124975780
  0x000000012498bde2: mov    -0x40(%rbp),%r13
  0x000000012498bde6: mov    -0x38(%rbp),%r14
  0x000000012498bdea: retq   
  0x000000012498bdeb: test   %rax,%rax
  0x000000012498bdee: je     0x000000012498bc2c
  0x000000012498bdf4: cmpb   $0x0,0x156(%rax)
  0x000000012498bdfb: jne    0x000000012498bc2c
  0x000000012498be01: mov    %rax,%rbx
  0x000000012498be04: callq  0x000000012498be0e
  0x000000012498be09: jmpq   0x000000012498bea0
  0x000000012498be0e: lea    0x8(%rsp),%rax
  0x000000012498be13: mov    %r13,-0x40(%rbp)
  0x000000012498be17: mov    %r15,%rdi
  0x000000012498be1a: vzeroupper 
  0x000000012498be1d: mov    %rbp,0x330(%r15)
  0x000000012498be24: mov    %rax,0x320(%r15)
  0x000000012498be2b: test   $0xf,%esp
  0x000000012498be31: je     0x000000012498be49
  0x000000012498be37: sub    $0x8,%rsp
  0x000000012498be3b: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x000000012498be40: add    $0x8,%rsp
  0x000000012498be44: jmpq   0x000000012498be4e
  0x000000012498be49: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x000000012498be4e: movabs $0x0,%r10
  0x000000012498be58: mov    %r10,0x320(%r15)
  0x000000012498be5f: movabs $0x0,%r10
  0x000000012498be69: mov    %r10,0x330(%r15)
  0x000000012498be70: movabs $0x0,%r10
  0x000000012498be7a: mov    %r10,0x328(%r15)
  0x000000012498be81: vzeroupper 
  0x000000012498be84: cmpq   $0x0,0x8(%r15)
  0x000000012498be8c: je     0x000000012498be97
  0x000000012498be92: jmpq   0x0000000124975780
  0x000000012498be97: mov    -0x40(%rbp),%r13
  0x000000012498be9b: mov    -0x38(%rbp),%r14
  0x000000012498be9f: retq   
  0x000000012498bea0: mov    %rax,%rsi
  0x000000012498bea3: mov    -0x8(%rbp),%rdx
  0x000000012498bea7: leaveq 
  0x000000012498bea8: pop    %rcx
  0x000000012498bea9: mov    %rdx,%rsp
  0x000000012498beac: and    $0xfffffffffffffff0,%rsp
  0x000000012498beb0: push   %rcx
  0x000000012498beb1: jmpq   *0x110(%rbx)
  0x000000012498beb7: mov    -0x28(%rbp),%rax
  0x000000012498bebb: test   %rax,%rax
  0x000000012498bebe: je     0x000000012498bed6
  0x000000012498bec4: addq   $0x1,0x18(%rax)
  0x000000012498bec9: sbbq   $0x0,0x18(%rax)
  0x000000012498bece: add    $0x20,%rax
  0x000000012498bed2: mov    %rax,-0x28(%rbp)
  0x000000012498bed6: movzbl 0x3(%r13),%ebx
  0x000000012498bedb: add    $0x3,%r13
  0x000000012498bedf: movabs $0x1151d7a20,%r10
  0x000000012498bee9: jmpq   *(%r10,%rbx,8)
  0x000000012498beed: data16 xchg %ax,%ax
  0x000000012498bef0: add    %al,(%rax)
  0x000000012498bef2: add    %al,(%rax)
  0x000000012498bef4: add    %al,(%rax)
  0x000000012498bef6: add    %al,(%rax)
  0x000000012498bef8: add    %al,(%rax)
  0x000000012498befa: add    %al,(%rax)
  0x000000012498befc: add    %al,(%rax)
  0x000000012498befe: add    %al,(%rax)

----------------------------------------------------------------------
if_icmpeq  159 if_icmpeq  [0x000000012498bf20, 0x000000012498c340]  1056 bytes

  0x000000012498bf20: mov    (%rsp),%eax
  0x000000012498bf23: add    $0x8,%rsp
  0x000000012498bf27: mov    (%rsp),%edx
  0x000000012498bf2a: add    $0x8,%rsp
  0x000000012498bf2e: cmp    %eax,%edx
  0x000000012498bf30: jne    0x000000012498c2fe
  0x000000012498bf36: mov    -0x18(%rbp),%rcx
  0x000000012498bf3a: mov    -0x28(%rbp),%rax
  0x000000012498bf3e: test   %rax,%rax
  0x000000012498bf41: je     0x000000012498bf5f
  0x000000012498bf47: mov    0x8(%rax),%rbx
  0x000000012498bf4b: add    $0x1,%rbx
  0x000000012498bf4f: sbb    $0x0,%rbx
  0x000000012498bf53: mov    %rbx,0x8(%rax)
  0x000000012498bf57: add    0x10(%rax),%rax
  0x000000012498bf5b: mov    %rax,-0x28(%rbp)
  0x000000012498bf5f: movswl 0x1(%r13),%edx
  0x000000012498bf64: bswap  %edx
  0x000000012498bf66: sar    $0x10,%edx
  0x000000012498bf69: movslq %edx,%rdx
  0x000000012498bf6c: add    %rdx,%r13
  0x000000012498bf6f: test   %edx,%edx
  0x000000012498bf71: jns    0x000000012498c073
  0x000000012498bf77: mov    0x18(%rcx),%rax
  0x000000012498bf7b: test   %rax,%rax
  0x000000012498bf7e: jne    0x000000012498c034
  0x000000012498bf84: push   %rdx
  0x000000012498bf85: push   %rcx
  0x000000012498bf86: callq  0x000000012498bf90
  0x000000012498bf8b: jmpq   0x000000012498c025
  0x000000012498bf90: mov    %rcx,%rsi
  0x000000012498bf93: lea    0x8(%rsp),%rax
  0x000000012498bf98: mov    %r13,-0x40(%rbp)
  0x000000012498bf9c: mov    %r15,%rdi
  0x000000012498bf9f: vzeroupper 
  0x000000012498bfa2: mov    %rbp,0x330(%r15)
  0x000000012498bfa9: mov    %rax,0x320(%r15)
  0x000000012498bfb0: test   $0xf,%esp
  0x000000012498bfb6: je     0x000000012498bfce
  0x000000012498bfbc: sub    $0x8,%rsp
  0x000000012498bfc0: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498bfc5: add    $0x8,%rsp
  0x000000012498bfc9: jmpq   0x000000012498bfd3
  0x000000012498bfce: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498bfd3: movabs $0x0,%r10
  0x000000012498bfdd: mov    %r10,0x320(%r15)
  0x000000012498bfe4: movabs $0x0,%r10
  0x000000012498bfee: mov    %r10,0x330(%r15)
  0x000000012498bff5: movabs $0x0,%r10
  0x000000012498bfff: mov    %r10,0x328(%r15)
  0x000000012498c006: vzeroupper 
  0x000000012498c009: cmpq   $0x0,0x8(%r15)
  0x000000012498c011: je     0x000000012498c01c
  0x000000012498c017: jmpq   0x0000000124975780
  0x000000012498c01c: mov    -0x40(%rbp),%r13
  0x000000012498c020: mov    -0x38(%rbp),%r14
  0x000000012498c024: retq   
  0x000000012498c025: pop    %rcx
  0x000000012498c026: pop    %rdx
  0x000000012498c027: mov    0x18(%rcx),%rax
  0x000000012498c02b: test   %rax,%rax
  0x000000012498c02e: je     0x000000012498c073
  0x000000012498c034: mov    0x10(%rcx),%rbx
  0x000000012498c038: test   %rbx,%rbx
  0x000000012498c03b: je     0x000000012498c05d
  0x000000012498c03d: mov    0x108(%rbx),%eax
  0x000000012498c043: add    $0x8,%eax
  0x000000012498c046: mov    %eax,0x108(%rbx)
  0x000000012498c04c: and    0x11c(%rbx),%eax
  0x000000012498c052: je     0x000000012498c18d
  0x000000012498c058: jmpq   0x000000012498c073
  0x000000012498c05d: mov    0x18(%rcx),%rcx
  0x000000012498c061: mov    0x1c(%rcx),%eax
  0x000000012498c064: add    $0x8,%eax
  0x000000012498c067: mov    %eax,0x1c(%rcx)
  0x000000012498c06a: and    0x34(%rcx),%eax
  0x000000012498c06d: je     0x000000012498c18d
  0x000000012498c073: movzbl 0x0(%r13),%ebx
  0x000000012498c078: testb  $0x8,0x108(%r15)
  0x000000012498c080: je     0x000000012498c08e
  0x000000012498c082: movabs $0x1151dd020,%r10
  0x000000012498c08c: jmp    0x000000012498c098
  0x000000012498c08e: movabs $0x1151d7a20,%r10
  0x000000012498c098: jmpq   *(%r10,%rbx,8)
  0x000000012498c09c: callq  0x000000012498c0a6
  0x000000012498c0a1: jmpq   0x000000012498c138
  0x000000012498c0a6: lea    0x8(%rsp),%rax
  0x000000012498c0ab: mov    %r13,-0x40(%rbp)
  0x000000012498c0af: mov    %r15,%rdi
  0x000000012498c0b2: vzeroupper 
  0x000000012498c0b5: mov    %rbp,0x330(%r15)
  0x000000012498c0bc: mov    %rax,0x320(%r15)
  0x000000012498c0c3: test   $0xf,%esp
  0x000000012498c0c9: je     0x000000012498c0e1
  0x000000012498c0cf: sub    $0x8,%rsp
  0x000000012498c0d3: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498c0d8: add    $0x8,%rsp
  0x000000012498c0dc: jmpq   0x000000012498c0e6
  0x000000012498c0e1: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498c0e6: movabs $0x0,%r10
  0x000000012498c0f0: mov    %r10,0x320(%r15)
  0x000000012498c0f7: movabs $0x0,%r10
  0x000000012498c101: mov    %r10,0x330(%r15)
  0x000000012498c108: movabs $0x0,%r10
  0x000000012498c112: mov    %r10,0x328(%r15)
  0x000000012498c119: vzeroupper 
  0x000000012498c11c: cmpq   $0x0,0x8(%r15)
  0x000000012498c124: je     0x000000012498c12f
  0x000000012498c12a: jmpq   0x0000000124975780
  0x000000012498c12f: mov    -0x40(%rbp),%r13
  0x000000012498c133: mov    -0x38(%rbp),%r14
  0x000000012498c137: retq   
  0x000000012498c138: push   %rax
  0x000000012498c139: push   %rbx
  0x000000012498c13a: mov    -0x18(%rbp),%rbx
  0x000000012498c13e: mov    0x10(%rbx),%rax
  0x000000012498c142: test   %rax,%rax
  0x000000012498c145: je     0x000000012498c182
  0x000000012498c14b: mov    %r13,%rsi
  0x000000012498c14e: mov    %rbx,%rdi
  0x000000012498c151: test   $0xf,%esp
  0x000000012498c157: je     0x000000012498c16f
  0x000000012498c15d: sub    $0x8,%rsp
  0x000000012498c161: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012498c166: add    $0x8,%rsp
  0x000000012498c16a: jmpq   0x000000012498c174
  0x000000012498c16f: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012498c174: mov    0x10(%rbx),%rbx
  0x000000012498c178: add    $0x138,%rbx
  0x000000012498c17f: add    %rbx,%rax
  0x000000012498c182: mov    %rax,-0x28(%rbp)
  0x000000012498c186: pop    %rbx
  0x000000012498c187: pop    %rax
  0x000000012498c188: jmpq   0x000000012498c073
  0x000000012498c18d: neg    %rdx
  0x000000012498c190: add    %r13,%rdx
  0x000000012498c193: callq  0x000000012498c19d
  0x000000012498c198: jmpq   0x000000012498c232
  0x000000012498c19d: mov    %rdx,%rsi
  0x000000012498c1a0: lea    0x8(%rsp),%rax
  0x000000012498c1a5: mov    %r13,-0x40(%rbp)
  0x000000012498c1a9: mov    %r15,%rdi
  0x000000012498c1ac: vzeroupper 
  0x000000012498c1af: mov    %rbp,0x330(%r15)
  0x000000012498c1b6: mov    %rax,0x320(%r15)
  0x000000012498c1bd: test   $0xf,%esp
  0x000000012498c1c3: je     0x000000012498c1db
  0x000000012498c1c9: sub    $0x8,%rsp
  0x000000012498c1cd: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498c1d2: add    $0x8,%rsp
  0x000000012498c1d6: jmpq   0x000000012498c1e0
  0x000000012498c1db: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498c1e0: movabs $0x0,%r10
  0x000000012498c1ea: mov    %r10,0x320(%r15)
  0x000000012498c1f1: movabs $0x0,%r10
  0x000000012498c1fb: mov    %r10,0x330(%r15)
  0x000000012498c202: movabs $0x0,%r10
  0x000000012498c20c: mov    %r10,0x328(%r15)
  0x000000012498c213: vzeroupper 
  0x000000012498c216: cmpq   $0x0,0x8(%r15)
  0x000000012498c21e: je     0x000000012498c229
  0x000000012498c224: jmpq   0x0000000124975780
  0x000000012498c229: mov    -0x40(%rbp),%r13
  0x000000012498c22d: mov    -0x38(%rbp),%r14
  0x000000012498c231: retq   
  0x000000012498c232: test   %rax,%rax
  0x000000012498c235: je     0x000000012498c073
  0x000000012498c23b: cmpb   $0x0,0x156(%rax)
  0x000000012498c242: jne    0x000000012498c073
  0x000000012498c248: mov    %rax,%rbx
  0x000000012498c24b: callq  0x000000012498c255
  0x000000012498c250: jmpq   0x000000012498c2e7
  0x000000012498c255: lea    0x8(%rsp),%rax
  0x000000012498c25a: mov    %r13,-0x40(%rbp)
  0x000000012498c25e: mov    %r15,%rdi
  0x000000012498c261: vzeroupper 
  0x000000012498c264: mov    %rbp,0x330(%r15)
  0x000000012498c26b: mov    %rax,0x320(%r15)
  0x000000012498c272: test   $0xf,%esp
  0x000000012498c278: je     0x000000012498c290
  0x000000012498c27e: sub    $0x8,%rsp
  0x000000012498c282: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x000000012498c287: add    $0x8,%rsp
  0x000000012498c28b: jmpq   0x000000012498c295
  0x000000012498c290: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x000000012498c295: movabs $0x0,%r10
  0x000000012498c29f: mov    %r10,0x320(%r15)
  0x000000012498c2a6: movabs $0x0,%r10
  0x000000012498c2b0: mov    %r10,0x330(%r15)
  0x000000012498c2b7: movabs $0x0,%r10
  0x000000012498c2c1: mov    %r10,0x328(%r15)
  0x000000012498c2c8: vzeroupper 
  0x000000012498c2cb: cmpq   $0x0,0x8(%r15)
  0x000000012498c2d3: je     0x000000012498c2de
  0x000000012498c2d9: jmpq   0x0000000124975780
  0x000000012498c2de: mov    -0x40(%rbp),%r13
  0x000000012498c2e2: mov    -0x38(%rbp),%r14
  0x000000012498c2e6: retq   
  0x000000012498c2e7: mov    %rax,%rsi
  0x000000012498c2ea: mov    -0x8(%rbp),%rdx
  0x000000012498c2ee: leaveq 
  0x000000012498c2ef: pop    %rcx
  0x000000012498c2f0: mov    %rdx,%rsp
  0x000000012498c2f3: and    $0xfffffffffffffff0,%rsp
  0x000000012498c2f7: push   %rcx
  0x000000012498c2f8: jmpq   *0x110(%rbx)
  0x000000012498c2fe: mov    -0x28(%rbp),%rax
  0x000000012498c302: test   %rax,%rax
  0x000000012498c305: je     0x000000012498c31d
  0x000000012498c30b: addq   $0x1,0x18(%rax)
  0x000000012498c310: sbbq   $0x0,0x18(%rax)
  0x000000012498c315: add    $0x20,%rax
  0x000000012498c319: mov    %rax,-0x28(%rbp)
  0x000000012498c31d: movzbl 0x3(%r13),%ebx
  0x000000012498c322: add    $0x3,%r13
  0x000000012498c326: movabs $0x1151d7a20,%r10
  0x000000012498c330: jmpq   *(%r10,%rbx,8)
  0x000000012498c334: nopl   0x0(%rax)
  0x000000012498c338: add    %al,(%rax)
  0x000000012498c33a: add    %al,(%rax)
  0x000000012498c33c: add    %al,(%rax)
  0x000000012498c33e: add    %al,(%rax)

----------------------------------------------------------------------
if_icmpne  160 if_icmpne  [0x000000012498c360, 0x000000012498c780]  1056 bytes

  0x000000012498c360: mov    (%rsp),%eax
  0x000000012498c363: add    $0x8,%rsp
  0x000000012498c367: mov    (%rsp),%edx
  0x000000012498c36a: add    $0x8,%rsp
  0x000000012498c36e: cmp    %eax,%edx
  0x000000012498c370: je     0x000000012498c73e
  0x000000012498c376: mov    -0x18(%rbp),%rcx
  0x000000012498c37a: mov    -0x28(%rbp),%rax
  0x000000012498c37e: test   %rax,%rax
  0x000000012498c381: je     0x000000012498c39f
  0x000000012498c387: mov    0x8(%rax),%rbx
  0x000000012498c38b: add    $0x1,%rbx
  0x000000012498c38f: sbb    $0x0,%rbx
  0x000000012498c393: mov    %rbx,0x8(%rax)
  0x000000012498c397: add    0x10(%rax),%rax
  0x000000012498c39b: mov    %rax,-0x28(%rbp)
  0x000000012498c39f: movswl 0x1(%r13),%edx
  0x000000012498c3a4: bswap  %edx
  0x000000012498c3a6: sar    $0x10,%edx
  0x000000012498c3a9: movslq %edx,%rdx
  0x000000012498c3ac: add    %rdx,%r13
  0x000000012498c3af: test   %edx,%edx
  0x000000012498c3b1: jns    0x000000012498c4b3
  0x000000012498c3b7: mov    0x18(%rcx),%rax
  0x000000012498c3bb: test   %rax,%rax
  0x000000012498c3be: jne    0x000000012498c474
  0x000000012498c3c4: push   %rdx
  0x000000012498c3c5: push   %rcx
  0x000000012498c3c6: callq  0x000000012498c3d0
  0x000000012498c3cb: jmpq   0x000000012498c465
  0x000000012498c3d0: mov    %rcx,%rsi
  0x000000012498c3d3: lea    0x8(%rsp),%rax
  0x000000012498c3d8: mov    %r13,-0x40(%rbp)
  0x000000012498c3dc: mov    %r15,%rdi
  0x000000012498c3df: vzeroupper 
  0x000000012498c3e2: mov    %rbp,0x330(%r15)
  0x000000012498c3e9: mov    %rax,0x320(%r15)
  0x000000012498c3f0: test   $0xf,%esp
  0x000000012498c3f6: je     0x000000012498c40e
  0x000000012498c3fc: sub    $0x8,%rsp
  0x000000012498c400: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498c405: add    $0x8,%rsp
  0x000000012498c409: jmpq   0x000000012498c413
  0x000000012498c40e: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498c413: movabs $0x0,%r10
  0x000000012498c41d: mov    %r10,0x320(%r15)
  0x000000012498c424: movabs $0x0,%r10
  0x000000012498c42e: mov    %r10,0x330(%r15)
  0x000000012498c435: movabs $0x0,%r10
  0x000000012498c43f: mov    %r10,0x328(%r15)
  0x000000012498c446: vzeroupper 
  0x000000012498c449: cmpq   $0x0,0x8(%r15)
  0x000000012498c451: je     0x000000012498c45c
  0x000000012498c457: jmpq   0x0000000124975780
  0x000000012498c45c: mov    -0x40(%rbp),%r13
  0x000000012498c460: mov    -0x38(%rbp),%r14
  0x000000012498c464: retq   
  0x000000012498c465: pop    %rcx
  0x000000012498c466: pop    %rdx
  0x000000012498c467: mov    0x18(%rcx),%rax
  0x000000012498c46b: test   %rax,%rax
  0x000000012498c46e: je     0x000000012498c4b3
  0x000000012498c474: mov    0x10(%rcx),%rbx
  0x000000012498c478: test   %rbx,%rbx
  0x000000012498c47b: je     0x000000012498c49d
  0x000000012498c47d: mov    0x108(%rbx),%eax
  0x000000012498c483: add    $0x8,%eax
  0x000000012498c486: mov    %eax,0x108(%rbx)
  0x000000012498c48c: and    0x11c(%rbx),%eax
  0x000000012498c492: je     0x000000012498c5cd
  0x000000012498c498: jmpq   0x000000012498c4b3
  0x000000012498c49d: mov    0x18(%rcx),%rcx
  0x000000012498c4a1: mov    0x1c(%rcx),%eax
  0x000000012498c4a4: add    $0x8,%eax
  0x000000012498c4a7: mov    %eax,0x1c(%rcx)
  0x000000012498c4aa: and    0x34(%rcx),%eax
  0x000000012498c4ad: je     0x000000012498c5cd
  0x000000012498c4b3: movzbl 0x0(%r13),%ebx
  0x000000012498c4b8: testb  $0x8,0x108(%r15)
  0x000000012498c4c0: je     0x000000012498c4ce
  0x000000012498c4c2: movabs $0x1151dd020,%r10
  0x000000012498c4cc: jmp    0x000000012498c4d8
  0x000000012498c4ce: movabs $0x1151d7a20,%r10
  0x000000012498c4d8: jmpq   *(%r10,%rbx,8)
  0x000000012498c4dc: callq  0x000000012498c4e6
  0x000000012498c4e1: jmpq   0x000000012498c578
  0x000000012498c4e6: lea    0x8(%rsp),%rax
  0x000000012498c4eb: mov    %r13,-0x40(%rbp)
  0x000000012498c4ef: mov    %r15,%rdi
  0x000000012498c4f2: vzeroupper 
  0x000000012498c4f5: mov    %rbp,0x330(%r15)
  0x000000012498c4fc: mov    %rax,0x320(%r15)
  0x000000012498c503: test   $0xf,%esp
  0x000000012498c509: je     0x000000012498c521
  0x000000012498c50f: sub    $0x8,%rsp
  0x000000012498c513: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498c518: add    $0x8,%rsp
  0x000000012498c51c: jmpq   0x000000012498c526
  0x000000012498c521: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498c526: movabs $0x0,%r10
  0x000000012498c530: mov    %r10,0x320(%r15)
  0x000000012498c537: movabs $0x0,%r10
  0x000000012498c541: mov    %r10,0x330(%r15)
  0x000000012498c548: movabs $0x0,%r10
  0x000000012498c552: mov    %r10,0x328(%r15)
  0x000000012498c559: vzeroupper 
  0x000000012498c55c: cmpq   $0x0,0x8(%r15)
  0x000000012498c564: je     0x000000012498c56f
  0x000000012498c56a: jmpq   0x0000000124975780
  0x000000012498c56f: mov    -0x40(%rbp),%r13
  0x000000012498c573: mov    -0x38(%rbp),%r14
  0x000000012498c577: retq   
  0x000000012498c578: push   %rax
  0x000000012498c579: push   %rbx
  0x000000012498c57a: mov    -0x18(%rbp),%rbx
  0x000000012498c57e: mov    0x10(%rbx),%rax
  0x000000012498c582: test   %rax,%rax
  0x000000012498c585: je     0x000000012498c5c2
  0x000000012498c58b: mov    %r13,%rsi
  0x000000012498c58e: mov    %rbx,%rdi
  0x000000012498c591: test   $0xf,%esp
  0x000000012498c597: je     0x000000012498c5af
  0x000000012498c59d: sub    $0x8,%rsp
  0x000000012498c5a1: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012498c5a6: add    $0x8,%rsp
  0x000000012498c5aa: jmpq   0x000000012498c5b4
  0x000000012498c5af: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012498c5b4: mov    0x10(%rbx),%rbx
  0x000000012498c5b8: add    $0x138,%rbx
  0x000000012498c5bf: add    %rbx,%rax
  0x000000012498c5c2: mov    %rax,-0x28(%rbp)
  0x000000012498c5c6: pop    %rbx
  0x000000012498c5c7: pop    %rax
  0x000000012498c5c8: jmpq   0x000000012498c4b3
  0x000000012498c5cd: neg    %rdx
  0x000000012498c5d0: add    %r13,%rdx
  0x000000012498c5d3: callq  0x000000012498c5dd
  0x000000012498c5d8: jmpq   0x000000012498c672
  0x000000012498c5dd: mov    %rdx,%rsi
  0x000000012498c5e0: lea    0x8(%rsp),%rax
  0x000000012498c5e5: mov    %r13,-0x40(%rbp)
  0x000000012498c5e9: mov    %r15,%rdi
  0x000000012498c5ec: vzeroupper 
  0x000000012498c5ef: mov    %rbp,0x330(%r15)
  0x000000012498c5f6: mov    %rax,0x320(%r15)
  0x000000012498c5fd: test   $0xf,%esp
  0x000000012498c603: je     0x000000012498c61b
  0x000000012498c609: sub    $0x8,%rsp
  0x000000012498c60d: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498c612: add    $0x8,%rsp
  0x000000012498c616: jmpq   0x000000012498c620
  0x000000012498c61b: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498c620: movabs $0x0,%r10
  0x000000012498c62a: mov    %r10,0x320(%r15)
  0x000000012498c631: movabs $0x0,%r10
  0x000000012498c63b: mov    %r10,0x330(%r15)
  0x000000012498c642: movabs $0x0,%r10
  0x000000012498c64c: mov    %r10,0x328(%r15)
  0x000000012498c653: vzeroupper 
  0x000000012498c656: cmpq   $0x0,0x8(%r15)
  0x000000012498c65e: je     0x000000012498c669
  0x000000012498c664: jmpq   0x0000000124975780
  0x000000012498c669: mov    -0x40(%rbp),%r13
  0x000000012498c66d: mov    -0x38(%rbp),%r14
  0x000000012498c671: retq   
  0x000000012498c672: test   %rax,%rax
  0x000000012498c675: je     0x000000012498c4b3
  0x000000012498c67b: cmpb   $0x0,0x156(%rax)
  0x000000012498c682: jne    0x000000012498c4b3
  0x000000012498c688: mov    %rax,%rbx
  0x000000012498c68b: callq  0x000000012498c695
  0x000000012498c690: jmpq   0x000000012498c727
  0x000000012498c695: lea    0x8(%rsp),%rax
  0x000000012498c69a: mov    %r13,-0x40(%rbp)
  0x000000012498c69e: mov    %r15,%rdi
  0x000000012498c6a1: vzeroupper 
  0x000000012498c6a4: mov    %rbp,0x330(%r15)
  0x000000012498c6ab: mov    %rax,0x320(%r15)
  0x000000012498c6b2: test   $0xf,%esp
  0x000000012498c6b8: je     0x000000012498c6d0
  0x000000012498c6be: sub    $0x8,%rsp
  0x000000012498c6c2: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x000000012498c6c7: add    $0x8,%rsp
  0x000000012498c6cb: jmpq   0x000000012498c6d5
  0x000000012498c6d0: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x000000012498c6d5: movabs $0x0,%r10
  0x000000012498c6df: mov    %r10,0x320(%r15)
  0x000000012498c6e6: movabs $0x0,%r10
  0x000000012498c6f0: mov    %r10,0x330(%r15)
  0x000000012498c6f7: movabs $0x0,%r10
  0x000000012498c701: mov    %r10,0x328(%r15)
  0x000000012498c708: vzeroupper 
  0x000000012498c70b: cmpq   $0x0,0x8(%r15)
  0x000000012498c713: je     0x000000012498c71e
  0x000000012498c719: jmpq   0x0000000124975780
  0x000000012498c71e: mov    -0x40(%rbp),%r13
  0x000000012498c722: mov    -0x38(%rbp),%r14
  0x000000012498c726: retq   
  0x000000012498c727: mov    %rax,%rsi
  0x000000012498c72a: mov    -0x8(%rbp),%rdx
  0x000000012498c72e: leaveq 
  0x000000012498c72f: pop    %rcx
  0x000000012498c730: mov    %rdx,%rsp
  0x000000012498c733: and    $0xfffffffffffffff0,%rsp
  0x000000012498c737: push   %rcx
  0x000000012498c738: jmpq   *0x110(%rbx)
  0x000000012498c73e: mov    -0x28(%rbp),%rax
  0x000000012498c742: test   %rax,%rax
  0x000000012498c745: je     0x000000012498c75d
  0x000000012498c74b: addq   $0x1,0x18(%rax)
  0x000000012498c750: sbbq   $0x0,0x18(%rax)
  0x000000012498c755: add    $0x20,%rax
  0x000000012498c759: mov    %rax,-0x28(%rbp)
  0x000000012498c75d: movzbl 0x3(%r13),%ebx
  0x000000012498c762: add    $0x3,%r13
  0x000000012498c766: movabs $0x1151d7a20,%r10
  0x000000012498c770: jmpq   *(%r10,%rbx,8)
  0x000000012498c774: nopl   0x0(%rax)
  0x000000012498c778: add    %al,(%rax)
  0x000000012498c77a: add    %al,(%rax)
  0x000000012498c77c: add    %al,(%rax)
  0x000000012498c77e: add    %al,(%rax)

----------------------------------------------------------------------
if_icmplt  161 if_icmplt  [0x000000012498c7a0, 0x000000012498cbc0]  1056 bytes

  0x000000012498c7a0: mov    (%rsp),%eax
  0x000000012498c7a3: add    $0x8,%rsp
  0x000000012498c7a7: mov    (%rsp),%edx
  0x000000012498c7aa: add    $0x8,%rsp
  0x000000012498c7ae: cmp    %eax,%edx
  0x000000012498c7b0: jge    0x000000012498cb7e
  0x000000012498c7b6: mov    -0x18(%rbp),%rcx
  0x000000012498c7ba: mov    -0x28(%rbp),%rax
  0x000000012498c7be: test   %rax,%rax
  0x000000012498c7c1: je     0x000000012498c7df
  0x000000012498c7c7: mov    0x8(%rax),%rbx
  0x000000012498c7cb: add    $0x1,%rbx
  0x000000012498c7cf: sbb    $0x0,%rbx
  0x000000012498c7d3: mov    %rbx,0x8(%rax)
  0x000000012498c7d7: add    0x10(%rax),%rax
  0x000000012498c7db: mov    %rax,-0x28(%rbp)
  0x000000012498c7df: movswl 0x1(%r13),%edx
  0x000000012498c7e4: bswap  %edx
  0x000000012498c7e6: sar    $0x10,%edx
  0x000000012498c7e9: movslq %edx,%rdx
  0x000000012498c7ec: add    %rdx,%r13
  0x000000012498c7ef: test   %edx,%edx
  0x000000012498c7f1: jns    0x000000012498c8f3
  0x000000012498c7f7: mov    0x18(%rcx),%rax
  0x000000012498c7fb: test   %rax,%rax
  0x000000012498c7fe: jne    0x000000012498c8b4
  0x000000012498c804: push   %rdx
  0x000000012498c805: push   %rcx
  0x000000012498c806: callq  0x000000012498c810
  0x000000012498c80b: jmpq   0x000000012498c8a5
  0x000000012498c810: mov    %rcx,%rsi
  0x000000012498c813: lea    0x8(%rsp),%rax
  0x000000012498c818: mov    %r13,-0x40(%rbp)
  0x000000012498c81c: mov    %r15,%rdi
  0x000000012498c81f: vzeroupper 
  0x000000012498c822: mov    %rbp,0x330(%r15)
  0x000000012498c829: mov    %rax,0x320(%r15)
  0x000000012498c830: test   $0xf,%esp
  0x000000012498c836: je     0x000000012498c84e
  0x000000012498c83c: sub    $0x8,%rsp
  0x000000012498c840: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498c845: add    $0x8,%rsp
  0x000000012498c849: jmpq   0x000000012498c853
  0x000000012498c84e: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498c853: movabs $0x0,%r10
  0x000000012498c85d: mov    %r10,0x320(%r15)
  0x000000012498c864: movabs $0x0,%r10
  0x000000012498c86e: mov    %r10,0x330(%r15)
  0x000000012498c875: movabs $0x0,%r10
  0x000000012498c87f: mov    %r10,0x328(%r15)
  0x000000012498c886: vzeroupper 
  0x000000012498c889: cmpq   $0x0,0x8(%r15)
  0x000000012498c891: je     0x000000012498c89c
  0x000000012498c897: jmpq   0x0000000124975780
  0x000000012498c89c: mov    -0x40(%rbp),%r13
  0x000000012498c8a0: mov    -0x38(%rbp),%r14
  0x000000012498c8a4: retq   
  0x000000012498c8a5: pop    %rcx
  0x000000012498c8a6: pop    %rdx
  0x000000012498c8a7: mov    0x18(%rcx),%rax
  0x000000012498c8ab: test   %rax,%rax
  0x000000012498c8ae: je     0x000000012498c8f3
  0x000000012498c8b4: mov    0x10(%rcx),%rbx
  0x000000012498c8b8: test   %rbx,%rbx
  0x000000012498c8bb: je     0x000000012498c8dd
  0x000000012498c8bd: mov    0x108(%rbx),%eax
  0x000000012498c8c3: add    $0x8,%eax
  0x000000012498c8c6: mov    %eax,0x108(%rbx)
  0x000000012498c8cc: and    0x11c(%rbx),%eax
  0x000000012498c8d2: je     0x000000012498ca0d
  0x000000012498c8d8: jmpq   0x000000012498c8f3
  0x000000012498c8dd: mov    0x18(%rcx),%rcx
  0x000000012498c8e1: mov    0x1c(%rcx),%eax
  0x000000012498c8e4: add    $0x8,%eax
  0x000000012498c8e7: mov    %eax,0x1c(%rcx)
  0x000000012498c8ea: and    0x34(%rcx),%eax
  0x000000012498c8ed: je     0x000000012498ca0d
  0x000000012498c8f3: movzbl 0x0(%r13),%ebx
  0x000000012498c8f8: testb  $0x8,0x108(%r15)
  0x000000012498c900: je     0x000000012498c90e
  0x000000012498c902: movabs $0x1151dd020,%r10
  0x000000012498c90c: jmp    0x000000012498c918
  0x000000012498c90e: movabs $0x1151d7a20,%r10
  0x000000012498c918: jmpq   *(%r10,%rbx,8)
  0x000000012498c91c: callq  0x000000012498c926
  0x000000012498c921: jmpq   0x000000012498c9b8
  0x000000012498c926: lea    0x8(%rsp),%rax
  0x000000012498c92b: mov    %r13,-0x40(%rbp)
  0x000000012498c92f: mov    %r15,%rdi
  0x000000012498c932: vzeroupper 
  0x000000012498c935: mov    %rbp,0x330(%r15)
  0x000000012498c93c: mov    %rax,0x320(%r15)
  0x000000012498c943: test   $0xf,%esp
  0x000000012498c949: je     0x000000012498c961
  0x000000012498c94f: sub    $0x8,%rsp
  0x000000012498c953: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498c958: add    $0x8,%rsp
  0x000000012498c95c: jmpq   0x000000012498c966
  0x000000012498c961: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498c966: movabs $0x0,%r10
  0x000000012498c970: mov    %r10,0x320(%r15)
  0x000000012498c977: movabs $0x0,%r10
  0x000000012498c981: mov    %r10,0x330(%r15)
  0x000000012498c988: movabs $0x0,%r10
  0x000000012498c992: mov    %r10,0x328(%r15)
  0x000000012498c999: vzeroupper 
  0x000000012498c99c: cmpq   $0x0,0x8(%r15)
  0x000000012498c9a4: je     0x000000012498c9af
  0x000000012498c9aa: jmpq   0x0000000124975780
  0x000000012498c9af: mov    -0x40(%rbp),%r13
  0x000000012498c9b3: mov    -0x38(%rbp),%r14
  0x000000012498c9b7: retq   
  0x000000012498c9b8: push   %rax
  0x000000012498c9b9: push   %rbx
  0x000000012498c9ba: mov    -0x18(%rbp),%rbx
  0x000000012498c9be: mov    0x10(%rbx),%rax
  0x000000012498c9c2: test   %rax,%rax
  0x000000012498c9c5: je     0x000000012498ca02
  0x000000012498c9cb: mov    %r13,%rsi
  0x000000012498c9ce: mov    %rbx,%rdi
  0x000000012498c9d1: test   $0xf,%esp
  0x000000012498c9d7: je     0x000000012498c9ef
  0x000000012498c9dd: sub    $0x8,%rsp
  0x000000012498c9e1: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012498c9e6: add    $0x8,%rsp
  0x000000012498c9ea: jmpq   0x000000012498c9f4
  0x000000012498c9ef: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012498c9f4: mov    0x10(%rbx),%rbx
  0x000000012498c9f8: add    $0x138,%rbx
  0x000000012498c9ff: add    %rbx,%rax
  0x000000012498ca02: mov    %rax,-0x28(%rbp)
  0x000000012498ca06: pop    %rbx
  0x000000012498ca07: pop    %rax
  0x000000012498ca08: jmpq   0x000000012498c8f3
  0x000000012498ca0d: neg    %rdx
  0x000000012498ca10: add    %r13,%rdx
  0x000000012498ca13: callq  0x000000012498ca1d
  0x000000012498ca18: jmpq   0x000000012498cab2
  0x000000012498ca1d: mov    %rdx,%rsi
  0x000000012498ca20: lea    0x8(%rsp),%rax
  0x000000012498ca25: mov    %r13,-0x40(%rbp)
  0x000000012498ca29: mov    %r15,%rdi
  0x000000012498ca2c: vzeroupper 
  0x000000012498ca2f: mov    %rbp,0x330(%r15)
  0x000000012498ca36: mov    %rax,0x320(%r15)
  0x000000012498ca3d: test   $0xf,%esp
  0x000000012498ca43: je     0x000000012498ca5b
  0x000000012498ca49: sub    $0x8,%rsp
  0x000000012498ca4d: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498ca52: add    $0x8,%rsp
  0x000000012498ca56: jmpq   0x000000012498ca60
  0x000000012498ca5b: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498ca60: movabs $0x0,%r10
  0x000000012498ca6a: mov    %r10,0x320(%r15)
  0x000000012498ca71: movabs $0x0,%r10
  0x000000012498ca7b: mov    %r10,0x330(%r15)
  0x000000012498ca82: movabs $0x0,%r10
  0x000000012498ca8c: mov    %r10,0x328(%r15)
  0x000000012498ca93: vzeroupper 
  0x000000012498ca96: cmpq   $0x0,0x8(%r15)
  0x000000012498ca9e: je     0x000000012498caa9
  0x000000012498caa4: jmpq   0x0000000124975780
  0x000000012498caa9: mov    -0x40(%rbp),%r13
  0x000000012498caad: mov    -0x38(%rbp),%r14
  0x000000012498cab1: retq   
  0x000000012498cab2: test   %rax,%rax
  0x000000012498cab5: je     0x000000012498c8f3
  0x000000012498cabb: cmpb   $0x0,0x156(%rax)
  0x000000012498cac2: jne    0x000000012498c8f3
  0x000000012498cac8: mov    %rax,%rbx
  0x000000012498cacb: callq  0x000000012498cad5
  0x000000012498cad0: jmpq   0x000000012498cb67
  0x000000012498cad5: lea    0x8(%rsp),%rax
  0x000000012498cada: mov    %r13,-0x40(%rbp)
  0x000000012498cade: mov    %r15,%rdi
  0x000000012498cae1: vzeroupper 
  0x000000012498cae4: mov    %rbp,0x330(%r15)
  0x000000012498caeb: mov    %rax,0x320(%r15)
  0x000000012498caf2: test   $0xf,%esp
  0x000000012498caf8: je     0x000000012498cb10
  0x000000012498cafe: sub    $0x8,%rsp
  0x000000012498cb02: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x000000012498cb07: add    $0x8,%rsp
  0x000000012498cb0b: jmpq   0x000000012498cb15
  0x000000012498cb10: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x000000012498cb15: movabs $0x0,%r10
  0x000000012498cb1f: mov    %r10,0x320(%r15)
  0x000000012498cb26: movabs $0x0,%r10
  0x000000012498cb30: mov    %r10,0x330(%r15)
  0x000000012498cb37: movabs $0x0,%r10
  0x000000012498cb41: mov    %r10,0x328(%r15)
  0x000000012498cb48: vzeroupper 
  0x000000012498cb4b: cmpq   $0x0,0x8(%r15)
  0x000000012498cb53: je     0x000000012498cb5e
  0x000000012498cb59: jmpq   0x0000000124975780
  0x000000012498cb5e: mov    -0x40(%rbp),%r13
  0x000000012498cb62: mov    -0x38(%rbp),%r14
  0x000000012498cb66: retq   
  0x000000012498cb67: mov    %rax,%rsi
  0x000000012498cb6a: mov    -0x8(%rbp),%rdx
  0x000000012498cb6e: leaveq 
  0x000000012498cb6f: pop    %rcx
  0x000000012498cb70: mov    %rdx,%rsp
  0x000000012498cb73: and    $0xfffffffffffffff0,%rsp
  0x000000012498cb77: push   %rcx
  0x000000012498cb78: jmpq   *0x110(%rbx)
  0x000000012498cb7e: mov    -0x28(%rbp),%rax
  0x000000012498cb82: test   %rax,%rax
  0x000000012498cb85: je     0x000000012498cb9d
  0x000000012498cb8b: addq   $0x1,0x18(%rax)
  0x000000012498cb90: sbbq   $0x0,0x18(%rax)
  0x000000012498cb95: add    $0x20,%rax
  0x000000012498cb99: mov    %rax,-0x28(%rbp)
  0x000000012498cb9d: movzbl 0x3(%r13),%ebx
  0x000000012498cba2: add    $0x3,%r13
  0x000000012498cba6: movabs $0x1151d7a20,%r10
  0x000000012498cbb0: jmpq   *(%r10,%rbx,8)
  0x000000012498cbb4: nopl   0x0(%rax)
  0x000000012498cbb8: add    %al,(%rax)
  0x000000012498cbba: add    %al,(%rax)
  0x000000012498cbbc: add    %al,(%rax)
  0x000000012498cbbe: add    %al,(%rax)

----------------------------------------------------------------------
if_icmpge  162 if_icmpge  [0x000000012498cbe0, 0x000000012498d000]  1056 bytes

  0x000000012498cbe0: mov    (%rsp),%eax
  0x000000012498cbe3: add    $0x8,%rsp
  0x000000012498cbe7: mov    (%rsp),%edx
  0x000000012498cbea: add    $0x8,%rsp
  0x000000012498cbee: cmp    %eax,%edx
  0x000000012498cbf0: jl     0x000000012498cfbe
  0x000000012498cbf6: mov    -0x18(%rbp),%rcx
  0x000000012498cbfa: mov    -0x28(%rbp),%rax
  0x000000012498cbfe: test   %rax,%rax
  0x000000012498cc01: je     0x000000012498cc1f
  0x000000012498cc07: mov    0x8(%rax),%rbx
  0x000000012498cc0b: add    $0x1,%rbx
  0x000000012498cc0f: sbb    $0x0,%rbx
  0x000000012498cc13: mov    %rbx,0x8(%rax)
  0x000000012498cc17: add    0x10(%rax),%rax
  0x000000012498cc1b: mov    %rax,-0x28(%rbp)
  0x000000012498cc1f: movswl 0x1(%r13),%edx
  0x000000012498cc24: bswap  %edx
  0x000000012498cc26: sar    $0x10,%edx
  0x000000012498cc29: movslq %edx,%rdx
  0x000000012498cc2c: add    %rdx,%r13
  0x000000012498cc2f: test   %edx,%edx
  0x000000012498cc31: jns    0x000000012498cd33
  0x000000012498cc37: mov    0x18(%rcx),%rax
  0x000000012498cc3b: test   %rax,%rax
  0x000000012498cc3e: jne    0x000000012498ccf4
  0x000000012498cc44: push   %rdx
  0x000000012498cc45: push   %rcx
  0x000000012498cc46: callq  0x000000012498cc50
  0x000000012498cc4b: jmpq   0x000000012498cce5
  0x000000012498cc50: mov    %rcx,%rsi
  0x000000012498cc53: lea    0x8(%rsp),%rax
  0x000000012498cc58: mov    %r13,-0x40(%rbp)
  0x000000012498cc5c: mov    %r15,%rdi
  0x000000012498cc5f: vzeroupper 
  0x000000012498cc62: mov    %rbp,0x330(%r15)
  0x000000012498cc69: mov    %rax,0x320(%r15)
  0x000000012498cc70: test   $0xf,%esp
  0x000000012498cc76: je     0x000000012498cc8e
  0x000000012498cc7c: sub    $0x8,%rsp
  0x000000012498cc80: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498cc85: add    $0x8,%rsp
  0x000000012498cc89: jmpq   0x000000012498cc93
  0x000000012498cc8e: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498cc93: movabs $0x0,%r10
  0x000000012498cc9d: mov    %r10,0x320(%r15)
  0x000000012498cca4: movabs $0x0,%r10
  0x000000012498ccae: mov    %r10,0x330(%r15)
  0x000000012498ccb5: movabs $0x0,%r10
  0x000000012498ccbf: mov    %r10,0x328(%r15)
  0x000000012498ccc6: vzeroupper 
  0x000000012498ccc9: cmpq   $0x0,0x8(%r15)
  0x000000012498ccd1: je     0x000000012498ccdc
  0x000000012498ccd7: jmpq   0x0000000124975780
  0x000000012498ccdc: mov    -0x40(%rbp),%r13
  0x000000012498cce0: mov    -0x38(%rbp),%r14
  0x000000012498cce4: retq   
  0x000000012498cce5: pop    %rcx
  0x000000012498cce6: pop    %rdx
  0x000000012498cce7: mov    0x18(%rcx),%rax
  0x000000012498cceb: test   %rax,%rax
  0x000000012498ccee: je     0x000000012498cd33
  0x000000012498ccf4: mov    0x10(%rcx),%rbx
  0x000000012498ccf8: test   %rbx,%rbx
  0x000000012498ccfb: je     0x000000012498cd1d
  0x000000012498ccfd: mov    0x108(%rbx),%eax
  0x000000012498cd03: add    $0x8,%eax
  0x000000012498cd06: mov    %eax,0x108(%rbx)
  0x000000012498cd0c: and    0x11c(%rbx),%eax
  0x000000012498cd12: je     0x000000012498ce4d
  0x000000012498cd18: jmpq   0x000000012498cd33
  0x000000012498cd1d: mov    0x18(%rcx),%rcx
  0x000000012498cd21: mov    0x1c(%rcx),%eax
  0x000000012498cd24: add    $0x8,%eax
  0x000000012498cd27: mov    %eax,0x1c(%rcx)
  0x000000012498cd2a: and    0x34(%rcx),%eax
  0x000000012498cd2d: je     0x000000012498ce4d
  0x000000012498cd33: movzbl 0x0(%r13),%ebx
  0x000000012498cd38: testb  $0x8,0x108(%r15)
  0x000000012498cd40: je     0x000000012498cd4e
  0x000000012498cd42: movabs $0x1151dd020,%r10
  0x000000012498cd4c: jmp    0x000000012498cd58
  0x000000012498cd4e: movabs $0x1151d7a20,%r10
  0x000000012498cd58: jmpq   *(%r10,%rbx,8)
  0x000000012498cd5c: callq  0x000000012498cd66
  0x000000012498cd61: jmpq   0x000000012498cdf8
  0x000000012498cd66: lea    0x8(%rsp),%rax
  0x000000012498cd6b: mov    %r13,-0x40(%rbp)
  0x000000012498cd6f: mov    %r15,%rdi
  0x000000012498cd72: vzeroupper 
  0x000000012498cd75: mov    %rbp,0x330(%r15)
  0x000000012498cd7c: mov    %rax,0x320(%r15)
  0x000000012498cd83: test   $0xf,%esp
  0x000000012498cd89: je     0x000000012498cda1
  0x000000012498cd8f: sub    $0x8,%rsp
  0x000000012498cd93: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498cd98: add    $0x8,%rsp
  0x000000012498cd9c: jmpq   0x000000012498cda6
  0x000000012498cda1: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498cda6: movabs $0x0,%r10
  0x000000012498cdb0: mov    %r10,0x320(%r15)
  0x000000012498cdb7: movabs $0x0,%r10
  0x000000012498cdc1: mov    %r10,0x330(%r15)
  0x000000012498cdc8: movabs $0x0,%r10
  0x000000012498cdd2: mov    %r10,0x328(%r15)
  0x000000012498cdd9: vzeroupper 
  0x000000012498cddc: cmpq   $0x0,0x8(%r15)
  0x000000012498cde4: je     0x000000012498cdef
  0x000000012498cdea: jmpq   0x0000000124975780
  0x000000012498cdef: mov    -0x40(%rbp),%r13
  0x000000012498cdf3: mov    -0x38(%rbp),%r14
  0x000000012498cdf7: retq   
  0x000000012498cdf8: push   %rax
  0x000000012498cdf9: push   %rbx
  0x000000012498cdfa: mov    -0x18(%rbp),%rbx
  0x000000012498cdfe: mov    0x10(%rbx),%rax
  0x000000012498ce02: test   %rax,%rax
  0x000000012498ce05: je     0x000000012498ce42
  0x000000012498ce0b: mov    %r13,%rsi
  0x000000012498ce0e: mov    %rbx,%rdi
  0x000000012498ce11: test   $0xf,%esp
  0x000000012498ce17: je     0x000000012498ce2f
  0x000000012498ce1d: sub    $0x8,%rsp
  0x000000012498ce21: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012498ce26: add    $0x8,%rsp
  0x000000012498ce2a: jmpq   0x000000012498ce34
  0x000000012498ce2f: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012498ce34: mov    0x10(%rbx),%rbx
  0x000000012498ce38: add    $0x138,%rbx
  0x000000012498ce3f: add    %rbx,%rax
  0x000000012498ce42: mov    %rax,-0x28(%rbp)
  0x000000012498ce46: pop    %rbx
  0x000000012498ce47: pop    %rax
  0x000000012498ce48: jmpq   0x000000012498cd33
  0x000000012498ce4d: neg    %rdx
  0x000000012498ce50: add    %r13,%rdx
  0x000000012498ce53: callq  0x000000012498ce5d
  0x000000012498ce58: jmpq   0x000000012498cef2
  0x000000012498ce5d: mov    %rdx,%rsi
  0x000000012498ce60: lea    0x8(%rsp),%rax
  0x000000012498ce65: mov    %r13,-0x40(%rbp)
  0x000000012498ce69: mov    %r15,%rdi
  0x000000012498ce6c: vzeroupper 
  0x000000012498ce6f: mov    %rbp,0x330(%r15)
  0x000000012498ce76: mov    %rax,0x320(%r15)
  0x000000012498ce7d: test   $0xf,%esp
  0x000000012498ce83: je     0x000000012498ce9b
  0x000000012498ce89: sub    $0x8,%rsp
  0x000000012498ce8d: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498ce92: add    $0x8,%rsp
  0x000000012498ce96: jmpq   0x000000012498cea0
  0x000000012498ce9b: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498cea0: movabs $0x0,%r10
  0x000000012498ceaa: mov    %r10,0x320(%r15)
  0x000000012498ceb1: movabs $0x0,%r10
  0x000000012498cebb: mov    %r10,0x330(%r15)
  0x000000012498cec2: movabs $0x0,%r10
  0x000000012498cecc: mov    %r10,0x328(%r15)
  0x000000012498ced3: vzeroupper 
  0x000000012498ced6: cmpq   $0x0,0x8(%r15)
  0x000000012498cede: je     0x000000012498cee9
  0x000000012498cee4: jmpq   0x0000000124975780
  0x000000012498cee9: mov    -0x40(%rbp),%r13
  0x000000012498ceed: mov    -0x38(%rbp),%r14
  0x000000012498cef1: retq   
  0x000000012498cef2: test   %rax,%rax
  0x000000012498cef5: je     0x000000012498cd33
  0x000000012498cefb: cmpb   $0x0,0x156(%rax)
  0x000000012498cf02: jne    0x000000012498cd33
  0x000000012498cf08: mov    %rax,%rbx
  0x000000012498cf0b: callq  0x000000012498cf15
  0x000000012498cf10: jmpq   0x000000012498cfa7
  0x000000012498cf15: lea    0x8(%rsp),%rax
  0x000000012498cf1a: mov    %r13,-0x40(%rbp)
  0x000000012498cf1e: mov    %r15,%rdi
  0x000000012498cf21: vzeroupper 
  0x000000012498cf24: mov    %rbp,0x330(%r15)
  0x000000012498cf2b: mov    %rax,0x320(%r15)
  0x000000012498cf32: test   $0xf,%esp
  0x000000012498cf38: je     0x000000012498cf50
  0x000000012498cf3e: sub    $0x8,%rsp
  0x000000012498cf42: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x000000012498cf47: add    $0x8,%rsp
  0x000000012498cf4b: jmpq   0x000000012498cf55
  0x000000012498cf50: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x000000012498cf55: movabs $0x0,%r10
  0x000000012498cf5f: mov    %r10,0x320(%r15)
  0x000000012498cf66: movabs $0x0,%r10
  0x000000012498cf70: mov    %r10,0x330(%r15)
  0x000000012498cf77: movabs $0x0,%r10
  0x000000012498cf81: mov    %r10,0x328(%r15)
  0x000000012498cf88: vzeroupper 
  0x000000012498cf8b: cmpq   $0x0,0x8(%r15)
  0x000000012498cf93: je     0x000000012498cf9e
  0x000000012498cf99: jmpq   0x0000000124975780
  0x000000012498cf9e: mov    -0x40(%rbp),%r13
  0x000000012498cfa2: mov    -0x38(%rbp),%r14
  0x000000012498cfa6: retq   
  0x000000012498cfa7: mov    %rax,%rsi
  0x000000012498cfaa: mov    -0x8(%rbp),%rdx
  0x000000012498cfae: leaveq 
  0x000000012498cfaf: pop    %rcx
  0x000000012498cfb0: mov    %rdx,%rsp
  0x000000012498cfb3: and    $0xfffffffffffffff0,%rsp
  0x000000012498cfb7: push   %rcx
  0x000000012498cfb8: jmpq   *0x110(%rbx)
  0x000000012498cfbe: mov    -0x28(%rbp),%rax
  0x000000012498cfc2: test   %rax,%rax
  0x000000012498cfc5: je     0x000000012498cfdd
  0x000000012498cfcb: addq   $0x1,0x18(%rax)
  0x000000012498cfd0: sbbq   $0x0,0x18(%rax)
  0x000000012498cfd5: add    $0x20,%rax
  0x000000012498cfd9: mov    %rax,-0x28(%rbp)
  0x000000012498cfdd: movzbl 0x3(%r13),%ebx
  0x000000012498cfe2: add    $0x3,%r13
  0x000000012498cfe6: movabs $0x1151d7a20,%r10
  0x000000012498cff0: jmpq   *(%r10,%rbx,8)
  0x000000012498cff4: nopl   0x0(%rax)
  0x000000012498cff8: add    %al,(%rax)
  0x000000012498cffa: add    %al,(%rax)
  0x000000012498cffc: add    %al,(%rax)
  0x000000012498cffe: add    %al,(%rax)

----------------------------------------------------------------------
if_icmpgt  163 if_icmpgt  [0x000000012498d020, 0x000000012498d440]  1056 bytes

  0x000000012498d020: mov    (%rsp),%eax
  0x000000012498d023: add    $0x8,%rsp
  0x000000012498d027: mov    (%rsp),%edx
  0x000000012498d02a: add    $0x8,%rsp
  0x000000012498d02e: cmp    %eax,%edx
  0x000000012498d030: jle    0x000000012498d3fe
  0x000000012498d036: mov    -0x18(%rbp),%rcx
  0x000000012498d03a: mov    -0x28(%rbp),%rax
  0x000000012498d03e: test   %rax,%rax
  0x000000012498d041: je     0x000000012498d05f
  0x000000012498d047: mov    0x8(%rax),%rbx
  0x000000012498d04b: add    $0x1,%rbx
  0x000000012498d04f: sbb    $0x0,%rbx
  0x000000012498d053: mov    %rbx,0x8(%rax)
  0x000000012498d057: add    0x10(%rax),%rax
  0x000000012498d05b: mov    %rax,-0x28(%rbp)
  0x000000012498d05f: movswl 0x1(%r13),%edx
  0x000000012498d064: bswap  %edx
  0x000000012498d066: sar    $0x10,%edx
  0x000000012498d069: movslq %edx,%rdx
  0x000000012498d06c: add    %rdx,%r13
  0x000000012498d06f: test   %edx,%edx
  0x000000012498d071: jns    0x000000012498d173
  0x000000012498d077: mov    0x18(%rcx),%rax
  0x000000012498d07b: test   %rax,%rax
  0x000000012498d07e: jne    0x000000012498d134
  0x000000012498d084: push   %rdx
  0x000000012498d085: push   %rcx
  0x000000012498d086: callq  0x000000012498d090
  0x000000012498d08b: jmpq   0x000000012498d125
  0x000000012498d090: mov    %rcx,%rsi
  0x000000012498d093: lea    0x8(%rsp),%rax
  0x000000012498d098: mov    %r13,-0x40(%rbp)
  0x000000012498d09c: mov    %r15,%rdi
  0x000000012498d09f: vzeroupper 
  0x000000012498d0a2: mov    %rbp,0x330(%r15)
  0x000000012498d0a9: mov    %rax,0x320(%r15)
  0x000000012498d0b0: test   $0xf,%esp
  0x000000012498d0b6: je     0x000000012498d0ce
  0x000000012498d0bc: sub    $0x8,%rsp
  0x000000012498d0c0: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498d0c5: add    $0x8,%rsp
  0x000000012498d0c9: jmpq   0x000000012498d0d3
  0x000000012498d0ce: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498d0d3: movabs $0x0,%r10
  0x000000012498d0dd: mov    %r10,0x320(%r15)
  0x000000012498d0e4: movabs $0x0,%r10
  0x000000012498d0ee: mov    %r10,0x330(%r15)
  0x000000012498d0f5: movabs $0x0,%r10
  0x000000012498d0ff: mov    %r10,0x328(%r15)
  0x000000012498d106: vzeroupper 
  0x000000012498d109: cmpq   $0x0,0x8(%r15)
  0x000000012498d111: je     0x000000012498d11c
  0x000000012498d117: jmpq   0x0000000124975780
  0x000000012498d11c: mov    -0x40(%rbp),%r13
  0x000000012498d120: mov    -0x38(%rbp),%r14
  0x000000012498d124: retq   
  0x000000012498d125: pop    %rcx
  0x000000012498d126: pop    %rdx
  0x000000012498d127: mov    0x18(%rcx),%rax
  0x000000012498d12b: test   %rax,%rax
  0x000000012498d12e: je     0x000000012498d173
  0x000000012498d134: mov    0x10(%rcx),%rbx
  0x000000012498d138: test   %rbx,%rbx
  0x000000012498d13b: je     0x000000012498d15d
  0x000000012498d13d: mov    0x108(%rbx),%eax
  0x000000012498d143: add    $0x8,%eax
  0x000000012498d146: mov    %eax,0x108(%rbx)
  0x000000012498d14c: and    0x11c(%rbx),%eax
  0x000000012498d152: je     0x000000012498d28d
  0x000000012498d158: jmpq   0x000000012498d173
  0x000000012498d15d: mov    0x18(%rcx),%rcx
  0x000000012498d161: mov    0x1c(%rcx),%eax
  0x000000012498d164: add    $0x8,%eax
  0x000000012498d167: mov    %eax,0x1c(%rcx)
  0x000000012498d16a: and    0x34(%rcx),%eax
  0x000000012498d16d: je     0x000000012498d28d
  0x000000012498d173: movzbl 0x0(%r13),%ebx
  0x000000012498d178: testb  $0x8,0x108(%r15)
  0x000000012498d180: je     0x000000012498d18e
  0x000000012498d182: movabs $0x1151dd020,%r10
  0x000000012498d18c: jmp    0x000000012498d198
  0x000000012498d18e: movabs $0x1151d7a20,%r10
  0x000000012498d198: jmpq   *(%r10,%rbx,8)
  0x000000012498d19c: callq  0x000000012498d1a6
  0x000000012498d1a1: jmpq   0x000000012498d238
  0x000000012498d1a6: lea    0x8(%rsp),%rax
  0x000000012498d1ab: mov    %r13,-0x40(%rbp)
  0x000000012498d1af: mov    %r15,%rdi
  0x000000012498d1b2: vzeroupper 
  0x000000012498d1b5: mov    %rbp,0x330(%r15)
  0x000000012498d1bc: mov    %rax,0x320(%r15)
  0x000000012498d1c3: test   $0xf,%esp
  0x000000012498d1c9: je     0x000000012498d1e1
  0x000000012498d1cf: sub    $0x8,%rsp
  0x000000012498d1d3: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498d1d8: add    $0x8,%rsp
  0x000000012498d1dc: jmpq   0x000000012498d1e6
  0x000000012498d1e1: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498d1e6: movabs $0x0,%r10
  0x000000012498d1f0: mov    %r10,0x320(%r15)
  0x000000012498d1f7: movabs $0x0,%r10
  0x000000012498d201: mov    %r10,0x330(%r15)
  0x000000012498d208: movabs $0x0,%r10
  0x000000012498d212: mov    %r10,0x328(%r15)
  0x000000012498d219: vzeroupper 
  0x000000012498d21c: cmpq   $0x0,0x8(%r15)
  0x000000012498d224: je     0x000000012498d22f
  0x000000012498d22a: jmpq   0x0000000124975780
  0x000000012498d22f: mov    -0x40(%rbp),%r13
  0x000000012498d233: mov    -0x38(%rbp),%r14
  0x000000012498d237: retq   
  0x000000012498d238: push   %rax
  0x000000012498d239: push   %rbx
  0x000000012498d23a: mov    -0x18(%rbp),%rbx
  0x000000012498d23e: mov    0x10(%rbx),%rax
  0x000000012498d242: test   %rax,%rax
  0x000000012498d245: je     0x000000012498d282
  0x000000012498d24b: mov    %r13,%rsi
  0x000000012498d24e: mov    %rbx,%rdi
  0x000000012498d251: test   $0xf,%esp
  0x000000012498d257: je     0x000000012498d26f
  0x000000012498d25d: sub    $0x8,%rsp
  0x000000012498d261: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012498d266: add    $0x8,%rsp
  0x000000012498d26a: jmpq   0x000000012498d274
  0x000000012498d26f: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012498d274: mov    0x10(%rbx),%rbx
  0x000000012498d278: add    $0x138,%rbx
  0x000000012498d27f: add    %rbx,%rax
  0x000000012498d282: mov    %rax,-0x28(%rbp)
  0x000000012498d286: pop    %rbx
  0x000000012498d287: pop    %rax
  0x000000012498d288: jmpq   0x000000012498d173
  0x000000012498d28d: neg    %rdx
  0x000000012498d290: add    %r13,%rdx
  0x000000012498d293: callq  0x000000012498d29d
  0x000000012498d298: jmpq   0x000000012498d332
  0x000000012498d29d: mov    %rdx,%rsi
  0x000000012498d2a0: lea    0x8(%rsp),%rax
  0x000000012498d2a5: mov    %r13,-0x40(%rbp)
  0x000000012498d2a9: mov    %r15,%rdi
  0x000000012498d2ac: vzeroupper 
  0x000000012498d2af: mov    %rbp,0x330(%r15)
  0x000000012498d2b6: mov    %rax,0x320(%r15)
  0x000000012498d2bd: test   $0xf,%esp
  0x000000012498d2c3: je     0x000000012498d2db
  0x000000012498d2c9: sub    $0x8,%rsp
  0x000000012498d2cd: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498d2d2: add    $0x8,%rsp
  0x000000012498d2d6: jmpq   0x000000012498d2e0
  0x000000012498d2db: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498d2e0: movabs $0x0,%r10
  0x000000012498d2ea: mov    %r10,0x320(%r15)
  0x000000012498d2f1: movabs $0x0,%r10
  0x000000012498d2fb: mov    %r10,0x330(%r15)
  0x000000012498d302: movabs $0x0,%r10
  0x000000012498d30c: mov    %r10,0x328(%r15)
  0x000000012498d313: vzeroupper 
  0x000000012498d316: cmpq   $0x0,0x8(%r15)
  0x000000012498d31e: je     0x000000012498d329
  0x000000012498d324: jmpq   0x0000000124975780
  0x000000012498d329: mov    -0x40(%rbp),%r13
  0x000000012498d32d: mov    -0x38(%rbp),%r14
  0x000000012498d331: retq   
  0x000000012498d332: test   %rax,%rax
  0x000000012498d335: je     0x000000012498d173
  0x000000012498d33b: cmpb   $0x0,0x156(%rax)
  0x000000012498d342: jne    0x000000012498d173
  0x000000012498d348: mov    %rax,%rbx
  0x000000012498d34b: callq  0x000000012498d355
  0x000000012498d350: jmpq   0x000000012498d3e7
  0x000000012498d355: lea    0x8(%rsp),%rax
  0x000000012498d35a: mov    %r13,-0x40(%rbp)
  0x000000012498d35e: mov    %r15,%rdi
  0x000000012498d361: vzeroupper 
  0x000000012498d364: mov    %rbp,0x330(%r15)
  0x000000012498d36b: mov    %rax,0x320(%r15)
  0x000000012498d372: test   $0xf,%esp
  0x000000012498d378: je     0x000000012498d390
  0x000000012498d37e: sub    $0x8,%rsp
  0x000000012498d382: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x000000012498d387: add    $0x8,%rsp
  0x000000012498d38b: jmpq   0x000000012498d395
  0x000000012498d390: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x000000012498d395: movabs $0x0,%r10
  0x000000012498d39f: mov    %r10,0x320(%r15)
  0x000000012498d3a6: movabs $0x0,%r10
  0x000000012498d3b0: mov    %r10,0x330(%r15)
  0x000000012498d3b7: movabs $0x0,%r10
  0x000000012498d3c1: mov    %r10,0x328(%r15)
  0x000000012498d3c8: vzeroupper 
  0x000000012498d3cb: cmpq   $0x0,0x8(%r15)
  0x000000012498d3d3: je     0x000000012498d3de
  0x000000012498d3d9: jmpq   0x0000000124975780
  0x000000012498d3de: mov    -0x40(%rbp),%r13
  0x000000012498d3e2: mov    -0x38(%rbp),%r14
  0x000000012498d3e6: retq   
  0x000000012498d3e7: mov    %rax,%rsi
  0x000000012498d3ea: mov    -0x8(%rbp),%rdx
  0x000000012498d3ee: leaveq 
  0x000000012498d3ef: pop    %rcx
  0x000000012498d3f0: mov    %rdx,%rsp
  0x000000012498d3f3: and    $0xfffffffffffffff0,%rsp
  0x000000012498d3f7: push   %rcx
  0x000000012498d3f8: jmpq   *0x110(%rbx)
  0x000000012498d3fe: mov    -0x28(%rbp),%rax
  0x000000012498d402: test   %rax,%rax
  0x000000012498d405: je     0x000000012498d41d
  0x000000012498d40b: addq   $0x1,0x18(%rax)
  0x000000012498d410: sbbq   $0x0,0x18(%rax)
  0x000000012498d415: add    $0x20,%rax
  0x000000012498d419: mov    %rax,-0x28(%rbp)
  0x000000012498d41d: movzbl 0x3(%r13),%ebx
  0x000000012498d422: add    $0x3,%r13
  0x000000012498d426: movabs $0x1151d7a20,%r10
  0x000000012498d430: jmpq   *(%r10,%rbx,8)
  0x000000012498d434: nopl   0x0(%rax)
  0x000000012498d438: add    %al,(%rax)
  0x000000012498d43a: add    %al,(%rax)
  0x000000012498d43c: add    %al,(%rax)
  0x000000012498d43e: add    %al,(%rax)

----------------------------------------------------------------------
if_icmple  164 if_icmple  [0x000000012498d460, 0x000000012498d880]  1056 bytes

  0x000000012498d460: mov    (%rsp),%eax
  0x000000012498d463: add    $0x8,%rsp
  0x000000012498d467: mov    (%rsp),%edx
  0x000000012498d46a: add    $0x8,%rsp
  0x000000012498d46e: cmp    %eax,%edx
  0x000000012498d470: jg     0x000000012498d83e
  0x000000012498d476: mov    -0x18(%rbp),%rcx
  0x000000012498d47a: mov    -0x28(%rbp),%rax
  0x000000012498d47e: test   %rax,%rax
  0x000000012498d481: je     0x000000012498d49f
  0x000000012498d487: mov    0x8(%rax),%rbx
  0x000000012498d48b: add    $0x1,%rbx
  0x000000012498d48f: sbb    $0x0,%rbx
  0x000000012498d493: mov    %rbx,0x8(%rax)
  0x000000012498d497: add    0x10(%rax),%rax
  0x000000012498d49b: mov    %rax,-0x28(%rbp)
  0x000000012498d49f: movswl 0x1(%r13),%edx
  0x000000012498d4a4: bswap  %edx
  0x000000012498d4a6: sar    $0x10,%edx
  0x000000012498d4a9: movslq %edx,%rdx
  0x000000012498d4ac: add    %rdx,%r13
  0x000000012498d4af: test   %edx,%edx
  0x000000012498d4b1: jns    0x000000012498d5b3
  0x000000012498d4b7: mov    0x18(%rcx),%rax
  0x000000012498d4bb: test   %rax,%rax
  0x000000012498d4be: jne    0x000000012498d574
  0x000000012498d4c4: push   %rdx
  0x000000012498d4c5: push   %rcx
  0x000000012498d4c6: callq  0x000000012498d4d0
  0x000000012498d4cb: jmpq   0x000000012498d565
  0x000000012498d4d0: mov    %rcx,%rsi
  0x000000012498d4d3: lea    0x8(%rsp),%rax
  0x000000012498d4d8: mov    %r13,-0x40(%rbp)
  0x000000012498d4dc: mov    %r15,%rdi
  0x000000012498d4df: vzeroupper 
  0x000000012498d4e2: mov    %rbp,0x330(%r15)
  0x000000012498d4e9: mov    %rax,0x320(%r15)
  0x000000012498d4f0: test   $0xf,%esp
  0x000000012498d4f6: je     0x000000012498d50e
  0x000000012498d4fc: sub    $0x8,%rsp
  0x000000012498d500: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498d505: add    $0x8,%rsp
  0x000000012498d509: jmpq   0x000000012498d513
  0x000000012498d50e: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498d513: movabs $0x0,%r10
  0x000000012498d51d: mov    %r10,0x320(%r15)
  0x000000012498d524: movabs $0x0,%r10
  0x000000012498d52e: mov    %r10,0x330(%r15)
  0x000000012498d535: movabs $0x0,%r10
  0x000000012498d53f: mov    %r10,0x328(%r15)
  0x000000012498d546: vzeroupper 
  0x000000012498d549: cmpq   $0x0,0x8(%r15)
  0x000000012498d551: je     0x000000012498d55c
  0x000000012498d557: jmpq   0x0000000124975780
  0x000000012498d55c: mov    -0x40(%rbp),%r13
  0x000000012498d560: mov    -0x38(%rbp),%r14
  0x000000012498d564: retq   
  0x000000012498d565: pop    %rcx
  0x000000012498d566: pop    %rdx
  0x000000012498d567: mov    0x18(%rcx),%rax
  0x000000012498d56b: test   %rax,%rax
  0x000000012498d56e: je     0x000000012498d5b3
  0x000000012498d574: mov    0x10(%rcx),%rbx
  0x000000012498d578: test   %rbx,%rbx
  0x000000012498d57b: je     0x000000012498d59d
  0x000000012498d57d: mov    0x108(%rbx),%eax
  0x000000012498d583: add    $0x8,%eax
  0x000000012498d586: mov    %eax,0x108(%rbx)
  0x000000012498d58c: and    0x11c(%rbx),%eax
  0x000000012498d592: je     0x000000012498d6cd
  0x000000012498d598: jmpq   0x000000012498d5b3
  0x000000012498d59d: mov    0x18(%rcx),%rcx
  0x000000012498d5a1: mov    0x1c(%rcx),%eax
  0x000000012498d5a4: add    $0x8,%eax
  0x000000012498d5a7: mov    %eax,0x1c(%rcx)
  0x000000012498d5aa: and    0x34(%rcx),%eax
  0x000000012498d5ad: je     0x000000012498d6cd
  0x000000012498d5b3: movzbl 0x0(%r13),%ebx
  0x000000012498d5b8: testb  $0x8,0x108(%r15)
  0x000000012498d5c0: je     0x000000012498d5ce
  0x000000012498d5c2: movabs $0x1151dd020,%r10
  0x000000012498d5cc: jmp    0x000000012498d5d8
  0x000000012498d5ce: movabs $0x1151d7a20,%r10
  0x000000012498d5d8: jmpq   *(%r10,%rbx,8)
  0x000000012498d5dc: callq  0x000000012498d5e6
  0x000000012498d5e1: jmpq   0x000000012498d678
  0x000000012498d5e6: lea    0x8(%rsp),%rax
  0x000000012498d5eb: mov    %r13,-0x40(%rbp)
  0x000000012498d5ef: mov    %r15,%rdi
  0x000000012498d5f2: vzeroupper 
  0x000000012498d5f5: mov    %rbp,0x330(%r15)
  0x000000012498d5fc: mov    %rax,0x320(%r15)
  0x000000012498d603: test   $0xf,%esp
  0x000000012498d609: je     0x000000012498d621
  0x000000012498d60f: sub    $0x8,%rsp
  0x000000012498d613: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498d618: add    $0x8,%rsp
  0x000000012498d61c: jmpq   0x000000012498d626
  0x000000012498d621: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498d626: movabs $0x0,%r10
  0x000000012498d630: mov    %r10,0x320(%r15)
  0x000000012498d637: movabs $0x0,%r10
  0x000000012498d641: mov    %r10,0x330(%r15)
  0x000000012498d648: movabs $0x0,%r10
  0x000000012498d652: mov    %r10,0x328(%r15)
  0x000000012498d659: vzeroupper 
  0x000000012498d65c: cmpq   $0x0,0x8(%r15)
  0x000000012498d664: je     0x000000012498d66f
  0x000000012498d66a: jmpq   0x0000000124975780
  0x000000012498d66f: mov    -0x40(%rbp),%r13
  0x000000012498d673: mov    -0x38(%rbp),%r14
  0x000000012498d677: retq   
  0x000000012498d678: push   %rax
  0x000000012498d679: push   %rbx
  0x000000012498d67a: mov    -0x18(%rbp),%rbx
  0x000000012498d67e: mov    0x10(%rbx),%rax
  0x000000012498d682: test   %rax,%rax
  0x000000012498d685: je     0x000000012498d6c2
  0x000000012498d68b: mov    %r13,%rsi
  0x000000012498d68e: mov    %rbx,%rdi
  0x000000012498d691: test   $0xf,%esp
  0x000000012498d697: je     0x000000012498d6af
  0x000000012498d69d: sub    $0x8,%rsp
  0x000000012498d6a1: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012498d6a6: add    $0x8,%rsp
  0x000000012498d6aa: jmpq   0x000000012498d6b4
  0x000000012498d6af: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012498d6b4: mov    0x10(%rbx),%rbx
  0x000000012498d6b8: add    $0x138,%rbx
  0x000000012498d6bf: add    %rbx,%rax
  0x000000012498d6c2: mov    %rax,-0x28(%rbp)
  0x000000012498d6c6: pop    %rbx
  0x000000012498d6c7: pop    %rax
  0x000000012498d6c8: jmpq   0x000000012498d5b3
  0x000000012498d6cd: neg    %rdx
  0x000000012498d6d0: add    %r13,%rdx
  0x000000012498d6d3: callq  0x000000012498d6dd
  0x000000012498d6d8: jmpq   0x000000012498d772
  0x000000012498d6dd: mov    %rdx,%rsi
  0x000000012498d6e0: lea    0x8(%rsp),%rax
  0x000000012498d6e5: mov    %r13,-0x40(%rbp)
  0x000000012498d6e9: mov    %r15,%rdi
  0x000000012498d6ec: vzeroupper 
  0x000000012498d6ef: mov    %rbp,0x330(%r15)
  0x000000012498d6f6: mov    %rax,0x320(%r15)
  0x000000012498d6fd: test   $0xf,%esp
  0x000000012498d703: je     0x000000012498d71b
  0x000000012498d709: sub    $0x8,%rsp
  0x000000012498d70d: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498d712: add    $0x8,%rsp
  0x000000012498d716: jmpq   0x000000012498d720
  0x000000012498d71b: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498d720: movabs $0x0,%r10
  0x000000012498d72a: mov    %r10,0x320(%r15)
  0x000000012498d731: movabs $0x0,%r10
  0x000000012498d73b: mov    %r10,0x330(%r15)
  0x000000012498d742: movabs $0x0,%r10
  0x000000012498d74c: mov    %r10,0x328(%r15)
  0x000000012498d753: vzeroupper 
  0x000000012498d756: cmpq   $0x0,0x8(%r15)
  0x000000012498d75e: je     0x000000012498d769
  0x000000012498d764: jmpq   0x0000000124975780
  0x000000012498d769: mov    -0x40(%rbp),%r13
  0x000000012498d76d: mov    -0x38(%rbp),%r14
  0x000000012498d771: retq   
  0x000000012498d772: test   %rax,%rax
  0x000000012498d775: je     0x000000012498d5b3
  0x000000012498d77b: cmpb   $0x0,0x156(%rax)
  0x000000012498d782: jne    0x000000012498d5b3
  0x000000012498d788: mov    %rax,%rbx
  0x000000012498d78b: callq  0x000000012498d795
  0x000000012498d790: jmpq   0x000000012498d827
  0x000000012498d795: lea    0x8(%rsp),%rax
  0x000000012498d79a: mov    %r13,-0x40(%rbp)
  0x000000012498d79e: mov    %r15,%rdi
  0x000000012498d7a1: vzeroupper 
  0x000000012498d7a4: mov    %rbp,0x330(%r15)
  0x000000012498d7ab: mov    %rax,0x320(%r15)
  0x000000012498d7b2: test   $0xf,%esp
  0x000000012498d7b8: je     0x000000012498d7d0
  0x000000012498d7be: sub    $0x8,%rsp
  0x000000012498d7c2: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x000000012498d7c7: add    $0x8,%rsp
  0x000000012498d7cb: jmpq   0x000000012498d7d5
  0x000000012498d7d0: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x000000012498d7d5: movabs $0x0,%r10
  0x000000012498d7df: mov    %r10,0x320(%r15)
  0x000000012498d7e6: movabs $0x0,%r10
  0x000000012498d7f0: mov    %r10,0x330(%r15)
  0x000000012498d7f7: movabs $0x0,%r10
  0x000000012498d801: mov    %r10,0x328(%r15)
  0x000000012498d808: vzeroupper 
  0x000000012498d80b: cmpq   $0x0,0x8(%r15)
  0x000000012498d813: je     0x000000012498d81e
  0x000000012498d819: jmpq   0x0000000124975780
  0x000000012498d81e: mov    -0x40(%rbp),%r13
  0x000000012498d822: mov    -0x38(%rbp),%r14
  0x000000012498d826: retq   
  0x000000012498d827: mov    %rax,%rsi
  0x000000012498d82a: mov    -0x8(%rbp),%rdx
  0x000000012498d82e: leaveq 
  0x000000012498d82f: pop    %rcx
  0x000000012498d830: mov    %rdx,%rsp
  0x000000012498d833: and    $0xfffffffffffffff0,%rsp
  0x000000012498d837: push   %rcx
  0x000000012498d838: jmpq   *0x110(%rbx)
  0x000000012498d83e: mov    -0x28(%rbp),%rax
  0x000000012498d842: test   %rax,%rax
  0x000000012498d845: je     0x000000012498d85d
  0x000000012498d84b: addq   $0x1,0x18(%rax)
  0x000000012498d850: sbbq   $0x0,0x18(%rax)
  0x000000012498d855: add    $0x20,%rax
  0x000000012498d859: mov    %rax,-0x28(%rbp)
  0x000000012498d85d: movzbl 0x3(%r13),%ebx
  0x000000012498d862: add    $0x3,%r13
  0x000000012498d866: movabs $0x1151d7a20,%r10
  0x000000012498d870: jmpq   *(%r10,%rbx,8)
  0x000000012498d874: nopl   0x0(%rax)
  0x000000012498d878: add    %al,(%rax)
  0x000000012498d87a: add    %al,(%rax)
  0x000000012498d87c: add    %al,(%rax)
  0x000000012498d87e: add    %al,(%rax)

----------------------------------------------------------------------
if_acmpeq  165 if_acmpeq  [0x000000012498d8a0, 0x000000012498dcc0]  1056 bytes

  0x000000012498d8a0: pop    %rax
  0x000000012498d8a1: pop    %rdx
  0x000000012498d8a2: cmp    %rax,%rdx
  0x000000012498d8a5: jne    0x000000012498dc73
  0x000000012498d8ab: mov    -0x18(%rbp),%rcx
  0x000000012498d8af: mov    -0x28(%rbp),%rax
  0x000000012498d8b3: test   %rax,%rax
  0x000000012498d8b6: je     0x000000012498d8d4
  0x000000012498d8bc: mov    0x8(%rax),%rbx
  0x000000012498d8c0: add    $0x1,%rbx
  0x000000012498d8c4: sbb    $0x0,%rbx
  0x000000012498d8c8: mov    %rbx,0x8(%rax)
  0x000000012498d8cc: add    0x10(%rax),%rax
  0x000000012498d8d0: mov    %rax,-0x28(%rbp)
  0x000000012498d8d4: movswl 0x1(%r13),%edx
  0x000000012498d8d9: bswap  %edx
  0x000000012498d8db: sar    $0x10,%edx
  0x000000012498d8de: movslq %edx,%rdx
  0x000000012498d8e1: add    %rdx,%r13
  0x000000012498d8e4: test   %edx,%edx
  0x000000012498d8e6: jns    0x000000012498d9e8
  0x000000012498d8ec: mov    0x18(%rcx),%rax
  0x000000012498d8f0: test   %rax,%rax
  0x000000012498d8f3: jne    0x000000012498d9a9
  0x000000012498d8f9: push   %rdx
  0x000000012498d8fa: push   %rcx
  0x000000012498d8fb: callq  0x000000012498d905
  0x000000012498d900: jmpq   0x000000012498d99a
  0x000000012498d905: mov    %rcx,%rsi
  0x000000012498d908: lea    0x8(%rsp),%rax
  0x000000012498d90d: mov    %r13,-0x40(%rbp)
  0x000000012498d911: mov    %r15,%rdi
  0x000000012498d914: vzeroupper 
  0x000000012498d917: mov    %rbp,0x330(%r15)
  0x000000012498d91e: mov    %rax,0x320(%r15)
  0x000000012498d925: test   $0xf,%esp
  0x000000012498d92b: je     0x000000012498d943
  0x000000012498d931: sub    $0x8,%rsp
  0x000000012498d935: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498d93a: add    $0x8,%rsp
  0x000000012498d93e: jmpq   0x000000012498d948
  0x000000012498d943: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498d948: movabs $0x0,%r10
  0x000000012498d952: mov    %r10,0x320(%r15)
  0x000000012498d959: movabs $0x0,%r10
  0x000000012498d963: mov    %r10,0x330(%r15)
  0x000000012498d96a: movabs $0x0,%r10
  0x000000012498d974: mov    %r10,0x328(%r15)
  0x000000012498d97b: vzeroupper 
  0x000000012498d97e: cmpq   $0x0,0x8(%r15)
  0x000000012498d986: je     0x000000012498d991
  0x000000012498d98c: jmpq   0x0000000124975780
  0x000000012498d991: mov    -0x40(%rbp),%r13
  0x000000012498d995: mov    -0x38(%rbp),%r14
  0x000000012498d999: retq   
  0x000000012498d99a: pop    %rcx
  0x000000012498d99b: pop    %rdx
  0x000000012498d99c: mov    0x18(%rcx),%rax
  0x000000012498d9a0: test   %rax,%rax
  0x000000012498d9a3: je     0x000000012498d9e8
  0x000000012498d9a9: mov    0x10(%rcx),%rbx
  0x000000012498d9ad: test   %rbx,%rbx
  0x000000012498d9b0: je     0x000000012498d9d2
  0x000000012498d9b2: mov    0x108(%rbx),%eax
  0x000000012498d9b8: add    $0x8,%eax
  0x000000012498d9bb: mov    %eax,0x108(%rbx)
  0x000000012498d9c1: and    0x11c(%rbx),%eax
  0x000000012498d9c7: je     0x000000012498db02
  0x000000012498d9cd: jmpq   0x000000012498d9e8
  0x000000012498d9d2: mov    0x18(%rcx),%rcx
  0x000000012498d9d6: mov    0x1c(%rcx),%eax
  0x000000012498d9d9: add    $0x8,%eax
  0x000000012498d9dc: mov    %eax,0x1c(%rcx)
  0x000000012498d9df: and    0x34(%rcx),%eax
  0x000000012498d9e2: je     0x000000012498db02
  0x000000012498d9e8: movzbl 0x0(%r13),%ebx
  0x000000012498d9ed: testb  $0x8,0x108(%r15)
  0x000000012498d9f5: je     0x000000012498da03
  0x000000012498d9f7: movabs $0x1151dd020,%r10
  0x000000012498da01: jmp    0x000000012498da0d
  0x000000012498da03: movabs $0x1151d7a20,%r10
  0x000000012498da0d: jmpq   *(%r10,%rbx,8)
  0x000000012498da11: callq  0x000000012498da1b
  0x000000012498da16: jmpq   0x000000012498daad
  0x000000012498da1b: lea    0x8(%rsp),%rax
  0x000000012498da20: mov    %r13,-0x40(%rbp)
  0x000000012498da24: mov    %r15,%rdi
  0x000000012498da27: vzeroupper 
  0x000000012498da2a: mov    %rbp,0x330(%r15)
  0x000000012498da31: mov    %rax,0x320(%r15)
  0x000000012498da38: test   $0xf,%esp
  0x000000012498da3e: je     0x000000012498da56
  0x000000012498da44: sub    $0x8,%rsp
  0x000000012498da48: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498da4d: add    $0x8,%rsp
  0x000000012498da51: jmpq   0x000000012498da5b
  0x000000012498da56: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498da5b: movabs $0x0,%r10
  0x000000012498da65: mov    %r10,0x320(%r15)
  0x000000012498da6c: movabs $0x0,%r10
  0x000000012498da76: mov    %r10,0x330(%r15)
  0x000000012498da7d: movabs $0x0,%r10
  0x000000012498da87: mov    %r10,0x328(%r15)
  0x000000012498da8e: vzeroupper 
  0x000000012498da91: cmpq   $0x0,0x8(%r15)
  0x000000012498da99: je     0x000000012498daa4
  0x000000012498da9f: jmpq   0x0000000124975780
  0x000000012498daa4: mov    -0x40(%rbp),%r13
  0x000000012498daa8: mov    -0x38(%rbp),%r14
  0x000000012498daac: retq   
  0x000000012498daad: push   %rax
  0x000000012498daae: push   %rbx
  0x000000012498daaf: mov    -0x18(%rbp),%rbx
  0x000000012498dab3: mov    0x10(%rbx),%rax
  0x000000012498dab7: test   %rax,%rax
  0x000000012498daba: je     0x000000012498daf7
  0x000000012498dac0: mov    %r13,%rsi
  0x000000012498dac3: mov    %rbx,%rdi
  0x000000012498dac6: test   $0xf,%esp
  0x000000012498dacc: je     0x000000012498dae4
  0x000000012498dad2: sub    $0x8,%rsp
  0x000000012498dad6: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012498dadb: add    $0x8,%rsp
  0x000000012498dadf: jmpq   0x000000012498dae9
  0x000000012498dae4: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012498dae9: mov    0x10(%rbx),%rbx
  0x000000012498daed: add    $0x138,%rbx
  0x000000012498daf4: add    %rbx,%rax
  0x000000012498daf7: mov    %rax,-0x28(%rbp)
  0x000000012498dafb: pop    %rbx
  0x000000012498dafc: pop    %rax
  0x000000012498dafd: jmpq   0x000000012498d9e8
  0x000000012498db02: neg    %rdx
  0x000000012498db05: add    %r13,%rdx
  0x000000012498db08: callq  0x000000012498db12
  0x000000012498db0d: jmpq   0x000000012498dba7
  0x000000012498db12: mov    %rdx,%rsi
  0x000000012498db15: lea    0x8(%rsp),%rax
  0x000000012498db1a: mov    %r13,-0x40(%rbp)
  0x000000012498db1e: mov    %r15,%rdi
  0x000000012498db21: vzeroupper 
  0x000000012498db24: mov    %rbp,0x330(%r15)
  0x000000012498db2b: mov    %rax,0x320(%r15)
  0x000000012498db32: test   $0xf,%esp
  0x000000012498db38: je     0x000000012498db50
  0x000000012498db3e: sub    $0x8,%rsp
  0x000000012498db42: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498db47: add    $0x8,%rsp
  0x000000012498db4b: jmpq   0x000000012498db55
  0x000000012498db50: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498db55: movabs $0x0,%r10
  0x000000012498db5f: mov    %r10,0x320(%r15)
  0x000000012498db66: movabs $0x0,%r10
  0x000000012498db70: mov    %r10,0x330(%r15)
  0x000000012498db77: movabs $0x0,%r10
  0x000000012498db81: mov    %r10,0x328(%r15)
  0x000000012498db88: vzeroupper 
  0x000000012498db8b: cmpq   $0x0,0x8(%r15)
  0x000000012498db93: je     0x000000012498db9e
  0x000000012498db99: jmpq   0x0000000124975780
  0x000000012498db9e: mov    -0x40(%rbp),%r13
  0x000000012498dba2: mov    -0x38(%rbp),%r14
  0x000000012498dba6: retq   
  0x000000012498dba7: test   %rax,%rax
  0x000000012498dbaa: je     0x000000012498d9e8
  0x000000012498dbb0: cmpb   $0x0,0x156(%rax)
  0x000000012498dbb7: jne    0x000000012498d9e8
  0x000000012498dbbd: mov    %rax,%rbx
  0x000000012498dbc0: callq  0x000000012498dbca
  0x000000012498dbc5: jmpq   0x000000012498dc5c
  0x000000012498dbca: lea    0x8(%rsp),%rax
  0x000000012498dbcf: mov    %r13,-0x40(%rbp)
  0x000000012498dbd3: mov    %r15,%rdi
  0x000000012498dbd6: vzeroupper 
  0x000000012498dbd9: mov    %rbp,0x330(%r15)
  0x000000012498dbe0: mov    %rax,0x320(%r15)
  0x000000012498dbe7: test   $0xf,%esp
  0x000000012498dbed: je     0x000000012498dc05
  0x000000012498dbf3: sub    $0x8,%rsp
  0x000000012498dbf7: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x000000012498dbfc: add    $0x8,%rsp
  0x000000012498dc00: jmpq   0x000000012498dc0a
  0x000000012498dc05: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x000000012498dc0a: movabs $0x0,%r10
  0x000000012498dc14: mov    %r10,0x320(%r15)
  0x000000012498dc1b: movabs $0x0,%r10
  0x000000012498dc25: mov    %r10,0x330(%r15)
  0x000000012498dc2c: movabs $0x0,%r10
  0x000000012498dc36: mov    %r10,0x328(%r15)
  0x000000012498dc3d: vzeroupper 
  0x000000012498dc40: cmpq   $0x0,0x8(%r15)
  0x000000012498dc48: je     0x000000012498dc53
  0x000000012498dc4e: jmpq   0x0000000124975780
  0x000000012498dc53: mov    -0x40(%rbp),%r13
  0x000000012498dc57: mov    -0x38(%rbp),%r14
  0x000000012498dc5b: retq   
  0x000000012498dc5c: mov    %rax,%rsi
  0x000000012498dc5f: mov    -0x8(%rbp),%rdx
  0x000000012498dc63: leaveq 
  0x000000012498dc64: pop    %rcx
  0x000000012498dc65: mov    %rdx,%rsp
  0x000000012498dc68: and    $0xfffffffffffffff0,%rsp
  0x000000012498dc6c: push   %rcx
  0x000000012498dc6d: jmpq   *0x110(%rbx)
  0x000000012498dc73: mov    -0x28(%rbp),%rax
  0x000000012498dc77: test   %rax,%rax
  0x000000012498dc7a: je     0x000000012498dc92
  0x000000012498dc80: addq   $0x1,0x18(%rax)
  0x000000012498dc85: sbbq   $0x0,0x18(%rax)
  0x000000012498dc8a: add    $0x20,%rax
  0x000000012498dc8e: mov    %rax,-0x28(%rbp)
  0x000000012498dc92: movzbl 0x3(%r13),%ebx
  0x000000012498dc97: add    $0x3,%r13
  0x000000012498dc9b: movabs $0x1151d7a20,%r10
  0x000000012498dca5: jmpq   *(%r10,%rbx,8)
  0x000000012498dca9: nopl   0x0(%rax)
  0x000000012498dcb0: add    %al,(%rax)
  0x000000012498dcb2: add    %al,(%rax)
  0x000000012498dcb4: add    %al,(%rax)
  0x000000012498dcb6: add    %al,(%rax)
  0x000000012498dcb8: add    %al,(%rax)
  0x000000012498dcba: add    %al,(%rax)
  0x000000012498dcbc: add    %al,(%rax)
  0x000000012498dcbe: add    %al,(%rax)

----------------------------------------------------------------------
if_acmpne  166 if_acmpne  [0x000000012498dce0, 0x000000012498e100]  1056 bytes

  0x000000012498dce0: pop    %rax
  0x000000012498dce1: pop    %rdx
  0x000000012498dce2: cmp    %rax,%rdx
  0x000000012498dce5: je     0x000000012498e0b3
  0x000000012498dceb: mov    -0x18(%rbp),%rcx
  0x000000012498dcef: mov    -0x28(%rbp),%rax
  0x000000012498dcf3: test   %rax,%rax
  0x000000012498dcf6: je     0x000000012498dd14
  0x000000012498dcfc: mov    0x8(%rax),%rbx
  0x000000012498dd00: add    $0x1,%rbx
  0x000000012498dd04: sbb    $0x0,%rbx
  0x000000012498dd08: mov    %rbx,0x8(%rax)
  0x000000012498dd0c: add    0x10(%rax),%rax
  0x000000012498dd10: mov    %rax,-0x28(%rbp)
  0x000000012498dd14: movswl 0x1(%r13),%edx
  0x000000012498dd19: bswap  %edx
  0x000000012498dd1b: sar    $0x10,%edx
  0x000000012498dd1e: movslq %edx,%rdx
  0x000000012498dd21: add    %rdx,%r13
  0x000000012498dd24: test   %edx,%edx
  0x000000012498dd26: jns    0x000000012498de28
  0x000000012498dd2c: mov    0x18(%rcx),%rax
  0x000000012498dd30: test   %rax,%rax
  0x000000012498dd33: jne    0x000000012498dde9
  0x000000012498dd39: push   %rdx
  0x000000012498dd3a: push   %rcx
  0x000000012498dd3b: callq  0x000000012498dd45
  0x000000012498dd40: jmpq   0x000000012498ddda
  0x000000012498dd45: mov    %rcx,%rsi
  0x000000012498dd48: lea    0x8(%rsp),%rax
  0x000000012498dd4d: mov    %r13,-0x40(%rbp)
  0x000000012498dd51: mov    %r15,%rdi
  0x000000012498dd54: vzeroupper 
  0x000000012498dd57: mov    %rbp,0x330(%r15)
  0x000000012498dd5e: mov    %rax,0x320(%r15)
  0x000000012498dd65: test   $0xf,%esp
  0x000000012498dd6b: je     0x000000012498dd83
  0x000000012498dd71: sub    $0x8,%rsp
  0x000000012498dd75: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498dd7a: add    $0x8,%rsp
  0x000000012498dd7e: jmpq   0x000000012498dd88
  0x000000012498dd83: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498dd88: movabs $0x0,%r10
  0x000000012498dd92: mov    %r10,0x320(%r15)
  0x000000012498dd99: movabs $0x0,%r10
  0x000000012498dda3: mov    %r10,0x330(%r15)
  0x000000012498ddaa: movabs $0x0,%r10
  0x000000012498ddb4: mov    %r10,0x328(%r15)
  0x000000012498ddbb: vzeroupper 
  0x000000012498ddbe: cmpq   $0x0,0x8(%r15)
  0x000000012498ddc6: je     0x000000012498ddd1
  0x000000012498ddcc: jmpq   0x0000000124975780
  0x000000012498ddd1: mov    -0x40(%rbp),%r13
  0x000000012498ddd5: mov    -0x38(%rbp),%r14
  0x000000012498ddd9: retq   
  0x000000012498ddda: pop    %rcx
  0x000000012498dddb: pop    %rdx
  0x000000012498dddc: mov    0x18(%rcx),%rax
  0x000000012498dde0: test   %rax,%rax
  0x000000012498dde3: je     0x000000012498de28
  0x000000012498dde9: mov    0x10(%rcx),%rbx
  0x000000012498dded: test   %rbx,%rbx
  0x000000012498ddf0: je     0x000000012498de12
  0x000000012498ddf2: mov    0x108(%rbx),%eax
  0x000000012498ddf8: add    $0x8,%eax
  0x000000012498ddfb: mov    %eax,0x108(%rbx)
  0x000000012498de01: and    0x11c(%rbx),%eax
  0x000000012498de07: je     0x000000012498df42
  0x000000012498de0d: jmpq   0x000000012498de28
  0x000000012498de12: mov    0x18(%rcx),%rcx
  0x000000012498de16: mov    0x1c(%rcx),%eax
  0x000000012498de19: add    $0x8,%eax
  0x000000012498de1c: mov    %eax,0x1c(%rcx)
  0x000000012498de1f: and    0x34(%rcx),%eax
  0x000000012498de22: je     0x000000012498df42
  0x000000012498de28: movzbl 0x0(%r13),%ebx
  0x000000012498de2d: testb  $0x8,0x108(%r15)
  0x000000012498de35: je     0x000000012498de43
  0x000000012498de37: movabs $0x1151dd020,%r10
  0x000000012498de41: jmp    0x000000012498de4d
  0x000000012498de43: movabs $0x1151d7a20,%r10
  0x000000012498de4d: jmpq   *(%r10,%rbx,8)
  0x000000012498de51: callq  0x000000012498de5b
  0x000000012498de56: jmpq   0x000000012498deed
  0x000000012498de5b: lea    0x8(%rsp),%rax
  0x000000012498de60: mov    %r13,-0x40(%rbp)
  0x000000012498de64: mov    %r15,%rdi
  0x000000012498de67: vzeroupper 
  0x000000012498de6a: mov    %rbp,0x330(%r15)
  0x000000012498de71: mov    %rax,0x320(%r15)
  0x000000012498de78: test   $0xf,%esp
  0x000000012498de7e: je     0x000000012498de96
  0x000000012498de84: sub    $0x8,%rsp
  0x000000012498de88: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498de8d: add    $0x8,%rsp
  0x000000012498de91: jmpq   0x000000012498de9b
  0x000000012498de96: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498de9b: movabs $0x0,%r10
  0x000000012498dea5: mov    %r10,0x320(%r15)
  0x000000012498deac: movabs $0x0,%r10
  0x000000012498deb6: mov    %r10,0x330(%r15)
  0x000000012498debd: movabs $0x0,%r10
  0x000000012498dec7: mov    %r10,0x328(%r15)
  0x000000012498dece: vzeroupper 
  0x000000012498ded1: cmpq   $0x0,0x8(%r15)
  0x000000012498ded9: je     0x000000012498dee4
  0x000000012498dedf: jmpq   0x0000000124975780
  0x000000012498dee4: mov    -0x40(%rbp),%r13
  0x000000012498dee8: mov    -0x38(%rbp),%r14
  0x000000012498deec: retq   
  0x000000012498deed: push   %rax
  0x000000012498deee: push   %rbx
  0x000000012498deef: mov    -0x18(%rbp),%rbx
  0x000000012498def3: mov    0x10(%rbx),%rax
  0x000000012498def7: test   %rax,%rax
  0x000000012498defa: je     0x000000012498df37
  0x000000012498df00: mov    %r13,%rsi
  0x000000012498df03: mov    %rbx,%rdi
  0x000000012498df06: test   $0xf,%esp
  0x000000012498df0c: je     0x000000012498df24
  0x000000012498df12: sub    $0x8,%rsp
  0x000000012498df16: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012498df1b: add    $0x8,%rsp
  0x000000012498df1f: jmpq   0x000000012498df29
  0x000000012498df24: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012498df29: mov    0x10(%rbx),%rbx
  0x000000012498df2d: add    $0x138,%rbx
  0x000000012498df34: add    %rbx,%rax
  0x000000012498df37: mov    %rax,-0x28(%rbp)
  0x000000012498df3b: pop    %rbx
  0x000000012498df3c: pop    %rax
  0x000000012498df3d: jmpq   0x000000012498de28
  0x000000012498df42: neg    %rdx
  0x000000012498df45: add    %r13,%rdx
  0x000000012498df48: callq  0x000000012498df52
  0x000000012498df4d: jmpq   0x000000012498dfe7
  0x000000012498df52: mov    %rdx,%rsi
  0x000000012498df55: lea    0x8(%rsp),%rax
  0x000000012498df5a: mov    %r13,-0x40(%rbp)
  0x000000012498df5e: mov    %r15,%rdi
  0x000000012498df61: vzeroupper 
  0x000000012498df64: mov    %rbp,0x330(%r15)
  0x000000012498df6b: mov    %rax,0x320(%r15)
  0x000000012498df72: test   $0xf,%esp
  0x000000012498df78: je     0x000000012498df90
  0x000000012498df7e: sub    $0x8,%rsp
  0x000000012498df82: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498df87: add    $0x8,%rsp
  0x000000012498df8b: jmpq   0x000000012498df95
  0x000000012498df90: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498df95: movabs $0x0,%r10
  0x000000012498df9f: mov    %r10,0x320(%r15)
  0x000000012498dfa6: movabs $0x0,%r10
  0x000000012498dfb0: mov    %r10,0x330(%r15)
  0x000000012498dfb7: movabs $0x0,%r10
  0x000000012498dfc1: mov    %r10,0x328(%r15)
  0x000000012498dfc8: vzeroupper 
  0x000000012498dfcb: cmpq   $0x0,0x8(%r15)
  0x000000012498dfd3: je     0x000000012498dfde
  0x000000012498dfd9: jmpq   0x0000000124975780
  0x000000012498dfde: mov    -0x40(%rbp),%r13
  0x000000012498dfe2: mov    -0x38(%rbp),%r14
  0x000000012498dfe6: retq   
  0x000000012498dfe7: test   %rax,%rax
  0x000000012498dfea: je     0x000000012498de28
  0x000000012498dff0: cmpb   $0x0,0x156(%rax)
  0x000000012498dff7: jne    0x000000012498de28
  0x000000012498dffd: mov    %rax,%rbx
  0x000000012498e000: callq  0x000000012498e00a
  0x000000012498e005: jmpq   0x000000012498e09c
  0x000000012498e00a: lea    0x8(%rsp),%rax
  0x000000012498e00f: mov    %r13,-0x40(%rbp)
  0x000000012498e013: mov    %r15,%rdi
  0x000000012498e016: vzeroupper 
  0x000000012498e019: mov    %rbp,0x330(%r15)
  0x000000012498e020: mov    %rax,0x320(%r15)
  0x000000012498e027: test   $0xf,%esp
  0x000000012498e02d: je     0x000000012498e045
  0x000000012498e033: sub    $0x8,%rsp
  0x000000012498e037: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x000000012498e03c: add    $0x8,%rsp
  0x000000012498e040: jmpq   0x000000012498e04a
  0x000000012498e045: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x000000012498e04a: movabs $0x0,%r10
  0x000000012498e054: mov    %r10,0x320(%r15)
  0x000000012498e05b: movabs $0x0,%r10
  0x000000012498e065: mov    %r10,0x330(%r15)
  0x000000012498e06c: movabs $0x0,%r10
  0x000000012498e076: mov    %r10,0x328(%r15)
  0x000000012498e07d: vzeroupper 
  0x000000012498e080: cmpq   $0x0,0x8(%r15)
  0x000000012498e088: je     0x000000012498e093
  0x000000012498e08e: jmpq   0x0000000124975780
  0x000000012498e093: mov    -0x40(%rbp),%r13
  0x000000012498e097: mov    -0x38(%rbp),%r14
  0x000000012498e09b: retq   
  0x000000012498e09c: mov    %rax,%rsi
  0x000000012498e09f: mov    -0x8(%rbp),%rdx
  0x000000012498e0a3: leaveq 
  0x000000012498e0a4: pop    %rcx
  0x000000012498e0a5: mov    %rdx,%rsp
  0x000000012498e0a8: and    $0xfffffffffffffff0,%rsp
  0x000000012498e0ac: push   %rcx
  0x000000012498e0ad: jmpq   *0x110(%rbx)
  0x000000012498e0b3: mov    -0x28(%rbp),%rax
  0x000000012498e0b7: test   %rax,%rax
  0x000000012498e0ba: je     0x000000012498e0d2
  0x000000012498e0c0: addq   $0x1,0x18(%rax)
  0x000000012498e0c5: sbbq   $0x0,0x18(%rax)
  0x000000012498e0ca: add    $0x20,%rax
  0x000000012498e0ce: mov    %rax,-0x28(%rbp)
  0x000000012498e0d2: movzbl 0x3(%r13),%ebx
  0x000000012498e0d7: add    $0x3,%r13
  0x000000012498e0db: movabs $0x1151d7a20,%r10
  0x000000012498e0e5: jmpq   *(%r10,%rbx,8)
  0x000000012498e0e9: nopl   0x0(%rax)
  0x000000012498e0f0: add    %al,(%rax)
  0x000000012498e0f2: add    %al,(%rax)
  0x000000012498e0f4: add    %al,(%rax)
  0x000000012498e0f6: add    %al,(%rax)
  0x000000012498e0f8: add    %al,(%rax)
  0x000000012498e0fa: add    %al,(%rax)
  0x000000012498e0fc: add    %al,(%rax)
  0x000000012498e0fe: add    %al,(%rax)

----------------------------------------------------------------------
goto  167 goto  [0x000000012498e120, 0x000000012498e540]  1056 bytes

  0x000000012498e120: push   %rax
  0x000000012498e121: jmpq   0x000000012498e15f
  0x000000012498e126: sub    $0x8,%rsp
  0x000000012498e12a: vmovss %xmm0,(%rsp)
  0x000000012498e12f: jmpq   0x000000012498e15f
  0x000000012498e134: sub    $0x10,%rsp
  0x000000012498e138: vmovsd %xmm0,(%rsp)
  0x000000012498e13d: jmpq   0x000000012498e15f
  0x000000012498e142: sub    $0x10,%rsp
  0x000000012498e146: mov    %rax,(%rsp)
  0x000000012498e14a: movabs $0x0,%r10
  0x000000012498e154: mov    %r10,0x8(%rsp)
  0x000000012498e159: jmpq   0x000000012498e15f
  0x000000012498e15e: push   %rax
  0x000000012498e15f: mov    -0x18(%rbp),%rcx
  0x000000012498e163: mov    -0x28(%rbp),%rax
  0x000000012498e167: test   %rax,%rax
  0x000000012498e16a: je     0x000000012498e188
  0x000000012498e170: mov    0x8(%rax),%rbx
  0x000000012498e174: add    $0x1,%rbx
  0x000000012498e178: sbb    $0x0,%rbx
  0x000000012498e17c: mov    %rbx,0x8(%rax)
  0x000000012498e180: add    0x10(%rax),%rax
  0x000000012498e184: mov    %rax,-0x28(%rbp)
  0x000000012498e188: movswl 0x1(%r13),%edx
  0x000000012498e18d: bswap  %edx
  0x000000012498e18f: sar    $0x10,%edx
  0x000000012498e192: movslq %edx,%rdx
  0x000000012498e195: add    %rdx,%r13
  0x000000012498e198: test   %edx,%edx
  0x000000012498e19a: jns    0x000000012498e29c
  0x000000012498e1a0: mov    0x18(%rcx),%rax
  0x000000012498e1a4: test   %rax,%rax
  0x000000012498e1a7: jne    0x000000012498e25d
  0x000000012498e1ad: push   %rdx
  0x000000012498e1ae: push   %rcx
  0x000000012498e1af: callq  0x000000012498e1b9
  0x000000012498e1b4: jmpq   0x000000012498e24e
  0x000000012498e1b9: mov    %rcx,%rsi
  0x000000012498e1bc: lea    0x8(%rsp),%rax
  0x000000012498e1c1: mov    %r13,-0x40(%rbp)
  0x000000012498e1c5: mov    %r15,%rdi
  0x000000012498e1c8: vzeroupper 
  0x000000012498e1cb: mov    %rbp,0x330(%r15)
  0x000000012498e1d2: mov    %rax,0x320(%r15)
  0x000000012498e1d9: test   $0xf,%esp
  0x000000012498e1df: je     0x000000012498e1f7
  0x000000012498e1e5: sub    $0x8,%rsp
  0x000000012498e1e9: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498e1ee: add    $0x8,%rsp
  0x000000012498e1f2: jmpq   0x000000012498e1fc
  0x000000012498e1f7: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x000000012498e1fc: movabs $0x0,%r10
  0x000000012498e206: mov    %r10,0x320(%r15)
  0x000000012498e20d: movabs $0x0,%r10
  0x000000012498e217: mov    %r10,0x330(%r15)
  0x000000012498e21e: movabs $0x0,%r10
  0x000000012498e228: mov    %r10,0x328(%r15)
  0x000000012498e22f: vzeroupper 
  0x000000012498e232: cmpq   $0x0,0x8(%r15)
  0x000000012498e23a: je     0x000000012498e245
  0x000000012498e240: jmpq   0x0000000124975780
  0x000000012498e245: mov    -0x40(%rbp),%r13
  0x000000012498e249: mov    -0x38(%rbp),%r14
  0x000000012498e24d: retq   
  0x000000012498e24e: pop    %rcx
  0x000000012498e24f: pop    %rdx
  0x000000012498e250: mov    0x18(%rcx),%rax
  0x000000012498e254: test   %rax,%rax
  0x000000012498e257: je     0x000000012498e29c
  0x000000012498e25d: mov    0x10(%rcx),%rbx
  0x000000012498e261: test   %rbx,%rbx
  0x000000012498e264: je     0x000000012498e286
  0x000000012498e266: mov    0x108(%rbx),%eax
  0x000000012498e26c: add    $0x8,%eax
  0x000000012498e26f: mov    %eax,0x108(%rbx)
  0x000000012498e275: and    0x11c(%rbx),%eax
  0x000000012498e27b: je     0x000000012498e3b6
  0x000000012498e281: jmpq   0x000000012498e29c
  0x000000012498e286: mov    0x18(%rcx),%rcx
  0x000000012498e28a: mov    0x1c(%rcx),%eax
  0x000000012498e28d: add    $0x8,%eax
  0x000000012498e290: mov    %eax,0x1c(%rcx)
  0x000000012498e293: and    0x34(%rcx),%eax
  0x000000012498e296: je     0x000000012498e3b6
  0x000000012498e29c: movzbl 0x0(%r13),%ebx
  0x000000012498e2a1: testb  $0x8,0x108(%r15)
  0x000000012498e2a9: je     0x000000012498e2b7
  0x000000012498e2ab: movabs $0x1151dd020,%r10
  0x000000012498e2b5: jmp    0x000000012498e2c1
  0x000000012498e2b7: movabs $0x1151d7a20,%r10
  0x000000012498e2c1: jmpq   *(%r10,%rbx,8)
  0x000000012498e2c5: callq  0x000000012498e2cf
  0x000000012498e2ca: jmpq   0x000000012498e361
  0x000000012498e2cf: lea    0x8(%rsp),%rax
  0x000000012498e2d4: mov    %r13,-0x40(%rbp)
  0x000000012498e2d8: mov    %r15,%rdi
  0x000000012498e2db: vzeroupper 
  0x000000012498e2de: mov    %rbp,0x330(%r15)
  0x000000012498e2e5: mov    %rax,0x320(%r15)
  0x000000012498e2ec: test   $0xf,%esp
  0x000000012498e2f2: je     0x000000012498e30a
  0x000000012498e2f8: sub    $0x8,%rsp
  0x000000012498e2fc: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498e301: add    $0x8,%rsp
  0x000000012498e305: jmpq   0x000000012498e30f
  0x000000012498e30a: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012498e30f: movabs $0x0,%r10
  0x000000012498e319: mov    %r10,0x320(%r15)
  0x000000012498e320: movabs $0x0,%r10
  0x000000012498e32a: mov    %r10,0x330(%r15)
  0x000000012498e331: movabs $0x0,%r10
  0x000000012498e33b: mov    %r10,0x328(%r15)
  0x000000012498e342: vzeroupper 
  0x000000012498e345: cmpq   $0x0,0x8(%r15)
  0x000000012498e34d: je     0x000000012498e358
  0x000000012498e353: jmpq   0x0000000124975780
  0x000000012498e358: mov    -0x40(%rbp),%r13
  0x000000012498e35c: mov    -0x38(%rbp),%r14
  0x000000012498e360: retq   
  0x000000012498e361: push   %rax
  0x000000012498e362: push   %rbx
  0x000000012498e363: mov    -0x18(%rbp),%rbx
  0x000000012498e367: mov    0x10(%rbx),%rax
  0x000000012498e36b: test   %rax,%rax
  0x000000012498e36e: je     0x000000012498e3ab
  0x000000012498e374: mov    %r13,%rsi
  0x000000012498e377: mov    %rbx,%rdi
  0x000000012498e37a: test   $0xf,%esp
  0x000000012498e380: je     0x000000012498e398
  0x000000012498e386: sub    $0x8,%rsp
  0x000000012498e38a: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012498e38f: add    $0x8,%rsp
  0x000000012498e393: jmpq   0x000000012498e39d
  0x000000012498e398: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012498e39d: mov    0x10(%rbx),%rbx
  0x000000012498e3a1: add    $0x138,%rbx
  0x000000012498e3a8: add    %rbx,%rax
  0x000000012498e3ab: mov    %rax,-0x28(%rbp)
  0x000000012498e3af: pop    %rbx
  0x000000012498e3b0: pop    %rax
  0x000000012498e3b1: jmpq   0x000000012498e29c
  0x000000012498e3b6: neg    %rdx
  0x000000012498e3b9: add    %r13,%rdx
  0x000000012498e3bc: callq  0x000000012498e3c6
  0x000000012498e3c1: jmpq   0x000000012498e45b
  0x000000012498e3c6: mov    %rdx,%rsi
  0x000000012498e3c9: lea    0x8(%rsp),%rax
  0x000000012498e3ce: mov    %r13,-0x40(%rbp)
  0x000000012498e3d2: mov    %r15,%rdi
  0x000000012498e3d5: vzeroupper 
  0x000000012498e3d8: mov    %rbp,0x330(%r15)
  0x000000012498e3df: mov    %rax,0x320(%r15)
  0x000000012498e3e6: test   $0xf,%esp
  0x000000012498e3ec: je     0x000000012498e404
  0x000000012498e3f2: sub    $0x8,%rsp
  0x000000012498e3f6: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498e3fb: add    $0x8,%rsp
  0x000000012498e3ff: jmpq   0x000000012498e409
  0x000000012498e404: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x000000012498e409: movabs $0x0,%r10
  0x000000012498e413: mov    %r10,0x320(%r15)
  0x000000012498e41a: movabs $0x0,%r10
  0x000000012498e424: mov    %r10,0x330(%r15)
  0x000000012498e42b: movabs $0x0,%r10
  0x000000012498e435: mov    %r10,0x328(%r15)
  0x000000012498e43c: vzeroupper 
  0x000000012498e43f: cmpq   $0x0,0x8(%r15)
  0x000000012498e447: je     0x000000012498e452
  0x000000012498e44d: jmpq   0x0000000124975780
  0x000000012498e452: mov    -0x40(%rbp),%r13
  0x000000012498e456: mov    -0x38(%rbp),%r14
  0x000000012498e45a: retq   
  0x000000012498e45b: test   %rax,%rax
  0x000000012498e45e: je     0x000000012498e29c
  0x000000012498e464: cmpb   $0x0,0x156(%rax)
  0x000000012498e46b: jne    0x000000012498e29c
  0x000000012498e471: mov    %rax,%rbx
  0x000000012498e474: callq  0x000000012498e47e
  0x000000012498e479: jmpq   0x000000012498e510
  0x000000012498e47e: lea    0x8(%rsp),%rax
  0x000000012498e483: mov    %r13,-0x40(%rbp)
  0x000000012498e487: mov    %r15,%rdi
  0x000000012498e48a: vzeroupper 
  0x000000012498e48d: mov    %rbp,0x330(%r15)
  0x000000012498e494: mov    %rax,0x320(%r15)
  0x000000012498e49b: test   $0xf,%esp
  0x000000012498e4a1: je     0x000000012498e4b9
  0x000000012498e4a7: sub    $0x8,%rsp
  0x000000012498e4ab: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x000000012498e4b0: add    $0x8,%rsp
  0x000000012498e4b4: jmpq   0x000000012498e4be
  0x000000012498e4b9: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x000000012498e4be: movabs $0x0,%r10
  0x000000012498e4c8: mov    %r10,0x320(%r15)
  0x000000012498e4cf: movabs $0x0,%r10
  0x000000012498e4d9: mov    %r10,0x330(%r15)
  0x000000012498e4e0: movabs $0x0,%r10
  0x000000012498e4ea: mov    %r10,0x328(%r15)
  0x000000012498e4f1: vzeroupper 
  0x000000012498e4f4: cmpq   $0x0,0x8(%r15)
  0x000000012498e4fc: je     0x000000012498e507
  0x000000012498e502: jmpq   0x0000000124975780
  0x000000012498e507: mov    -0x40(%rbp),%r13
  0x000000012498e50b: mov    -0x38(%rbp),%r14
  0x000000012498e50f: retq   
  0x000000012498e510: mov    %rax,%rsi
  0x000000012498e513: mov    -0x8(%rbp),%rdx
  0x000000012498e517: leaveq 
  0x000000012498e518: pop    %rcx
  0x000000012498e519: mov    %rdx,%rsp
  0x000000012498e51c: and    $0xfffffffffffffff0,%rsp
  0x000000012498e520: push   %rcx
  0x000000012498e521: jmpq   *0x110(%rbx)
  0x000000012498e527: nop
  0x000000012498e528: add    %al,(%rax)
  0x000000012498e52a: add    %al,(%rax)
  0x000000012498e52c: add    %al,(%rax)
  0x000000012498e52e: add    %al,(%rax)
  0x000000012498e530: add    %al,(%rax)
  0x000000012498e532: add    %al,(%rax)
  0x000000012498e534: add    %al,(%rax)
  0x000000012498e536: add    %al,(%rax)
  0x000000012498e538: add    %al,(%rax)
  0x000000012498e53a: add    %al,(%rax)
  0x000000012498e53c: add    %al,(%rax)
  0x000000012498e53e: add    %al,(%rax)

----------------------------------------------------------------------
jsr  168 jsr  [0x000000012498e560, 0x000000012498e620]  192 bytes

  0x000000012498e560: push   %rax
  0x000000012498e561: jmpq   0x000000012498e59f
  0x000000012498e566: sub    $0x8,%rsp
  0x000000012498e56a: vmovss %xmm0,(%rsp)
  0x000000012498e56f: jmpq   0x000000012498e59f
  0x000000012498e574: sub    $0x10,%rsp
  0x000000012498e578: vmovsd %xmm0,(%rsp)
  0x000000012498e57d: jmpq   0x000000012498e59f
  0x000000012498e582: sub    $0x10,%rsp
  0x000000012498e586: mov    %rax,(%rsp)
  0x000000012498e58a: movabs $0x0,%r10
  0x000000012498e594: mov    %r10,0x8(%rsp)
  0x000000012498e599: jmpq   0x000000012498e59f
  0x000000012498e59e: push   %rax
  0x000000012498e59f: mov    -0x18(%rbp),%rcx
  0x000000012498e5a3: mov    -0x28(%rbp),%rax
  0x000000012498e5a7: test   %rax,%rax
  0x000000012498e5aa: je     0x000000012498e5c8
  0x000000012498e5b0: mov    0x8(%rax),%rbx
  0x000000012498e5b4: add    $0x1,%rbx
  0x000000012498e5b8: sbb    $0x0,%rbx
  0x000000012498e5bc: mov    %rbx,0x8(%rax)
  0x000000012498e5c0: add    0x10(%rax),%rax
  0x000000012498e5c4: mov    %rax,-0x28(%rbp)
  0x000000012498e5c8: movswl 0x1(%r13),%edx
  0x000000012498e5cd: bswap  %edx
  0x000000012498e5cf: sar    $0x10,%edx
  0x000000012498e5d2: movslq %edx,%rdx
  0x000000012498e5d5: movzbl 0x0(%r13,%rdx,1),%ebx
  0x000000012498e5db: lea    -0x35(%r13),%rax
  0x000000012498e5df: sub    0x8(%rcx),%rax
  0x000000012498e5e3: add    %rdx,%r13
  0x000000012498e5e6: push   %rax
  0x000000012498e5e7: testb  $0x8,0x108(%r15)
  0x000000012498e5ef: je     0x000000012498e5fd
  0x000000012498e5f1: movabs $0x1151dd020,%r10
  0x000000012498e5fb: jmp    0x000000012498e607
  0x000000012498e5fd: movabs $0x1151d7a20,%r10
  0x000000012498e607: jmpq   *(%r10,%rbx,8)
  0x000000012498e60b: nopl   0x0(%rax,%rax,1)
  0x000000012498e610: add    %al,(%rax)
  0x000000012498e612: add    %al,(%rax)
  0x000000012498e614: add    %al,(%rax)
  0x000000012498e616: add    %al,(%rax)
  0x000000012498e618: add    %al,(%rax)
  0x000000012498e61a: add    %al,(%rax)
  0x000000012498e61c: add    %al,(%rax)
  0x000000012498e61e: add    %al,(%rax)

----------------------------------------------------------------------
ret  169 ret  [0x000000012498e640, 0x000000012498e900]  704 bytes

  0x000000012498e640: push   %rax
  0x000000012498e641: jmpq   0x000000012498e67f
  0x000000012498e646: sub    $0x8,%rsp
  0x000000012498e64a: vmovss %xmm0,(%rsp)
  0x000000012498e64f: jmpq   0x000000012498e67f
  0x000000012498e654: sub    $0x10,%rsp
  0x000000012498e658: vmovsd %xmm0,(%rsp)
  0x000000012498e65d: jmpq   0x000000012498e67f
  0x000000012498e662: sub    $0x10,%rsp
  0x000000012498e666: mov    %rax,(%rsp)
  0x000000012498e66a: movabs $0x0,%r10
  0x000000012498e674: mov    %r10,0x8(%rsp)
  0x000000012498e679: jmpq   0x000000012498e67f
  0x000000012498e67e: push   %rax
  0x000000012498e67f: movzbl 0x1(%r13),%ebx
  0x000000012498e684: neg    %rbx
  0x000000012498e687: movslq (%r14,%rbx,8),%rbx
  0x000000012498e68b: mov    -0x28(%rbp),%rcx
  0x000000012498e68f: test   %rcx,%rcx
  0x000000012498e692: je     0x000000012498e785
  0x000000012498e698: addq   $0x1,0x8(%rcx)
  0x000000012498e69d: sbbq   $0x0,0x8(%rcx)
  0x000000012498e6a2: cmp    0x10(%rcx),%rbx
  0x000000012498e6a6: jne    0x000000012498e6c3
  0x000000012498e6ac: addq   $0x1,0x18(%rcx)
  0x000000012498e6b1: sbbq   $0x0,0x18(%rcx)
  0x000000012498e6b6: add    0x20(%rcx),%rcx
  0x000000012498e6ba: mov    %rcx,-0x28(%rbp)
  0x000000012498e6be: jmpq   0x000000012498e785
  0x000000012498e6c3: cmp    0x28(%rcx),%rbx
  0x000000012498e6c7: jne    0x000000012498e6e4
  0x000000012498e6cd: addq   $0x1,0x30(%rcx)
  0x000000012498e6d2: sbbq   $0x0,0x30(%rcx)
  0x000000012498e6d7: add    0x38(%rcx),%rcx
  0x000000012498e6db: mov    %rcx,-0x28(%rbp)
  0x000000012498e6df: jmpq   0x000000012498e785
  0x000000012498e6e4: push   %rbx
  0x000000012498e6e5: callq  0x000000012498e6ef
  0x000000012498e6ea: jmpq   0x000000012498e784
  0x000000012498e6ef: mov    %rbx,%rsi
  0x000000012498e6f2: lea    0x8(%rsp),%rax
  0x000000012498e6f7: mov    %r13,-0x40(%rbp)
  0x000000012498e6fb: mov    %r15,%rdi
  0x000000012498e6fe: vzeroupper 
  0x000000012498e701: mov    %rbp,0x330(%r15)
  0x000000012498e708: mov    %rax,0x320(%r15)
  0x000000012498e70f: test   $0xf,%esp
  0x000000012498e715: je     0x000000012498e72d
  0x000000012498e71b: sub    $0x8,%rsp
  0x000000012498e71f: callq  0x0000000114bacf1a = InterpreterRuntime::update_mdp_for_ret(JavaThread*, int)
  0x000000012498e724: add    $0x8,%rsp
  0x000000012498e728: jmpq   0x000000012498e732
  0x000000012498e72d: callq  0x0000000114bacf1a = InterpreterRuntime::update_mdp_for_ret(JavaThread*, int)
  0x000000012498e732: movabs $0x0,%r10
  0x000000012498e73c: mov    %r10,0x320(%r15)
  0x000000012498e743: movabs $0x0,%r10
  0x000000012498e74d: mov    %r10,0x330(%r15)
  0x000000012498e754: movabs $0x0,%r10
  0x000000012498e75e: mov    %r10,0x328(%r15)
  0x000000012498e765: vzeroupper 
  0x000000012498e768: cmpq   $0x0,0x8(%r15)
  0x000000012498e770: je     0x000000012498e77b
  0x000000012498e776: jmpq   0x0000000124975780
  0x000000012498e77b: mov    -0x40(%rbp),%r13
  0x000000012498e77f: mov    -0x38(%rbp),%r14
  0x000000012498e783: retq   
  0x000000012498e784: pop    %rbx
  0x000000012498e785: mov    -0x18(%rbp),%rax
  0x000000012498e789: mov    0x8(%rax),%r13
  0x000000012498e78d: lea    0x38(%r13,%rbx,1),%r13
  0x000000012498e792: movzbl 0x0(%r13),%ebx
  0x000000012498e797: testb  $0x8,0x108(%r15)
  0x000000012498e79f: je     0x000000012498e7ad
  0x000000012498e7a1: movabs $0x1151dd020,%r10
  0x000000012498e7ab: jmp    0x000000012498e7b7
  0x000000012498e7ad: movabs $0x1151d7a20,%r10
  0x000000012498e7b7: jmpq   *(%r10,%rbx,8)
  0x000000012498e7bb: movzwl 0x2(%r13),%ebx
  0x000000012498e7c0: bswap  %ebx
  0x000000012498e7c2: shr    $0x10,%ebx
  0x000000012498e7c5: neg    %rbx
  0x000000012498e7c8: mov    (%r14,%rbx,8),%rbx
  0x000000012498e7cc: mov    -0x28(%rbp),%rcx
  0x000000012498e7d0: test   %rcx,%rcx
  0x000000012498e7d3: je     0x000000012498e8c6
  0x000000012498e7d9: addq   $0x1,0x8(%rcx)
  0x000000012498e7de: sbbq   $0x0,0x8(%rcx)
  0x000000012498e7e3: cmp    0x10(%rcx),%rbx
  0x000000012498e7e7: jne    0x000000012498e804
  0x000000012498e7ed: addq   $0x1,0x18(%rcx)
  0x000000012498e7f2: sbbq   $0x0,0x18(%rcx)
  0x000000012498e7f7: add    0x20(%rcx),%rcx
  0x000000012498e7fb: mov    %rcx,-0x28(%rbp)
  0x000000012498e7ff: jmpq   0x000000012498e8c6
  0x000000012498e804: cmp    0x28(%rcx),%rbx
  0x000000012498e808: jne    0x000000012498e825
  0x000000012498e80e: addq   $0x1,0x30(%rcx)
  0x000000012498e813: sbbq   $0x0,0x30(%rcx)
  0x000000012498e818: add    0x38(%rcx),%rcx
  0x000000012498e81c: mov    %rcx,-0x28(%rbp)
  0x000000012498e820: jmpq   0x000000012498e8c6
  0x000000012498e825: push   %rbx
  0x000000012498e826: callq  0x000000012498e830
  0x000000012498e82b: jmpq   0x000000012498e8c5
  0x000000012498e830: mov    %rbx,%rsi
  0x000000012498e833: lea    0x8(%rsp),%rax
  0x000000012498e838: mov    %r13,-0x40(%rbp)
  0x000000012498e83c: mov    %r15,%rdi
  0x000000012498e83f: vzeroupper 
  0x000000012498e842: mov    %rbp,0x330(%r15)
  0x000000012498e849: mov    %rax,0x320(%r15)
  0x000000012498e850: test   $0xf,%esp
  0x000000012498e856: je     0x000000012498e86e
  0x000000012498e85c: sub    $0x8,%rsp
  0x000000012498e860: callq  0x0000000114bacf1a = InterpreterRuntime::update_mdp_for_ret(JavaThread*, int)
  0x000000012498e865: add    $0x8,%rsp
  0x000000012498e869: jmpq   0x000000012498e873
  0x000000012498e86e: callq  0x0000000114bacf1a = InterpreterRuntime::update_mdp_for_ret(JavaThread*, int)
  0x000000012498e873: movabs $0x0,%r10
  0x000000012498e87d: mov    %r10,0x320(%r15)
  0x000000012498e884: movabs $0x0,%r10
  0x000000012498e88e: mov    %r10,0x330(%r15)
  0x000000012498e895: movabs $0x0,%r10
  0x000000012498e89f: mov    %r10,0x328(%r15)
  0x000000012498e8a6: vzeroupper 
  0x000000012498e8a9: cmpq   $0x0,0x8(%r15)
  0x000000012498e8b1: je     0x000000012498e8bc
  0x000000012498e8b7: jmpq   0x0000000124975780
  0x000000012498e8bc: mov    -0x40(%rbp),%r13
  0x000000012498e8c0: mov    -0x38(%rbp),%r14
  0x000000012498e8c4: retq   
  0x000000012498e8c5: pop    %rbx
  0x000000012498e8c6: mov    -0x18(%rbp),%rax
  0x000000012498e8ca: mov    0x8(%rax),%r13
  0x000000012498e8ce: lea    0x38(%r13,%rbx,1),%r13
  0x000000012498e8d3: movzbl 0x0(%r13),%ebx
  0x000000012498e8d8: testb  $0x8,0x108(%r15)
  0x000000012498e8e0: je     0x000000012498e8ee
  0x000000012498e8e2: movabs $0x1151dd020,%r10
  0x000000012498e8ec: jmp    0x000000012498e8f8
  0x000000012498e8ee: movabs $0x1151d7a20,%r10
  0x000000012498e8f8: jmpq   *(%r10,%rbx,8)
  0x000000012498e8fc: nopl   0x0(%rax)

----------------------------------------------------------------------
tableswitch  170 tableswitch  [0x000000012498e920, 0x000000012498e9e0]  192 bytes

  0x000000012498e920: mov    (%rsp),%eax
  0x000000012498e923: add    $0x8,%rsp
  0x000000012498e927: lea    0x4(%r13),%rbx
  0x000000012498e92b: and    $0xfffffffffffffffc,%rbx
  0x000000012498e92f: mov    0x4(%rbx),%ecx
  0x000000012498e932: mov    0x8(%rbx),%edx
  0x000000012498e935: bswap  %ecx
  0x000000012498e937: bswap  %edx
  0x000000012498e939: cmp    %ecx,%eax
  0x000000012498e93b: jl     0x000000012498e9ae
  0x000000012498e941: cmp    %edx,%eax
  0x000000012498e943: jg     0x000000012498e9ae
  0x000000012498e949: sub    %ecx,%eax
  0x000000012498e94b: mov    0xc(%rbx,%rax,4),%edx
  0x000000012498e94f: mov    -0x28(%rbp),%rbx
  0x000000012498e953: test   %rbx,%rbx
  0x000000012498e956: je     0x000000012498e97c
  0x000000012498e95c: mov    $0x10,%ecx
  0x000000012498e961: imul   %rcx,%rax
  0x000000012498e965: add    $0x20,%rax
  0x000000012498e969: addq   $0x1,(%rbx,%rax,1)
  0x000000012498e96e: sbbq   $0x0,(%rbx,%rax,1)
  0x000000012498e973: add    0x8(%rbx,%rax,1),%rbx
  0x000000012498e978: mov    %rbx,-0x28(%rbp)
  0x000000012498e97c: bswap  %edx
  0x000000012498e97e: movslq %edx,%rdx
  0x000000012498e981: movzbl 0x0(%r13,%rdx,1),%ebx
  0x000000012498e987: add    %rdx,%r13
  0x000000012498e98a: testb  $0x8,0x108(%r15)
  0x000000012498e992: je     0x000000012498e9a0
  0x000000012498e994: movabs $0x1151dd020,%r10
  0x000000012498e99e: jmp    0x000000012498e9aa
  0x000000012498e9a0: movabs $0x1151d7a20,%r10
  0x000000012498e9aa: jmpq   *(%r10,%rbx,8)
  0x000000012498e9ae: mov    -0x28(%rbp),%rax
  0x000000012498e9b2: test   %rax,%rax
  0x000000012498e9b5: je     0x000000012498e9cd
  0x000000012498e9bb: addq   $0x1,0x10(%rax)
  0x000000012498e9c0: sbbq   $0x0,0x10(%rax)
  0x000000012498e9c5: add    0x18(%rax),%rax
  0x000000012498e9c9: mov    %rax,-0x28(%rbp)
  0x000000012498e9cd: mov    (%rbx),%edx
  0x000000012498e9cf: jmp    0x000000012498e97c
  0x000000012498e9d1: nopl   0x0(%rax)
  0x000000012498e9d8: add    %al,(%rax)
  0x000000012498e9da: add    %al,(%rax)
  0x000000012498e9dc: add    %al,(%rax)
  0x000000012498e9de: add    %al,(%rax)

----------------------------------------------------------------------
lookupswitch  171 lookupswitch  [0x000000012498ea00, 0x000000012498ea20]  32 bytes

  0x000000012498ea00: mov    (%rsp),%eax
  0x000000012498ea03: add    $0x8,%rsp
  0x000000012498ea07: movabs $0x115051c52,%rdi
  0x000000012498ea11: and    $0xfffffffffffffff0,%rsp
  0x000000012498ea15: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000012498ea1a: hlt    
  0x000000012498ea1b: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
ireturn  172 ireturn  [0x000000012498ea40, 0x000000012498ef40]  1280 bytes

  0x000000012498ea40: mov    (%rsp),%eax
  0x000000012498ea43: add    $0x8,%rsp
  0x000000012498ea47: testb  $0x8,0x108(%r15)
  0x000000012498ea4f: je     0x000000012498eaf9
  0x000000012498ea55: push   %rax
  0x000000012498ea56: callq  0x000000012498ea60
  0x000000012498ea5b: jmpq   0x000000012498eaf2
  0x000000012498ea60: lea    0x8(%rsp),%rax
  0x000000012498ea65: mov    %r13,-0x40(%rbp)
  0x000000012498ea69: mov    %r15,%rdi
  0x000000012498ea6c: vzeroupper 
  0x000000012498ea6f: mov    %rbp,0x330(%r15)
  0x000000012498ea76: mov    %rax,0x320(%r15)
  0x000000012498ea7d: test   $0xf,%esp
  0x000000012498ea83: je     0x000000012498ea9b
  0x000000012498ea89: sub    $0x8,%rsp
  0x000000012498ea8d: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000012498ea92: add    $0x8,%rsp
  0x000000012498ea96: jmpq   0x000000012498eaa0
  0x000000012498ea9b: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000012498eaa0: movabs $0x0,%r10
  0x000000012498eaaa: mov    %r10,0x320(%r15)
  0x000000012498eab1: movabs $0x0,%r10
  0x000000012498eabb: mov    %r10,0x330(%r15)
  0x000000012498eac2: movabs $0x0,%r10
  0x000000012498eacc: mov    %r10,0x328(%r15)
  0x000000012498ead3: vzeroupper 
  0x000000012498ead6: cmpq   $0x0,0x8(%r15)
  0x000000012498eade: je     0x000000012498eae9
  0x000000012498eae4: jmpq   0x0000000124975780
  0x000000012498eae9: mov    -0x40(%rbp),%r13
  0x000000012498eaed: mov    -0x38(%rbp),%r14
  0x000000012498eaf1: retq   
  0x000000012498eaf2: mov    (%rsp),%eax
  0x000000012498eaf5: add    $0x8,%rsp
  0x000000012498eaf9: mov    -0x18(%rbp),%rcx
  0x000000012498eafd: mov    0x8(%rcx),%rcx
  0x000000012498eb01: movzbl 0x26(%rcx),%ecx
  0x000000012498eb05: cmp    $0xa,%ecx
  0x000000012498eb08: je     0x000000012498eb44
  0x000000012498eb0e: cmp    $0x4,%ecx
  0x000000012498eb11: jne    0x000000012498eb1f
  0x000000012498eb17: and    $0x1,%eax
  0x000000012498eb1a: jmpq   0x000000012498eb44
  0x000000012498eb1f: cmp    $0x8,%ecx
  0x000000012498eb22: jne    0x000000012498eb30
  0x000000012498eb28: movsbl %al,%eax
  0x000000012498eb2b: jmpq   0x000000012498eb44
  0x000000012498eb30: cmp    $0x5,%ecx
  0x000000012498eb33: jne    0x000000012498eb41
  0x000000012498eb39: movzwl %ax,%eax
  0x000000012498eb3c: jmpq   0x000000012498eb44
  0x000000012498eb41: movswl %ax,%eax
  0x000000012498eb44: mov    0x3dd(%r15),%bl
  0x000000012498eb4b: movb   $0x0,0x3dd(%r15)
  0x000000012498eb53: mov    -0x18(%rbp),%rcx
  0x000000012498eb57: mov    0x20(%rcx),%ecx
  0x000000012498eb5a: test   $0x20,%ecx
  0x000000012498eb60: je     0x000000012498ed1e
  0x000000012498eb66: test   $0xff,%bl
  0x000000012498eb69: jne    0x000000012498edf2
  0x000000012498eb6f: push   %rax
  0x000000012498eb70: lea    -0x58(%rbp),%rsi
  0x000000012498eb74: mov    0x8(%rsi),%rax
  0x000000012498eb78: test   %rax,%rax
  0x000000012498eb7b: jne    0x000000012498ec38
  0x000000012498eb81: mov    (%rsp),%eax
  0x000000012498eb84: add    $0x8,%rsp
  0x000000012498eb88: callq  0x000000012498eb92
  0x000000012498eb8d: jmpq   0x000000012498ec24
  0x000000012498eb92: lea    0x8(%rsp),%rax
  0x000000012498eb97: mov    %r13,-0x40(%rbp)
  0x000000012498eb9b: mov    %r15,%rdi
  0x000000012498eb9e: vzeroupper 
  0x000000012498eba1: mov    %rbp,0x330(%r15)
  0x000000012498eba8: mov    %rax,0x320(%r15)
  0x000000012498ebaf: test   $0xf,%esp
  0x000000012498ebb5: je     0x000000012498ebcd
  0x000000012498ebbb: sub    $0x8,%rsp
  0x000000012498ebbf: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000012498ebc4: add    $0x8,%rsp
  0x000000012498ebc8: jmpq   0x000000012498ebd2
  0x000000012498ebcd: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000012498ebd2: movabs $0x0,%r10
  0x000000012498ebdc: mov    %r10,0x320(%r15)
  0x000000012498ebe3: movabs $0x0,%r10
  0x000000012498ebed: mov    %r10,0x330(%r15)
  0x000000012498ebf4: movabs $0x0,%r10
  0x000000012498ebfe: mov    %r10,0x328(%r15)
  0x000000012498ec05: vzeroupper 
  0x000000012498ec08: cmpq   $0x0,0x8(%r15)
  0x000000012498ec10: je     0x000000012498ec1b
  0x000000012498ec16: jmpq   0x0000000124975780
  0x000000012498ec1b: mov    -0x40(%rbp),%r13
  0x000000012498ec1f: mov    -0x38(%rbp),%r14
  0x000000012498ec23: retq   
  0x000000012498ec24: movabs $0x114ff3493,%rdi
  0x000000012498ec2e: and    $0xfffffffffffffff0,%rsp
  0x000000012498ec32: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000012498ec37: hlt    
  0x000000012498ec38: mov    %r13,-0x40(%rbp)
  0x000000012498ec3c: lea    (%rsi),%rax
  0x000000012498ec3f: mov    0x8(%rsi),%rcx
  0x000000012498ec43: movq   $0x0,0x8(%rsi)
  0x000000012498ec4b: mov    (%rcx),%rdx
  0x000000012498ec4e: and    $0x7,%rdx
  0x000000012498ec52: cmp    $0x5,%rdx
  0x000000012498ec56: je     0x000000012498ed13
  0x000000012498ec5c: mov    (%rax),%rdx
  0x000000012498ec5f: test   %rdx,%rdx
  0x000000012498ec62: je     0x000000012498ed13
  0x000000012498ec68: lock cmpxchg %rdx,(%rcx)
  0x000000012498ec6d: je     0x000000012498ed13
  0x000000012498ec73: mov    %rcx,0x8(%rsi)
  0x000000012498ec77: callq  0x000000012498ec81
  0x000000012498ec7c: jmpq   0x000000012498ed13
  0x000000012498ec81: lea    0x8(%rsp),%rax
  0x000000012498ec86: mov    %r13,-0x40(%rbp)
  0x000000012498ec8a: mov    %r15,%rdi
  0x000000012498ec8d: vzeroupper 
  0x000000012498ec90: mov    %rbp,0x330(%r15)
  0x000000012498ec97: mov    %rax,0x320(%r15)
  0x000000012498ec9e: test   $0xf,%esp
  0x000000012498eca4: je     0x000000012498ecbc
  0x000000012498ecaa: sub    $0x8,%rsp
  0x000000012498ecae: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012498ecb3: add    $0x8,%rsp
  0x000000012498ecb7: jmpq   0x000000012498ecc1
  0x000000012498ecbc: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012498ecc1: movabs $0x0,%r10
  0x000000012498eccb: mov    %r10,0x320(%r15)
  0x000000012498ecd2: movabs $0x0,%r10
  0x000000012498ecdc: mov    %r10,0x330(%r15)
  0x000000012498ece3: movabs $0x0,%r10
  0x000000012498eced: mov    %r10,0x328(%r15)
  0x000000012498ecf4: vzeroupper 
  0x000000012498ecf7: cmpq   $0x0,0x8(%r15)
  0x000000012498ecff: je     0x000000012498ed0a
  0x000000012498ed05: jmpq   0x0000000124975780
  0x000000012498ed0a: mov    -0x40(%rbp),%r13
  0x000000012498ed0e: mov    -0x38(%rbp),%r14
  0x000000012498ed12: retq   
  0x000000012498ed13: mov    -0x40(%rbp),%r13
  0x000000012498ed17: mov    (%rsp),%eax
  0x000000012498ed1a: add    $0x8,%rsp
  0x000000012498ed1e: mov    -0x48(%rbp),%rsi
  0x000000012498ed22: lea    -0x48(%rbp),%rbx
  0x000000012498ed26: jmpq   0x000000012498eded
  0x000000012498ed2b: callq  0x000000012498ed35
  0x000000012498ed30: jmpq   0x000000012498edc7
  0x000000012498ed35: lea    0x8(%rsp),%rax
  0x000000012498ed3a: mov    %r13,-0x40(%rbp)
  0x000000012498ed3e: mov    %r15,%rdi
  0x000000012498ed41: vzeroupper 
  0x000000012498ed44: mov    %rbp,0x330(%r15)
  0x000000012498ed4b: mov    %rax,0x320(%r15)
  0x000000012498ed52: test   $0xf,%esp
  0x000000012498ed58: je     0x000000012498ed70
  0x000000012498ed5e: sub    $0x8,%rsp
  0x000000012498ed62: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000012498ed67: add    $0x8,%rsp
  0x000000012498ed6b: jmpq   0x000000012498ed75
  0x000000012498ed70: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000012498ed75: movabs $0x0,%r10
  0x000000012498ed7f: mov    %r10,0x320(%r15)
  0x000000012498ed86: movabs $0x0,%r10
  0x000000012498ed90: mov    %r10,0x330(%r15)
  0x000000012498ed97: movabs $0x0,%r10
  0x000000012498eda1: mov    %r10,0x328(%r15)
  0x000000012498eda8: vzeroupper 
  0x000000012498edab: cmpq   $0x0,0x8(%r15)
  0x000000012498edb3: je     0x000000012498edbe
  0x000000012498edb9: jmpq   0x0000000124975780
  0x000000012498edbe: mov    -0x40(%rbp),%r13
  0x000000012498edc2: mov    -0x38(%rbp),%r14
  0x000000012498edc6: retq   
  0x000000012498edc7: movabs $0x114ff3493,%rdi
  0x000000012498edd1: and    $0xfffffffffffffff0,%rsp
  0x000000012498edd5: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000012498edda: hlt    
  0x000000012498eddb: cmpq   $0x0,0x8(%rsi)
  0x000000012498ede3: jne    0x000000012498ed2b
  0x000000012498ede9: add    $0x10,%rsi
  0x000000012498eded: cmp    %rbx,%rsi
  0x000000012498edf0: jne    0x000000012498eddb
  0x000000012498edf2: cmpb   $0x0,-0xf7d4d1f(%rip)        # 0x00000001151ba0da = DTraceMethodProbes
  0x000000012498edf9: je     0x000000012498ee31
  0x000000012498edff: push   %rax
  0x000000012498ee00: mov    -0x18(%rbp),%rsi
  0x000000012498ee04: mov    %r15,%rdi
  0x000000012498ee07: test   $0xf,%esp
  0x000000012498ee0d: je     0x000000012498ee25
  0x000000012498ee13: sub    $0x8,%rsp
  0x000000012498ee17: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000012498ee1c: add    $0x8,%rsp
  0x000000012498ee20: jmpq   0x000000012498ee2a
  0x000000012498ee25: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000012498ee2a: mov    (%rsp),%eax
  0x000000012498ee2d: add    $0x8,%rsp
  0x000000012498ee31: mov    -0x8(%rbp),%rbx
  0x000000012498ee35: cmpl   $0x3,0x408(%r15)
  0x000000012498ee40: je     0x000000012498ef29
  0x000000012498ee46: cmp    0x418(%r15),%rbx
  0x000000012498ee4d: jle    0x000000012498ef29
  0x000000012498ee53: mov    %r15,%rdi
  0x000000012498ee56: test   $0xf,%esp
  0x000000012498ee5c: je     0x000000012498ee74
  0x000000012498ee62: sub    $0x8,%rsp
  0x000000012498ee66: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000012498ee6b: add    $0x8,%rsp
  0x000000012498ee6f: jmpq   0x000000012498ee79
  0x000000012498ee74: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000012498ee79: callq  0x000000012498ee83
  0x000000012498ee7e: jmpq   0x000000012498ef15
  0x000000012498ee83: lea    0x8(%rsp),%rax
  0x000000012498ee88: mov    %r13,-0x40(%rbp)
  0x000000012498ee8c: mov    %r15,%rdi
  0x000000012498ee8f: vzeroupper 
  0x000000012498ee92: mov    %rbp,0x330(%r15)
  0x000000012498ee99: mov    %rax,0x320(%r15)
  0x000000012498eea0: test   $0xf,%esp
  0x000000012498eea6: je     0x000000012498eebe
  0x000000012498eeac: sub    $0x8,%rsp
  0x000000012498eeb0: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000012498eeb5: add    $0x8,%rsp
  0x000000012498eeb9: jmpq   0x000000012498eec3
  0x000000012498eebe: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000012498eec3: movabs $0x0,%r10
  0x000000012498eecd: mov    %r10,0x320(%r15)
  0x000000012498eed4: movabs $0x0,%r10
  0x000000012498eede: mov    %r10,0x330(%r15)
  0x000000012498eee5: movabs $0x0,%r10
  0x000000012498eeef: mov    %r10,0x328(%r15)
  0x000000012498eef6: vzeroupper 
  0x000000012498eef9: cmpq   $0x0,0x8(%r15)
  0x000000012498ef01: je     0x000000012498ef0c
  0x000000012498ef07: jmpq   0x0000000124975780
  0x000000012498ef0c: mov    -0x40(%rbp),%r13
  0x000000012498ef10: mov    -0x38(%rbp),%r14
  0x000000012498ef14: retq   
  0x000000012498ef15: movabs $0x114ff3493,%rdi
  0x000000012498ef1f: and    $0xfffffffffffffff0,%rsp
  0x000000012498ef23: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000012498ef28: hlt    
  0x000000012498ef29: leaveq 
  0x000000012498ef2a: pop    %r13
  0x000000012498ef2c: mov    %rbx,%rsp
  0x000000012498ef2f: jmpq   *%r13
  0x000000012498ef32: nopw   0x0(%rax,%rax,1)
  0x000000012498ef38: add    %al,(%rax)
  0x000000012498ef3a: add    %al,(%rax)
  0x000000012498ef3c: add    %al,(%rax)
  0x000000012498ef3e: add    %al,(%rax)

----------------------------------------------------------------------
lreturn  173 lreturn  [0x000000012498ef60, 0x000000012498f460]  1280 bytes

  0x000000012498ef60: mov    (%rsp),%rax
  0x000000012498ef64: add    $0x10,%rsp
  0x000000012498ef68: testb  $0x8,0x108(%r15)
  0x000000012498ef70: je     0x000000012498f031
  0x000000012498ef76: sub    $0x10,%rsp
  0x000000012498ef7a: mov    %rax,(%rsp)
  0x000000012498ef7e: movabs $0x0,%r10
  0x000000012498ef88: mov    %r10,0x8(%rsp)
  0x000000012498ef8d: callq  0x000000012498ef97
  0x000000012498ef92: jmpq   0x000000012498f029
  0x000000012498ef97: lea    0x8(%rsp),%rax
  0x000000012498ef9c: mov    %r13,-0x40(%rbp)
  0x000000012498efa0: mov    %r15,%rdi
  0x000000012498efa3: vzeroupper 
  0x000000012498efa6: mov    %rbp,0x330(%r15)
  0x000000012498efad: mov    %rax,0x320(%r15)
  0x000000012498efb4: test   $0xf,%esp
  0x000000012498efba: je     0x000000012498efd2
  0x000000012498efc0: sub    $0x8,%rsp
  0x000000012498efc4: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000012498efc9: add    $0x8,%rsp
  0x000000012498efcd: jmpq   0x000000012498efd7
  0x000000012498efd2: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000012498efd7: movabs $0x0,%r10
  0x000000012498efe1: mov    %r10,0x320(%r15)
  0x000000012498efe8: movabs $0x0,%r10
  0x000000012498eff2: mov    %r10,0x330(%r15)
  0x000000012498eff9: movabs $0x0,%r10
  0x000000012498f003: mov    %r10,0x328(%r15)
  0x000000012498f00a: vzeroupper 
  0x000000012498f00d: cmpq   $0x0,0x8(%r15)
  0x000000012498f015: je     0x000000012498f020
  0x000000012498f01b: jmpq   0x0000000124975780
  0x000000012498f020: mov    -0x40(%rbp),%r13
  0x000000012498f024: mov    -0x38(%rbp),%r14
  0x000000012498f028: retq   
  0x000000012498f029: mov    (%rsp),%rax
  0x000000012498f02d: add    $0x10,%rsp
  0x000000012498f031: mov    0x3dd(%r15),%bl
  0x000000012498f038: movb   $0x0,0x3dd(%r15)
  0x000000012498f040: mov    -0x18(%rbp),%rcx
  0x000000012498f044: mov    0x20(%rcx),%ecx
  0x000000012498f047: test   $0x20,%ecx
  0x000000012498f04d: je     0x000000012498f223
  0x000000012498f053: test   $0xff,%bl
  0x000000012498f056: jne    0x000000012498f2f7
  0x000000012498f05c: sub    $0x10,%rsp
  0x000000012498f060: mov    %rax,(%rsp)
  0x000000012498f064: movabs $0x0,%r10
  0x000000012498f06e: mov    %r10,0x8(%rsp)
  0x000000012498f073: lea    -0x58(%rbp),%rsi
  0x000000012498f077: mov    0x8(%rsi),%rax
  0x000000012498f07b: test   %rax,%rax
  0x000000012498f07e: jne    0x000000012498f13c
  0x000000012498f084: mov    (%rsp),%rax
  0x000000012498f088: add    $0x10,%rsp
  0x000000012498f08c: callq  0x000000012498f096
  0x000000012498f091: jmpq   0x000000012498f128
  0x000000012498f096: lea    0x8(%rsp),%rax
  0x000000012498f09b: mov    %r13,-0x40(%rbp)
  0x000000012498f09f: mov    %r15,%rdi
  0x000000012498f0a2: vzeroupper 
  0x000000012498f0a5: mov    %rbp,0x330(%r15)
  0x000000012498f0ac: mov    %rax,0x320(%r15)
  0x000000012498f0b3: test   $0xf,%esp
  0x000000012498f0b9: je     0x000000012498f0d1
  0x000000012498f0bf: sub    $0x8,%rsp
  0x000000012498f0c3: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000012498f0c8: add    $0x8,%rsp
  0x000000012498f0cc: jmpq   0x000000012498f0d6
  0x000000012498f0d1: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000012498f0d6: movabs $0x0,%r10
  0x000000012498f0e0: mov    %r10,0x320(%r15)
  0x000000012498f0e7: movabs $0x0,%r10
  0x000000012498f0f1: mov    %r10,0x330(%r15)
  0x000000012498f0f8: movabs $0x0,%r10
  0x000000012498f102: mov    %r10,0x328(%r15)
  0x000000012498f109: vzeroupper 
  0x000000012498f10c: cmpq   $0x0,0x8(%r15)
  0x000000012498f114: je     0x000000012498f11f
  0x000000012498f11a: jmpq   0x0000000124975780
  0x000000012498f11f: mov    -0x40(%rbp),%r13
  0x000000012498f123: mov    -0x38(%rbp),%r14
  0x000000012498f127: retq   
  0x000000012498f128: movabs $0x114ff3493,%rdi
  0x000000012498f132: and    $0xfffffffffffffff0,%rsp
  0x000000012498f136: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000012498f13b: hlt    
  0x000000012498f13c: mov    %r13,-0x40(%rbp)
  0x000000012498f140: lea    (%rsi),%rax
  0x000000012498f143: mov    0x8(%rsi),%rcx
  0x000000012498f147: movq   $0x0,0x8(%rsi)
  0x000000012498f14f: mov    (%rcx),%rdx
  0x000000012498f152: and    $0x7,%rdx
  0x000000012498f156: cmp    $0x5,%rdx
  0x000000012498f15a: je     0x000000012498f217
  0x000000012498f160: mov    (%rax),%rdx
  0x000000012498f163: test   %rdx,%rdx
  0x000000012498f166: je     0x000000012498f217
  0x000000012498f16c: lock cmpxchg %rdx,(%rcx)
  0x000000012498f171: je     0x000000012498f217
  0x000000012498f177: mov    %rcx,0x8(%rsi)
  0x000000012498f17b: callq  0x000000012498f185
  0x000000012498f180: jmpq   0x000000012498f217
  0x000000012498f185: lea    0x8(%rsp),%rax
  0x000000012498f18a: mov    %r13,-0x40(%rbp)
  0x000000012498f18e: mov    %r15,%rdi
  0x000000012498f191: vzeroupper 
  0x000000012498f194: mov    %rbp,0x330(%r15)
  0x000000012498f19b: mov    %rax,0x320(%r15)
  0x000000012498f1a2: test   $0xf,%esp
  0x000000012498f1a8: je     0x000000012498f1c0
  0x000000012498f1ae: sub    $0x8,%rsp
  0x000000012498f1b2: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012498f1b7: add    $0x8,%rsp
  0x000000012498f1bb: jmpq   0x000000012498f1c5
  0x000000012498f1c0: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012498f1c5: movabs $0x0,%r10
  0x000000012498f1cf: mov    %r10,0x320(%r15)
  0x000000012498f1d6: movabs $0x0,%r10
  0x000000012498f1e0: mov    %r10,0x330(%r15)
  0x000000012498f1e7: movabs $0x0,%r10
  0x000000012498f1f1: mov    %r10,0x328(%r15)
  0x000000012498f1f8: vzeroupper 
  0x000000012498f1fb: cmpq   $0x0,0x8(%r15)
  0x000000012498f203: je     0x000000012498f20e
  0x000000012498f209: jmpq   0x0000000124975780
  0x000000012498f20e: mov    -0x40(%rbp),%r13
  0x000000012498f212: mov    -0x38(%rbp),%r14
  0x000000012498f216: retq   
  0x000000012498f217: mov    -0x40(%rbp),%r13
  0x000000012498f21b: mov    (%rsp),%rax
  0x000000012498f21f: add    $0x10,%rsp
  0x000000012498f223: mov    -0x48(%rbp),%rsi
  0x000000012498f227: lea    -0x48(%rbp),%rbx
  0x000000012498f22b: jmpq   0x000000012498f2f2
  0x000000012498f230: callq  0x000000012498f23a
  0x000000012498f235: jmpq   0x000000012498f2cc
  0x000000012498f23a: lea    0x8(%rsp),%rax
  0x000000012498f23f: mov    %r13,-0x40(%rbp)
  0x000000012498f243: mov    %r15,%rdi
  0x000000012498f246: vzeroupper 
  0x000000012498f249: mov    %rbp,0x330(%r15)
  0x000000012498f250: mov    %rax,0x320(%r15)
  0x000000012498f257: test   $0xf,%esp
  0x000000012498f25d: je     0x000000012498f275
  0x000000012498f263: sub    $0x8,%rsp
  0x000000012498f267: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000012498f26c: add    $0x8,%rsp
  0x000000012498f270: jmpq   0x000000012498f27a
  0x000000012498f275: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000012498f27a: movabs $0x0,%r10
  0x000000012498f284: mov    %r10,0x320(%r15)
  0x000000012498f28b: movabs $0x0,%r10
  0x000000012498f295: mov    %r10,0x330(%r15)
  0x000000012498f29c: movabs $0x0,%r10
  0x000000012498f2a6: mov    %r10,0x328(%r15)
  0x000000012498f2ad: vzeroupper 
  0x000000012498f2b0: cmpq   $0x0,0x8(%r15)
  0x000000012498f2b8: je     0x000000012498f2c3
  0x000000012498f2be: jmpq   0x0000000124975780
  0x000000012498f2c3: mov    -0x40(%rbp),%r13
  0x000000012498f2c7: mov    -0x38(%rbp),%r14
  0x000000012498f2cb: retq   
  0x000000012498f2cc: movabs $0x114ff3493,%rdi
  0x000000012498f2d6: and    $0xfffffffffffffff0,%rsp
  0x000000012498f2da: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000012498f2df: hlt    
  0x000000012498f2e0: cmpq   $0x0,0x8(%rsi)
  0x000000012498f2e8: jne    0x000000012498f230
  0x000000012498f2ee: add    $0x10,%rsi
  0x000000012498f2f2: cmp    %rbx,%rsi
  0x000000012498f2f5: jne    0x000000012498f2e0
  0x000000012498f2f7: cmpb   $0x0,-0xf7d5224(%rip)        # 0x00000001151ba0da = DTraceMethodProbes
  0x000000012498f2fe: je     0x000000012498f34d
  0x000000012498f304: sub    $0x10,%rsp
  0x000000012498f308: mov    %rax,(%rsp)
  0x000000012498f30c: movabs $0x0,%r10
  0x000000012498f316: mov    %r10,0x8(%rsp)
  0x000000012498f31b: mov    -0x18(%rbp),%rsi
  0x000000012498f31f: mov    %r15,%rdi
  0x000000012498f322: test   $0xf,%esp
  0x000000012498f328: je     0x000000012498f340
  0x000000012498f32e: sub    $0x8,%rsp
  0x000000012498f332: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000012498f337: add    $0x8,%rsp
  0x000000012498f33b: jmpq   0x000000012498f345
  0x000000012498f340: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000012498f345: mov    (%rsp),%rax
  0x000000012498f349: add    $0x10,%rsp
  0x000000012498f34d: mov    -0x8(%rbp),%rbx
  0x000000012498f351: cmpl   $0x3,0x408(%r15)
  0x000000012498f35c: je     0x000000012498f445
  0x000000012498f362: cmp    0x418(%r15),%rbx
  0x000000012498f369: jle    0x000000012498f445
  0x000000012498f36f: mov    %r15,%rdi
  0x000000012498f372: test   $0xf,%esp
  0x000000012498f378: je     0x000000012498f390
  0x000000012498f37e: sub    $0x8,%rsp
  0x000000012498f382: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000012498f387: add    $0x8,%rsp
  0x000000012498f38b: jmpq   0x000000012498f395
  0x000000012498f390: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000012498f395: callq  0x000000012498f39f
  0x000000012498f39a: jmpq   0x000000012498f431
  0x000000012498f39f: lea    0x8(%rsp),%rax
  0x000000012498f3a4: mov    %r13,-0x40(%rbp)
  0x000000012498f3a8: mov    %r15,%rdi
  0x000000012498f3ab: vzeroupper 
  0x000000012498f3ae: mov    %rbp,0x330(%r15)
  0x000000012498f3b5: mov    %rax,0x320(%r15)
  0x000000012498f3bc: test   $0xf,%esp
  0x000000012498f3c2: je     0x000000012498f3da
  0x000000012498f3c8: sub    $0x8,%rsp
  0x000000012498f3cc: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000012498f3d1: add    $0x8,%rsp
  0x000000012498f3d5: jmpq   0x000000012498f3df
  0x000000012498f3da: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000012498f3df: movabs $0x0,%r10
  0x000000012498f3e9: mov    %r10,0x320(%r15)
  0x000000012498f3f0: movabs $0x0,%r10
  0x000000012498f3fa: mov    %r10,0x330(%r15)
  0x000000012498f401: movabs $0x0,%r10
  0x000000012498f40b: mov    %r10,0x328(%r15)
  0x000000012498f412: vzeroupper 
  0x000000012498f415: cmpq   $0x0,0x8(%r15)
  0x000000012498f41d: je     0x000000012498f428
  0x000000012498f423: jmpq   0x0000000124975780
  0x000000012498f428: mov    -0x40(%rbp),%r13
  0x000000012498f42c: mov    -0x38(%rbp),%r14
  0x000000012498f430: retq   
  0x000000012498f431: movabs $0x114ff3493,%rdi
  0x000000012498f43b: and    $0xfffffffffffffff0,%rsp
  0x000000012498f43f: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000012498f444: hlt    
  0x000000012498f445: leaveq 
  0x000000012498f446: pop    %r13
  0x000000012498f448: mov    %rbx,%rsp
  0x000000012498f44b: jmpq   *%r13
  0x000000012498f44e: xchg   %ax,%ax
  0x000000012498f450: add    %al,(%rax)
  0x000000012498f452: add    %al,(%rax)
  0x000000012498f454: add    %al,(%rax)
  0x000000012498f456: add    %al,(%rax)
  0x000000012498f458: add    %al,(%rax)
  0x000000012498f45a: add    %al,(%rax)
  0x000000012498f45c: add    %al,(%rax)
  0x000000012498f45e: add    %al,(%rax)

----------------------------------------------------------------------
freturn  174 freturn  [0x000000012498f480, 0x000000012498f960]  1248 bytes

  0x000000012498f480: vmovss (%rsp),%xmm0
  0x000000012498f485: add    $0x8,%rsp
  0x000000012498f489: testb  $0x8,0x108(%r15)
  0x000000012498f491: je     0x000000012498f545
  0x000000012498f497: sub    $0x8,%rsp
  0x000000012498f49b: vmovss %xmm0,(%rsp)
  0x000000012498f4a0: callq  0x000000012498f4aa
  0x000000012498f4a5: jmpq   0x000000012498f53c
  0x000000012498f4aa: lea    0x8(%rsp),%rax
  0x000000012498f4af: mov    %r13,-0x40(%rbp)
  0x000000012498f4b3: mov    %r15,%rdi
  0x000000012498f4b6: vzeroupper 
  0x000000012498f4b9: mov    %rbp,0x330(%r15)
  0x000000012498f4c0: mov    %rax,0x320(%r15)
  0x000000012498f4c7: test   $0xf,%esp
  0x000000012498f4cd: je     0x000000012498f4e5
  0x000000012498f4d3: sub    $0x8,%rsp
  0x000000012498f4d7: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000012498f4dc: add    $0x8,%rsp
  0x000000012498f4e0: jmpq   0x000000012498f4ea
  0x000000012498f4e5: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000012498f4ea: movabs $0x0,%r10
  0x000000012498f4f4: mov    %r10,0x320(%r15)
  0x000000012498f4fb: movabs $0x0,%r10
  0x000000012498f505: mov    %r10,0x330(%r15)
  0x000000012498f50c: movabs $0x0,%r10
  0x000000012498f516: mov    %r10,0x328(%r15)
  0x000000012498f51d: vzeroupper 
  0x000000012498f520: cmpq   $0x0,0x8(%r15)
  0x000000012498f528: je     0x000000012498f533
  0x000000012498f52e: jmpq   0x0000000124975780
  0x000000012498f533: mov    -0x40(%rbp),%r13
  0x000000012498f537: mov    -0x38(%rbp),%r14
  0x000000012498f53b: retq   
  0x000000012498f53c: vmovss (%rsp),%xmm0
  0x000000012498f541: add    $0x8,%rsp
  0x000000012498f545: mov    0x3dd(%r15),%bl
  0x000000012498f54c: movb   $0x0,0x3dd(%r15)
  0x000000012498f554: mov    -0x18(%rbp),%rcx
  0x000000012498f558: mov    0x20(%rcx),%ecx
  0x000000012498f55b: test   $0x20,%ecx
  0x000000012498f561: je     0x000000012498f72b
  0x000000012498f567: test   $0xff,%bl
  0x000000012498f56a: jne    0x000000012498f7ff
  0x000000012498f570: sub    $0x8,%rsp
  0x000000012498f574: vmovss %xmm0,(%rsp)
  0x000000012498f579: lea    -0x58(%rbp),%rsi
  0x000000012498f57d: mov    0x8(%rsi),%rax
  0x000000012498f581: test   %rax,%rax
  0x000000012498f584: jne    0x000000012498f643
  0x000000012498f58a: vmovss (%rsp),%xmm0
  0x000000012498f58f: add    $0x8,%rsp
  0x000000012498f593: callq  0x000000012498f59d
  0x000000012498f598: jmpq   0x000000012498f62f
  0x000000012498f59d: lea    0x8(%rsp),%rax
  0x000000012498f5a2: mov    %r13,-0x40(%rbp)
  0x000000012498f5a6: mov    %r15,%rdi
  0x000000012498f5a9: vzeroupper 
  0x000000012498f5ac: mov    %rbp,0x330(%r15)
  0x000000012498f5b3: mov    %rax,0x320(%r15)
  0x000000012498f5ba: test   $0xf,%esp
  0x000000012498f5c0: je     0x000000012498f5d8
  0x000000012498f5c6: sub    $0x8,%rsp
  0x000000012498f5ca: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000012498f5cf: add    $0x8,%rsp
  0x000000012498f5d3: jmpq   0x000000012498f5dd
  0x000000012498f5d8: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000012498f5dd: movabs $0x0,%r10
  0x000000012498f5e7: mov    %r10,0x320(%r15)
  0x000000012498f5ee: movabs $0x0,%r10
  0x000000012498f5f8: mov    %r10,0x330(%r15)
  0x000000012498f5ff: movabs $0x0,%r10
  0x000000012498f609: mov    %r10,0x328(%r15)
  0x000000012498f610: vzeroupper 
  0x000000012498f613: cmpq   $0x0,0x8(%r15)
  0x000000012498f61b: je     0x000000012498f626
  0x000000012498f621: jmpq   0x0000000124975780
  0x000000012498f626: mov    -0x40(%rbp),%r13
  0x000000012498f62a: mov    -0x38(%rbp),%r14
  0x000000012498f62e: retq   
  0x000000012498f62f: movabs $0x114ff3493,%rdi
  0x000000012498f639: and    $0xfffffffffffffff0,%rsp
  0x000000012498f63d: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000012498f642: hlt    
  0x000000012498f643: mov    %r13,-0x40(%rbp)
  0x000000012498f647: lea    (%rsi),%rax
  0x000000012498f64a: mov    0x8(%rsi),%rcx
  0x000000012498f64e: movq   $0x0,0x8(%rsi)
  0x000000012498f656: mov    (%rcx),%rdx
  0x000000012498f659: and    $0x7,%rdx
  0x000000012498f65d: cmp    $0x5,%rdx
  0x000000012498f661: je     0x000000012498f71e
  0x000000012498f667: mov    (%rax),%rdx
  0x000000012498f66a: test   %rdx,%rdx
  0x000000012498f66d: je     0x000000012498f71e
  0x000000012498f673: lock cmpxchg %rdx,(%rcx)
  0x000000012498f678: je     0x000000012498f71e
  0x000000012498f67e: mov    %rcx,0x8(%rsi)
  0x000000012498f682: callq  0x000000012498f68c
  0x000000012498f687: jmpq   0x000000012498f71e
  0x000000012498f68c: lea    0x8(%rsp),%rax
  0x000000012498f691: mov    %r13,-0x40(%rbp)
  0x000000012498f695: mov    %r15,%rdi
  0x000000012498f698: vzeroupper 
  0x000000012498f69b: mov    %rbp,0x330(%r15)
  0x000000012498f6a2: mov    %rax,0x320(%r15)
  0x000000012498f6a9: test   $0xf,%esp
  0x000000012498f6af: je     0x000000012498f6c7
  0x000000012498f6b5: sub    $0x8,%rsp
  0x000000012498f6b9: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012498f6be: add    $0x8,%rsp
  0x000000012498f6c2: jmpq   0x000000012498f6cc
  0x000000012498f6c7: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012498f6cc: movabs $0x0,%r10
  0x000000012498f6d6: mov    %r10,0x320(%r15)
  0x000000012498f6dd: movabs $0x0,%r10
  0x000000012498f6e7: mov    %r10,0x330(%r15)
  0x000000012498f6ee: movabs $0x0,%r10
  0x000000012498f6f8: mov    %r10,0x328(%r15)
  0x000000012498f6ff: vzeroupper 
  0x000000012498f702: cmpq   $0x0,0x8(%r15)
  0x000000012498f70a: je     0x000000012498f715
  0x000000012498f710: jmpq   0x0000000124975780
  0x000000012498f715: mov    -0x40(%rbp),%r13
  0x000000012498f719: mov    -0x38(%rbp),%r14
  0x000000012498f71d: retq   
  0x000000012498f71e: mov    -0x40(%rbp),%r13
  0x000000012498f722: vmovss (%rsp),%xmm0
  0x000000012498f727: add    $0x8,%rsp
  0x000000012498f72b: mov    -0x48(%rbp),%rsi
  0x000000012498f72f: lea    -0x48(%rbp),%rbx
  0x000000012498f733: jmpq   0x000000012498f7fa
  0x000000012498f738: callq  0x000000012498f742
  0x000000012498f73d: jmpq   0x000000012498f7d4
  0x000000012498f742: lea    0x8(%rsp),%rax
  0x000000012498f747: mov    %r13,-0x40(%rbp)
  0x000000012498f74b: mov    %r15,%rdi
  0x000000012498f74e: vzeroupper 
  0x000000012498f751: mov    %rbp,0x330(%r15)
  0x000000012498f758: mov    %rax,0x320(%r15)
  0x000000012498f75f: test   $0xf,%esp
  0x000000012498f765: je     0x000000012498f77d
  0x000000012498f76b: sub    $0x8,%rsp
  0x000000012498f76f: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000012498f774: add    $0x8,%rsp
  0x000000012498f778: jmpq   0x000000012498f782
  0x000000012498f77d: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000012498f782: movabs $0x0,%r10
  0x000000012498f78c: mov    %r10,0x320(%r15)
  0x000000012498f793: movabs $0x0,%r10
  0x000000012498f79d: mov    %r10,0x330(%r15)
  0x000000012498f7a4: movabs $0x0,%r10
  0x000000012498f7ae: mov    %r10,0x328(%r15)
  0x000000012498f7b5: vzeroupper 
  0x000000012498f7b8: cmpq   $0x0,0x8(%r15)
  0x000000012498f7c0: je     0x000000012498f7cb
  0x000000012498f7c6: jmpq   0x0000000124975780
  0x000000012498f7cb: mov    -0x40(%rbp),%r13
  0x000000012498f7cf: mov    -0x38(%rbp),%r14
  0x000000012498f7d3: retq   
  0x000000012498f7d4: movabs $0x114ff3493,%rdi
  0x000000012498f7de: and    $0xfffffffffffffff0,%rsp
  0x000000012498f7e2: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000012498f7e7: hlt    
  0x000000012498f7e8: cmpq   $0x0,0x8(%rsi)
  0x000000012498f7f0: jne    0x000000012498f738
  0x000000012498f7f6: add    $0x10,%rsi
  0x000000012498f7fa: cmp    %rbx,%rsi
  0x000000012498f7fd: jne    0x000000012498f7e8
  0x000000012498f7ff: cmpb   $0x0,-0xf7d572c(%rip)        # 0x00000001151ba0da = DTraceMethodProbes
  0x000000012498f806: je     0x000000012498f848
  0x000000012498f80c: sub    $0x8,%rsp
  0x000000012498f810: vmovss %xmm0,(%rsp)
  0x000000012498f815: mov    -0x18(%rbp),%rsi
  0x000000012498f819: mov    %r15,%rdi
  0x000000012498f81c: test   $0xf,%esp
  0x000000012498f822: je     0x000000012498f83a
  0x000000012498f828: sub    $0x8,%rsp
  0x000000012498f82c: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000012498f831: add    $0x8,%rsp
  0x000000012498f835: jmpq   0x000000012498f83f
  0x000000012498f83a: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000012498f83f: vmovss (%rsp),%xmm0
  0x000000012498f844: add    $0x8,%rsp
  0x000000012498f848: mov    -0x8(%rbp),%rbx
  0x000000012498f84c: cmpl   $0x3,0x408(%r15)
  0x000000012498f857: je     0x000000012498f940
  0x000000012498f85d: cmp    0x418(%r15),%rbx
  0x000000012498f864: jle    0x000000012498f940
  0x000000012498f86a: mov    %r15,%rdi
  0x000000012498f86d: test   $0xf,%esp
  0x000000012498f873: je     0x000000012498f88b
  0x000000012498f879: sub    $0x8,%rsp
  0x000000012498f87d: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000012498f882: add    $0x8,%rsp
  0x000000012498f886: jmpq   0x000000012498f890
  0x000000012498f88b: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000012498f890: callq  0x000000012498f89a
  0x000000012498f895: jmpq   0x000000012498f92c
  0x000000012498f89a: lea    0x8(%rsp),%rax
  0x000000012498f89f: mov    %r13,-0x40(%rbp)
  0x000000012498f8a3: mov    %r15,%rdi
  0x000000012498f8a6: vzeroupper 
  0x000000012498f8a9: mov    %rbp,0x330(%r15)
  0x000000012498f8b0: mov    %rax,0x320(%r15)
  0x000000012498f8b7: test   $0xf,%esp
  0x000000012498f8bd: je     0x000000012498f8d5
  0x000000012498f8c3: sub    $0x8,%rsp
  0x000000012498f8c7: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000012498f8cc: add    $0x8,%rsp
  0x000000012498f8d0: jmpq   0x000000012498f8da
  0x000000012498f8d5: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000012498f8da: movabs $0x0,%r10
  0x000000012498f8e4: mov    %r10,0x320(%r15)
  0x000000012498f8eb: movabs $0x0,%r10
  0x000000012498f8f5: mov    %r10,0x330(%r15)
  0x000000012498f8fc: movabs $0x0,%r10
  0x000000012498f906: mov    %r10,0x328(%r15)
  0x000000012498f90d: vzeroupper 
  0x000000012498f910: cmpq   $0x0,0x8(%r15)
  0x000000012498f918: je     0x000000012498f923
  0x000000012498f91e: jmpq   0x0000000124975780
  0x000000012498f923: mov    -0x40(%rbp),%r13
  0x000000012498f927: mov    -0x38(%rbp),%r14
  0x000000012498f92b: retq   
  0x000000012498f92c: movabs $0x114ff3493,%rdi
  0x000000012498f936: and    $0xfffffffffffffff0,%rsp
  0x000000012498f93a: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000012498f93f: hlt    
  0x000000012498f940: leaveq 
  0x000000012498f941: pop    %r13
  0x000000012498f943: mov    %rbx,%rsp
  0x000000012498f946: jmpq   *%r13
  0x000000012498f949: nopl   0x0(%rax)
  0x000000012498f950: add    %al,(%rax)
  0x000000012498f952: add    %al,(%rax)
  0x000000012498f954: add    %al,(%rax)
  0x000000012498f956: add    %al,(%rax)
  0x000000012498f958: add    %al,(%rax)
  0x000000012498f95a: add    %al,(%rax)
  0x000000012498f95c: add    %al,(%rax)
  0x000000012498f95e: add    %al,(%rax)

----------------------------------------------------------------------
dreturn  175 dreturn  [0x000000012498f980, 0x000000012498fe60]  1248 bytes

  0x000000012498f980: vmovsd (%rsp),%xmm0
  0x000000012498f985: add    $0x10,%rsp
  0x000000012498f989: testb  $0x8,0x108(%r15)
  0x000000012498f991: je     0x000000012498fa45
  0x000000012498f997: sub    $0x10,%rsp
  0x000000012498f99b: vmovsd %xmm0,(%rsp)
  0x000000012498f9a0: callq  0x000000012498f9aa
  0x000000012498f9a5: jmpq   0x000000012498fa3c
  0x000000012498f9aa: lea    0x8(%rsp),%rax
  0x000000012498f9af: mov    %r13,-0x40(%rbp)
  0x000000012498f9b3: mov    %r15,%rdi
  0x000000012498f9b6: vzeroupper 
  0x000000012498f9b9: mov    %rbp,0x330(%r15)
  0x000000012498f9c0: mov    %rax,0x320(%r15)
  0x000000012498f9c7: test   $0xf,%esp
  0x000000012498f9cd: je     0x000000012498f9e5
  0x000000012498f9d3: sub    $0x8,%rsp
  0x000000012498f9d7: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000012498f9dc: add    $0x8,%rsp
  0x000000012498f9e0: jmpq   0x000000012498f9ea
  0x000000012498f9e5: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000012498f9ea: movabs $0x0,%r10
  0x000000012498f9f4: mov    %r10,0x320(%r15)
  0x000000012498f9fb: movabs $0x0,%r10
  0x000000012498fa05: mov    %r10,0x330(%r15)
  0x000000012498fa0c: movabs $0x0,%r10
  0x000000012498fa16: mov    %r10,0x328(%r15)
  0x000000012498fa1d: vzeroupper 
  0x000000012498fa20: cmpq   $0x0,0x8(%r15)
  0x000000012498fa28: je     0x000000012498fa33
  0x000000012498fa2e: jmpq   0x0000000124975780
  0x000000012498fa33: mov    -0x40(%rbp),%r13
  0x000000012498fa37: mov    -0x38(%rbp),%r14
  0x000000012498fa3b: retq   
  0x000000012498fa3c: vmovsd (%rsp),%xmm0
  0x000000012498fa41: add    $0x10,%rsp
  0x000000012498fa45: mov    0x3dd(%r15),%bl
  0x000000012498fa4c: movb   $0x0,0x3dd(%r15)
  0x000000012498fa54: mov    -0x18(%rbp),%rcx
  0x000000012498fa58: mov    0x20(%rcx),%ecx
  0x000000012498fa5b: test   $0x20,%ecx
  0x000000012498fa61: je     0x000000012498fc2b
  0x000000012498fa67: test   $0xff,%bl
  0x000000012498fa6a: jne    0x000000012498fcff
  0x000000012498fa70: sub    $0x10,%rsp
  0x000000012498fa74: vmovsd %xmm0,(%rsp)
  0x000000012498fa79: lea    -0x58(%rbp),%rsi
  0x000000012498fa7d: mov    0x8(%rsi),%rax
  0x000000012498fa81: test   %rax,%rax
  0x000000012498fa84: jne    0x000000012498fb43
  0x000000012498fa8a: vmovsd (%rsp),%xmm0
  0x000000012498fa8f: add    $0x10,%rsp
  0x000000012498fa93: callq  0x000000012498fa9d
  0x000000012498fa98: jmpq   0x000000012498fb2f
  0x000000012498fa9d: lea    0x8(%rsp),%rax
  0x000000012498faa2: mov    %r13,-0x40(%rbp)
  0x000000012498faa6: mov    %r15,%rdi
  0x000000012498faa9: vzeroupper 
  0x000000012498faac: mov    %rbp,0x330(%r15)
  0x000000012498fab3: mov    %rax,0x320(%r15)
  0x000000012498faba: test   $0xf,%esp
  0x000000012498fac0: je     0x000000012498fad8
  0x000000012498fac6: sub    $0x8,%rsp
  0x000000012498faca: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000012498facf: add    $0x8,%rsp
  0x000000012498fad3: jmpq   0x000000012498fadd
  0x000000012498fad8: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000012498fadd: movabs $0x0,%r10
  0x000000012498fae7: mov    %r10,0x320(%r15)
  0x000000012498faee: movabs $0x0,%r10
  0x000000012498faf8: mov    %r10,0x330(%r15)
  0x000000012498faff: movabs $0x0,%r10
  0x000000012498fb09: mov    %r10,0x328(%r15)
  0x000000012498fb10: vzeroupper 
  0x000000012498fb13: cmpq   $0x0,0x8(%r15)
  0x000000012498fb1b: je     0x000000012498fb26
  0x000000012498fb21: jmpq   0x0000000124975780
  0x000000012498fb26: mov    -0x40(%rbp),%r13
  0x000000012498fb2a: mov    -0x38(%rbp),%r14
  0x000000012498fb2e: retq   
  0x000000012498fb2f: movabs $0x114ff3493,%rdi
  0x000000012498fb39: and    $0xfffffffffffffff0,%rsp
  0x000000012498fb3d: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000012498fb42: hlt    
  0x000000012498fb43: mov    %r13,-0x40(%rbp)
  0x000000012498fb47: lea    (%rsi),%rax
  0x000000012498fb4a: mov    0x8(%rsi),%rcx
  0x000000012498fb4e: movq   $0x0,0x8(%rsi)
  0x000000012498fb56: mov    (%rcx),%rdx
  0x000000012498fb59: and    $0x7,%rdx
  0x000000012498fb5d: cmp    $0x5,%rdx
  0x000000012498fb61: je     0x000000012498fc1e
  0x000000012498fb67: mov    (%rax),%rdx
  0x000000012498fb6a: test   %rdx,%rdx
  0x000000012498fb6d: je     0x000000012498fc1e
  0x000000012498fb73: lock cmpxchg %rdx,(%rcx)
  0x000000012498fb78: je     0x000000012498fc1e
  0x000000012498fb7e: mov    %rcx,0x8(%rsi)
  0x000000012498fb82: callq  0x000000012498fb8c
  0x000000012498fb87: jmpq   0x000000012498fc1e
  0x000000012498fb8c: lea    0x8(%rsp),%rax
  0x000000012498fb91: mov    %r13,-0x40(%rbp)
  0x000000012498fb95: mov    %r15,%rdi
  0x000000012498fb98: vzeroupper 
  0x000000012498fb9b: mov    %rbp,0x330(%r15)
  0x000000012498fba2: mov    %rax,0x320(%r15)
  0x000000012498fba9: test   $0xf,%esp
  0x000000012498fbaf: je     0x000000012498fbc7
  0x000000012498fbb5: sub    $0x8,%rsp
  0x000000012498fbb9: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012498fbbe: add    $0x8,%rsp
  0x000000012498fbc2: jmpq   0x000000012498fbcc
  0x000000012498fbc7: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012498fbcc: movabs $0x0,%r10
  0x000000012498fbd6: mov    %r10,0x320(%r15)
  0x000000012498fbdd: movabs $0x0,%r10
  0x000000012498fbe7: mov    %r10,0x330(%r15)
  0x000000012498fbee: movabs $0x0,%r10
  0x000000012498fbf8: mov    %r10,0x328(%r15)
  0x000000012498fbff: vzeroupper 
  0x000000012498fc02: cmpq   $0x0,0x8(%r15)
  0x000000012498fc0a: je     0x000000012498fc15
  0x000000012498fc10: jmpq   0x0000000124975780
  0x000000012498fc15: mov    -0x40(%rbp),%r13
  0x000000012498fc19: mov    -0x38(%rbp),%r14
  0x000000012498fc1d: retq   
  0x000000012498fc1e: mov    -0x40(%rbp),%r13
  0x000000012498fc22: vmovsd (%rsp),%xmm0
  0x000000012498fc27: add    $0x10,%rsp
  0x000000012498fc2b: mov    -0x48(%rbp),%rsi
  0x000000012498fc2f: lea    -0x48(%rbp),%rbx
  0x000000012498fc33: jmpq   0x000000012498fcfa
  0x000000012498fc38: callq  0x000000012498fc42
  0x000000012498fc3d: jmpq   0x000000012498fcd4
  0x000000012498fc42: lea    0x8(%rsp),%rax
  0x000000012498fc47: mov    %r13,-0x40(%rbp)
  0x000000012498fc4b: mov    %r15,%rdi
  0x000000012498fc4e: vzeroupper 
  0x000000012498fc51: mov    %rbp,0x330(%r15)
  0x000000012498fc58: mov    %rax,0x320(%r15)
  0x000000012498fc5f: test   $0xf,%esp
  0x000000012498fc65: je     0x000000012498fc7d
  0x000000012498fc6b: sub    $0x8,%rsp
  0x000000012498fc6f: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000012498fc74: add    $0x8,%rsp
  0x000000012498fc78: jmpq   0x000000012498fc82
  0x000000012498fc7d: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000012498fc82: movabs $0x0,%r10
  0x000000012498fc8c: mov    %r10,0x320(%r15)
  0x000000012498fc93: movabs $0x0,%r10
  0x000000012498fc9d: mov    %r10,0x330(%r15)
  0x000000012498fca4: movabs $0x0,%r10
  0x000000012498fcae: mov    %r10,0x328(%r15)
  0x000000012498fcb5: vzeroupper 
  0x000000012498fcb8: cmpq   $0x0,0x8(%r15)
  0x000000012498fcc0: je     0x000000012498fccb
  0x000000012498fcc6: jmpq   0x0000000124975780
  0x000000012498fccb: mov    -0x40(%rbp),%r13
  0x000000012498fccf: mov    -0x38(%rbp),%r14
  0x000000012498fcd3: retq   
  0x000000012498fcd4: movabs $0x114ff3493,%rdi
  0x000000012498fcde: and    $0xfffffffffffffff0,%rsp
  0x000000012498fce2: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000012498fce7: hlt    
  0x000000012498fce8: cmpq   $0x0,0x8(%rsi)
  0x000000012498fcf0: jne    0x000000012498fc38
  0x000000012498fcf6: add    $0x10,%rsi
  0x000000012498fcfa: cmp    %rbx,%rsi
  0x000000012498fcfd: jne    0x000000012498fce8
  0x000000012498fcff: cmpb   $0x0,-0xf7d5c2c(%rip)        # 0x00000001151ba0da = DTraceMethodProbes
  0x000000012498fd06: je     0x000000012498fd48
  0x000000012498fd0c: sub    $0x10,%rsp
  0x000000012498fd10: vmovsd %xmm0,(%rsp)
  0x000000012498fd15: mov    -0x18(%rbp),%rsi
  0x000000012498fd19: mov    %r15,%rdi
  0x000000012498fd1c: test   $0xf,%esp
  0x000000012498fd22: je     0x000000012498fd3a
  0x000000012498fd28: sub    $0x8,%rsp
  0x000000012498fd2c: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000012498fd31: add    $0x8,%rsp
  0x000000012498fd35: jmpq   0x000000012498fd3f
  0x000000012498fd3a: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000012498fd3f: vmovsd (%rsp),%xmm0
  0x000000012498fd44: add    $0x10,%rsp
  0x000000012498fd48: mov    -0x8(%rbp),%rbx
  0x000000012498fd4c: cmpl   $0x3,0x408(%r15)
  0x000000012498fd57: je     0x000000012498fe40
  0x000000012498fd5d: cmp    0x418(%r15),%rbx
  0x000000012498fd64: jle    0x000000012498fe40
  0x000000012498fd6a: mov    %r15,%rdi
  0x000000012498fd6d: test   $0xf,%esp
  0x000000012498fd73: je     0x000000012498fd8b
  0x000000012498fd79: sub    $0x8,%rsp
  0x000000012498fd7d: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000012498fd82: add    $0x8,%rsp
  0x000000012498fd86: jmpq   0x000000012498fd90
  0x000000012498fd8b: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x000000012498fd90: callq  0x000000012498fd9a
  0x000000012498fd95: jmpq   0x000000012498fe2c
  0x000000012498fd9a: lea    0x8(%rsp),%rax
  0x000000012498fd9f: mov    %r13,-0x40(%rbp)
  0x000000012498fda3: mov    %r15,%rdi
  0x000000012498fda6: vzeroupper 
  0x000000012498fda9: mov    %rbp,0x330(%r15)
  0x000000012498fdb0: mov    %rax,0x320(%r15)
  0x000000012498fdb7: test   $0xf,%esp
  0x000000012498fdbd: je     0x000000012498fdd5
  0x000000012498fdc3: sub    $0x8,%rsp
  0x000000012498fdc7: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000012498fdcc: add    $0x8,%rsp
  0x000000012498fdd0: jmpq   0x000000012498fdda
  0x000000012498fdd5: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000012498fdda: movabs $0x0,%r10
  0x000000012498fde4: mov    %r10,0x320(%r15)
  0x000000012498fdeb: movabs $0x0,%r10
  0x000000012498fdf5: mov    %r10,0x330(%r15)
  0x000000012498fdfc: movabs $0x0,%r10
  0x000000012498fe06: mov    %r10,0x328(%r15)
  0x000000012498fe0d: vzeroupper 
  0x000000012498fe10: cmpq   $0x0,0x8(%r15)
  0x000000012498fe18: je     0x000000012498fe23
  0x000000012498fe1e: jmpq   0x0000000124975780
  0x000000012498fe23: mov    -0x40(%rbp),%r13
  0x000000012498fe27: mov    -0x38(%rbp),%r14
  0x000000012498fe2b: retq   
  0x000000012498fe2c: movabs $0x114ff3493,%rdi
  0x000000012498fe36: and    $0xfffffffffffffff0,%rsp
  0x000000012498fe3a: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000012498fe3f: hlt    
  0x000000012498fe40: leaveq 
  0x000000012498fe41: pop    %r13
  0x000000012498fe43: mov    %rbx,%rsp
  0x000000012498fe46: jmpq   *%r13
  0x000000012498fe49: nopl   0x0(%rax)
  0x000000012498fe50: add    %al,(%rax)
  0x000000012498fe52: add    %al,(%rax)
  0x000000012498fe54: add    %al,(%rax)
  0x000000012498fe56: add    %al,(%rax)
  0x000000012498fe58: add    %al,(%rax)
  0x000000012498fe5a: add    %al,(%rax)
  0x000000012498fe5c: add    %al,(%rax)
  0x000000012498fe5e: add    %al,(%rax)

----------------------------------------------------------------------
areturn  176 areturn  [0x000000012498fe80, 0x0000000124990320]  1184 bytes

  0x000000012498fe80: pop    %rax
  0x000000012498fe81: testb  $0x8,0x108(%r15)
  0x000000012498fe89: je     0x000000012498ff2d
  0x000000012498fe8f: push   %rax
  0x000000012498fe90: callq  0x000000012498fe9a
  0x000000012498fe95: jmpq   0x000000012498ff2c
  0x000000012498fe9a: lea    0x8(%rsp),%rax
  0x000000012498fe9f: mov    %r13,-0x40(%rbp)
  0x000000012498fea3: mov    %r15,%rdi
  0x000000012498fea6: vzeroupper 
  0x000000012498fea9: mov    %rbp,0x330(%r15)
  0x000000012498feb0: mov    %rax,0x320(%r15)
  0x000000012498feb7: test   $0xf,%esp
  0x000000012498febd: je     0x000000012498fed5
  0x000000012498fec3: sub    $0x8,%rsp
  0x000000012498fec7: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000012498fecc: add    $0x8,%rsp
  0x000000012498fed0: jmpq   0x000000012498feda
  0x000000012498fed5: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x000000012498feda: movabs $0x0,%r10
  0x000000012498fee4: mov    %r10,0x320(%r15)
  0x000000012498feeb: movabs $0x0,%r10
  0x000000012498fef5: mov    %r10,0x330(%r15)
  0x000000012498fefc: movabs $0x0,%r10
  0x000000012498ff06: mov    %r10,0x328(%r15)
  0x000000012498ff0d: vzeroupper 
  0x000000012498ff10: cmpq   $0x0,0x8(%r15)
  0x000000012498ff18: je     0x000000012498ff23
  0x000000012498ff1e: jmpq   0x0000000124975780
  0x000000012498ff23: mov    -0x40(%rbp),%r13
  0x000000012498ff27: mov    -0x38(%rbp),%r14
  0x000000012498ff2b: retq   
  0x000000012498ff2c: pop    %rax
  0x000000012498ff2d: mov    0x3dd(%r15),%bl
  0x000000012498ff34: movb   $0x0,0x3dd(%r15)
  0x000000012498ff3c: mov    -0x18(%rbp),%rcx
  0x000000012498ff40: mov    0x20(%rcx),%ecx
  0x000000012498ff43: test   $0x20,%ecx
  0x000000012498ff49: je     0x00000001249900fb
  0x000000012498ff4f: test   $0xff,%bl
  0x000000012498ff52: jne    0x00000001249901cf
  0x000000012498ff58: push   %rax
  0x000000012498ff59: lea    -0x58(%rbp),%rsi
  0x000000012498ff5d: mov    0x8(%rsi),%rax
  0x000000012498ff61: test   %rax,%rax
  0x000000012498ff64: jne    0x000000012499001b
  0x000000012498ff6a: pop    %rax
  0x000000012498ff6b: callq  0x000000012498ff75
  0x000000012498ff70: jmpq   0x0000000124990007
  0x000000012498ff75: lea    0x8(%rsp),%rax
  0x000000012498ff7a: mov    %r13,-0x40(%rbp)
  0x000000012498ff7e: mov    %r15,%rdi
  0x000000012498ff81: vzeroupper 
  0x000000012498ff84: mov    %rbp,0x330(%r15)
  0x000000012498ff8b: mov    %rax,0x320(%r15)
  0x000000012498ff92: test   $0xf,%esp
  0x000000012498ff98: je     0x000000012498ffb0
  0x000000012498ff9e: sub    $0x8,%rsp
  0x000000012498ffa2: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000012498ffa7: add    $0x8,%rsp
  0x000000012498ffab: jmpq   0x000000012498ffb5
  0x000000012498ffb0: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000012498ffb5: movabs $0x0,%r10
  0x000000012498ffbf: mov    %r10,0x320(%r15)
  0x000000012498ffc6: movabs $0x0,%r10
  0x000000012498ffd0: mov    %r10,0x330(%r15)
  0x000000012498ffd7: movabs $0x0,%r10
  0x000000012498ffe1: mov    %r10,0x328(%r15)
  0x000000012498ffe8: vzeroupper 
  0x000000012498ffeb: cmpq   $0x0,0x8(%r15)
  0x000000012498fff3: je     0x000000012498fffe
  0x000000012498fff9: jmpq   0x0000000124975780
  0x000000012498fffe: mov    -0x40(%rbp),%r13
  0x0000000124990002: mov    -0x38(%rbp),%r14
  0x0000000124990006: retq   
  0x0000000124990007: movabs $0x114ff3493,%rdi
  0x0000000124990011: and    $0xfffffffffffffff0,%rsp
  0x0000000124990015: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000012499001a: hlt    
  0x000000012499001b: mov    %r13,-0x40(%rbp)
  0x000000012499001f: lea    (%rsi),%rax
  0x0000000124990022: mov    0x8(%rsi),%rcx
  0x0000000124990026: movq   $0x0,0x8(%rsi)
  0x000000012499002e: mov    (%rcx),%rdx
  0x0000000124990031: and    $0x7,%rdx
  0x0000000124990035: cmp    $0x5,%rdx
  0x0000000124990039: je     0x00000001249900f6
  0x000000012499003f: mov    (%rax),%rdx
  0x0000000124990042: test   %rdx,%rdx
  0x0000000124990045: je     0x00000001249900f6
  0x000000012499004b: lock cmpxchg %rdx,(%rcx)
  0x0000000124990050: je     0x00000001249900f6
  0x0000000124990056: mov    %rcx,0x8(%rsi)
  0x000000012499005a: callq  0x0000000124990064
  0x000000012499005f: jmpq   0x00000001249900f6
  0x0000000124990064: lea    0x8(%rsp),%rax
  0x0000000124990069: mov    %r13,-0x40(%rbp)
  0x000000012499006d: mov    %r15,%rdi
  0x0000000124990070: vzeroupper 
  0x0000000124990073: mov    %rbp,0x330(%r15)
  0x000000012499007a: mov    %rax,0x320(%r15)
  0x0000000124990081: test   $0xf,%esp
  0x0000000124990087: je     0x000000012499009f
  0x000000012499008d: sub    $0x8,%rsp
  0x0000000124990091: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x0000000124990096: add    $0x8,%rsp
  0x000000012499009a: jmpq   0x00000001249900a4
  0x000000012499009f: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00000001249900a4: movabs $0x0,%r10
  0x00000001249900ae: mov    %r10,0x320(%r15)
  0x00000001249900b5: movabs $0x0,%r10
  0x00000001249900bf: mov    %r10,0x330(%r15)
  0x00000001249900c6: movabs $0x0,%r10
  0x00000001249900d0: mov    %r10,0x328(%r15)
  0x00000001249900d7: vzeroupper 
  0x00000001249900da: cmpq   $0x0,0x8(%r15)
  0x00000001249900e2: je     0x00000001249900ed
  0x00000001249900e8: jmpq   0x0000000124975780
  0x00000001249900ed: mov    -0x40(%rbp),%r13
  0x00000001249900f1: mov    -0x38(%rbp),%r14
  0x00000001249900f5: retq   
  0x00000001249900f6: mov    -0x40(%rbp),%r13
  0x00000001249900fa: pop    %rax
  0x00000001249900fb: mov    -0x48(%rbp),%rsi
  0x00000001249900ff: lea    -0x48(%rbp),%rbx
  0x0000000124990103: jmpq   0x00000001249901ca
  0x0000000124990108: callq  0x0000000124990112
  0x000000012499010d: jmpq   0x00000001249901a4
  0x0000000124990112: lea    0x8(%rsp),%rax
  0x0000000124990117: mov    %r13,-0x40(%rbp)
  0x000000012499011b: mov    %r15,%rdi
  0x000000012499011e: vzeroupper 
  0x0000000124990121: mov    %rbp,0x330(%r15)
  0x0000000124990128: mov    %rax,0x320(%r15)
  0x000000012499012f: test   $0xf,%esp
  0x0000000124990135: je     0x000000012499014d
  0x000000012499013b: sub    $0x8,%rsp
  0x000000012499013f: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x0000000124990144: add    $0x8,%rsp
  0x0000000124990148: jmpq   0x0000000124990152
  0x000000012499014d: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x0000000124990152: movabs $0x0,%r10
  0x000000012499015c: mov    %r10,0x320(%r15)
  0x0000000124990163: movabs $0x0,%r10
  0x000000012499016d: mov    %r10,0x330(%r15)
  0x0000000124990174: movabs $0x0,%r10
  0x000000012499017e: mov    %r10,0x328(%r15)
  0x0000000124990185: vzeroupper 
  0x0000000124990188: cmpq   $0x0,0x8(%r15)
  0x0000000124990190: je     0x000000012499019b
  0x0000000124990196: jmpq   0x0000000124975780
  0x000000012499019b: mov    -0x40(%rbp),%r13
  0x000000012499019f: mov    -0x38(%rbp),%r14
  0x00000001249901a3: retq   
  0x00000001249901a4: movabs $0x114ff3493,%rdi
  0x00000001249901ae: and    $0xfffffffffffffff0,%rsp
  0x00000001249901b2: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x00000001249901b7: hlt    
  0x00000001249901b8: cmpq   $0x0,0x8(%rsi)
  0x00000001249901c0: jne    0x0000000124990108
  0x00000001249901c6: add    $0x10,%rsi
  0x00000001249901ca: cmp    %rbx,%rsi
  0x00000001249901cd: jne    0x00000001249901b8
  0x00000001249901cf: cmpb   $0x0,-0xf7d60fc(%rip)        # 0x00000001151ba0da = DTraceMethodProbes
  0x00000001249901d6: je     0x0000000124990208
  0x00000001249901dc: push   %rax
  0x00000001249901dd: mov    -0x18(%rbp),%rsi
  0x00000001249901e1: mov    %r15,%rdi
  0x00000001249901e4: test   $0xf,%esp
  0x00000001249901ea: je     0x0000000124990202
  0x00000001249901f0: sub    $0x8,%rsp
  0x00000001249901f4: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00000001249901f9: add    $0x8,%rsp
  0x00000001249901fd: jmpq   0x0000000124990207
  0x0000000124990202: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x0000000124990207: pop    %rax
  0x0000000124990208: mov    -0x8(%rbp),%rbx
  0x000000012499020c: cmpl   $0x3,0x408(%r15)
  0x0000000124990217: je     0x0000000124990300
  0x000000012499021d: cmp    0x418(%r15),%rbx
  0x0000000124990224: jle    0x0000000124990300
  0x000000012499022a: mov    %r15,%rdi
  0x000000012499022d: test   $0xf,%esp
  0x0000000124990233: je     0x000000012499024b
  0x0000000124990239: sub    $0x8,%rsp
  0x000000012499023d: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x0000000124990242: add    $0x8,%rsp
  0x0000000124990246: jmpq   0x0000000124990250
  0x000000012499024b: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x0000000124990250: callq  0x000000012499025a
  0x0000000124990255: jmpq   0x00000001249902ec
  0x000000012499025a: lea    0x8(%rsp),%rax
  0x000000012499025f: mov    %r13,-0x40(%rbp)
  0x0000000124990263: mov    %r15,%rdi
  0x0000000124990266: vzeroupper 
  0x0000000124990269: mov    %rbp,0x330(%r15)
  0x0000000124990270: mov    %rax,0x320(%r15)
  0x0000000124990277: test   $0xf,%esp
  0x000000012499027d: je     0x0000000124990295
  0x0000000124990283: sub    $0x8,%rsp
  0x0000000124990287: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000012499028c: add    $0x8,%rsp
  0x0000000124990290: jmpq   0x000000012499029a
  0x0000000124990295: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000012499029a: movabs $0x0,%r10
  0x00000001249902a4: mov    %r10,0x320(%r15)
  0x00000001249902ab: movabs $0x0,%r10
  0x00000001249902b5: mov    %r10,0x330(%r15)
  0x00000001249902bc: movabs $0x0,%r10
  0x00000001249902c6: mov    %r10,0x328(%r15)
  0x00000001249902cd: vzeroupper 
  0x00000001249902d0: cmpq   $0x0,0x8(%r15)
  0x00000001249902d8: je     0x00000001249902e3
  0x00000001249902de: jmpq   0x0000000124975780
  0x00000001249902e3: mov    -0x40(%rbp),%r13
  0x00000001249902e7: mov    -0x38(%rbp),%r14
  0x00000001249902eb: retq   
  0x00000001249902ec: movabs $0x114ff3493,%rdi
  0x00000001249902f6: and    $0xfffffffffffffff0,%rsp
  0x00000001249902fa: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x00000001249902ff: hlt    
  0x0000000124990300: leaveq 
  0x0000000124990301: pop    %r13
  0x0000000124990303: mov    %rbx,%rsp
  0x0000000124990306: jmpq   *%r13
  0x0000000124990309: nopl   0x0(%rax)
  0x0000000124990310: add    %al,(%rax)
  0x0000000124990312: add    %al,(%rax)
  0x0000000124990314: add    %al,(%rax)
  0x0000000124990316: add    %al,(%rax)
  0x0000000124990318: add    %al,(%rax)
  0x000000012499031a: add    %al,(%rax)
  0x000000012499031c: add    %al,(%rax)
  0x000000012499031e: add    %al,(%rax)

----------------------------------------------------------------------
return  177 return  [0x0000000124990340, 0x0000000124990800]  1216 bytes

  0x0000000124990340: push   %rax
  0x0000000124990341: jmpq   0x000000012499037f
  0x0000000124990346: sub    $0x8,%rsp
  0x000000012499034a: vmovss %xmm0,(%rsp)
  0x000000012499034f: jmpq   0x000000012499037f
  0x0000000124990354: sub    $0x10,%rsp
  0x0000000124990358: vmovsd %xmm0,(%rsp)
  0x000000012499035d: jmpq   0x000000012499037f
  0x0000000124990362: sub    $0x10,%rsp
  0x0000000124990366: mov    %rax,(%rsp)
  0x000000012499036a: movabs $0x0,%r10
  0x0000000124990374: mov    %r10,0x8(%rsp)
  0x0000000124990379: jmpq   0x000000012499037f
  0x000000012499037e: push   %rax
  0x000000012499037f: testb  $0x8,0x108(%r15)
  0x0000000124990387: je     0x0000000124990429
  0x000000012499038d: callq  0x0000000124990397
  0x0000000124990392: jmpq   0x0000000124990429
  0x0000000124990397: lea    0x8(%rsp),%rax
  0x000000012499039c: mov    %r13,-0x40(%rbp)
  0x00000001249903a0: mov    %r15,%rdi
  0x00000001249903a3: vzeroupper 
  0x00000001249903a6: mov    %rbp,0x330(%r15)
  0x00000001249903ad: mov    %rax,0x320(%r15)
  0x00000001249903b4: test   $0xf,%esp
  0x00000001249903ba: je     0x00000001249903d2
  0x00000001249903c0: sub    $0x8,%rsp
  0x00000001249903c4: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00000001249903c9: add    $0x8,%rsp
  0x00000001249903cd: jmpq   0x00000001249903d7
  0x00000001249903d2: callq  0x0000000114bad17e = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00000001249903d7: movabs $0x0,%r10
  0x00000001249903e1: mov    %r10,0x320(%r15)
  0x00000001249903e8: movabs $0x0,%r10
  0x00000001249903f2: mov    %r10,0x330(%r15)
  0x00000001249903f9: movabs $0x0,%r10
  0x0000000124990403: mov    %r10,0x328(%r15)
  0x000000012499040a: vzeroupper 
  0x000000012499040d: cmpq   $0x0,0x8(%r15)
  0x0000000124990415: je     0x0000000124990420
  0x000000012499041b: jmpq   0x0000000124975780
  0x0000000124990420: mov    -0x40(%rbp),%r13
  0x0000000124990424: mov    -0x38(%rbp),%r14
  0x0000000124990428: retq   
  0x0000000124990429: mov    0x3dd(%r15),%bl
  0x0000000124990430: movb   $0x0,0x3dd(%r15)
  0x0000000124990438: mov    -0x18(%rbp),%rcx
  0x000000012499043c: mov    0x20(%rcx),%ecx
  0x000000012499043f: test   $0x20,%ecx
  0x0000000124990445: je     0x00000001249905f4
  0x000000012499044b: test   $0xff,%bl
  0x000000012499044e: jne    0x00000001249906c8
  0x0000000124990454: lea    -0x58(%rbp),%rsi
  0x0000000124990458: mov    0x8(%rsi),%rax
  0x000000012499045c: test   %rax,%rax
  0x000000012499045f: jne    0x0000000124990515
  0x0000000124990465: callq  0x000000012499046f
  0x000000012499046a: jmpq   0x0000000124990501
  0x000000012499046f: lea    0x8(%rsp),%rax
  0x0000000124990474: mov    %r13,-0x40(%rbp)
  0x0000000124990478: mov    %r15,%rdi
  0x000000012499047b: vzeroupper 
  0x000000012499047e: mov    %rbp,0x330(%r15)
  0x0000000124990485: mov    %rax,0x320(%r15)
  0x000000012499048c: test   $0xf,%esp
  0x0000000124990492: je     0x00000001249904aa
  0x0000000124990498: sub    $0x8,%rsp
  0x000000012499049c: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00000001249904a1: add    $0x8,%rsp
  0x00000001249904a5: jmpq   0x00000001249904af
  0x00000001249904aa: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00000001249904af: movabs $0x0,%r10
  0x00000001249904b9: mov    %r10,0x320(%r15)
  0x00000001249904c0: movabs $0x0,%r10
  0x00000001249904ca: mov    %r10,0x330(%r15)
  0x00000001249904d1: movabs $0x0,%r10
  0x00000001249904db: mov    %r10,0x328(%r15)
  0x00000001249904e2: vzeroupper 
  0x00000001249904e5: cmpq   $0x0,0x8(%r15)
  0x00000001249904ed: je     0x00000001249904f8
  0x00000001249904f3: jmpq   0x0000000124975780
  0x00000001249904f8: mov    -0x40(%rbp),%r13
  0x00000001249904fc: mov    -0x38(%rbp),%r14
  0x0000000124990500: retq   
  0x0000000124990501: movabs $0x114ff3493,%rdi
  0x000000012499050b: and    $0xfffffffffffffff0,%rsp
  0x000000012499050f: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124990514: hlt    
  0x0000000124990515: mov    %r13,-0x40(%rbp)
  0x0000000124990519: lea    (%rsi),%rax
  0x000000012499051c: mov    0x8(%rsi),%rcx
  0x0000000124990520: movq   $0x0,0x8(%rsi)
  0x0000000124990528: mov    (%rcx),%rdx
  0x000000012499052b: and    $0x7,%rdx
  0x000000012499052f: cmp    $0x5,%rdx
  0x0000000124990533: je     0x00000001249905f0
  0x0000000124990539: mov    (%rax),%rdx
  0x000000012499053c: test   %rdx,%rdx
  0x000000012499053f: je     0x00000001249905f0
  0x0000000124990545: lock cmpxchg %rdx,(%rcx)
  0x000000012499054a: je     0x00000001249905f0
  0x0000000124990550: mov    %rcx,0x8(%rsi)
  0x0000000124990554: callq  0x000000012499055e
  0x0000000124990559: jmpq   0x00000001249905f0
  0x000000012499055e: lea    0x8(%rsp),%rax
  0x0000000124990563: mov    %r13,-0x40(%rbp)
  0x0000000124990567: mov    %r15,%rdi
  0x000000012499056a: vzeroupper 
  0x000000012499056d: mov    %rbp,0x330(%r15)
  0x0000000124990574: mov    %rax,0x320(%r15)
  0x000000012499057b: test   $0xf,%esp
  0x0000000124990581: je     0x0000000124990599
  0x0000000124990587: sub    $0x8,%rsp
  0x000000012499058b: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x0000000124990590: add    $0x8,%rsp
  0x0000000124990594: jmpq   0x000000012499059e
  0x0000000124990599: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x000000012499059e: movabs $0x0,%r10
  0x00000001249905a8: mov    %r10,0x320(%r15)
  0x00000001249905af: movabs $0x0,%r10
  0x00000001249905b9: mov    %r10,0x330(%r15)
  0x00000001249905c0: movabs $0x0,%r10
  0x00000001249905ca: mov    %r10,0x328(%r15)
  0x00000001249905d1: vzeroupper 
  0x00000001249905d4: cmpq   $0x0,0x8(%r15)
  0x00000001249905dc: je     0x00000001249905e7
  0x00000001249905e2: jmpq   0x0000000124975780
  0x00000001249905e7: mov    -0x40(%rbp),%r13
  0x00000001249905eb: mov    -0x38(%rbp),%r14
  0x00000001249905ef: retq   
  0x00000001249905f0: mov    -0x40(%rbp),%r13
  0x00000001249905f4: mov    -0x48(%rbp),%rsi
  0x00000001249905f8: lea    -0x48(%rbp),%rbx
  0x00000001249905fc: jmpq   0x00000001249906c3
  0x0000000124990601: callq  0x000000012499060b
  0x0000000124990606: jmpq   0x000000012499069d
  0x000000012499060b: lea    0x8(%rsp),%rax
  0x0000000124990610: mov    %r13,-0x40(%rbp)
  0x0000000124990614: mov    %r15,%rdi
  0x0000000124990617: vzeroupper 
  0x000000012499061a: mov    %rbp,0x330(%r15)
  0x0000000124990621: mov    %rax,0x320(%r15)
  0x0000000124990628: test   $0xf,%esp
  0x000000012499062e: je     0x0000000124990646
  0x0000000124990634: sub    $0x8,%rsp
  0x0000000124990638: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000012499063d: add    $0x8,%rsp
  0x0000000124990641: jmpq   0x000000012499064b
  0x0000000124990646: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x000000012499064b: movabs $0x0,%r10
  0x0000000124990655: mov    %r10,0x320(%r15)
  0x000000012499065c: movabs $0x0,%r10
  0x0000000124990666: mov    %r10,0x330(%r15)
  0x000000012499066d: movabs $0x0,%r10
  0x0000000124990677: mov    %r10,0x328(%r15)
  0x000000012499067e: vzeroupper 
  0x0000000124990681: cmpq   $0x0,0x8(%r15)
  0x0000000124990689: je     0x0000000124990694
  0x000000012499068f: jmpq   0x0000000124975780
  0x0000000124990694: mov    -0x40(%rbp),%r13
  0x0000000124990698: mov    -0x38(%rbp),%r14
  0x000000012499069c: retq   
  0x000000012499069d: movabs $0x114ff3493,%rdi
  0x00000001249906a7: and    $0xfffffffffffffff0,%rsp
  0x00000001249906ab: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x00000001249906b0: hlt    
  0x00000001249906b1: cmpq   $0x0,0x8(%rsi)
  0x00000001249906b9: jne    0x0000000124990601
  0x00000001249906bf: add    $0x10,%rsi
  0x00000001249906c3: cmp    %rbx,%rsi
  0x00000001249906c6: jne    0x00000001249906b1
  0x00000001249906c8: cmpb   $0x0,-0xf7d65f5(%rip)        # 0x00000001151ba0da = DTraceMethodProbes
  0x00000001249906cf: je     0x00000001249906ff
  0x00000001249906d5: mov    -0x18(%rbp),%rsi
  0x00000001249906d9: mov    %r15,%rdi
  0x00000001249906dc: test   $0xf,%esp
  0x00000001249906e2: je     0x00000001249906fa
  0x00000001249906e8: sub    $0x8,%rsp
  0x00000001249906ec: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00000001249906f1: add    $0x8,%rsp
  0x00000001249906f5: jmpq   0x00000001249906ff
  0x00000001249906fa: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00000001249906ff: mov    -0x8(%rbp),%rbx
  0x0000000124990703: cmpl   $0x3,0x408(%r15)
  0x000000012499070e: je     0x00000001249907f7
  0x0000000124990714: cmp    0x418(%r15),%rbx
  0x000000012499071b: jle    0x00000001249907f7
  0x0000000124990721: mov    %r15,%rdi
  0x0000000124990724: test   $0xf,%esp
  0x000000012499072a: je     0x0000000124990742
  0x0000000124990730: sub    $0x8,%rsp
  0x0000000124990734: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x0000000124990739: add    $0x8,%rsp
  0x000000012499073d: jmpq   0x0000000124990747
  0x0000000124990742: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x0000000124990747: callq  0x0000000124990751
  0x000000012499074c: jmpq   0x00000001249907e3
  0x0000000124990751: lea    0x8(%rsp),%rax
  0x0000000124990756: mov    %r13,-0x40(%rbp)
  0x000000012499075a: mov    %r15,%rdi
  0x000000012499075d: vzeroupper 
  0x0000000124990760: mov    %rbp,0x330(%r15)
  0x0000000124990767: mov    %rax,0x320(%r15)
  0x000000012499076e: test   $0xf,%esp
  0x0000000124990774: je     0x000000012499078c
  0x000000012499077a: sub    $0x8,%rsp
  0x000000012499077e: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x0000000124990783: add    $0x8,%rsp
  0x0000000124990787: jmpq   0x0000000124990791
  0x000000012499078c: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x0000000124990791: movabs $0x0,%r10
  0x000000012499079b: mov    %r10,0x320(%r15)
  0x00000001249907a2: movabs $0x0,%r10
  0x00000001249907ac: mov    %r10,0x330(%r15)
  0x00000001249907b3: movabs $0x0,%r10
  0x00000001249907bd: mov    %r10,0x328(%r15)
  0x00000001249907c4: vzeroupper 
  0x00000001249907c7: cmpq   $0x0,0x8(%r15)
  0x00000001249907cf: je     0x00000001249907da
  0x00000001249907d5: jmpq   0x0000000124975780
  0x00000001249907da: mov    -0x40(%rbp),%r13
  0x00000001249907de: mov    -0x38(%rbp),%r14
  0x00000001249907e2: retq   
  0x00000001249907e3: movabs $0x114ff3493,%rdi
  0x00000001249907ed: and    $0xfffffffffffffff0,%rsp
  0x00000001249907f1: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x00000001249907f6: hlt    
  0x00000001249907f7: leaveq 
  0x00000001249907f8: pop    %r13
  0x00000001249907fa: mov    %rbx,%rsp
  0x00000001249907fd: jmpq   *%r13

----------------------------------------------------------------------
getstatic  178 getstatic  [0x0000000124990820, 0x0000000124990a40]  544 bytes

  0x0000000124990820: push   %rax
  0x0000000124990821: jmpq   0x000000012499085f
  0x0000000124990826: sub    $0x8,%rsp
  0x000000012499082a: vmovss %xmm0,(%rsp)
  0x000000012499082f: jmpq   0x000000012499085f
  0x0000000124990834: sub    $0x10,%rsp
  0x0000000124990838: vmovsd %xmm0,(%rsp)
  0x000000012499083d: jmpq   0x000000012499085f
  0x0000000124990842: sub    $0x10,%rsp
  0x0000000124990846: mov    %rax,(%rsp)
  0x000000012499084a: movabs $0x0,%r10
  0x0000000124990854: mov    %r10,0x8(%rsp)
  0x0000000124990859: jmpq   0x000000012499085f
  0x000000012499085e: push   %rax
  0x000000012499085f: movzwl 0x1(%r13),%edx
  0x0000000124990864: mov    -0x30(%rbp),%rcx
  0x0000000124990868: shl    $0x2,%edx
  0x000000012499086b: mov    0x28(%rcx,%rdx,8),%ebx
  0x000000012499086f: shr    $0x10,%ebx
  0x0000000124990872: and    $0xff,%ebx
  0x0000000124990878: cmp    $0xb2,%ebx
  0x000000012499087e: je     0x0000000124990934
  0x0000000124990884: mov    $0xb2,%ebx
  0x0000000124990889: callq  0x0000000124990893
  0x000000012499088e: jmpq   0x0000000124990928
  0x0000000124990893: mov    %rbx,%rsi
  0x0000000124990896: lea    0x8(%rsp),%rax
  0x000000012499089b: mov    %r13,-0x40(%rbp)
  0x000000012499089f: mov    %r15,%rdi
  0x00000001249908a2: vzeroupper 
  0x00000001249908a5: mov    %rbp,0x330(%r15)
  0x00000001249908ac: mov    %rax,0x320(%r15)
  0x00000001249908b3: test   $0xf,%esp
  0x00000001249908b9: je     0x00000001249908d1
  0x00000001249908bf: sub    $0x8,%rsp
  0x00000001249908c3: callq  0x0000000114bac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x00000001249908c8: add    $0x8,%rsp
  0x00000001249908cc: jmpq   0x00000001249908d6
  0x00000001249908d1: callq  0x0000000114bac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x00000001249908d6: movabs $0x0,%r10
  0x00000001249908e0: mov    %r10,0x320(%r15)
  0x00000001249908e7: movabs $0x0,%r10
  0x00000001249908f1: mov    %r10,0x330(%r15)
  0x00000001249908f8: movabs $0x0,%r10
  0x0000000124990902: mov    %r10,0x328(%r15)
  0x0000000124990909: vzeroupper 
  0x000000012499090c: cmpq   $0x0,0x8(%r15)
  0x0000000124990914: je     0x000000012499091f
  0x000000012499091a: jmpq   0x0000000124975780
  0x000000012499091f: mov    -0x40(%rbp),%r13
  0x0000000124990923: mov    -0x38(%rbp),%r14
  0x0000000124990927: retq   
  0x0000000124990928: movzwl 0x1(%r13),%edx
  0x000000012499092d: mov    -0x30(%rbp),%rcx
  0x0000000124990931: shl    $0x2,%edx
  0x0000000124990934: mov    0x38(%rcx,%rdx,8),%rbx
  0x0000000124990939: mov    0x40(%rcx,%rdx,8),%eax
  0x000000012499093d: mov    0x30(%rcx,%rdx,8),%rcx
  0x0000000124990942: mov    0x70(%rcx),%rcx
  0x0000000124990946: mov    (%rcx),%rcx
  0x0000000124990949: shr    $0x1c,%eax
  0x000000012499094c: and    $0xf,%eax
  0x000000012499094f: jne    0x000000012499095f
  0x0000000124990955: movsbl (%rcx,%rbx,1),%eax
  0x0000000124990959: push   %rax
  0x000000012499095a: jmpq   0x0000000124990a13
  0x000000012499095f: cmp    $0x1,%eax
  0x0000000124990962: jne    0x0000000124990972
  0x0000000124990968: movzbl (%rcx,%rbx,1),%eax
  0x000000012499096c: push   %rax
  0x000000012499096d: jmpq   0x0000000124990a13
  0x0000000124990972: cmp    $0x8,%eax
  0x0000000124990975: jne    0x0000000124990988
  0x000000012499097b: mov    (%rcx,%rbx,1),%eax
  0x000000012499097e: shl    $0x3,%rax
  0x0000000124990982: push   %rax
  0x0000000124990983: jmpq   0x0000000124990a13
  0x0000000124990988: cmp    $0x4,%eax
  0x000000012499098b: jne    0x000000012499099a
  0x0000000124990991: mov    (%rcx,%rbx,1),%eax
  0x0000000124990994: push   %rax
  0x0000000124990995: jmpq   0x0000000124990a13
  0x000000012499099a: cmp    $0x2,%eax
  0x000000012499099d: jne    0x00000001249909ad
  0x00000001249909a3: movzwl (%rcx,%rbx,1),%eax
  0x00000001249909a7: push   %rax
  0x00000001249909a8: jmpq   0x0000000124990a13
  0x00000001249909ad: cmp    $0x3,%eax
  0x00000001249909b0: jne    0x00000001249909c0
  0x00000001249909b6: movswl (%rcx,%rbx,1),%eax
  0x00000001249909ba: push   %rax
  0x00000001249909bb: jmpq   0x0000000124990a13
  0x00000001249909c0: cmp    $0x5,%eax
  0x00000001249909c3: jne    0x00000001249909e9
  0x00000001249909c9: mov    (%rcx,%rbx,1),%rax
  0x00000001249909cd: sub    $0x10,%rsp
  0x00000001249909d1: mov    %rax,(%rsp)
  0x00000001249909d5: movabs $0x0,%r10
  0x00000001249909df: mov    %r10,0x8(%rsp)
  0x00000001249909e4: jmpq   0x0000000124990a13
  0x00000001249909e9: cmp    $0x6,%eax
  0x00000001249909ec: jne    0x0000000124990a05
  0x00000001249909f2: vmovss (%rcx,%rbx,1),%xmm0
  0x00000001249909f7: sub    $0x8,%rsp
  0x00000001249909fb: vmovss %xmm0,(%rsp)
  0x0000000124990a00: jmpq   0x0000000124990a13
  0x0000000124990a05: vmovsd (%rcx,%rbx,1),%xmm0
  0x0000000124990a0a: sub    $0x10,%rsp
  0x0000000124990a0e: vmovsd %xmm0,(%rsp)
  0x0000000124990a13: movzbl 0x3(%r13),%ebx
  0x0000000124990a18: add    $0x3,%r13
  0x0000000124990a1c: movabs $0x1151d7a20,%r10
  0x0000000124990a26: jmpq   *(%r10,%rbx,8)
  0x0000000124990a2a: nopw   0x0(%rax,%rax,1)
  0x0000000124990a30: add    %al,(%rax)
  0x0000000124990a32: add    %al,(%rax)
  0x0000000124990a34: add    %al,(%rax)
  0x0000000124990a36: add    %al,(%rax)
  0x0000000124990a38: add    %al,(%rax)
  0x0000000124990a3a: add    %al,(%rax)
  0x0000000124990a3c: add    %al,(%rax)
  0x0000000124990a3e: add    %al,(%rax)

----------------------------------------------------------------------
putstatic  179 putstatic  [0x0000000124990a60, 0x0000000124990dc0]  864 bytes

  0x0000000124990a60: push   %rax
  0x0000000124990a61: jmpq   0x0000000124990a9f
  0x0000000124990a66: sub    $0x8,%rsp
  0x0000000124990a6a: vmovss %xmm0,(%rsp)
  0x0000000124990a6f: jmpq   0x0000000124990a9f
  0x0000000124990a74: sub    $0x10,%rsp
  0x0000000124990a78: vmovsd %xmm0,(%rsp)
  0x0000000124990a7d: jmpq   0x0000000124990a9f
  0x0000000124990a82: sub    $0x10,%rsp
  0x0000000124990a86: mov    %rax,(%rsp)
  0x0000000124990a8a: movabs $0x0,%r10
  0x0000000124990a94: mov    %r10,0x8(%rsp)
  0x0000000124990a99: jmpq   0x0000000124990a9f
  0x0000000124990a9e: push   %rax
  0x0000000124990a9f: movzwl 0x1(%r13),%edx
  0x0000000124990aa4: mov    -0x30(%rbp),%rcx
  0x0000000124990aa8: shl    $0x2,%edx
  0x0000000124990aab: mov    0x28(%rcx,%rdx,8),%ebx
  0x0000000124990aaf: shr    $0x18,%ebx
  0x0000000124990ab2: and    $0xff,%ebx
  0x0000000124990ab8: cmp    $0xb3,%ebx
  0x0000000124990abe: je     0x0000000124990b74
  0x0000000124990ac4: mov    $0xb3,%ebx
  0x0000000124990ac9: callq  0x0000000124990ad3
  0x0000000124990ace: jmpq   0x0000000124990b68
  0x0000000124990ad3: mov    %rbx,%rsi
  0x0000000124990ad6: lea    0x8(%rsp),%rax
  0x0000000124990adb: mov    %r13,-0x40(%rbp)
  0x0000000124990adf: mov    %r15,%rdi
  0x0000000124990ae2: vzeroupper 
  0x0000000124990ae5: mov    %rbp,0x330(%r15)
  0x0000000124990aec: mov    %rax,0x320(%r15)
  0x0000000124990af3: test   $0xf,%esp
  0x0000000124990af9: je     0x0000000124990b11
  0x0000000124990aff: sub    $0x8,%rsp
  0x0000000124990b03: callq  0x0000000114bac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x0000000124990b08: add    $0x8,%rsp
  0x0000000124990b0c: jmpq   0x0000000124990b16
  0x0000000124990b11: callq  0x0000000114bac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x0000000124990b16: movabs $0x0,%r10
  0x0000000124990b20: mov    %r10,0x320(%r15)
  0x0000000124990b27: movabs $0x0,%r10
  0x0000000124990b31: mov    %r10,0x330(%r15)
  0x0000000124990b38: movabs $0x0,%r10
  0x0000000124990b42: mov    %r10,0x328(%r15)
  0x0000000124990b49: vzeroupper 
  0x0000000124990b4c: cmpq   $0x0,0x8(%r15)
  0x0000000124990b54: je     0x0000000124990b5f
  0x0000000124990b5a: jmpq   0x0000000124975780
  0x0000000124990b5f: mov    -0x40(%rbp),%r13
  0x0000000124990b63: mov    -0x38(%rbp),%r14
  0x0000000124990b67: retq   
  0x0000000124990b68: movzwl 0x1(%r13),%edx
  0x0000000124990b6d: mov    -0x30(%rbp),%rcx
  0x0000000124990b71: shl    $0x2,%edx
  0x0000000124990b74: mov    0x38(%rcx,%rdx,8),%rbx
  0x0000000124990b79: mov    0x40(%rcx,%rdx,8),%eax
  0x0000000124990b7d: mov    0x30(%rcx,%rdx,8),%rcx
  0x0000000124990b82: mov    0x70(%rcx),%rcx
  0x0000000124990b86: mov    (%rcx),%rcx
  0x0000000124990b89: mov    %eax,%edx
  0x0000000124990b8b: shr    $0x15,%edx
  0x0000000124990b8e: and    $0x1,%edx
  0x0000000124990b91: shr    $0x1c,%eax
  0x0000000124990b94: and    $0xf,%eax
  0x0000000124990b97: jne    0x0000000124990bac
  0x0000000124990b9d: mov    (%rsp),%eax
  0x0000000124990ba0: add    $0x8,%rsp
  0x0000000124990ba4: mov    %al,(%rcx,%rbx,1)
  0x0000000124990ba7: jmpq   0x0000000124990d7f
  0x0000000124990bac: cmp    $0x1,%eax
  0x0000000124990baf: jne    0x0000000124990bc7
  0x0000000124990bb5: mov    (%rsp),%eax
  0x0000000124990bb8: add    $0x8,%rsp
  0x0000000124990bbc: and    $0x1,%eax
  0x0000000124990bbf: mov    %al,(%rcx,%rbx,1)
  0x0000000124990bc2: jmpq   0x0000000124990d7f
  0x0000000124990bc7: cmp    $0x8,%eax
  0x0000000124990bca: jne    0x0000000124990cf1
  0x0000000124990bd0: pop    %rax
  0x0000000124990bd1: lea    (%rcx,%rbx,1),%rdx
  0x0000000124990bd5: cmpb   $0x0,0x30(%r15)
  0x0000000124990bda: je     0x0000000124990c41
  0x0000000124990be0: mov    (%rdx),%ebx
  0x0000000124990be2: shl    $0x3,%rbx
  0x0000000124990be6: cmp    $0x0,%rbx
  0x0000000124990bea: je     0x0000000124990c41
  0x0000000124990bf0: mov    0x38(%r15),%r8
  0x0000000124990bf4: cmp    $0x0,%r8
  0x0000000124990bf8: je     0x0000000124990c12
  0x0000000124990bfe: sub    $0x8,%r8
  0x0000000124990c02: mov    %r8,0x38(%r15)
  0x0000000124990c06: add    0x48(%r15),%r8
  0x0000000124990c0a: mov    %rbx,(%r8)
  0x0000000124990c0d: jmpq   0x0000000124990c41
  0x0000000124990c12: push   %rax
  0x0000000124990c13: push   %rdx
  0x0000000124990c14: push   %rbx
  0x0000000124990c15: mov    %r15,%rsi
  0x0000000124990c18: mov    %rbx,%rdi
  0x0000000124990c1b: test   $0xf,%esp
  0x0000000124990c21: je     0x0000000124990c39
  0x0000000124990c27: sub    $0x8,%rsp
  0x0000000124990c2b: callq  0x0000000114b0185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x0000000124990c30: add    $0x8,%rsp
  0x0000000124990c34: jmpq   0x0000000124990c3e
  0x0000000124990c39: callq  0x0000000114b0185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x0000000124990c3e: pop    %rbx
  0x0000000124990c3f: pop    %rdx
  0x0000000124990c40: pop    %rax
  0x0000000124990c41: mov    %rax,%rbx
  0x0000000124990c44: shr    $0x3,%rax
  0x0000000124990c48: mov    %eax,(%rdx)
  0x0000000124990c4a: mov    %rdx,%r8
  0x0000000124990c4d: xor    %rbx,%r8
  0x0000000124990c50: shr    $0x16,%r8
  0x0000000124990c54: je     0x0000000124990cec
  0x0000000124990c5a: cmp    $0x0,%rbx
  0x0000000124990c5e: je     0x0000000124990cec
  0x0000000124990c64: mov    %rdx,%r8
  0x0000000124990c67: shr    $0x9,%r8
  0x0000000124990c6b: movabs $0x1155db000,%rbx
  0x0000000124990c75: add    %rbx,%r8
  0x0000000124990c78: cmpb   $0x20,(%r8)
  0x0000000124990c7c: je     0x0000000124990cec
  0x0000000124990c82: lock addl $0x0,-0x40(%rsp)
  0x0000000124990c88: cmpb   $0x0,(%r8)
  0x0000000124990c8c: je     0x0000000124990cec
  0x0000000124990c92: movb   $0x0,(%r8)
  0x0000000124990c96: cmpl   $0x0,0x70(%r15)
  0x0000000124990c9e: je     0x0000000124990cbf
  0x0000000124990ca4: subl   $0x8,0x70(%r15)
  0x0000000124990ca9: mov    0x80(%r15),%rbx
  0x0000000124990cb0: movslq 0x70(%r15),%r10
  0x0000000124990cb4: add    %r10,%rbx
  0x0000000124990cb7: mov    %r8,(%rbx)
  0x0000000124990cba: jmpq   0x0000000124990cec
  0x0000000124990cbf: push   %rdx
  0x0000000124990cc0: push   %rbx
  0x0000000124990cc1: mov    %r15,%rsi
  0x0000000124990cc4: mov    %r8,%rdi
  0x0000000124990cc7: test   $0xf,%esp
  0x0000000124990ccd: je     0x0000000124990ce5
  0x0000000124990cd3: sub    $0x8,%rsp
  0x0000000124990cd7: callq  0x0000000114b01882 = G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*)
  0x0000000124990cdc: add    $0x8,%rsp
  0x0000000124990ce0: jmpq   0x0000000124990cea
  0x0000000124990ce5: callq  0x0000000114b01882 = G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*)
  0x0000000124990cea: pop    %rbx
  0x0000000124990ceb: pop    %rdx
  0x0000000124990cec: jmpq   0x0000000124990d7f
  0x0000000124990cf1: cmp    $0x4,%eax
  0x0000000124990cf4: jne    0x0000000124990d09
  0x0000000124990cfa: mov    (%rsp),%eax
  0x0000000124990cfd: add    $0x8,%rsp
  0x0000000124990d01: mov    %eax,(%rcx,%rbx,1)
  0x0000000124990d04: jmpq   0x0000000124990d7f
  0x0000000124990d09: cmp    $0x2,%eax
  0x0000000124990d0c: jne    0x0000000124990d22
  0x0000000124990d12: mov    (%rsp),%eax
  0x0000000124990d15: add    $0x8,%rsp
  0x0000000124990d19: mov    %ax,(%rcx,%rbx,1)
  0x0000000124990d1d: jmpq   0x0000000124990d7f
  0x0000000124990d22: cmp    $0x3,%eax
  0x0000000124990d25: jne    0x0000000124990d3b
  0x0000000124990d2b: mov    (%rsp),%eax
  0x0000000124990d2e: add    $0x8,%rsp
  0x0000000124990d32: mov    %ax,(%rcx,%rbx,1)
  0x0000000124990d36: jmpq   0x0000000124990d7f
  0x0000000124990d3b: cmp    $0x5,%eax
  0x0000000124990d3e: jne    0x0000000124990d55
  0x0000000124990d44: mov    (%rsp),%rax
  0x0000000124990d48: add    $0x10,%rsp
  0x0000000124990d4c: mov    %rax,(%rcx,%rbx,1)
  0x0000000124990d50: jmpq   0x0000000124990d7f
  0x0000000124990d55: cmp    $0x6,%eax
  0x0000000124990d58: jne    0x0000000124990d71
  0x0000000124990d5e: vmovss (%rsp),%xmm0
  0x0000000124990d63: add    $0x8,%rsp
  0x0000000124990d67: vmovss %xmm0,(%rcx,%rbx,1)
  0x0000000124990d6c: jmpq   0x0000000124990d7f
  0x0000000124990d71: vmovsd (%rsp),%xmm0
  0x0000000124990d76: add    $0x10,%rsp
  0x0000000124990d7a: vmovsd %xmm0,(%rcx,%rbx,1)
  0x0000000124990d7f: test   %edx,%edx
  0x0000000124990d81: je     0x0000000124990d8d
  0x0000000124990d87: lock addl $0x0,-0x40(%rsp)
  0x0000000124990d8d: movzbl 0x3(%r13),%ebx
  0x0000000124990d92: add    $0x3,%r13
  0x0000000124990d96: movabs $0x1151d7a20,%r10
  0x0000000124990da0: jmpq   *(%r10,%rbx,8)
  0x0000000124990da4: nopl   0x0(%rax)
  0x0000000124990da8: add    %al,(%rax)
  0x0000000124990daa: add    %al,(%rax)
  0x0000000124990dac: add    %al,(%rax)
  0x0000000124990dae: add    %al,(%rax)
  0x0000000124990db0: add    %al,(%rax)
  0x0000000124990db2: add    %al,(%rax)
  0x0000000124990db4: add    %al,(%rax)
  0x0000000124990db6: add    %al,(%rax)
  0x0000000124990db8: add    %al,(%rax)
  0x0000000124990dba: add    %al,(%rax)
  0x0000000124990dbc: add    %al,(%rax)
  0x0000000124990dbe: add    %al,(%rax)

----------------------------------------------------------------------
getfield  180 getfield  [0x0000000124990de0, 0x0000000124991040]  608 bytes

  0x0000000124990de0: push   %rax
  0x0000000124990de1: jmpq   0x0000000124990e1f
  0x0000000124990de6: sub    $0x8,%rsp
  0x0000000124990dea: vmovss %xmm0,(%rsp)
  0x0000000124990def: jmpq   0x0000000124990e1f
  0x0000000124990df4: sub    $0x10,%rsp
  0x0000000124990df8: vmovsd %xmm0,(%rsp)
  0x0000000124990dfd: jmpq   0x0000000124990e1f
  0x0000000124990e02: sub    $0x10,%rsp
  0x0000000124990e06: mov    %rax,(%rsp)
  0x0000000124990e0a: movabs $0x0,%r10
  0x0000000124990e14: mov    %r10,0x8(%rsp)
  0x0000000124990e19: jmpq   0x0000000124990e1f
  0x0000000124990e1e: push   %rax
  0x0000000124990e1f: movzwl 0x1(%r13),%edx
  0x0000000124990e24: mov    -0x30(%rbp),%rcx
  0x0000000124990e28: shl    $0x2,%edx
  0x0000000124990e2b: mov    0x28(%rcx,%rdx,8),%ebx
  0x0000000124990e2f: shr    $0x10,%ebx
  0x0000000124990e32: and    $0xff,%ebx
  0x0000000124990e38: cmp    $0xb4,%ebx
  0x0000000124990e3e: je     0x0000000124990ef4
  0x0000000124990e44: mov    $0xb4,%ebx
  0x0000000124990e49: callq  0x0000000124990e53
  0x0000000124990e4e: jmpq   0x0000000124990ee8
  0x0000000124990e53: mov    %rbx,%rsi
  0x0000000124990e56: lea    0x8(%rsp),%rax
  0x0000000124990e5b: mov    %r13,-0x40(%rbp)
  0x0000000124990e5f: mov    %r15,%rdi
  0x0000000124990e62: vzeroupper 
  0x0000000124990e65: mov    %rbp,0x330(%r15)
  0x0000000124990e6c: mov    %rax,0x320(%r15)
  0x0000000124990e73: test   $0xf,%esp
  0x0000000124990e79: je     0x0000000124990e91
  0x0000000124990e7f: sub    $0x8,%rsp
  0x0000000124990e83: callq  0x0000000114bac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x0000000124990e88: add    $0x8,%rsp
  0x0000000124990e8c: jmpq   0x0000000124990e96
  0x0000000124990e91: callq  0x0000000114bac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x0000000124990e96: movabs $0x0,%r10
  0x0000000124990ea0: mov    %r10,0x320(%r15)
  0x0000000124990ea7: movabs $0x0,%r10
  0x0000000124990eb1: mov    %r10,0x330(%r15)
  0x0000000124990eb8: movabs $0x0,%r10
  0x0000000124990ec2: mov    %r10,0x328(%r15)
  0x0000000124990ec9: vzeroupper 
  0x0000000124990ecc: cmpq   $0x0,0x8(%r15)
  0x0000000124990ed4: je     0x0000000124990edf
  0x0000000124990eda: jmpq   0x0000000124975780
  0x0000000124990edf: mov    -0x40(%rbp),%r13
  0x0000000124990ee3: mov    -0x38(%rbp),%r14
  0x0000000124990ee7: retq   
  0x0000000124990ee8: movzwl 0x1(%r13),%edx
  0x0000000124990eed: mov    -0x30(%rbp),%rcx
  0x0000000124990ef1: shl    $0x2,%edx
  0x0000000124990ef4: mov    0x38(%rcx,%rdx,8),%rbx
  0x0000000124990ef9: mov    0x40(%rcx,%rdx,8),%eax
  0x0000000124990efd: pop    %rcx
  0x0000000124990efe: cmp    (%rcx),%rax
  0x0000000124990f01: shr    $0x1c,%eax
  0x0000000124990f04: and    $0xf,%eax
  0x0000000124990f07: jne    0x0000000124990f20
  0x0000000124990f0d: movsbl (%rcx,%rbx,1),%eax
  0x0000000124990f11: push   %rax
  0x0000000124990f12: mov    $0xcc,%ecx
  0x0000000124990f17: mov    %cl,0x0(%r13)
  0x0000000124990f1b: jmpq   0x000000012499101c
  0x0000000124990f20: cmp    $0x1,%eax
  0x0000000124990f23: jne    0x0000000124990f3c
  0x0000000124990f29: movzbl (%rcx,%rbx,1),%eax
  0x0000000124990f2d: push   %rax
  0x0000000124990f2e: mov    $0xcc,%ecx
  0x0000000124990f33: mov    %cl,0x0(%r13)
  0x0000000124990f37: jmpq   0x000000012499101c
  0x0000000124990f3c: cmp    $0x8,%eax
  0x0000000124990f3f: jne    0x0000000124990f5b
  0x0000000124990f45: mov    (%rcx,%rbx,1),%eax
  0x0000000124990f48: shl    $0x3,%rax
  0x0000000124990f4c: push   %rax
  0x0000000124990f4d: mov    $0xcb,%ecx
  0x0000000124990f52: mov    %cl,0x0(%r13)
  0x0000000124990f56: jmpq   0x000000012499101c
  0x0000000124990f5b: cmp    $0x4,%eax
  0x0000000124990f5e: jne    0x0000000124990f76
  0x0000000124990f64: mov    (%rcx,%rbx,1),%eax
  0x0000000124990f67: push   %rax
  0x0000000124990f68: mov    $0xd0,%ecx
  0x0000000124990f6d: mov    %cl,0x0(%r13)
  0x0000000124990f71: jmpq   0x000000012499101c
  0x0000000124990f76: cmp    $0x2,%eax
  0x0000000124990f79: jne    0x0000000124990f92
  0x0000000124990f7f: movzwl (%rcx,%rbx,1),%eax
  0x0000000124990f83: push   %rax
  0x0000000124990f84: mov    $0xcd,%ecx
  0x0000000124990f89: mov    %cl,0x0(%r13)
  0x0000000124990f8d: jmpq   0x000000012499101c
  0x0000000124990f92: cmp    $0x3,%eax
  0x0000000124990f95: jne    0x0000000124990fae
  0x0000000124990f9b: movswl (%rcx,%rbx,1),%eax
  0x0000000124990f9f: push   %rax
  0x0000000124990fa0: mov    $0xd2,%ecx
  0x0000000124990fa5: mov    %cl,0x0(%r13)
  0x0000000124990fa9: jmpq   0x000000012499101c
  0x0000000124990fae: cmp    $0x5,%eax
  0x0000000124990fb1: jne    0x0000000124990fe0
  0x0000000124990fb7: mov    (%rcx,%rbx,1),%rax
  0x0000000124990fbb: sub    $0x10,%rsp
  0x0000000124990fbf: mov    %rax,(%rsp)
  0x0000000124990fc3: movabs $0x0,%r10
  0x0000000124990fcd: mov    %r10,0x8(%rsp)
  0x0000000124990fd2: mov    $0xd1,%ecx
  0x0000000124990fd7: mov    %cl,0x0(%r13)
  0x0000000124990fdb: jmpq   0x000000012499101c
  0x0000000124990fe0: cmp    $0x6,%eax
  0x0000000124990fe3: jne    0x0000000124991005
  0x0000000124990fe9: vmovss (%rcx,%rbx,1),%xmm0
  0x0000000124990fee: sub    $0x8,%rsp
  0x0000000124990ff2: vmovss %xmm0,(%rsp)
  0x0000000124990ff7: mov    $0xcf,%ecx
  0x0000000124990ffc: mov    %cl,0x0(%r13)
  0x0000000124991000: jmpq   0x000000012499101c
  0x0000000124991005: vmovsd (%rcx,%rbx,1),%xmm0
  0x000000012499100a: sub    $0x10,%rsp
  0x000000012499100e: vmovsd %xmm0,(%rsp)
  0x0000000124991013: mov    $0xce,%ecx
  0x0000000124991018: mov    %cl,0x0(%r13)
  0x000000012499101c: movzbl 0x3(%r13),%ebx
  0x0000000124991021: add    $0x3,%r13
  0x0000000124991025: movabs $0x1151d7a20,%r10
  0x000000012499102f: jmpq   *(%r10,%rbx,8)
  0x0000000124991033: nopl   0x0(%rax,%rax,1)
  0x0000000124991038: add    %al,(%rax)
  0x000000012499103a: add    %al,(%rax)
  0x000000012499103c: add    %al,(%rax)
  0x000000012499103e: add    %al,(%rax)

----------------------------------------------------------------------
putfield  181 putfield  [0x0000000124991060, 0x0000000124991540]  1248 bytes

  0x0000000124991060: push   %rax
  0x0000000124991061: jmpq   0x000000012499109f
  0x0000000124991066: sub    $0x8,%rsp
  0x000000012499106a: vmovss %xmm0,(%rsp)
  0x000000012499106f: jmpq   0x000000012499109f
  0x0000000124991074: sub    $0x10,%rsp
  0x0000000124991078: vmovsd %xmm0,(%rsp)
  0x000000012499107d: jmpq   0x000000012499109f
  0x0000000124991082: sub    $0x10,%rsp
  0x0000000124991086: mov    %rax,(%rsp)
  0x000000012499108a: movabs $0x0,%r10
  0x0000000124991094: mov    %r10,0x8(%rsp)
  0x0000000124991099: jmpq   0x000000012499109f
  0x000000012499109e: push   %rax
  0x000000012499109f: movzwl 0x1(%r13),%edx
  0x00000001249910a4: mov    -0x30(%rbp),%rcx
  0x00000001249910a8: shl    $0x2,%edx
  0x00000001249910ab: mov    0x28(%rcx,%rdx,8),%ebx
  0x00000001249910af: shr    $0x18,%ebx
  0x00000001249910b2: and    $0xff,%ebx
  0x00000001249910b8: cmp    $0xb5,%ebx
  0x00000001249910be: je     0x0000000124991174
  0x00000001249910c4: mov    $0xb5,%ebx
  0x00000001249910c9: callq  0x00000001249910d3
  0x00000001249910ce: jmpq   0x0000000124991168
  0x00000001249910d3: mov    %rbx,%rsi
  0x00000001249910d6: lea    0x8(%rsp),%rax
  0x00000001249910db: mov    %r13,-0x40(%rbp)
  0x00000001249910df: mov    %r15,%rdi
  0x00000001249910e2: vzeroupper 
  0x00000001249910e5: mov    %rbp,0x330(%r15)
  0x00000001249910ec: mov    %rax,0x320(%r15)
  0x00000001249910f3: test   $0xf,%esp
  0x00000001249910f9: je     0x0000000124991111
  0x00000001249910ff: sub    $0x8,%rsp
  0x0000000124991103: callq  0x0000000114bac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x0000000124991108: add    $0x8,%rsp
  0x000000012499110c: jmpq   0x0000000124991116
  0x0000000124991111: callq  0x0000000114bac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x0000000124991116: movabs $0x0,%r10
  0x0000000124991120: mov    %r10,0x320(%r15)
  0x0000000124991127: movabs $0x0,%r10
  0x0000000124991131: mov    %r10,0x330(%r15)
  0x0000000124991138: movabs $0x0,%r10
  0x0000000124991142: mov    %r10,0x328(%r15)
  0x0000000124991149: vzeroupper 
  0x000000012499114c: cmpq   $0x0,0x8(%r15)
  0x0000000124991154: je     0x000000012499115f
  0x000000012499115a: jmpq   0x0000000124975780
  0x000000012499115f: mov    -0x40(%rbp),%r13
  0x0000000124991163: mov    -0x38(%rbp),%r14
  0x0000000124991167: retq   
  0x0000000124991168: movzwl 0x1(%r13),%edx
  0x000000012499116d: mov    -0x30(%rbp),%rcx
  0x0000000124991171: shl    $0x2,%edx
  0x0000000124991174: mov    0x38(%rcx,%rdx,8),%rbx
  0x0000000124991179: mov    0x40(%rcx,%rdx,8),%eax
  0x000000012499117d: mov    %eax,%edx
  0x000000012499117f: shr    $0x15,%edx
  0x0000000124991182: and    $0x1,%edx
  0x0000000124991185: shr    $0x1c,%eax
  0x0000000124991188: and    $0xf,%eax
  0x000000012499118b: jne    0x00000001249911cf
  0x0000000124991191: mov    (%rsp),%eax
  0x0000000124991194: add    $0x8,%rsp
  0x0000000124991198: pop    %rcx
  0x0000000124991199: cmp    (%rcx),%rax
  0x000000012499119c: mov    %al,(%rcx,%rbx,1)
  0x000000012499119f: movzwl 0x1(%r13),%ecx
  0x00000001249911a4: mov    -0x30(%rbp),%rbx
  0x00000001249911a8: shl    $0x2,%ecx
  0x00000001249911ab: mov    0x28(%rbx,%rcx,8),%ebx
  0x00000001249911af: shr    $0x18,%ebx
  0x00000001249911b2: and    $0xff,%ebx
  0x00000001249911b8: mov    $0xd4,%ecx
  0x00000001249911bd: cmp    $0x0,%ebx
  0x00000001249911c0: je     0x00000001249911ca
  0x00000001249911c6: mov    %cl,0x0(%r13)
  0x00000001249911ca: jmpq   0x000000012499151a
  0x00000001249911cf: cmp    $0x1,%eax
  0x00000001249911d2: jne    0x0000000124991219
  0x00000001249911d8: mov    (%rsp),%eax
  0x00000001249911db: add    $0x8,%rsp
  0x00000001249911df: pop    %rcx
  0x00000001249911e0: cmp    (%rcx),%rax
  0x00000001249911e3: and    $0x1,%eax
  0x00000001249911e6: mov    %al,(%rcx,%rbx,1)
  0x00000001249911e9: movzwl 0x1(%r13),%ecx
  0x00000001249911ee: mov    -0x30(%rbp),%rbx
  0x00000001249911f2: shl    $0x2,%ecx
  0x00000001249911f5: mov    0x28(%rbx,%rcx,8),%ebx
  0x00000001249911f9: shr    $0x18,%ebx
  0x00000001249911fc: and    $0xff,%ebx
  0x0000000124991202: mov    $0xd5,%ecx
  0x0000000124991207: cmp    $0x0,%ebx
  0x000000012499120a: je     0x0000000124991214
  0x0000000124991210: mov    %cl,0x0(%r13)
  0x0000000124991214: jmpq   0x000000012499151a
  0x0000000124991219: cmp    $0x8,%eax
  0x000000012499121c: jne    0x0000000124991372
  0x0000000124991222: pop    %rax
  0x0000000124991223: pop    %rcx
  0x0000000124991224: cmp    (%rcx),%rax
  0x0000000124991227: lea    (%rcx,%rbx,1),%rdx
  0x000000012499122b: cmpb   $0x0,0x30(%r15)
  0x0000000124991230: je     0x0000000124991297
  0x0000000124991236: mov    (%rdx),%ebx
  0x0000000124991238: shl    $0x3,%rbx
  0x000000012499123c: cmp    $0x0,%rbx
  0x0000000124991240: je     0x0000000124991297
  0x0000000124991246: mov    0x38(%r15),%r8
  0x000000012499124a: cmp    $0x0,%r8
  0x000000012499124e: je     0x0000000124991268
  0x0000000124991254: sub    $0x8,%r8
  0x0000000124991258: mov    %r8,0x38(%r15)
  0x000000012499125c: add    0x48(%r15),%r8
  0x0000000124991260: mov    %rbx,(%r8)
  0x0000000124991263: jmpq   0x0000000124991297
  0x0000000124991268: push   %rax
  0x0000000124991269: push   %rdx
  0x000000012499126a: push   %rbx
  0x000000012499126b: mov    %r15,%rsi
  0x000000012499126e: mov    %rbx,%rdi
  0x0000000124991271: test   $0xf,%esp
  0x0000000124991277: je     0x000000012499128f
  0x000000012499127d: sub    $0x8,%rsp
  0x0000000124991281: callq  0x0000000114b0185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x0000000124991286: add    $0x8,%rsp
  0x000000012499128a: jmpq   0x0000000124991294
  0x000000012499128f: callq  0x0000000114b0185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x0000000124991294: pop    %rbx
  0x0000000124991295: pop    %rdx
  0x0000000124991296: pop    %rax
  0x0000000124991297: mov    %rax,%rbx
  0x000000012499129a: shr    $0x3,%rax
  0x000000012499129e: mov    %eax,(%rdx)
  0x00000001249912a0: mov    %rdx,%r8
  0x00000001249912a3: xor    %rbx,%r8
  0x00000001249912a6: shr    $0x16,%r8
  0x00000001249912aa: je     0x0000000124991342
  0x00000001249912b0: cmp    $0x0,%rbx
  0x00000001249912b4: je     0x0000000124991342
  0x00000001249912ba: mov    %rdx,%r8
  0x00000001249912bd: shr    $0x9,%r8
  0x00000001249912c1: movabs $0x1155db000,%rbx
  0x00000001249912cb: add    %rbx,%r8
  0x00000001249912ce: cmpb   $0x20,(%r8)
  0x00000001249912d2: je     0x0000000124991342
  0x00000001249912d8: lock addl $0x0,-0x40(%rsp)
  0x00000001249912de: cmpb   $0x0,(%r8)
  0x00000001249912e2: je     0x0000000124991342
  0x00000001249912e8: movb   $0x0,(%r8)
  0x00000001249912ec: cmpl   $0x0,0x70(%r15)
  0x00000001249912f4: je     0x0000000124991315
  0x00000001249912fa: subl   $0x8,0x70(%r15)
  0x00000001249912ff: mov    0x80(%r15),%rbx
  0x0000000124991306: movslq 0x70(%r15),%r10
  0x000000012499130a: add    %r10,%rbx
  0x000000012499130d: mov    %r8,(%rbx)
  0x0000000124991310: jmpq   0x0000000124991342
  0x0000000124991315: push   %rdx
  0x0000000124991316: push   %rbx
  0x0000000124991317: mov    %r15,%rsi
  0x000000012499131a: mov    %r8,%rdi
  0x000000012499131d: test   $0xf,%esp
  0x0000000124991323: je     0x000000012499133b
  0x0000000124991329: sub    $0x8,%rsp
  0x000000012499132d: callq  0x0000000114b01882 = G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*)
  0x0000000124991332: add    $0x8,%rsp
  0x0000000124991336: jmpq   0x0000000124991340
  0x000000012499133b: callq  0x0000000114b01882 = G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*)
  0x0000000124991340: pop    %rbx
  0x0000000124991341: pop    %rdx
  0x0000000124991342: movzwl 0x1(%r13),%ecx
  0x0000000124991347: mov    -0x30(%rbp),%rbx
  0x000000012499134b: shl    $0x2,%ecx
  0x000000012499134e: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000124991352: shr    $0x18,%ebx
  0x0000000124991355: and    $0xff,%ebx
  0x000000012499135b: mov    $0xd3,%ecx
  0x0000000124991360: cmp    $0x0,%ebx
  0x0000000124991363: je     0x000000012499136d
  0x0000000124991369: mov    %cl,0x0(%r13)
  0x000000012499136d: jmpq   0x000000012499151a
  0x0000000124991372: cmp    $0x4,%eax
  0x0000000124991375: jne    0x00000001249913b9
  0x000000012499137b: mov    (%rsp),%eax
  0x000000012499137e: add    $0x8,%rsp
  0x0000000124991382: pop    %rcx
  0x0000000124991383: cmp    (%rcx),%rax
  0x0000000124991386: mov    %eax,(%rcx,%rbx,1)
  0x0000000124991389: movzwl 0x1(%r13),%ecx
  0x000000012499138e: mov    -0x30(%rbp),%rbx
  0x0000000124991392: shl    $0x2,%ecx
  0x0000000124991395: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000124991399: shr    $0x18,%ebx
  0x000000012499139c: and    $0xff,%ebx
  0x00000001249913a2: mov    $0xd9,%ecx
  0x00000001249913a7: cmp    $0x0,%ebx
  0x00000001249913aa: je     0x00000001249913b4
  0x00000001249913b0: mov    %cl,0x0(%r13)
  0x00000001249913b4: jmpq   0x000000012499151a
  0x00000001249913b9: cmp    $0x2,%eax
  0x00000001249913bc: jne    0x0000000124991401
  0x00000001249913c2: mov    (%rsp),%eax
  0x00000001249913c5: add    $0x8,%rsp
  0x00000001249913c9: pop    %rcx
  0x00000001249913ca: cmp    (%rcx),%rax
  0x00000001249913cd: mov    %ax,(%rcx,%rbx,1)
  0x00000001249913d1: movzwl 0x1(%r13),%ecx
  0x00000001249913d6: mov    -0x30(%rbp),%rbx
  0x00000001249913da: shl    $0x2,%ecx
  0x00000001249913dd: mov    0x28(%rbx,%rcx,8),%ebx
  0x00000001249913e1: shr    $0x18,%ebx
  0x00000001249913e4: and    $0xff,%ebx
  0x00000001249913ea: mov    $0xd6,%ecx
  0x00000001249913ef: cmp    $0x0,%ebx
  0x00000001249913f2: je     0x00000001249913fc
  0x00000001249913f8: mov    %cl,0x0(%r13)
  0x00000001249913fc: jmpq   0x000000012499151a
  0x0000000124991401: cmp    $0x3,%eax
  0x0000000124991404: jne    0x0000000124991449
  0x000000012499140a: mov    (%rsp),%eax
  0x000000012499140d: add    $0x8,%rsp
  0x0000000124991411: pop    %rcx
  0x0000000124991412: cmp    (%rcx),%rax
  0x0000000124991415: mov    %ax,(%rcx,%rbx,1)
  0x0000000124991419: movzwl 0x1(%r13),%ecx
  0x000000012499141e: mov    -0x30(%rbp),%rbx
  0x0000000124991422: shl    $0x2,%ecx
  0x0000000124991425: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000124991429: shr    $0x18,%ebx
  0x000000012499142c: and    $0xff,%ebx
  0x0000000124991432: mov    $0xdb,%ecx
  0x0000000124991437: cmp    $0x0,%ebx
  0x000000012499143a: je     0x0000000124991444
  0x0000000124991440: mov    %cl,0x0(%r13)
  0x0000000124991444: jmpq   0x000000012499151a
  0x0000000124991449: cmp    $0x5,%eax
  0x000000012499144c: jne    0x0000000124991492
  0x0000000124991452: mov    (%rsp),%rax
  0x0000000124991456: add    $0x10,%rsp
  0x000000012499145a: pop    %rcx
  0x000000012499145b: cmp    (%rcx),%rax
  0x000000012499145e: mov    %rax,(%rcx,%rbx,1)
  0x0000000124991462: movzwl 0x1(%r13),%ecx
  0x0000000124991467: mov    -0x30(%rbp),%rbx
  0x000000012499146b: shl    $0x2,%ecx
  0x000000012499146e: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000124991472: shr    $0x18,%ebx
  0x0000000124991475: and    $0xff,%ebx
  0x000000012499147b: mov    $0xda,%ecx
  0x0000000124991480: cmp    $0x0,%ebx
  0x0000000124991483: je     0x000000012499148d
  0x0000000124991489: mov    %cl,0x0(%r13)
  0x000000012499148d: jmpq   0x000000012499151a
  0x0000000124991492: cmp    $0x6,%eax
  0x0000000124991495: jne    0x00000001249914dd
  0x000000012499149b: vmovss (%rsp),%xmm0
  0x00000001249914a0: add    $0x8,%rsp
  0x00000001249914a4: pop    %rcx
  0x00000001249914a5: cmp    (%rcx),%rax
  0x00000001249914a8: vmovss %xmm0,(%rcx,%rbx,1)
  0x00000001249914ad: movzwl 0x1(%r13),%ecx
  0x00000001249914b2: mov    -0x30(%rbp),%rbx
  0x00000001249914b6: shl    $0x2,%ecx
  0x00000001249914b9: mov    0x28(%rbx,%rcx,8),%ebx
  0x00000001249914bd: shr    $0x18,%ebx
  0x00000001249914c0: and    $0xff,%ebx
  0x00000001249914c6: mov    $0xd8,%ecx
  0x00000001249914cb: cmp    $0x0,%ebx
  0x00000001249914ce: je     0x00000001249914d8
  0x00000001249914d4: mov    %cl,0x0(%r13)
  0x00000001249914d8: jmpq   0x000000012499151a
  0x00000001249914dd: vmovsd (%rsp),%xmm0
  0x00000001249914e2: add    $0x10,%rsp
  0x00000001249914e6: pop    %rcx
  0x00000001249914e7: cmp    (%rcx),%rax
  0x00000001249914ea: vmovsd %xmm0,(%rcx,%rbx,1)
  0x00000001249914ef: movzwl 0x1(%r13),%ecx
  0x00000001249914f4: mov    -0x30(%rbp),%rbx
  0x00000001249914f8: shl    $0x2,%ecx
  0x00000001249914fb: mov    0x28(%rbx,%rcx,8),%ebx
  0x00000001249914ff: shr    $0x18,%ebx
  0x0000000124991502: and    $0xff,%ebx
  0x0000000124991508: mov    $0xd7,%ecx
  0x000000012499150d: cmp    $0x0,%ebx
  0x0000000124991510: je     0x000000012499151a
  0x0000000124991516: mov    %cl,0x0(%r13)
  0x000000012499151a: test   %edx,%edx
  0x000000012499151c: je     0x0000000124991528
  0x0000000124991522: lock addl $0x0,-0x40(%rsp)
  0x0000000124991528: movzbl 0x3(%r13),%ebx
  0x000000012499152d: add    $0x3,%r13
  0x0000000124991531: movabs $0x1151d7a20,%r10
  0x000000012499153b: jmpq   *(%r10,%rbx,8)
  0x000000012499153f: nop

----------------------------------------------------------------------
invokevirtual  182 invokevirtual  [0x0000000124991560, 0x0000000124991a60]  1280 bytes

  0x0000000124991560: push   %rax
  0x0000000124991561: jmpq   0x000000012499159f
  0x0000000124991566: sub    $0x8,%rsp
  0x000000012499156a: vmovss %xmm0,(%rsp)
  0x000000012499156f: jmpq   0x000000012499159f
  0x0000000124991574: sub    $0x10,%rsp
  0x0000000124991578: vmovsd %xmm0,(%rsp)
  0x000000012499157d: jmpq   0x000000012499159f
  0x0000000124991582: sub    $0x10,%rsp
  0x0000000124991586: mov    %rax,(%rsp)
  0x000000012499158a: movabs $0x0,%r10
  0x0000000124991594: mov    %r10,0x8(%rsp)
  0x0000000124991599: jmpq   0x000000012499159f
  0x000000012499159e: push   %rax
  0x000000012499159f: mov    %r13,-0x40(%rbp)
  0x00000001249915a3: movzwl 0x1(%r13),%edx
  0x00000001249915a8: mov    -0x30(%rbp),%rcx
  0x00000001249915ac: shl    $0x2,%edx
  0x00000001249915af: mov    0x28(%rcx,%rdx,8),%ebx
  0x00000001249915b3: shr    $0x18,%ebx
  0x00000001249915b6: and    $0xff,%ebx
  0x00000001249915bc: cmp    $0xb6,%ebx
  0x00000001249915c2: je     0x0000000124991678
  0x00000001249915c8: mov    $0xb6,%ebx
  0x00000001249915cd: callq  0x00000001249915d7
  0x00000001249915d2: jmpq   0x000000012499166c
  0x00000001249915d7: mov    %rbx,%rsi
  0x00000001249915da: lea    0x8(%rsp),%rax
  0x00000001249915df: mov    %r13,-0x40(%rbp)
  0x00000001249915e3: mov    %r15,%rdi
  0x00000001249915e6: vzeroupper 
  0x00000001249915e9: mov    %rbp,0x330(%r15)
  0x00000001249915f0: mov    %rax,0x320(%r15)
  0x00000001249915f7: test   $0xf,%esp
  0x00000001249915fd: je     0x0000000124991615
  0x0000000124991603: sub    $0x8,%rsp
  0x0000000124991607: callq  0x0000000114bac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x000000012499160c: add    $0x8,%rsp
  0x0000000124991610: jmpq   0x000000012499161a
  0x0000000124991615: callq  0x0000000114bac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x000000012499161a: movabs $0x0,%r10
  0x0000000124991624: mov    %r10,0x320(%r15)
  0x000000012499162b: movabs $0x0,%r10
  0x0000000124991635: mov    %r10,0x330(%r15)
  0x000000012499163c: movabs $0x0,%r10
  0x0000000124991646: mov    %r10,0x328(%r15)
  0x000000012499164d: vzeroupper 
  0x0000000124991650: cmpq   $0x0,0x8(%r15)
  0x0000000124991658: je     0x0000000124991663
  0x000000012499165e: jmpq   0x0000000124975780
  0x0000000124991663: mov    -0x40(%rbp),%r13
  0x0000000124991667: mov    -0x38(%rbp),%r14
  0x000000012499166b: retq   
  0x000000012499166c: movzwl 0x1(%r13),%edx
  0x0000000124991671: mov    -0x30(%rbp),%rcx
  0x0000000124991675: shl    $0x2,%edx
  0x0000000124991678: mov    0x38(%rcx,%rdx,8),%rbx
  0x000000012499167d: mov    0x40(%rcx,%rdx,8),%edx
  0x0000000124991681: mov    %edx,%ecx
  0x0000000124991683: and    $0xff,%ecx
  0x0000000124991689: mov    -0x8(%rsp,%rcx,8),%rcx
  0x000000012499168e: mov    %edx,%r13d
  0x0000000124991691: shr    $0x1c,%edx
  0x0000000124991694: movabs $0x1151d8730,%r10
  0x000000012499169e: mov    (%r10,%rdx,8),%rdx
  0x00000001249916a2: push   %rdx
  0x00000001249916a3: mov    %r13d,%edx
  0x00000001249916a6: mov    -0x40(%rbp),%r13
  0x00000001249916aa: mov    %edx,%eax
  0x00000001249916ac: and    $0x100000,%eax
  0x00000001249916b2: je     0x000000012499183a
  0x00000001249916b8: cmp    (%rcx),%rax
  0x00000001249916bb: mov    -0x28(%rbp),%rax
  0x00000001249916bf: test   %rax,%rax
  0x00000001249916c2: je     0x00000001249916da
  0x00000001249916c8: addq   $0x1,0x8(%rax)
  0x00000001249916cd: sbbq   $0x0,0x8(%rax)
  0x00000001249916d2: add    $0x38,%rax
  0x00000001249916d6: mov    %rax,-0x28(%rbp)
  0x00000001249916da: mov    -0x28(%rbp),%rax
  0x00000001249916de: test   %rax,%rax
  0x00000001249916e1: je     0x000000012499182e
  0x00000001249916e7: cmpb   $0xb,-0x38(%rax)
  0x00000001249916eb: jne    0x000000012499182e
  0x00000001249916f1: add    $0x8,%rax
  0x00000001249916f5: mov    -0x8(%rax),%r13
  0x00000001249916f9: sub    $0x0,%r13d
  0x00000001249916fd: cmp    $0x2,%r13d
  0x0000000124991701: jl     0x0000000124991823
  0x0000000124991707: mov    0x8(%rbx),%r13
  0x000000012499170b: movzwl 0x34(%r13),%r13d
  0x0000000124991710: sub    (%rax),%r13
  0x0000000124991713: sub    $0x1,%r13d
  0x0000000124991717: mov    0x8(%rsp,%r13,8),%r13
  0x000000012499171c: test   %r13,%r13
  0x000000012499171f: jne    0x000000012499172b
  0x0000000124991721: orq    $0x1,0x8(%rax)
  0x0000000124991729: jmp    0x0000000124991784
  0x000000012499172b: mov    0x8(%r13),%r13d
  0x000000012499172f: movabs $0x800000000,%r12
  0x0000000124991739: add    %r12,%r13
  0x000000012499173c: xor    %r12,%r12
  0x000000012499173f: xor    0x8(%rax),%r13
  0x0000000124991743: test   $0xfffffffffffffffc,%r13
  0x000000012499174a: je     0x0000000124991784
  0x000000012499174c: test   $0x2,%r13
  0x0000000124991753: jne    0x0000000124991784
  0x0000000124991755: cmpq   $0x0,0x8(%rax)
  0x000000012499175d: je     0x0000000124991780
  0x000000012499175f: cmpq   $0x1,0x8(%rax)
  0x0000000124991767: je     0x0000000124991780
  0x0000000124991769: xor    0x8(%rax),%r13
  0x000000012499176d: test   $0xfffffffffffffffc,%r13
  0x0000000124991774: je     0x0000000124991784
  0x0000000124991776: orq    $0x2,0x8(%rax)
  0x000000012499177e: jmp    0x0000000124991784
  0x0000000124991780: mov    %r13,0x8(%rax)
  0x0000000124991784: add    $0x10,%rax
  0x0000000124991788: mov    -0x18(%rax),%r13
  0x000000012499178c: sub    $0x2,%r13d
  0x0000000124991790: cmp    $0x2,%r13d
  0x0000000124991794: jl     0x0000000124991823
  0x000000012499179a: mov    0x8(%rbx),%r13
  0x000000012499179e: movzwl 0x34(%r13),%r13d
  0x00000001249917a3: sub    (%rax),%r13
  0x00000001249917a6: sub    $0x1,%r13d
  0x00000001249917aa: mov    0x8(%rsp,%r13,8),%r13
  0x00000001249917af: test   %r13,%r13
  0x00000001249917b2: jne    0x00000001249917be
  0x00000001249917b4: orq    $0x1,0x8(%rax)
  0x00000001249917bc: jmp    0x0000000124991817
  0x00000001249917be: mov    0x8(%r13),%r13d
  0x00000001249917c2: movabs $0x800000000,%r12
  0x00000001249917cc: add    %r12,%r13
  0x00000001249917cf: xor    %r12,%r12
  0x00000001249917d2: xor    0x8(%rax),%r13
  0x00000001249917d6: test   $0xfffffffffffffffc,%r13
  0x00000001249917dd: je     0x0000000124991817
  0x00000001249917df: test   $0x2,%r13
  0x00000001249917e6: jne    0x0000000124991817
  0x00000001249917e8: cmpq   $0x0,0x8(%rax)
  0x00000001249917f0: je     0x0000000124991813
  0x00000001249917f2: cmpq   $0x1,0x8(%rax)
  0x00000001249917fa: je     0x0000000124991813
  0x00000001249917fc: xor    0x8(%rax),%r13
  0x0000000124991800: test   $0xfffffffffffffffc,%r13
  0x0000000124991807: je     0x0000000124991817
  0x0000000124991809: orq    $0x2,0x8(%rax)
  0x0000000124991811: jmp    0x0000000124991817
  0x0000000124991813: mov    %r13,0x8(%rax)
  0x0000000124991817: add    $0x10,%rax
  0x000000012499181b: mov    -0x28(%rax),%r13
  0x000000012499181f: sub    $0x4,%r13d
  0x0000000124991823: shl    $0x3,%r13d
  0x0000000124991827: add    %r13,%rax
  0x000000012499182a: mov    %rax,-0x28(%rbp)
  0x000000012499182e: lea    0x8(%rsp),%r13
  0x0000000124991833: mov    %r13,-0x10(%rbp)
  0x0000000124991837: jmpq   *0x48(%rbx)
  0x000000012499183a: mov    0x8(%rcx),%eax
  0x000000012499183d: movabs $0x800000000,%r12
  0x0000000124991847: add    %r12,%rax
  0x000000012499184a: xor    %r12,%r12
  0x000000012499184d: mov    -0x28(%rbp),%r14
  0x0000000124991851: test   %r14,%r14
  0x0000000124991854: je     0x00000001249918ef
  0x000000012499185a: mov    0x18(%r14),%rdx
  0x000000012499185e: cmp    %rax,%rdx
  0x0000000124991861: jne    0x0000000124991876
  0x0000000124991867: addq   $0x1,0x20(%r14)
  0x000000012499186c: sbbq   $0x0,0x20(%r14)
  0x0000000124991871: jmpq   0x00000001249918e7
  0x0000000124991876: test   %rdx,%rdx
  0x0000000124991879: je     0x00000001249918c1
  0x000000012499187f: mov    0x28(%r14),%rdx
  0x0000000124991883: cmp    %rax,%rdx
  0x0000000124991886: jne    0x000000012499189b
  0x000000012499188c: addq   $0x1,0x30(%r14)
  0x0000000124991891: sbbq   $0x0,0x30(%r14)
  0x0000000124991896: jmpq   0x00000001249918e7
  0x000000012499189b: test   %rdx,%rdx
  0x000000012499189e: je     0x00000001249918af
  0x00000001249918a0: addq   $0x1,0x8(%r14)
  0x00000001249918a5: sbbq   $0x0,0x8(%r14)
  0x00000001249918aa: jmpq   0x00000001249918e7
  0x00000001249918af: mov    %rax,0x28(%r14)
  0x00000001249918b3: mov    $0x1,%edx
  0x00000001249918b8: mov    %rdx,0x30(%r14)
  0x00000001249918bc: jmpq   0x00000001249918e7
  0x00000001249918c1: cmp    0x28(%r14),%rax
  0x00000001249918c5: jne    0x00000001249918da
  0x00000001249918cb: addq   $0x1,0x30(%r14)
  0x00000001249918d0: sbbq   $0x0,0x30(%r14)
  0x00000001249918d5: jmpq   0x00000001249918e7
  0x00000001249918da: mov    %rax,0x18(%r14)
  0x00000001249918de: mov    $0x1,%edx
  0x00000001249918e3: mov    %rdx,0x20(%r14)
  0x00000001249918e7: add    $0x38,%r14
  0x00000001249918eb: mov    %r14,-0x28(%rbp)
  0x00000001249918ef: mov    0x1d0(%rax,%rbx,8),%rbx
  0x00000001249918f7: mov    -0x28(%rbp),%rdx
  0x00000001249918fb: test   %rdx,%rdx
  0x00000001249918fe: je     0x0000000124991a4b
  0x0000000124991904: cmpb   $0xb,-0x38(%rdx)
  0x0000000124991908: jne    0x0000000124991a4b
  0x000000012499190e: add    $0x8,%rdx
  0x0000000124991912: mov    -0x8(%rdx),%r13
  0x0000000124991916: sub    $0x0,%r13d
  0x000000012499191a: cmp    $0x2,%r13d
  0x000000012499191e: jl     0x0000000124991a40
  0x0000000124991924: mov    0x8(%rbx),%r13
  0x0000000124991928: movzwl 0x34(%r13),%r13d
  0x000000012499192d: sub    (%rdx),%r13
  0x0000000124991930: sub    $0x1,%r13d
  0x0000000124991934: mov    0x8(%rsp,%r13,8),%r13
  0x0000000124991939: test   %r13,%r13
  0x000000012499193c: jne    0x0000000124991948
  0x000000012499193e: orq    $0x1,0x8(%rdx)
  0x0000000124991946: jmp    0x00000001249919a1
  0x0000000124991948: mov    0x8(%r13),%r13d
  0x000000012499194c: movabs $0x800000000,%r12
  0x0000000124991956: add    %r12,%r13
  0x0000000124991959: xor    %r12,%r12
  0x000000012499195c: xor    0x8(%rdx),%r13
  0x0000000124991960: test   $0xfffffffffffffffc,%r13
  0x0000000124991967: je     0x00000001249919a1
  0x0000000124991969: test   $0x2,%r13
  0x0000000124991970: jne    0x00000001249919a1
  0x0000000124991972: cmpq   $0x0,0x8(%rdx)
  0x000000012499197a: je     0x000000012499199d
  0x000000012499197c: cmpq   $0x1,0x8(%rdx)
  0x0000000124991984: je     0x000000012499199d
  0x0000000124991986: xor    0x8(%rdx),%r13
  0x000000012499198a: test   $0xfffffffffffffffc,%r13
  0x0000000124991991: je     0x00000001249919a1
  0x0000000124991993: orq    $0x2,0x8(%rdx)
  0x000000012499199b: jmp    0x00000001249919a1
  0x000000012499199d: mov    %r13,0x8(%rdx)
  0x00000001249919a1: add    $0x10,%rdx
  0x00000001249919a5: mov    -0x18(%rdx),%r13
  0x00000001249919a9: sub    $0x2,%r13d
  0x00000001249919ad: cmp    $0x2,%r13d
  0x00000001249919b1: jl     0x0000000124991a40
  0x00000001249919b7: mov    0x8(%rbx),%r13
  0x00000001249919bb: movzwl 0x34(%r13),%r13d
  0x00000001249919c0: sub    (%rdx),%r13
  0x00000001249919c3: sub    $0x1,%r13d
  0x00000001249919c7: mov    0x8(%rsp,%r13,8),%r13
  0x00000001249919cc: test   %r13,%r13
  0x00000001249919cf: jne    0x00000001249919db
  0x00000001249919d1: orq    $0x1,0x8(%rdx)
  0x00000001249919d9: jmp    0x0000000124991a34
  0x00000001249919db: mov    0x8(%r13),%r13d
  0x00000001249919df: movabs $0x800000000,%r12
  0x00000001249919e9: add    %r12,%r13
  0x00000001249919ec: xor    %r12,%r12
  0x00000001249919ef: xor    0x8(%rdx),%r13
  0x00000001249919f3: test   $0xfffffffffffffffc,%r13
  0x00000001249919fa: je     0x0000000124991a34
  0x00000001249919fc: test   $0x2,%r13
  0x0000000124991a03: jne    0x0000000124991a34
  0x0000000124991a05: cmpq   $0x0,0x8(%rdx)
  0x0000000124991a0d: je     0x0000000124991a30
  0x0000000124991a0f: cmpq   $0x1,0x8(%rdx)
  0x0000000124991a17: je     0x0000000124991a30
  0x0000000124991a19: xor    0x8(%rdx),%r13
  0x0000000124991a1d: test   $0xfffffffffffffffc,%r13
  0x0000000124991a24: je     0x0000000124991a34
  0x0000000124991a26: orq    $0x2,0x8(%rdx)
  0x0000000124991a2e: jmp    0x0000000124991a34
  0x0000000124991a30: mov    %r13,0x8(%rdx)
  0x0000000124991a34: add    $0x10,%rdx
  0x0000000124991a38: mov    -0x28(%rdx),%r13
  0x0000000124991a3c: sub    $0x4,%r13d
  0x0000000124991a40: shl    $0x3,%r13d
  0x0000000124991a44: add    %r13,%rdx
  0x0000000124991a47: mov    %rdx,-0x28(%rbp)
  0x0000000124991a4b: lea    0x8(%rsp),%r13
  0x0000000124991a50: mov    %r13,-0x10(%rbp)
  0x0000000124991a54: jmpq   *0x48(%rbx)
  0x0000000124991a57: nop
  0x0000000124991a58: add    %al,(%rax)
  0x0000000124991a5a: add    %al,(%rax)
  0x0000000124991a5c: add    %al,(%rax)
  0x0000000124991a5e: add    %al,(%rax)

----------------------------------------------------------------------
invokespecial  183 invokespecial  [0x0000000124991a80, 0x0000000124991d60]  736 bytes

  0x0000000124991a80: push   %rax
  0x0000000124991a81: jmpq   0x0000000124991abf
  0x0000000124991a86: sub    $0x8,%rsp
  0x0000000124991a8a: vmovss %xmm0,(%rsp)
  0x0000000124991a8f: jmpq   0x0000000124991abf
  0x0000000124991a94: sub    $0x10,%rsp
  0x0000000124991a98: vmovsd %xmm0,(%rsp)
  0x0000000124991a9d: jmpq   0x0000000124991abf
  0x0000000124991aa2: sub    $0x10,%rsp
  0x0000000124991aa6: mov    %rax,(%rsp)
  0x0000000124991aaa: movabs $0x0,%r10
  0x0000000124991ab4: mov    %r10,0x8(%rsp)
  0x0000000124991ab9: jmpq   0x0000000124991abf
  0x0000000124991abe: push   %rax
  0x0000000124991abf: mov    %r13,-0x40(%rbp)
  0x0000000124991ac3: movzwl 0x1(%r13),%edx
  0x0000000124991ac8: mov    -0x30(%rbp),%rcx
  0x0000000124991acc: shl    $0x2,%edx
  0x0000000124991acf: mov    0x28(%rcx,%rdx,8),%ebx
  0x0000000124991ad3: shr    $0x10,%ebx
  0x0000000124991ad6: and    $0xff,%ebx
  0x0000000124991adc: cmp    $0xb7,%ebx
  0x0000000124991ae2: je     0x0000000124991b98
  0x0000000124991ae8: mov    $0xb7,%ebx
  0x0000000124991aed: callq  0x0000000124991af7
  0x0000000124991af2: jmpq   0x0000000124991b8c
  0x0000000124991af7: mov    %rbx,%rsi
  0x0000000124991afa: lea    0x8(%rsp),%rax
  0x0000000124991aff: mov    %r13,-0x40(%rbp)
  0x0000000124991b03: mov    %r15,%rdi
  0x0000000124991b06: vzeroupper 
  0x0000000124991b09: mov    %rbp,0x330(%r15)
  0x0000000124991b10: mov    %rax,0x320(%r15)
  0x0000000124991b17: test   $0xf,%esp
  0x0000000124991b1d: je     0x0000000124991b35
  0x0000000124991b23: sub    $0x8,%rsp
  0x0000000124991b27: callq  0x0000000114bac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x0000000124991b2c: add    $0x8,%rsp
  0x0000000124991b30: jmpq   0x0000000124991b3a
  0x0000000124991b35: callq  0x0000000114bac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x0000000124991b3a: movabs $0x0,%r10
  0x0000000124991b44: mov    %r10,0x320(%r15)
  0x0000000124991b4b: movabs $0x0,%r10
  0x0000000124991b55: mov    %r10,0x330(%r15)
  0x0000000124991b5c: movabs $0x0,%r10
  0x0000000124991b66: mov    %r10,0x328(%r15)
  0x0000000124991b6d: vzeroupper 
  0x0000000124991b70: cmpq   $0x0,0x8(%r15)
  0x0000000124991b78: je     0x0000000124991b83
  0x0000000124991b7e: jmpq   0x0000000124975780
  0x0000000124991b83: mov    -0x40(%rbp),%r13
  0x0000000124991b87: mov    -0x38(%rbp),%r14
  0x0000000124991b8b: retq   
  0x0000000124991b8c: movzwl 0x1(%r13),%edx
  0x0000000124991b91: mov    -0x30(%rbp),%rcx
  0x0000000124991b95: shl    $0x2,%edx
  0x0000000124991b98: mov    0x30(%rcx,%rdx,8),%rbx
  0x0000000124991b9d: mov    0x40(%rcx,%rdx,8),%edx
  0x0000000124991ba1: mov    %edx,%ecx
  0x0000000124991ba3: and    $0xff,%ecx
  0x0000000124991ba9: mov    -0x8(%rsp,%rcx,8),%rcx
  0x0000000124991bae: shr    $0x1c,%edx
  0x0000000124991bb1: movabs $0x1151d8730,%r10
  0x0000000124991bbb: mov    (%r10,%rdx,8),%rdx
  0x0000000124991bbf: push   %rdx
  0x0000000124991bc0: cmp    (%rcx),%rax
  0x0000000124991bc3: mov    -0x28(%rbp),%rax
  0x0000000124991bc7: test   %rax,%rax
  0x0000000124991bca: je     0x0000000124991be2
  0x0000000124991bd0: addq   $0x1,0x8(%rax)
  0x0000000124991bd5: sbbq   $0x0,0x8(%rax)
  0x0000000124991bda: add    $0x10,%rax
  0x0000000124991bde: mov    %rax,-0x28(%rbp)
  0x0000000124991be2: mov    -0x28(%rbp),%rax
  0x0000000124991be6: test   %rax,%rax
  0x0000000124991be9: je     0x0000000124991d36
  0x0000000124991bef: cmpb   $0xa,-0x10(%rax)
  0x0000000124991bf3: jne    0x0000000124991d36
  0x0000000124991bf9: add    $0x8,%rax
  0x0000000124991bfd: mov    -0x8(%rax),%r13
  0x0000000124991c01: sub    $0x0,%r13d
  0x0000000124991c05: cmp    $0x2,%r13d
  0x0000000124991c09: jl     0x0000000124991d2b
  0x0000000124991c0f: mov    0x8(%rbx),%r13
  0x0000000124991c13: movzwl 0x34(%r13),%r13d
  0x0000000124991c18: sub    (%rax),%r13
  0x0000000124991c1b: sub    $0x1,%r13d
  0x0000000124991c1f: mov    0x8(%rsp,%r13,8),%r13
  0x0000000124991c24: test   %r13,%r13
  0x0000000124991c27: jne    0x0000000124991c33
  0x0000000124991c29: orq    $0x1,0x8(%rax)
  0x0000000124991c31: jmp    0x0000000124991c8c
  0x0000000124991c33: mov    0x8(%r13),%r13d
  0x0000000124991c37: movabs $0x800000000,%r12
  0x0000000124991c41: add    %r12,%r13
  0x0000000124991c44: xor    %r12,%r12
  0x0000000124991c47: xor    0x8(%rax),%r13
  0x0000000124991c4b: test   $0xfffffffffffffffc,%r13
  0x0000000124991c52: je     0x0000000124991c8c
  0x0000000124991c54: test   $0x2,%r13
  0x0000000124991c5b: jne    0x0000000124991c8c
  0x0000000124991c5d: cmpq   $0x0,0x8(%rax)
  0x0000000124991c65: je     0x0000000124991c88
  0x0000000124991c67: cmpq   $0x1,0x8(%rax)
  0x0000000124991c6f: je     0x0000000124991c88
  0x0000000124991c71: xor    0x8(%rax),%r13
  0x0000000124991c75: test   $0xfffffffffffffffc,%r13
  0x0000000124991c7c: je     0x0000000124991c8c
  0x0000000124991c7e: orq    $0x2,0x8(%rax)
  0x0000000124991c86: jmp    0x0000000124991c8c
  0x0000000124991c88: mov    %r13,0x8(%rax)
  0x0000000124991c8c: add    $0x10,%rax
  0x0000000124991c90: mov    -0x18(%rax),%r13
  0x0000000124991c94: sub    $0x2,%r13d
  0x0000000124991c98: cmp    $0x2,%r13d
  0x0000000124991c9c: jl     0x0000000124991d2b
  0x0000000124991ca2: mov    0x8(%rbx),%r13
  0x0000000124991ca6: movzwl 0x34(%r13),%r13d
  0x0000000124991cab: sub    (%rax),%r13
  0x0000000124991cae: sub    $0x1,%r13d
  0x0000000124991cb2: mov    0x8(%rsp,%r13,8),%r13
  0x0000000124991cb7: test   %r13,%r13
  0x0000000124991cba: jne    0x0000000124991cc6
  0x0000000124991cbc: orq    $0x1,0x8(%rax)
  0x0000000124991cc4: jmp    0x0000000124991d1f
  0x0000000124991cc6: mov    0x8(%r13),%r13d
  0x0000000124991cca: movabs $0x800000000,%r12
  0x0000000124991cd4: add    %r12,%r13
  0x0000000124991cd7: xor    %r12,%r12
  0x0000000124991cda: xor    0x8(%rax),%r13
  0x0000000124991cde: test   $0xfffffffffffffffc,%r13
  0x0000000124991ce5: je     0x0000000124991d1f
  0x0000000124991ce7: test   $0x2,%r13
  0x0000000124991cee: jne    0x0000000124991d1f
  0x0000000124991cf0: cmpq   $0x0,0x8(%rax)
  0x0000000124991cf8: je     0x0000000124991d1b
  0x0000000124991cfa: cmpq   $0x1,0x8(%rax)
  0x0000000124991d02: je     0x0000000124991d1b
  0x0000000124991d04: xor    0x8(%rax),%r13
  0x0000000124991d08: test   $0xfffffffffffffffc,%r13
  0x0000000124991d0f: je     0x0000000124991d1f
  0x0000000124991d11: orq    $0x2,0x8(%rax)
  0x0000000124991d19: jmp    0x0000000124991d1f
  0x0000000124991d1b: mov    %r13,0x8(%rax)
  0x0000000124991d1f: add    $0x10,%rax
  0x0000000124991d23: mov    -0x28(%rax),%r13
  0x0000000124991d27: sub    $0x4,%r13d
  0x0000000124991d2b: shl    $0x3,%r13d
  0x0000000124991d2f: add    %r13,%rax
  0x0000000124991d32: mov    %rax,-0x28(%rbp)
  0x0000000124991d36: lea    0x8(%rsp),%r13
  0x0000000124991d3b: mov    %r13,-0x10(%rbp)
  0x0000000124991d3f: jmpq   *0x48(%rbx)
  0x0000000124991d42: nopw   0x0(%rax,%rax,1)
  0x0000000124991d48: add    %al,(%rax)
  0x0000000124991d4a: add    %al,(%rax)
  0x0000000124991d4c: add    %al,(%rax)
  0x0000000124991d4e: add    %al,(%rax)
  0x0000000124991d50: add    %al,(%rax)
  0x0000000124991d52: add    %al,(%rax)
  0x0000000124991d54: add    %al,(%rax)
  0x0000000124991d56: add    %al,(%rax)
  0x0000000124991d58: add    %al,(%rax)
  0x0000000124991d5a: add    %al,(%rax)
  0x0000000124991d5c: add    %al,(%rax)
  0x0000000124991d5e: add    %al,(%rax)

----------------------------------------------------------------------
invokestatic  184 invokestatic  [0x0000000124991d80, 0x0000000124992040]  704 bytes

  0x0000000124991d80: push   %rax
  0x0000000124991d81: jmpq   0x0000000124991dbf
  0x0000000124991d86: sub    $0x8,%rsp
  0x0000000124991d8a: vmovss %xmm0,(%rsp)
  0x0000000124991d8f: jmpq   0x0000000124991dbf
  0x0000000124991d94: sub    $0x10,%rsp
  0x0000000124991d98: vmovsd %xmm0,(%rsp)
  0x0000000124991d9d: jmpq   0x0000000124991dbf
  0x0000000124991da2: sub    $0x10,%rsp
  0x0000000124991da6: mov    %rax,(%rsp)
  0x0000000124991daa: movabs $0x0,%r10
  0x0000000124991db4: mov    %r10,0x8(%rsp)
  0x0000000124991db9: jmpq   0x0000000124991dbf
  0x0000000124991dbe: push   %rax
  0x0000000124991dbf: mov    %r13,-0x40(%rbp)
  0x0000000124991dc3: movzwl 0x1(%r13),%edx
  0x0000000124991dc8: mov    -0x30(%rbp),%rcx
  0x0000000124991dcc: shl    $0x2,%edx
  0x0000000124991dcf: mov    0x28(%rcx,%rdx,8),%ebx
  0x0000000124991dd3: shr    $0x10,%ebx
  0x0000000124991dd6: and    $0xff,%ebx
  0x0000000124991ddc: cmp    $0xb8,%ebx
  0x0000000124991de2: je     0x0000000124991e98
  0x0000000124991de8: mov    $0xb8,%ebx
  0x0000000124991ded: callq  0x0000000124991df7
  0x0000000124991df2: jmpq   0x0000000124991e8c
  0x0000000124991df7: mov    %rbx,%rsi
  0x0000000124991dfa: lea    0x8(%rsp),%rax
  0x0000000124991dff: mov    %r13,-0x40(%rbp)
  0x0000000124991e03: mov    %r15,%rdi
  0x0000000124991e06: vzeroupper 
  0x0000000124991e09: mov    %rbp,0x330(%r15)
  0x0000000124991e10: mov    %rax,0x320(%r15)
  0x0000000124991e17: test   $0xf,%esp
  0x0000000124991e1d: je     0x0000000124991e35
  0x0000000124991e23: sub    $0x8,%rsp
  0x0000000124991e27: callq  0x0000000114bac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x0000000124991e2c: add    $0x8,%rsp
  0x0000000124991e30: jmpq   0x0000000124991e3a
  0x0000000124991e35: callq  0x0000000114bac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x0000000124991e3a: movabs $0x0,%r10
  0x0000000124991e44: mov    %r10,0x320(%r15)
  0x0000000124991e4b: movabs $0x0,%r10
  0x0000000124991e55: mov    %r10,0x330(%r15)
  0x0000000124991e5c: movabs $0x0,%r10
  0x0000000124991e66: mov    %r10,0x328(%r15)
  0x0000000124991e6d: vzeroupper 
  0x0000000124991e70: cmpq   $0x0,0x8(%r15)
  0x0000000124991e78: je     0x0000000124991e83
  0x0000000124991e7e: jmpq   0x0000000124975780
  0x0000000124991e83: mov    -0x40(%rbp),%r13
  0x0000000124991e87: mov    -0x38(%rbp),%r14
  0x0000000124991e8b: retq   
  0x0000000124991e8c: movzwl 0x1(%r13),%edx
  0x0000000124991e91: mov    -0x30(%rbp),%rcx
  0x0000000124991e95: shl    $0x2,%edx
  0x0000000124991e98: mov    0x30(%rcx,%rdx,8),%rbx
  0x0000000124991e9d: mov    0x40(%rcx,%rdx,8),%edx
  0x0000000124991ea1: shr    $0x1c,%edx
  0x0000000124991ea4: movabs $0x1151d8730,%r10
  0x0000000124991eae: mov    (%r10,%rdx,8),%rdx
  0x0000000124991eb2: push   %rdx
  0x0000000124991eb3: mov    -0x28(%rbp),%rax
  0x0000000124991eb7: test   %rax,%rax
  0x0000000124991eba: je     0x0000000124991ed2
  0x0000000124991ec0: addq   $0x1,0x8(%rax)
  0x0000000124991ec5: sbbq   $0x0,0x8(%rax)
  0x0000000124991eca: add    $0x10,%rax
  0x0000000124991ece: mov    %rax,-0x28(%rbp)
  0x0000000124991ed2: mov    -0x28(%rbp),%rax
  0x0000000124991ed6: test   %rax,%rax
  0x0000000124991ed9: je     0x0000000124992026
  0x0000000124991edf: cmpb   $0xa,-0x10(%rax)
  0x0000000124991ee3: jne    0x0000000124992026
  0x0000000124991ee9: add    $0x8,%rax
  0x0000000124991eed: mov    -0x8(%rax),%r13
  0x0000000124991ef1: sub    $0x0,%r13d
  0x0000000124991ef5: cmp    $0x2,%r13d
  0x0000000124991ef9: jl     0x000000012499201b
  0x0000000124991eff: mov    0x8(%rbx),%r13
  0x0000000124991f03: movzwl 0x34(%r13),%r13d
  0x0000000124991f08: sub    (%rax),%r13
  0x0000000124991f0b: sub    $0x1,%r13d
  0x0000000124991f0f: mov    0x8(%rsp,%r13,8),%r13
  0x0000000124991f14: test   %r13,%r13
  0x0000000124991f17: jne    0x0000000124991f23
  0x0000000124991f19: orq    $0x1,0x8(%rax)
  0x0000000124991f21: jmp    0x0000000124991f7c
  0x0000000124991f23: mov    0x8(%r13),%r13d
  0x0000000124991f27: movabs $0x800000000,%r12
  0x0000000124991f31: add    %r12,%r13
  0x0000000124991f34: xor    %r12,%r12
  0x0000000124991f37: xor    0x8(%rax),%r13
  0x0000000124991f3b: test   $0xfffffffffffffffc,%r13
  0x0000000124991f42: je     0x0000000124991f7c
  0x0000000124991f44: test   $0x2,%r13
  0x0000000124991f4b: jne    0x0000000124991f7c
  0x0000000124991f4d: cmpq   $0x0,0x8(%rax)
  0x0000000124991f55: je     0x0000000124991f78
  0x0000000124991f57: cmpq   $0x1,0x8(%rax)
  0x0000000124991f5f: je     0x0000000124991f78
  0x0000000124991f61: xor    0x8(%rax),%r13
  0x0000000124991f65: test   $0xfffffffffffffffc,%r13
  0x0000000124991f6c: je     0x0000000124991f7c
  0x0000000124991f6e: orq    $0x2,0x8(%rax)
  0x0000000124991f76: jmp    0x0000000124991f7c
  0x0000000124991f78: mov    %r13,0x8(%rax)
  0x0000000124991f7c: add    $0x10,%rax
  0x0000000124991f80: mov    -0x18(%rax),%r13
  0x0000000124991f84: sub    $0x2,%r13d
  0x0000000124991f88: cmp    $0x2,%r13d
  0x0000000124991f8c: jl     0x000000012499201b
  0x0000000124991f92: mov    0x8(%rbx),%r13
  0x0000000124991f96: movzwl 0x34(%r13),%r13d
  0x0000000124991f9b: sub    (%rax),%r13
  0x0000000124991f9e: sub    $0x1,%r13d
  0x0000000124991fa2: mov    0x8(%rsp,%r13,8),%r13
  0x0000000124991fa7: test   %r13,%r13
  0x0000000124991faa: jne    0x0000000124991fb6
  0x0000000124991fac: orq    $0x1,0x8(%rax)
  0x0000000124991fb4: jmp    0x000000012499200f
  0x0000000124991fb6: mov    0x8(%r13),%r13d
  0x0000000124991fba: movabs $0x800000000,%r12
  0x0000000124991fc4: add    %r12,%r13
  0x0000000124991fc7: xor    %r12,%r12
  0x0000000124991fca: xor    0x8(%rax),%r13
  0x0000000124991fce: test   $0xfffffffffffffffc,%r13
  0x0000000124991fd5: je     0x000000012499200f
  0x0000000124991fd7: test   $0x2,%r13
  0x0000000124991fde: jne    0x000000012499200f
  0x0000000124991fe0: cmpq   $0x0,0x8(%rax)
  0x0000000124991fe8: je     0x000000012499200b
  0x0000000124991fea: cmpq   $0x1,0x8(%rax)
  0x0000000124991ff2: je     0x000000012499200b
  0x0000000124991ff4: xor    0x8(%rax),%r13
  0x0000000124991ff8: test   $0xfffffffffffffffc,%r13
  0x0000000124991fff: je     0x000000012499200f
  0x0000000124992001: orq    $0x2,0x8(%rax)
  0x0000000124992009: jmp    0x000000012499200f
  0x000000012499200b: mov    %r13,0x8(%rax)
  0x000000012499200f: add    $0x10,%rax
  0x0000000124992013: mov    -0x28(%rax),%r13
  0x0000000124992017: sub    $0x4,%r13d
  0x000000012499201b: shl    $0x3,%r13d
  0x000000012499201f: add    %r13,%rax
  0x0000000124992022: mov    %rax,-0x28(%rbp)
  0x0000000124992026: lea    0x8(%rsp),%r13
  0x000000012499202b: mov    %r13,-0x10(%rbp)
  0x000000012499202f: jmpq   *0x48(%rbx)
  0x0000000124992032: nopw   0x0(%rax,%rax,1)
  0x0000000124992038: add    %al,(%rax)
  0x000000012499203a: add    %al,(%rax)
  0x000000012499203c: add    %al,(%rax)
  0x000000012499203e: add    %al,(%rax)

----------------------------------------------------------------------
invokeinterface  185 invokeinterface  [0x0000000124992060, 0x0000000124992ba0]  2880 bytes

  0x0000000124992060: push   %rax
  0x0000000124992061: jmpq   0x000000012499209f
  0x0000000124992066: sub    $0x8,%rsp
  0x000000012499206a: vmovss %xmm0,(%rsp)
  0x000000012499206f: jmpq   0x000000012499209f
  0x0000000124992074: sub    $0x10,%rsp
  0x0000000124992078: vmovsd %xmm0,(%rsp)
  0x000000012499207d: jmpq   0x000000012499209f
  0x0000000124992082: sub    $0x10,%rsp
  0x0000000124992086: mov    %rax,(%rsp)
  0x000000012499208a: movabs $0x0,%r10
  0x0000000124992094: mov    %r10,0x8(%rsp)
  0x0000000124992099: jmpq   0x000000012499209f
  0x000000012499209e: push   %rax
  0x000000012499209f: mov    %r13,-0x40(%rbp)
  0x00000001249920a3: movzwl 0x1(%r13),%edx
  0x00000001249920a8: mov    -0x30(%rbp),%rcx
  0x00000001249920ac: shl    $0x2,%edx
  0x00000001249920af: mov    0x28(%rcx,%rdx,8),%ebx
  0x00000001249920b3: shr    $0x10,%ebx
  0x00000001249920b6: and    $0xff,%ebx
  0x00000001249920bc: cmp    $0xb9,%ebx
  0x00000001249920c2: je     0x0000000124992178
  0x00000001249920c8: mov    $0xb9,%ebx
  0x00000001249920cd: callq  0x00000001249920d7
  0x00000001249920d2: jmpq   0x000000012499216c
  0x00000001249920d7: mov    %rbx,%rsi
  0x00000001249920da: lea    0x8(%rsp),%rax
  0x00000001249920df: mov    %r13,-0x40(%rbp)
  0x00000001249920e3: mov    %r15,%rdi
  0x00000001249920e6: vzeroupper 
  0x00000001249920e9: mov    %rbp,0x330(%r15)
  0x00000001249920f0: mov    %rax,0x320(%r15)
  0x00000001249920f7: test   $0xf,%esp
  0x00000001249920fd: je     0x0000000124992115
  0x0000000124992103: sub    $0x8,%rsp
  0x0000000124992107: callq  0x0000000114bac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x000000012499210c: add    $0x8,%rsp
  0x0000000124992110: jmpq   0x000000012499211a
  0x0000000124992115: callq  0x0000000114bac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x000000012499211a: movabs $0x0,%r10
  0x0000000124992124: mov    %r10,0x320(%r15)
  0x000000012499212b: movabs $0x0,%r10
  0x0000000124992135: mov    %r10,0x330(%r15)
  0x000000012499213c: movabs $0x0,%r10
  0x0000000124992146: mov    %r10,0x328(%r15)
  0x000000012499214d: vzeroupper 
  0x0000000124992150: cmpq   $0x0,0x8(%r15)
  0x0000000124992158: je     0x0000000124992163
  0x000000012499215e: jmpq   0x0000000124975780
  0x0000000124992163: mov    -0x40(%rbp),%r13
  0x0000000124992167: mov    -0x38(%rbp),%r14
  0x000000012499216b: retq   
  0x000000012499216c: movzwl 0x1(%r13),%edx
  0x0000000124992171: mov    -0x30(%rbp),%rcx
  0x0000000124992175: shl    $0x2,%edx
  0x0000000124992178: mov    0x30(%rcx,%rdx,8),%rax
  0x000000012499217d: mov    0x38(%rcx,%rdx,8),%rbx
  0x0000000124992182: mov    0x40(%rcx,%rdx,8),%edx
  0x0000000124992186: mov    %edx,%ecx
  0x0000000124992188: and    $0xff,%ecx
  0x000000012499218e: mov    -0x8(%rsp,%rcx,8),%rcx
  0x0000000124992193: mov    %edx,%r13d
  0x0000000124992196: shr    $0x1c,%edx
  0x0000000124992199: movabs $0x1151d8780,%r10
  0x00000001249921a3: mov    (%r10,%rdx,8),%rdx
  0x00000001249921a7: push   %rdx
  0x00000001249921a8: mov    %r13d,%edx
  0x00000001249921ab: mov    -0x40(%rbp),%r13
  0x00000001249921af: mov    %edx,%r14d
  0x00000001249921b2: and    $0x800000,%r14d
  0x00000001249921b9: je     0x000000012499256c
  0x00000001249921bf: mov    %edx,%eax
  0x00000001249921c1: and    $0x100000,%eax
  0x00000001249921c7: je     0x000000012499234f
  0x00000001249921cd: cmp    (%rcx),%rax
  0x00000001249921d0: mov    -0x28(%rbp),%rax
  0x00000001249921d4: test   %rax,%rax
  0x00000001249921d7: je     0x00000001249921ef
  0x00000001249921dd: addq   $0x1,0x8(%rax)
  0x00000001249921e2: sbbq   $0x0,0x8(%rax)
  0x00000001249921e7: add    $0x38,%rax
  0x00000001249921eb: mov    %rax,-0x28(%rbp)
  0x00000001249921ef: mov    -0x28(%rbp),%rax
  0x00000001249921f3: test   %rax,%rax
  0x00000001249921f6: je     0x0000000124992343
  0x00000001249921fc: cmpb   $0xb,-0x38(%rax)
  0x0000000124992200: jne    0x0000000124992343
  0x0000000124992206: add    $0x8,%rax
  0x000000012499220a: mov    -0x8(%rax),%r13
  0x000000012499220e: sub    $0x0,%r13d
  0x0000000124992212: cmp    $0x2,%r13d
  0x0000000124992216: jl     0x0000000124992338
  0x000000012499221c: mov    0x8(%rbx),%r13
  0x0000000124992220: movzwl 0x34(%r13),%r13d
  0x0000000124992225: sub    (%rax),%r13
  0x0000000124992228: sub    $0x1,%r13d
  0x000000012499222c: mov    0x8(%rsp,%r13,8),%r13
  0x0000000124992231: test   %r13,%r13
  0x0000000124992234: jne    0x0000000124992240
  0x0000000124992236: orq    $0x1,0x8(%rax)
  0x000000012499223e: jmp    0x0000000124992299
  0x0000000124992240: mov    0x8(%r13),%r13d
  0x0000000124992244: movabs $0x800000000,%r12
  0x000000012499224e: add    %r12,%r13
  0x0000000124992251: xor    %r12,%r12
  0x0000000124992254: xor    0x8(%rax),%r13
  0x0000000124992258: test   $0xfffffffffffffffc,%r13
  0x000000012499225f: je     0x0000000124992299
  0x0000000124992261: test   $0x2,%r13
  0x0000000124992268: jne    0x0000000124992299
  0x000000012499226a: cmpq   $0x0,0x8(%rax)
  0x0000000124992272: je     0x0000000124992295
  0x0000000124992274: cmpq   $0x1,0x8(%rax)
  0x000000012499227c: je     0x0000000124992295
  0x000000012499227e: xor    0x8(%rax),%r13
  0x0000000124992282: test   $0xfffffffffffffffc,%r13
  0x0000000124992289: je     0x0000000124992299
  0x000000012499228b: orq    $0x2,0x8(%rax)
  0x0000000124992293: jmp    0x0000000124992299
  0x0000000124992295: mov    %r13,0x8(%rax)
  0x0000000124992299: add    $0x10,%rax
  0x000000012499229d: mov    -0x18(%rax),%r13
  0x00000001249922a1: sub    $0x2,%r13d
  0x00000001249922a5: cmp    $0x2,%r13d
  0x00000001249922a9: jl     0x0000000124992338
  0x00000001249922af: mov    0x8(%rbx),%r13
  0x00000001249922b3: movzwl 0x34(%r13),%r13d
  0x00000001249922b8: sub    (%rax),%r13
  0x00000001249922bb: sub    $0x1,%r13d
  0x00000001249922bf: mov    0x8(%rsp,%r13,8),%r13
  0x00000001249922c4: test   %r13,%r13
  0x00000001249922c7: jne    0x00000001249922d3
  0x00000001249922c9: orq    $0x1,0x8(%rax)
  0x00000001249922d1: jmp    0x000000012499232c
  0x00000001249922d3: mov    0x8(%r13),%r13d
  0x00000001249922d7: movabs $0x800000000,%r12
  0x00000001249922e1: add    %r12,%r13
  0x00000001249922e4: xor    %r12,%r12
  0x00000001249922e7: xor    0x8(%rax),%r13
  0x00000001249922eb: test   $0xfffffffffffffffc,%r13
  0x00000001249922f2: je     0x000000012499232c
  0x00000001249922f4: test   $0x2,%r13
  0x00000001249922fb: jne    0x000000012499232c
  0x00000001249922fd: cmpq   $0x0,0x8(%rax)
  0x0000000124992305: je     0x0000000124992328
  0x0000000124992307: cmpq   $0x1,0x8(%rax)
  0x000000012499230f: je     0x0000000124992328
  0x0000000124992311: xor    0x8(%rax),%r13
  0x0000000124992315: test   $0xfffffffffffffffc,%r13
  0x000000012499231c: je     0x000000012499232c
  0x000000012499231e: orq    $0x2,0x8(%rax)
  0x0000000124992326: jmp    0x000000012499232c
  0x0000000124992328: mov    %r13,0x8(%rax)
  0x000000012499232c: add    $0x10,%rax
  0x0000000124992330: mov    -0x28(%rax),%r13
  0x0000000124992334: sub    $0x4,%r13d
  0x0000000124992338: shl    $0x3,%r13d
  0x000000012499233c: add    %r13,%rax
  0x000000012499233f: mov    %rax,-0x28(%rbp)
  0x0000000124992343: lea    0x8(%rsp),%r13
  0x0000000124992348: mov    %r13,-0x10(%rbp)
  0x000000012499234c: jmpq   *0x48(%rbx)
  0x000000012499234f: mov    0x8(%rcx),%eax
  0x0000000124992352: movabs $0x800000000,%r12
  0x000000012499235c: add    %r12,%rax
  0x000000012499235f: xor    %r12,%r12
  0x0000000124992362: mov    -0x28(%rbp),%r14
  0x0000000124992366: test   %r14,%r14
  0x0000000124992369: je     0x0000000124992404
  0x000000012499236f: mov    0x18(%r14),%rdx
  0x0000000124992373: cmp    %rax,%rdx
  0x0000000124992376: jne    0x000000012499238b
  0x000000012499237c: addq   $0x1,0x20(%r14)
  0x0000000124992381: sbbq   $0x0,0x20(%r14)
  0x0000000124992386: jmpq   0x00000001249923fc
  0x000000012499238b: test   %rdx,%rdx
  0x000000012499238e: je     0x00000001249923d6
  0x0000000124992394: mov    0x28(%r14),%rdx
  0x0000000124992398: cmp    %rax,%rdx
  0x000000012499239b: jne    0x00000001249923b0
  0x00000001249923a1: addq   $0x1,0x30(%r14)
  0x00000001249923a6: sbbq   $0x0,0x30(%r14)
  0x00000001249923ab: jmpq   0x00000001249923fc
  0x00000001249923b0: test   %rdx,%rdx
  0x00000001249923b3: je     0x00000001249923c4
  0x00000001249923b5: addq   $0x1,0x8(%r14)
  0x00000001249923ba: sbbq   $0x0,0x8(%r14)
  0x00000001249923bf: jmpq   0x00000001249923fc
  0x00000001249923c4: mov    %rax,0x28(%r14)
  0x00000001249923c8: mov    $0x1,%edx
  0x00000001249923cd: mov    %rdx,0x30(%r14)
  0x00000001249923d1: jmpq   0x00000001249923fc
  0x00000001249923d6: cmp    0x28(%r14),%rax
  0x00000001249923da: jne    0x00000001249923ef
  0x00000001249923e0: addq   $0x1,0x30(%r14)
  0x00000001249923e5: sbbq   $0x0,0x30(%r14)
  0x00000001249923ea: jmpq   0x00000001249923fc
  0x00000001249923ef: mov    %rax,0x18(%r14)
  0x00000001249923f3: mov    $0x1,%edx
  0x00000001249923f8: mov    %rdx,0x20(%r14)
  0x00000001249923fc: add    $0x38,%r14
  0x0000000124992400: mov    %r14,-0x28(%rbp)
  0x0000000124992404: mov    0x1d0(%rax,%rbx,8),%rbx
  0x000000012499240c: mov    -0x28(%rbp),%rdx
  0x0000000124992410: test   %rdx,%rdx
  0x0000000124992413: je     0x0000000124992560
  0x0000000124992419: cmpb   $0xb,-0x38(%rdx)
  0x000000012499241d: jne    0x0000000124992560
  0x0000000124992423: add    $0x8,%rdx
  0x0000000124992427: mov    -0x8(%rdx),%r13
  0x000000012499242b: sub    $0x0,%r13d
  0x000000012499242f: cmp    $0x2,%r13d
  0x0000000124992433: jl     0x0000000124992555
  0x0000000124992439: mov    0x8(%rbx),%r13
  0x000000012499243d: movzwl 0x34(%r13),%r13d
  0x0000000124992442: sub    (%rdx),%r13
  0x0000000124992445: sub    $0x1,%r13d
  0x0000000124992449: mov    0x8(%rsp,%r13,8),%r13
  0x000000012499244e: test   %r13,%r13
  0x0000000124992451: jne    0x000000012499245d
  0x0000000124992453: orq    $0x1,0x8(%rdx)
  0x000000012499245b: jmp    0x00000001249924b6
  0x000000012499245d: mov    0x8(%r13),%r13d
  0x0000000124992461: movabs $0x800000000,%r12
  0x000000012499246b: add    %r12,%r13
  0x000000012499246e: xor    %r12,%r12
  0x0000000124992471: xor    0x8(%rdx),%r13
  0x0000000124992475: test   $0xfffffffffffffffc,%r13
  0x000000012499247c: je     0x00000001249924b6
  0x000000012499247e: test   $0x2,%r13
  0x0000000124992485: jne    0x00000001249924b6
  0x0000000124992487: cmpq   $0x0,0x8(%rdx)
  0x000000012499248f: je     0x00000001249924b2
  0x0000000124992491: cmpq   $0x1,0x8(%rdx)
  0x0000000124992499: je     0x00000001249924b2
  0x000000012499249b: xor    0x8(%rdx),%r13
  0x000000012499249f: test   $0xfffffffffffffffc,%r13
  0x00000001249924a6: je     0x00000001249924b6
  0x00000001249924a8: orq    $0x2,0x8(%rdx)
  0x00000001249924b0: jmp    0x00000001249924b6
  0x00000001249924b2: mov    %r13,0x8(%rdx)
  0x00000001249924b6: add    $0x10,%rdx
  0x00000001249924ba: mov    -0x18(%rdx),%r13
  0x00000001249924be: sub    $0x2,%r13d
  0x00000001249924c2: cmp    $0x2,%r13d
  0x00000001249924c6: jl     0x0000000124992555
  0x00000001249924cc: mov    0x8(%rbx),%r13
  0x00000001249924d0: movzwl 0x34(%r13),%r13d
  0x00000001249924d5: sub    (%rdx),%r13
  0x00000001249924d8: sub    $0x1,%r13d
  0x00000001249924dc: mov    0x8(%rsp,%r13,8),%r13
  0x00000001249924e1: test   %r13,%r13
  0x00000001249924e4: jne    0x00000001249924f0
  0x00000001249924e6: orq    $0x1,0x8(%rdx)
  0x00000001249924ee: jmp    0x0000000124992549
  0x00000001249924f0: mov    0x8(%r13),%r13d
  0x00000001249924f4: movabs $0x800000000,%r12
  0x00000001249924fe: add    %r12,%r13
  0x0000000124992501: xor    %r12,%r12
  0x0000000124992504: xor    0x8(%rdx),%r13
  0x0000000124992508: test   $0xfffffffffffffffc,%r13
  0x000000012499250f: je     0x0000000124992549
  0x0000000124992511: test   $0x2,%r13
  0x0000000124992518: jne    0x0000000124992549
  0x000000012499251a: cmpq   $0x0,0x8(%rdx)
  0x0000000124992522: je     0x0000000124992545
  0x0000000124992524: cmpq   $0x1,0x8(%rdx)
  0x000000012499252c: je     0x0000000124992545
  0x000000012499252e: xor    0x8(%rdx),%r13
  0x0000000124992532: test   $0xfffffffffffffffc,%r13
  0x0000000124992539: je     0x0000000124992549
  0x000000012499253b: orq    $0x2,0x8(%rdx)
  0x0000000124992543: jmp    0x0000000124992549
  0x0000000124992545: mov    %r13,0x8(%rdx)
  0x0000000124992549: add    $0x10,%rdx
  0x000000012499254d: mov    -0x28(%rdx),%r13
  0x0000000124992551: sub    $0x4,%r13d
  0x0000000124992555: shl    $0x3,%r13d
  0x0000000124992559: add    %r13,%rdx
  0x000000012499255c: mov    %rdx,-0x28(%rbp)
  0x0000000124992560: lea    0x8(%rsp),%r13
  0x0000000124992565: mov    %r13,-0x10(%rbp)
  0x0000000124992569: jmpq   *0x48(%rbx)
  0x000000012499256c: mov    %edx,%r14d
  0x000000012499256f: and    $0x100000,%r14d
  0x0000000124992576: je     0x000000012499275c
  0x000000012499257c: mov    0x8(%rcx),%r14d
  0x0000000124992580: movabs $0x800000000,%r12
  0x000000012499258a: add    %r12,%r14
  0x000000012499258d: xor    %r12,%r12
  0x0000000124992590: cmp    %rax,%r14
  0x0000000124992593: je     0x00000001249925dd
  0x0000000124992599: mov    0x10(%rax),%r13d
  0x000000012499259d: cmp    (%r14,%r13,1),%rax
  0x00000001249925a1: je     0x00000001249925dd
  0x00000001249925a7: cmp    $0x20,%r13d
  0x00000001249925ab: jne    0x00000001249925d5
  0x00000001249925b1: push   %rax
  0x00000001249925b2: mov    %rax,%rax
  0x00000001249925b5: push   %rcx
  0x00000001249925b6: push   %rdi
  0x00000001249925b7: mov    0x28(%r14),%rdi
  0x00000001249925bb: mov    (%rdi),%ecx
  0x00000001249925bd: add    $0x8,%rdi
  0x00000001249925c1: test   %rax,%rax
  0x00000001249925c4: repnz scas %es:(%rdi),%rax
  0x00000001249925c7: pop    %rdi
  0x00000001249925c8: pop    %rcx
  0x00000001249925c9: pop    %rax
  0x00000001249925ca: jne    0x00000001249925d5
  0x00000001249925cc: mov    %rax,0x20(%r14)
  0x00000001249925d0: jmpq   0x00000001249925dd
  0x00000001249925d5: mov    %r14,%rdx
  0x00000001249925d8: jmpq   0x0000000124992ad7
  0x00000001249925dd: mov    -0x28(%rbp),%rdx
  0x00000001249925e1: test   %rdx,%rdx
  0x00000001249925e4: je     0x00000001249925fc
  0x00000001249925ea: addq   $0x1,0x8(%rdx)
  0x00000001249925ef: sbbq   $0x0,0x8(%rdx)
  0x00000001249925f4: add    $0x38,%rdx
  0x00000001249925f8: mov    %rdx,-0x28(%rbp)
  0x00000001249925fc: mov    -0x28(%rbp),%rdx
  0x0000000124992600: test   %rdx,%rdx
  0x0000000124992603: je     0x0000000124992750
  0x0000000124992609: cmpb   $0xb,-0x38(%rdx)
  0x000000012499260d: jne    0x0000000124992750
  0x0000000124992613: add    $0x8,%rdx
  0x0000000124992617: mov    -0x8(%rdx),%r13
  0x000000012499261b: sub    $0x0,%r13d
  0x000000012499261f: cmp    $0x2,%r13d
  0x0000000124992623: jl     0x0000000124992745
  0x0000000124992629: mov    0x8(%rbx),%r13
  0x000000012499262d: movzwl 0x34(%r13),%r13d
  0x0000000124992632: sub    (%rdx),%r13
  0x0000000124992635: sub    $0x1,%r13d
  0x0000000124992639: mov    0x8(%rsp,%r13,8),%r13
  0x000000012499263e: test   %r13,%r13
  0x0000000124992641: jne    0x000000012499264d
  0x0000000124992643: orq    $0x1,0x8(%rdx)
  0x000000012499264b: jmp    0x00000001249926a6
  0x000000012499264d: mov    0x8(%r13),%r13d
  0x0000000124992651: movabs $0x800000000,%r12
  0x000000012499265b: add    %r12,%r13
  0x000000012499265e: xor    %r12,%r12
  0x0000000124992661: xor    0x8(%rdx),%r13
  0x0000000124992665: test   $0xfffffffffffffffc,%r13
  0x000000012499266c: je     0x00000001249926a6
  0x000000012499266e: test   $0x2,%r13
  0x0000000124992675: jne    0x00000001249926a6
  0x0000000124992677: cmpq   $0x0,0x8(%rdx)
  0x000000012499267f: je     0x00000001249926a2
  0x0000000124992681: cmpq   $0x1,0x8(%rdx)
  0x0000000124992689: je     0x00000001249926a2
  0x000000012499268b: xor    0x8(%rdx),%r13
  0x000000012499268f: test   $0xfffffffffffffffc,%r13
  0x0000000124992696: je     0x00000001249926a6
  0x0000000124992698: orq    $0x2,0x8(%rdx)
  0x00000001249926a0: jmp    0x00000001249926a6
  0x00000001249926a2: mov    %r13,0x8(%rdx)
  0x00000001249926a6: add    $0x10,%rdx
  0x00000001249926aa: mov    -0x18(%rdx),%r13
  0x00000001249926ae: sub    $0x2,%r13d
  0x00000001249926b2: cmp    $0x2,%r13d
  0x00000001249926b6: jl     0x0000000124992745
  0x00000001249926bc: mov    0x8(%rbx),%r13
  0x00000001249926c0: movzwl 0x34(%r13),%r13d
  0x00000001249926c5: sub    (%rdx),%r13
  0x00000001249926c8: sub    $0x1,%r13d
  0x00000001249926cc: mov    0x8(%rsp,%r13,8),%r13
  0x00000001249926d1: test   %r13,%r13
  0x00000001249926d4: jne    0x00000001249926e0
  0x00000001249926d6: orq    $0x1,0x8(%rdx)
  0x00000001249926de: jmp    0x0000000124992739
  0x00000001249926e0: mov    0x8(%r13),%r13d
  0x00000001249926e4: movabs $0x800000000,%r12
  0x00000001249926ee: add    %r12,%r13
  0x00000001249926f1: xor    %r12,%r12
  0x00000001249926f4: xor    0x8(%rdx),%r13
  0x00000001249926f8: test   $0xfffffffffffffffc,%r13
  0x00000001249926ff: je     0x0000000124992739
  0x0000000124992701: test   $0x2,%r13
  0x0000000124992708: jne    0x0000000124992739
  0x000000012499270a: cmpq   $0x0,0x8(%rdx)
  0x0000000124992712: je     0x0000000124992735
  0x0000000124992714: cmpq   $0x1,0x8(%rdx)
  0x000000012499271c: je     0x0000000124992735
  0x000000012499271e: xor    0x8(%rdx),%r13
  0x0000000124992722: test   $0xfffffffffffffffc,%r13
  0x0000000124992729: je     0x0000000124992739
  0x000000012499272b: orq    $0x2,0x8(%rdx)
  0x0000000124992733: jmp    0x0000000124992739
  0x0000000124992735: mov    %r13,0x8(%rdx)
  0x0000000124992739: add    $0x10,%rdx
  0x000000012499273d: mov    -0x28(%rdx),%r13
  0x0000000124992741: sub    $0x4,%r13d
  0x0000000124992745: shl    $0x3,%r13d
  0x0000000124992749: add    %r13,%rdx
  0x000000012499274c: mov    %rdx,-0x28(%rbp)
  0x0000000124992750: lea    0x8(%rsp),%r13
  0x0000000124992755: mov    %r13,-0x10(%rbp)
  0x0000000124992759: jmpq   *0x48(%rbx)
  0x000000012499275c: mov    -0x38(%rbp),%r14
  0x0000000124992760: mov    0x8(%rcx),%edx
  0x0000000124992763: movabs $0x800000000,%r12
  0x000000012499276d: add    %r12,%rdx
  0x0000000124992770: xor    %r12,%r12
  0x0000000124992773: mov    %rbx,%rcx
  0x0000000124992776: mov    0xc4(%rdx),%r14d
  0x000000012499277d: lea    0x1d0(%rdx,%r14,8),%r14
  0x0000000124992785: mov    (%r14),%r13
  0x0000000124992788: cmp    %r13,%rax
  0x000000012499278b: je     0x00000001249927a2
  0x000000012499278d: test   %r13,%r13
  0x0000000124992790: je     0x0000000124992ad7
  0x0000000124992796: add    $0x10,%r14
  0x000000012499279a: mov    (%r14),%r13
  0x000000012499279d: cmp    %r13,%rax
  0x00000001249927a0: jne    0x000000012499278d
  0x00000001249927a2: mov    -0x40(%rbp),%r13
  0x00000001249927a6: mov    -0x28(%rbp),%r13
  0x00000001249927aa: test   %r13,%r13
  0x00000001249927ad: je     0x000000012499284a
  0x00000001249927b3: mov    0x18(%r13),%r14
  0x00000001249927b7: cmp    %rdx,%r14
  0x00000001249927ba: jne    0x00000001249927cf
  0x00000001249927c0: addq   $0x1,0x20(%r13)
  0x00000001249927c5: sbbq   $0x0,0x20(%r13)
  0x00000001249927ca: jmpq   0x0000000124992842
  0x00000001249927cf: test   %r14,%r14
  0x00000001249927d2: je     0x000000012499281b
  0x00000001249927d8: mov    0x28(%r13),%r14
  0x00000001249927dc: cmp    %rdx,%r14
  0x00000001249927df: jne    0x00000001249927f4
  0x00000001249927e5: addq   $0x1,0x30(%r13)
  0x00000001249927ea: sbbq   $0x0,0x30(%r13)
  0x00000001249927ef: jmpq   0x0000000124992842
  0x00000001249927f4: test   %r14,%r14
  0x00000001249927f7: je     0x0000000124992808
  0x00000001249927f9: addq   $0x1,0x8(%r13)
  0x00000001249927fe: sbbq   $0x0,0x8(%r13)
  0x0000000124992803: jmpq   0x0000000124992842
  0x0000000124992808: mov    %rdx,0x28(%r13)
  0x000000012499280c: mov    $0x1,%r14d
  0x0000000124992812: mov    %r14,0x30(%r13)
  0x0000000124992816: jmpq   0x0000000124992842
  0x000000012499281b: cmp    0x28(%r13),%rdx
  0x000000012499281f: jne    0x0000000124992834
  0x0000000124992825: addq   $0x1,0x30(%r13)
  0x000000012499282a: sbbq   $0x0,0x30(%r13)
  0x000000012499282f: jmpq   0x0000000124992842
  0x0000000124992834: mov    %rdx,0x18(%r13)
  0x0000000124992838: mov    $0x1,%r14d
  0x000000012499283e: mov    %r14,0x20(%r13)
  0x0000000124992842: add    $0x38,%r13
  0x0000000124992846: mov    %r13,-0x28(%rbp)
  0x000000012499284a: mov    0x8(%rbx),%rax
  0x000000012499284e: mov    0x8(%rax),%rax
  0x0000000124992852: mov    0x18(%rax),%rax
  0x0000000124992856: mov    0x24(%rbx),%ebx
  0x0000000124992859: sub    $0xfffffff6,%ebx
  0x000000012499285c: neg    %ebx
  0x000000012499285e: mov    %rdx,%r14
  0x0000000124992861: mov    0xc4(%r14),%r13d
  0x0000000124992868: lea    0x1d0(%r14,%r13,8),%r13
  0x0000000124992870: lea    (%r14,%rbx,8),%r14
  0x0000000124992874: mov    0x0(%r13),%rbx
  0x0000000124992878: cmp    %rbx,%rax
  0x000000012499287b: je     0x0000000124992893
  0x000000012499287d: test   %rbx,%rbx
  0x0000000124992880: je     0x0000000124992ad7
  0x0000000124992886: add    $0x10,%r13
  0x000000012499288a: mov    0x0(%r13),%rbx
  0x000000012499288e: cmp    %rbx,%rax
  0x0000000124992891: jne    0x000000012499287d
  0x0000000124992893: mov    0x8(%r13),%r13d
  0x0000000124992897: mov    (%r14,%r13,1),%rbx
  0x000000012499289b: test   %rbx,%rbx
  0x000000012499289e: je     0x0000000124992a18
  0x00000001249928a4: mov    -0x28(%rbp),%rdx
  0x00000001249928a8: test   %rdx,%rdx
  0x00000001249928ab: je     0x00000001249929f8
  0x00000001249928b1: cmpb   $0xb,-0x38(%rdx)
  0x00000001249928b5: jne    0x00000001249929f8
  0x00000001249928bb: add    $0x8,%rdx
  0x00000001249928bf: mov    -0x8(%rdx),%r13
  0x00000001249928c3: sub    $0x0,%r13d
  0x00000001249928c7: cmp    $0x2,%r13d
  0x00000001249928cb: jl     0x00000001249929ed
  0x00000001249928d1: mov    0x8(%rbx),%r13
  0x00000001249928d5: movzwl 0x34(%r13),%r13d
  0x00000001249928da: sub    (%rdx),%r13
  0x00000001249928dd: sub    $0x1,%r13d
  0x00000001249928e1: mov    0x8(%rsp,%r13,8),%r13
  0x00000001249928e6: test   %r13,%r13
  0x00000001249928e9: jne    0x00000001249928f5
  0x00000001249928eb: orq    $0x1,0x8(%rdx)
  0x00000001249928f3: jmp    0x000000012499294e
  0x00000001249928f5: mov    0x8(%r13),%r13d
  0x00000001249928f9: movabs $0x800000000,%r12
  0x0000000124992903: add    %r12,%r13
  0x0000000124992906: xor    %r12,%r12
  0x0000000124992909: xor    0x8(%rdx),%r13
  0x000000012499290d: test   $0xfffffffffffffffc,%r13
  0x0000000124992914: je     0x000000012499294e
  0x0000000124992916: test   $0x2,%r13
  0x000000012499291d: jne    0x000000012499294e
  0x000000012499291f: cmpq   $0x0,0x8(%rdx)
  0x0000000124992927: je     0x000000012499294a
  0x0000000124992929: cmpq   $0x1,0x8(%rdx)
  0x0000000124992931: je     0x000000012499294a
  0x0000000124992933: xor    0x8(%rdx),%r13
  0x0000000124992937: test   $0xfffffffffffffffc,%r13
  0x000000012499293e: je     0x000000012499294e
  0x0000000124992940: orq    $0x2,0x8(%rdx)
  0x0000000124992948: jmp    0x000000012499294e
  0x000000012499294a: mov    %r13,0x8(%rdx)
  0x000000012499294e: add    $0x10,%rdx
  0x0000000124992952: mov    -0x18(%rdx),%r13
  0x0000000124992956: sub    $0x2,%r13d
  0x000000012499295a: cmp    $0x2,%r13d
  0x000000012499295e: jl     0x00000001249929ed
  0x0000000124992964: mov    0x8(%rbx),%r13
  0x0000000124992968: movzwl 0x34(%r13),%r13d
  0x000000012499296d: sub    (%rdx),%r13
  0x0000000124992970: sub    $0x1,%r13d
  0x0000000124992974: mov    0x8(%rsp,%r13,8),%r13
  0x0000000124992979: test   %r13,%r13
  0x000000012499297c: jne    0x0000000124992988
  0x000000012499297e: orq    $0x1,0x8(%rdx)
  0x0000000124992986: jmp    0x00000001249929e1
  0x0000000124992988: mov    0x8(%r13),%r13d
  0x000000012499298c: movabs $0x800000000,%r12
  0x0000000124992996: add    %r12,%r13
  0x0000000124992999: xor    %r12,%r12
  0x000000012499299c: xor    0x8(%rdx),%r13
  0x00000001249929a0: test   $0xfffffffffffffffc,%r13
  0x00000001249929a7: je     0x00000001249929e1
  0x00000001249929a9: test   $0x2,%r13
  0x00000001249929b0: jne    0x00000001249929e1
  0x00000001249929b2: cmpq   $0x0,0x8(%rdx)
  0x00000001249929ba: je     0x00000001249929dd
  0x00000001249929bc: cmpq   $0x1,0x8(%rdx)
  0x00000001249929c4: je     0x00000001249929dd
  0x00000001249929c6: xor    0x8(%rdx),%r13
  0x00000001249929ca: test   $0xfffffffffffffffc,%r13
  0x00000001249929d1: je     0x00000001249929e1
  0x00000001249929d3: orq    $0x2,0x8(%rdx)
  0x00000001249929db: jmp    0x00000001249929e1
  0x00000001249929dd: mov    %r13,0x8(%rdx)
  0x00000001249929e1: add    $0x10,%rdx
  0x00000001249929e5: mov    -0x28(%rdx),%r13
  0x00000001249929e9: sub    $0x4,%r13d
  0x00000001249929ed: shl    $0x3,%r13d
  0x00000001249929f1: add    %r13,%rdx
  0x00000001249929f4: mov    %rdx,-0x28(%rbp)
  0x00000001249929f8: lea    0x8(%rsp),%r13
  0x00000001249929fd: mov    %r13,-0x10(%rbp)
  0x0000000124992a01: jmpq   *0x48(%rbx)
  0x0000000124992a04: movabs $0x114ff3493,%rdi
  0x0000000124992a0e: and    $0xfffffffffffffff0,%rsp
  0x0000000124992a12: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124992a17: hlt    
  0x0000000124992a18: pop    %rbx
  0x0000000124992a19: mov    -0x40(%rbp),%r13
  0x0000000124992a1d: mov    -0x38(%rbp),%r14
  0x0000000124992a21: mov    %rdx,%rsi
  0x0000000124992a24: mov    %rcx,%rdx
  0x0000000124992a27: callq  0x0000000124992a31
  0x0000000124992a2c: jmpq   0x0000000124992ac3
  0x0000000124992a31: lea    0x8(%rsp),%rax
  0x0000000124992a36: mov    %r13,-0x40(%rbp)
  0x0000000124992a3a: mov    %r15,%rdi
  0x0000000124992a3d: vzeroupper 
  0x0000000124992a40: mov    %rbp,0x330(%r15)
  0x0000000124992a47: mov    %rax,0x320(%r15)
  0x0000000124992a4e: test   $0xf,%esp
  0x0000000124992a54: je     0x0000000124992a6c
  0x0000000124992a5a: sub    $0x8,%rsp
  0x0000000124992a5e: callq  0x0000000114bab502 = InterpreterRuntime::throw_AbstractMethodErrorVerbose(JavaThread*, Klass*, Method*)
  0x0000000124992a63: add    $0x8,%rsp
  0x0000000124992a67: jmpq   0x0000000124992a71
  0x0000000124992a6c: callq  0x0000000114bab502 = InterpreterRuntime::throw_AbstractMethodErrorVerbose(JavaThread*, Klass*, Method*)
  0x0000000124992a71: movabs $0x0,%r10
  0x0000000124992a7b: mov    %r10,0x320(%r15)
  0x0000000124992a82: movabs $0x0,%r10
  0x0000000124992a8c: mov    %r10,0x330(%r15)
  0x0000000124992a93: movabs $0x0,%r10
  0x0000000124992a9d: mov    %r10,0x328(%r15)
  0x0000000124992aa4: vzeroupper 
  0x0000000124992aa7: cmpq   $0x0,0x8(%r15)
  0x0000000124992aaf: je     0x0000000124992aba
  0x0000000124992ab5: jmpq   0x0000000124975780
  0x0000000124992aba: mov    -0x40(%rbp),%r13
  0x0000000124992abe: mov    -0x38(%rbp),%r14
  0x0000000124992ac2: retq   
  0x0000000124992ac3: movabs $0x114ff3493,%rdi
  0x0000000124992acd: and    $0xfffffffffffffff0,%rsp
  0x0000000124992ad1: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124992ad6: hlt    
  0x0000000124992ad7: pop    %rbx
  0x0000000124992ad8: mov    -0x40(%rbp),%r13
  0x0000000124992adc: mov    -0x38(%rbp),%r14
  0x0000000124992ae0: mov    %rdx,%rsi
  0x0000000124992ae3: callq  0x0000000124992aed
  0x0000000124992ae8: jmpq   0x0000000124992b82
  0x0000000124992aed: mov    %rax,%rdx
  0x0000000124992af0: lea    0x8(%rsp),%rax
  0x0000000124992af5: mov    %r13,-0x40(%rbp)
  0x0000000124992af9: mov    %r15,%rdi
  0x0000000124992afc: vzeroupper 
  0x0000000124992aff: mov    %rbp,0x330(%r15)
  0x0000000124992b06: mov    %rax,0x320(%r15)
  0x0000000124992b0d: test   $0xf,%esp
  0x0000000124992b13: je     0x0000000124992b2b
  0x0000000124992b19: sub    $0x8,%rsp
  0x0000000124992b1d: callq  0x0000000114bab684 = InterpreterRuntime::throw_IncompatibleClassChangeErrorVerbose(JavaThread*, Klass*, Klass*)
  0x0000000124992b22: add    $0x8,%rsp
  0x0000000124992b26: jmpq   0x0000000124992b30
  0x0000000124992b2b: callq  0x0000000114bab684 = InterpreterRuntime::throw_IncompatibleClassChangeErrorVerbose(JavaThread*, Klass*, Klass*)
  0x0000000124992b30: movabs $0x0,%r10
  0x0000000124992b3a: mov    %r10,0x320(%r15)
  0x0000000124992b41: movabs $0x0,%r10
  0x0000000124992b4b: mov    %r10,0x330(%r15)
  0x0000000124992b52: movabs $0x0,%r10
  0x0000000124992b5c: mov    %r10,0x328(%r15)
  0x0000000124992b63: vzeroupper 
  0x0000000124992b66: cmpq   $0x0,0x8(%r15)
  0x0000000124992b6e: je     0x0000000124992b79
  0x0000000124992b74: jmpq   0x0000000124975780
  0x0000000124992b79: mov    -0x40(%rbp),%r13
  0x0000000124992b7d: mov    -0x38(%rbp),%r14
  0x0000000124992b81: retq   
  0x0000000124992b82: movabs $0x114ff3493,%rdi
  0x0000000124992b8c: and    $0xfffffffffffffff0,%rsp
  0x0000000124992b90: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124992b95: hlt    
  0x0000000124992b96: xchg   %ax,%ax
  0x0000000124992b98: add    %al,(%rax)
  0x0000000124992b9a: add    %al,(%rax)
  0x0000000124992b9c: add    %al,(%rax)
  0x0000000124992b9e: add    %al,(%rax)

----------------------------------------------------------------------
invokedynamic  186 invokedynamic  [0x0000000124992bc0, 0x0000000124992ec0]  768 bytes

  0x0000000124992bc0: push   %rax
  0x0000000124992bc1: jmpq   0x0000000124992bff
  0x0000000124992bc6: sub    $0x8,%rsp
  0x0000000124992bca: vmovss %xmm0,(%rsp)
  0x0000000124992bcf: jmpq   0x0000000124992bff
  0x0000000124992bd4: sub    $0x10,%rsp
  0x0000000124992bd8: vmovsd %xmm0,(%rsp)
  0x0000000124992bdd: jmpq   0x0000000124992bff
  0x0000000124992be2: sub    $0x10,%rsp
  0x0000000124992be6: mov    %rax,(%rsp)
  0x0000000124992bea: movabs $0x0,%r10
  0x0000000124992bf4: mov    %r10,0x8(%rsp)
  0x0000000124992bf9: jmpq   0x0000000124992bff
  0x0000000124992bfe: push   %rax
  0x0000000124992bff: mov    %r13,-0x40(%rbp)
  0x0000000124992c03: mov    0x1(%r13),%edx
  0x0000000124992c07: not    %edx
  0x0000000124992c09: mov    -0x30(%rbp),%rcx
  0x0000000124992c0d: shl    $0x2,%edx
  0x0000000124992c10: mov    0x28(%rcx,%rdx,8),%ebx
  0x0000000124992c14: shr    $0x10,%ebx
  0x0000000124992c17: and    $0xff,%ebx
  0x0000000124992c1d: cmp    $0xba,%ebx
  0x0000000124992c23: je     0x0000000124992cda
  0x0000000124992c29: mov    $0xba,%ebx
  0x0000000124992c2e: callq  0x0000000124992c38
  0x0000000124992c33: jmpq   0x0000000124992ccd
  0x0000000124992c38: mov    %rbx,%rsi
  0x0000000124992c3b: lea    0x8(%rsp),%rax
  0x0000000124992c40: mov    %r13,-0x40(%rbp)
  0x0000000124992c44: mov    %r15,%rdi
  0x0000000124992c47: vzeroupper 
  0x0000000124992c4a: mov    %rbp,0x330(%r15)
  0x0000000124992c51: mov    %rax,0x320(%r15)
  0x0000000124992c58: test   $0xf,%esp
  0x0000000124992c5e: je     0x0000000124992c76
  0x0000000124992c64: sub    $0x8,%rsp
  0x0000000124992c68: callq  0x0000000114bac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x0000000124992c6d: add    $0x8,%rsp
  0x0000000124992c71: jmpq   0x0000000124992c7b
  0x0000000124992c76: callq  0x0000000114bac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x0000000124992c7b: movabs $0x0,%r10
  0x0000000124992c85: mov    %r10,0x320(%r15)
  0x0000000124992c8c: movabs $0x0,%r10
  0x0000000124992c96: mov    %r10,0x330(%r15)
  0x0000000124992c9d: movabs $0x0,%r10
  0x0000000124992ca7: mov    %r10,0x328(%r15)
  0x0000000124992cae: vzeroupper 
  0x0000000124992cb1: cmpq   $0x0,0x8(%r15)
  0x0000000124992cb9: je     0x0000000124992cc4
  0x0000000124992cbf: jmpq   0x0000000124975780
  0x0000000124992cc4: mov    -0x40(%rbp),%r13
  0x0000000124992cc8: mov    -0x38(%rbp),%r14
  0x0000000124992ccc: retq   
  0x0000000124992ccd: mov    0x1(%r13),%edx
  0x0000000124992cd1: not    %edx
  0x0000000124992cd3: mov    -0x30(%rbp),%rcx
  0x0000000124992cd7: shl    $0x2,%edx
  0x0000000124992cda: mov    0x30(%rcx,%rdx,8),%rbx
  0x0000000124992cdf: mov    0x38(%rcx,%rdx,8),%rax
  0x0000000124992ce4: mov    0x40(%rcx,%rdx,8),%edx
  0x0000000124992ce8: test   $0x1000000,%edx
  0x0000000124992cee: je     0x0000000124992d19
  0x0000000124992cf4: push   %rbx
  0x0000000124992cf5: mov    %rax,%rbx
  0x0000000124992cf8: mov    -0x18(%rbp),%rax
  0x0000000124992cfc: mov    0x8(%rax),%rax
  0x0000000124992d00: mov    0x8(%rax),%rax
  0x0000000124992d04: mov    0x10(%rax),%rax
  0x0000000124992d08: mov    0x10(%rax),%rax
  0x0000000124992d0c: mov    (%rax),%rax
  0x0000000124992d0f: mov    0x10(%rax,%rbx,4),%eax
  0x0000000124992d13: shl    $0x3,%rax
  0x0000000124992d17: pop    %rbx
  0x0000000124992d18: push   %rax
  0x0000000124992d19: shr    $0x1c,%edx
  0x0000000124992d1c: movabs $0x1151d87d0,%r10
  0x0000000124992d26: mov    (%r10,%rdx,8),%rdx
  0x0000000124992d2a: push   %rdx
  0x0000000124992d2b: mov    -0x28(%rbp),%r13
  0x0000000124992d2f: test   %r13,%r13
  0x0000000124992d32: je     0x0000000124992d4a
  0x0000000124992d38: addq   $0x1,0x8(%r13)
  0x0000000124992d3d: sbbq   $0x0,0x8(%r13)
  0x0000000124992d42: add    $0x10,%r13
  0x0000000124992d46: mov    %r13,-0x28(%rbp)
  0x0000000124992d4a: mov    -0x28(%rbp),%rdx
  0x0000000124992d4e: test   %rdx,%rdx
  0x0000000124992d51: je     0x0000000124992e9e
  0x0000000124992d57: cmpb   $0xa,-0x10(%rdx)
  0x0000000124992d5b: jne    0x0000000124992e9e
  0x0000000124992d61: add    $0x8,%rdx
  0x0000000124992d65: mov    -0x8(%rdx),%r13
  0x0000000124992d69: sub    $0x0,%r13d
  0x0000000124992d6d: cmp    $0x2,%r13d
  0x0000000124992d71: jl     0x0000000124992e93
  0x0000000124992d77: mov    0x8(%rbx),%r13
  0x0000000124992d7b: movzwl 0x34(%r13),%r13d
  0x0000000124992d80: sub    (%rdx),%r13
  0x0000000124992d83: sub    $0x1,%r13d
  0x0000000124992d87: mov    0x8(%rsp,%r13,8),%r13
  0x0000000124992d8c: test   %r13,%r13
  0x0000000124992d8f: jne    0x0000000124992d9b
  0x0000000124992d91: orq    $0x1,0x8(%rdx)
  0x0000000124992d99: jmp    0x0000000124992df4
  0x0000000124992d9b: mov    0x8(%r13),%r13d
  0x0000000124992d9f: movabs $0x800000000,%r12
  0x0000000124992da9: add    %r12,%r13
  0x0000000124992dac: xor    %r12,%r12
  0x0000000124992daf: xor    0x8(%rdx),%r13
  0x0000000124992db3: test   $0xfffffffffffffffc,%r13
  0x0000000124992dba: je     0x0000000124992df4
  0x0000000124992dbc: test   $0x2,%r13
  0x0000000124992dc3: jne    0x0000000124992df4
  0x0000000124992dc5: cmpq   $0x0,0x8(%rdx)
  0x0000000124992dcd: je     0x0000000124992df0
  0x0000000124992dcf: cmpq   $0x1,0x8(%rdx)
  0x0000000124992dd7: je     0x0000000124992df0
  0x0000000124992dd9: xor    0x8(%rdx),%r13
  0x0000000124992ddd: test   $0xfffffffffffffffc,%r13
  0x0000000124992de4: je     0x0000000124992df4
  0x0000000124992de6: orq    $0x2,0x8(%rdx)
  0x0000000124992dee: jmp    0x0000000124992df4
  0x0000000124992df0: mov    %r13,0x8(%rdx)
  0x0000000124992df4: add    $0x10,%rdx
  0x0000000124992df8: mov    -0x18(%rdx),%r13
  0x0000000124992dfc: sub    $0x2,%r13d
  0x0000000124992e00: cmp    $0x2,%r13d
  0x0000000124992e04: jl     0x0000000124992e93
  0x0000000124992e0a: mov    0x8(%rbx),%r13
  0x0000000124992e0e: movzwl 0x34(%r13),%r13d
  0x0000000124992e13: sub    (%rdx),%r13
  0x0000000124992e16: sub    $0x1,%r13d
  0x0000000124992e1a: mov    0x8(%rsp,%r13,8),%r13
  0x0000000124992e1f: test   %r13,%r13
  0x0000000124992e22: jne    0x0000000124992e2e
  0x0000000124992e24: orq    $0x1,0x8(%rdx)
  0x0000000124992e2c: jmp    0x0000000124992e87
  0x0000000124992e2e: mov    0x8(%r13),%r13d
  0x0000000124992e32: movabs $0x800000000,%r12
  0x0000000124992e3c: add    %r12,%r13
  0x0000000124992e3f: xor    %r12,%r12
  0x0000000124992e42: xor    0x8(%rdx),%r13
  0x0000000124992e46: test   $0xfffffffffffffffc,%r13
  0x0000000124992e4d: je     0x0000000124992e87
  0x0000000124992e4f: test   $0x2,%r13
  0x0000000124992e56: jne    0x0000000124992e87
  0x0000000124992e58: cmpq   $0x0,0x8(%rdx)
  0x0000000124992e60: je     0x0000000124992e83
  0x0000000124992e62: cmpq   $0x1,0x8(%rdx)
  0x0000000124992e6a: je     0x0000000124992e83
  0x0000000124992e6c: xor    0x8(%rdx),%r13
  0x0000000124992e70: test   $0xfffffffffffffffc,%r13
  0x0000000124992e77: je     0x0000000124992e87
  0x0000000124992e79: orq    $0x2,0x8(%rdx)
  0x0000000124992e81: jmp    0x0000000124992e87
  0x0000000124992e83: mov    %r13,0x8(%rdx)
  0x0000000124992e87: add    $0x10,%rdx
  0x0000000124992e8b: mov    -0x28(%rdx),%r13
  0x0000000124992e8f: sub    $0x4,%r13d
  0x0000000124992e93: shl    $0x3,%r13d
  0x0000000124992e97: add    %r13,%rdx
  0x0000000124992e9a: mov    %rdx,-0x28(%rbp)
  0x0000000124992e9e: lea    0x8(%rsp),%r13
  0x0000000124992ea3: mov    %r13,-0x10(%rbp)
  0x0000000124992ea7: jmpq   *0x48(%rbx)
  0x0000000124992eaa: nopw   0x0(%rax,%rax,1)
  0x0000000124992eb0: add    %al,(%rax)
  0x0000000124992eb2: add    %al,(%rax)
  0x0000000124992eb4: add    %al,(%rax)
  0x0000000124992eb6: add    %al,(%rax)
  0x0000000124992eb8: add    %al,(%rax)
  0x0000000124992eba: add    %al,(%rax)
  0x0000000124992ebc: add    %al,(%rax)
  0x0000000124992ebe: add    %al,(%rax)

----------------------------------------------------------------------
new  187 new  [0x0000000124992ee0, 0x0000000124993100]  544 bytes

  0x0000000124992ee0: push   %rax
  0x0000000124992ee1: jmpq   0x0000000124992f1f
  0x0000000124992ee6: sub    $0x8,%rsp
  0x0000000124992eea: vmovss %xmm0,(%rsp)
  0x0000000124992eef: jmpq   0x0000000124992f1f
  0x0000000124992ef4: sub    $0x10,%rsp
  0x0000000124992ef8: vmovsd %xmm0,(%rsp)
  0x0000000124992efd: jmpq   0x0000000124992f1f
  0x0000000124992f02: sub    $0x10,%rsp
  0x0000000124992f06: mov    %rax,(%rsp)
  0x0000000124992f0a: movabs $0x0,%r10
  0x0000000124992f14: mov    %r10,0x8(%rsp)
  0x0000000124992f19: jmpq   0x0000000124992f1f
  0x0000000124992f1e: push   %rax
  0x0000000124992f1f: movzwl 0x1(%r13),%edx
  0x0000000124992f24: bswap  %edx
  0x0000000124992f26: shr    $0x10,%edx
  0x0000000124992f29: mov    -0x18(%rbp),%rcx
  0x0000000124992f2d: mov    0x8(%rcx),%rcx
  0x0000000124992f31: mov    0x8(%rcx),%rcx
  0x0000000124992f35: mov    0x8(%rcx),%rax
  0x0000000124992f39: cmpb   $0x7,0x4(%rax,%rdx,1)
  0x0000000124992f3e: jne    0x000000012499300a
  0x0000000124992f44: mov    0x40(%rcx,%rdx,8),%dx
  0x0000000124992f49: mov    0x28(%rcx),%rcx
  0x0000000124992f4d: mov    0x8(%rcx,%rdx,8),%rcx
  0x0000000124992f52: push   %rcx
  0x0000000124992f53: cmpb   $0x4,0x18a(%rcx)
  0x0000000124992f5a: jne    0x0000000124993009
  0x0000000124992f60: mov    0x8(%rcx),%edx
  0x0000000124992f63: test   $0x1,%edx
  0x0000000124992f69: jne    0x0000000124993009
  0x0000000124992f6f: mov    0x118(%r15),%rax
  0x0000000124992f76: lea    (%rax,%rdx,1),%rbx
  0x0000000124992f7a: cmp    0x128(%r15),%rbx
  0x0000000124992f81: ja     0x0000000124993009
  0x0000000124992f87: mov    %rbx,0x118(%r15)
  0x0000000124992f8e: jmpq   0x0000000124992f93
  0x0000000124992f93: sub    $0x10,%rdx
  0x0000000124992f97: je     0x0000000124992fac
  0x0000000124992f9d: xor    %ecx,%ecx
  0x0000000124992f9f: shr    $0x3,%edx
  0x0000000124992fa2: mov    %rcx,0x8(%rax,%rdx,8)
  0x0000000124992fa7: dec    %rdx
  0x0000000124992faa: jne    0x0000000124992fa2
  0x0000000124992fac: pop    %rcx
  0x0000000124992fad: mov    0xb8(%rcx),%rbx
  0x0000000124992fb4: mov    %rbx,(%rax)
  0x0000000124992fb7: xor    %esi,%esi
  0x0000000124992fb9: mov    %esi,0xc(%rax)
  0x0000000124992fbc: movabs $0x800000000,%r12
  0x0000000124992fc6: sub    %r12,%rcx
  0x0000000124992fc9: xor    %r12,%r12
  0x0000000124992fcc: mov    %ecx,0x8(%rax)
  0x0000000124992fcf: cmpb   $0x0,-0xf7d8efb(%rip)        # 0x00000001151ba0db = DTraceAllocProbes
  0x0000000124992fd6: je     0x0000000124993004
  0x0000000124992fdc: push   %rax
  0x0000000124992fdd: mov    %rax,%rdi
  0x0000000124992fe0: test   $0xf,%esp
  0x0000000124992fe6: je     0x0000000124992ffe
  0x0000000124992fec: sub    $0x8,%rsp
  0x0000000124992ff0: callq  0x0000000114e978c2 = SharedRuntime::dtrace_object_alloc(oopDesc*, int)
  0x0000000124992ff5: add    $0x8,%rsp
  0x0000000124992ff9: jmpq   0x0000000124993003
  0x0000000124992ffe: callq  0x0000000114e978c2 = SharedRuntime::dtrace_object_alloc(oopDesc*, int)
  0x0000000124993003: pop    %rax
  0x0000000124993004: jmpq   0x00000001249930d4
  0x0000000124993009: pop    %rcx
  0x000000012499300a: mov    -0x18(%rbp),%rsi
  0x000000012499300e: mov    0x8(%rsi),%rsi
  0x0000000124993012: mov    0x8(%rsi),%rsi
  0x0000000124993016: movzwl 0x1(%r13),%edx
  0x000000012499301b: bswap  %edx
  0x000000012499301d: shr    $0x10,%edx
  0x0000000124993020: callq  0x000000012499302a
  0x0000000124993025: jmpq   0x00000001249930d4
  0x000000012499302a: lea    0x8(%rsp),%rax
  0x000000012499302f: mov    %r13,-0x40(%rbp)
  0x0000000124993033: mov    %r15,%rdi
  0x0000000124993036: vzeroupper 
  0x0000000124993039: mov    %rbp,0x330(%r15)
  0x0000000124993040: mov    %rax,0x320(%r15)
  0x0000000124993047: test   $0xf,%esp
  0x000000012499304d: je     0x0000000124993065
  0x0000000124993053: sub    $0x8,%rsp
  0x0000000124993057: callq  0x0000000114baa088 = InterpreterRuntime::_new(JavaThread*, ConstantPool*, int)
  0x000000012499305c: add    $0x8,%rsp
  0x0000000124993060: jmpq   0x000000012499306a
  0x0000000124993065: callq  0x0000000114baa088 = InterpreterRuntime::_new(JavaThread*, ConstantPool*, int)
  0x000000012499306a: movabs $0x0,%r10
  0x0000000124993074: mov    %r10,0x320(%r15)
  0x000000012499307b: movabs $0x0,%r10
  0x0000000124993085: mov    %r10,0x330(%r15)
  0x000000012499308c: movabs $0x0,%r10
  0x0000000124993096: mov    %r10,0x328(%r15)
  0x000000012499309d: vzeroupper 
  0x00000001249930a0: cmpq   $0x0,0x8(%r15)
  0x00000001249930a8: je     0x00000001249930b3
  0x00000001249930ae: jmpq   0x0000000124975780
  0x00000001249930b3: mov    0x380(%r15),%rax
  0x00000001249930ba: movabs $0x0,%r10
  0x00000001249930c4: mov    %r10,0x380(%r15)
  0x00000001249930cb: mov    -0x40(%rbp),%r13
  0x00000001249930cf: mov    -0x38(%rbp),%r14
  0x00000001249930d3: retq   
  0x00000001249930d4: movzbl 0x3(%r13),%ebx
  0x00000001249930d9: add    $0x3,%r13
  0x00000001249930dd: movabs $0x1151d7220,%r10
  0x00000001249930e7: jmpq   *(%r10,%rbx,8)
  0x00000001249930eb: nopl   0x0(%rax,%rax,1)
  0x00000001249930f0: add    %al,(%rax)
  0x00000001249930f2: add    %al,(%rax)
  0x00000001249930f4: add    %al,(%rax)
  0x00000001249930f6: add    %al,(%rax)
  0x00000001249930f8: add    %al,(%rax)
  0x00000001249930fa: add    %al,(%rax)
  0x00000001249930fc: add    %al,(%rax)
  0x00000001249930fe: add    %al,(%rax)

----------------------------------------------------------------------
newarray  188 newarray  [0x0000000124993120, 0x0000000124993200]  224 bytes

  0x0000000124993120: mov    (%rsp),%eax
  0x0000000124993123: add    $0x8,%rsp
  0x0000000124993127: movzbl 0x1(%r13),%esi
  0x000000012499312c: callq  0x0000000124993136
  0x0000000124993131: jmpq   0x00000001249931e3
  0x0000000124993136: mov    %rax,%rdx
  0x0000000124993139: lea    0x8(%rsp),%rax
  0x000000012499313e: mov    %r13,-0x40(%rbp)
  0x0000000124993142: mov    %r15,%rdi
  0x0000000124993145: vzeroupper 
  0x0000000124993148: mov    %rbp,0x330(%r15)
  0x000000012499314f: mov    %rax,0x320(%r15)
  0x0000000124993156: test   $0xf,%esp
  0x000000012499315c: je     0x0000000124993174
  0x0000000124993162: sub    $0x8,%rsp
  0x0000000124993166: callq  0x0000000114baa15a = InterpreterRuntime::newarray(JavaThread*, BasicType, int)
  0x000000012499316b: add    $0x8,%rsp
  0x000000012499316f: jmpq   0x0000000124993179
  0x0000000124993174: callq  0x0000000114baa15a = InterpreterRuntime::newarray(JavaThread*, BasicType, int)
  0x0000000124993179: movabs $0x0,%r10
  0x0000000124993183: mov    %r10,0x320(%r15)
  0x000000012499318a: movabs $0x0,%r10
  0x0000000124993194: mov    %r10,0x330(%r15)
  0x000000012499319b: movabs $0x0,%r10
  0x00000001249931a5: mov    %r10,0x328(%r15)
  0x00000001249931ac: vzeroupper 
  0x00000001249931af: cmpq   $0x0,0x8(%r15)
  0x00000001249931b7: je     0x00000001249931c2
  0x00000001249931bd: jmpq   0x0000000124975780
  0x00000001249931c2: mov    0x380(%r15),%rax
  0x00000001249931c9: movabs $0x0,%r10
  0x00000001249931d3: mov    %r10,0x380(%r15)
  0x00000001249931da: mov    -0x40(%rbp),%r13
  0x00000001249931de: mov    -0x38(%rbp),%r14
  0x00000001249931e2: retq   
  0x00000001249931e3: movzbl 0x2(%r13),%ebx
  0x00000001249931e8: add    $0x2,%r13
  0x00000001249931ec: movabs $0x1151d7220,%r10
  0x00000001249931f6: jmpq   *(%r10,%rbx,8)
  0x00000001249931fa: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
anewarray  189 anewarray  [0x0000000124993220, 0x0000000124993320]  256 bytes

  0x0000000124993220: mov    (%rsp),%eax
  0x0000000124993223: add    $0x8,%rsp
  0x0000000124993227: movzwl 0x1(%r13),%edx
  0x000000012499322c: bswap  %edx
  0x000000012499322e: shr    $0x10,%edx
  0x0000000124993231: mov    -0x18(%rbp),%rsi
  0x0000000124993235: mov    0x8(%rsi),%rsi
  0x0000000124993239: mov    0x8(%rsi),%rsi
  0x000000012499323d: callq  0x0000000124993247
  0x0000000124993242: jmpq   0x00000001249932f4
  0x0000000124993247: mov    %rax,%rcx
  0x000000012499324a: lea    0x8(%rsp),%rax
  0x000000012499324f: mov    %r13,-0x40(%rbp)
  0x0000000124993253: mov    %r15,%rdi
  0x0000000124993256: vzeroupper 
  0x0000000124993259: mov    %rbp,0x330(%r15)
  0x0000000124993260: mov    %rax,0x320(%r15)
  0x0000000124993267: test   $0xf,%esp
  0x000000012499326d: je     0x0000000124993285
  0x0000000124993273: sub    $0x8,%rsp
  0x0000000124993277: callq  0x0000000114baa1e4 = InterpreterRuntime::anewarray(JavaThread*, ConstantPool*, int, int)
  0x000000012499327c: add    $0x8,%rsp
  0x0000000124993280: jmpq   0x000000012499328a
  0x0000000124993285: callq  0x0000000114baa1e4 = InterpreterRuntime::anewarray(JavaThread*, ConstantPool*, int, int)
  0x000000012499328a: movabs $0x0,%r10
  0x0000000124993294: mov    %r10,0x320(%r15)
  0x000000012499329b: movabs $0x0,%r10
  0x00000001249932a5: mov    %r10,0x330(%r15)
  0x00000001249932ac: movabs $0x0,%r10
  0x00000001249932b6: mov    %r10,0x328(%r15)
  0x00000001249932bd: vzeroupper 
  0x00000001249932c0: cmpq   $0x0,0x8(%r15)
  0x00000001249932c8: je     0x00000001249932d3
  0x00000001249932ce: jmpq   0x0000000124975780
  0x00000001249932d3: mov    0x380(%r15),%rax
  0x00000001249932da: movabs $0x0,%r10
  0x00000001249932e4: mov    %r10,0x380(%r15)
  0x00000001249932eb: mov    -0x40(%rbp),%r13
  0x00000001249932ef: mov    -0x38(%rbp),%r14
  0x00000001249932f3: retq   
  0x00000001249932f4: movzbl 0x3(%r13),%ebx
  0x00000001249932f9: add    $0x3,%r13
  0x00000001249932fd: movabs $0x1151d7220,%r10
  0x0000000124993307: jmpq   *(%r10,%rbx,8)
  0x000000012499330b: nopl   0x0(%rax,%rax,1)
  0x0000000124993310: add    %al,(%rax)
  0x0000000124993312: add    %al,(%rax)
  0x0000000124993314: add    %al,(%rax)
  0x0000000124993316: add    %al,(%rax)
  0x0000000124993318: add    %al,(%rax)
  0x000000012499331a: add    %al,(%rax)
  0x000000012499331c: add    %al,(%rax)
  0x000000012499331e: add    %al,(%rax)

----------------------------------------------------------------------
arraylength  190 arraylength  [0x0000000124993340, 0x0000000124993360]  32 bytes

  0x0000000124993340: pop    %rax
  0x0000000124993341: mov    0xc(%rax),%eax
  0x0000000124993344: movzbl 0x1(%r13),%ebx
  0x0000000124993349: inc    %r13
  0x000000012499334c: movabs $0x1151d5220,%r10
  0x0000000124993356: jmpq   *(%r10,%rbx,8)
  0x000000012499335a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
athrow  191 athrow  [0x0000000124993380, 0x00000001249933a0]  32 bytes

  0x0000000124993380: pop    %rax
  0x0000000124993381: cmp    (%rax),%rax
  0x0000000124993384: jmpq   0x0000000124981b73
  0x0000000124993389: nopl   0x0(%rax)
  0x0000000124993390: add    %al,(%rax)
  0x0000000124993392: add    %al,(%rax)
  0x0000000124993394: add    %al,(%rax)
  0x0000000124993396: add    %al,(%rax)
  0x0000000124993398: add    %al,(%rax)
  0x000000012499339a: add    %al,(%rax)
  0x000000012499339c: add    %al,(%rax)
  0x000000012499339e: add    %al,(%rax)

----------------------------------------------------------------------
checkcast  192 checkcast  [0x00000001249933c0, 0x0000000124993600]  576 bytes

  0x00000001249933c0: pop    %rax
  0x00000001249933c1: test   %rax,%rax
  0x00000001249933c4: je     0x00000001249935ce
  0x00000001249933ca: mov    -0x18(%rbp),%rcx
  0x00000001249933ce: mov    0x8(%rcx),%rcx
  0x00000001249933d2: mov    0x8(%rcx),%rcx
  0x00000001249933d6: mov    0x8(%rcx),%rdx
  0x00000001249933da: movzwl 0x1(%r13),%ebx
  0x00000001249933df: bswap  %ebx
  0x00000001249933e1: shr    $0x10,%ebx
  0x00000001249933e4: cmpb   $0x7,0x4(%rdx,%rbx,1)
  0x00000001249933e9: je     0x00000001249934a7
  0x00000001249933ef: push   %rax
  0x00000001249933f0: callq  0x00000001249933fa
  0x00000001249933f5: jmpq   0x000000012499348c
  0x00000001249933fa: lea    0x8(%rsp),%rax
  0x00000001249933ff: mov    %r13,-0x40(%rbp)
  0x0000000124993403: mov    %r15,%rdi
  0x0000000124993406: vzeroupper 
  0x0000000124993409: mov    %rbp,0x330(%r15)
  0x0000000124993410: mov    %rax,0x320(%r15)
  0x0000000124993417: test   $0xf,%esp
  0x000000012499341d: je     0x0000000124993435
  0x0000000124993423: sub    $0x8,%rsp
  0x0000000124993427: callq  0x0000000114baa514 = InterpreterRuntime::quicken_io_cc(JavaThread*)
  0x000000012499342c: add    $0x8,%rsp
  0x0000000124993430: jmpq   0x000000012499343a
  0x0000000124993435: callq  0x0000000114baa514 = InterpreterRuntime::quicken_io_cc(JavaThread*)
  0x000000012499343a: movabs $0x0,%r10
  0x0000000124993444: mov    %r10,0x320(%r15)
  0x000000012499344b: movabs $0x0,%r10
  0x0000000124993455: mov    %r10,0x330(%r15)
  0x000000012499345c: movabs $0x0,%r10
  0x0000000124993466: mov    %r10,0x328(%r15)
  0x000000012499346d: vzeroupper 
  0x0000000124993470: cmpq   $0x0,0x8(%r15)
  0x0000000124993478: je     0x0000000124993483
  0x000000012499347e: jmpq   0x0000000124975780
  0x0000000124993483: mov    -0x40(%rbp),%r13
  0x0000000124993487: mov    -0x38(%rbp),%r14
  0x000000012499348b: retq   
  0x000000012499348c: mov    0x388(%r15),%rax
  0x0000000124993493: movabs $0x0,%r10
  0x000000012499349d: mov    %r10,0x388(%r15)
  0x00000001249934a4: pop    %rdx
  0x00000001249934a5: jmp    0x00000001249934b8
  0x00000001249934a7: mov    %rax,%rdx
  0x00000001249934aa: mov    0x40(%rcx,%rbx,8),%bx
  0x00000001249934af: mov    0x28(%rcx),%rcx
  0x00000001249934b3: mov    0x8(%rcx,%rbx,8),%rax
  0x00000001249934b8: mov    0x8(%rdx),%ebx
  0x00000001249934bb: movabs $0x800000000,%r12
  0x00000001249934c5: add    %r12,%rbx
  0x00000001249934c8: xor    %r12,%r12
  0x00000001249934cb: mov    -0x28(%rbp),%rcx
  0x00000001249934cf: test   %rcx,%rcx
  0x00000001249934d2: je     0x0000000124993562
  0x00000001249934d8: mov    0x18(%rcx),%rdi
  0x00000001249934dc: cmp    %rbx,%rdi
  0x00000001249934df: jne    0x00000001249934f4
  0x00000001249934e5: addq   $0x1,0x20(%rcx)
  0x00000001249934ea: sbbq   $0x0,0x20(%rcx)
  0x00000001249934ef: jmpq   0x000000012499355a
  0x00000001249934f4: test   %rdi,%rdi
  0x00000001249934f7: je     0x0000000124993534
  0x00000001249934fd: mov    0x28(%rcx),%rdi
  0x0000000124993501: cmp    %rbx,%rdi
  0x0000000124993504: jne    0x0000000124993519
  0x000000012499350a: addq   $0x1,0x30(%rcx)
  0x000000012499350f: sbbq   $0x0,0x30(%rcx)
  0x0000000124993514: jmpq   0x000000012499355a
  0x0000000124993519: test   %rdi,%rdi
  0x000000012499351c: jne    0x000000012499355a
  0x0000000124993522: mov    %rbx,0x28(%rcx)
  0x0000000124993526: mov    $0x1,%edi
  0x000000012499352b: mov    %rdi,0x30(%rcx)
  0x000000012499352f: jmpq   0x000000012499355a
  0x0000000124993534: cmp    0x28(%rcx),%rbx
  0x0000000124993538: jne    0x000000012499354d
  0x000000012499353e: addq   $0x1,0x30(%rcx)
  0x0000000124993543: sbbq   $0x0,0x30(%rcx)
  0x0000000124993548: jmpq   0x000000012499355a
  0x000000012499354d: mov    %rbx,0x18(%rcx)
  0x0000000124993551: mov    $0x1,%edi
  0x0000000124993556: mov    %rdi,0x20(%rcx)
  0x000000012499355a: add    $0x38,%rcx
  0x000000012499355e: mov    %rcx,-0x28(%rbp)
  0x0000000124993562: cmp    %rax,%rbx
  0x0000000124993565: je     0x00000001249935c6
  0x000000012499356b: mov    0x10(%rax),%ecx
  0x000000012499356e: cmp    (%rbx,%rcx,1),%rax
  0x0000000124993572: je     0x00000001249935c6
  0x0000000124993578: cmp    $0x20,%ecx
  0x000000012499357b: jne    0x00000001249935a3
  0x0000000124993581: push   %rax
  0x0000000124993582: mov    %rax,%rax
  0x0000000124993585: push   %rdi
  0x0000000124993586: mov    0x28(%rbx),%rdi
  0x000000012499358a: mov    (%rdi),%ecx
  0x000000012499358c: add    $0x8,%rdi
  0x0000000124993590: test   %rax,%rax
  0x0000000124993593: repnz scas %es:(%rdi),%rax
  0x0000000124993596: pop    %rdi
  0x0000000124993597: pop    %rax
  0x0000000124993598: jne    0x00000001249935a3
  0x000000012499359a: mov    %rax,0x20(%rbx)
  0x000000012499359e: jmpq   0x00000001249935c6
  0x00000001249935a3: mov    -0x28(%rbp),%rcx
  0x00000001249935a7: test   %rcx,%rcx
  0x00000001249935aa: je     0x00000001249935c0
  0x00000001249935b0: addq   $0xffffffffffffffff,-0x30(%rcx)
  0x00000001249935b5: js     0x00000001249935c0
  0x00000001249935bb: addq   $0x1,-0x30(%rcx)
  0x00000001249935c0: push   %rdx
  0x00000001249935c1: jmpq   0x0000000124982cf4
  0x00000001249935c6: mov    %rdx,%rax
  0x00000001249935c9: jmpq   0x00000001249935e7
  0x00000001249935ce: mov    -0x28(%rbp),%rcx
  0x00000001249935d2: test   %rcx,%rcx
  0x00000001249935d5: je     0x00000001249935e7
  0x00000001249935db: orb    $0x1,0x1(%rcx)
  0x00000001249935df: add    $0x38,%rcx
  0x00000001249935e3: mov    %rcx,-0x28(%rbp)
  0x00000001249935e7: movzbl 0x3(%r13),%ebx
  0x00000001249935ec: add    $0x3,%r13
  0x00000001249935f0: movabs $0x1151d7220,%r10
  0x00000001249935fa: jmpq   *(%r10,%rbx,8)
  0x00000001249935fe: xchg   %ax,%ax

----------------------------------------------------------------------
instanceof  193 instanceof  [0x0000000124993620, 0x0000000124993880]  608 bytes

  0x0000000124993620: pop    %rax
  0x0000000124993621: test   %rax,%rax
  0x0000000124993624: je     0x000000012499383e
  0x000000012499362a: mov    -0x18(%rbp),%rcx
  0x000000012499362e: mov    0x8(%rcx),%rcx
  0x0000000124993632: mov    0x8(%rcx),%rcx
  0x0000000124993636: mov    0x8(%rcx),%rdx
  0x000000012499363a: movzwl 0x1(%r13),%ebx
  0x000000012499363f: bswap  %ebx
  0x0000000124993641: shr    $0x10,%ebx
  0x0000000124993644: cmpb   $0x7,0x4(%rdx,%rbx,1)
  0x0000000124993649: je     0x000000012499371a
  0x000000012499364f: push   %rax
  0x0000000124993650: callq  0x000000012499365a
  0x0000000124993655: jmpq   0x00000001249936ec
  0x000000012499365a: lea    0x8(%rsp),%rax
  0x000000012499365f: mov    %r13,-0x40(%rbp)
  0x0000000124993663: mov    %r15,%rdi
  0x0000000124993666: vzeroupper 
  0x0000000124993669: mov    %rbp,0x330(%r15)
  0x0000000124993670: mov    %rax,0x320(%r15)
  0x0000000124993677: test   $0xf,%esp
  0x000000012499367d: je     0x0000000124993695
  0x0000000124993683: sub    $0x8,%rsp
  0x0000000124993687: callq  0x0000000114baa514 = InterpreterRuntime::quicken_io_cc(JavaThread*)
  0x000000012499368c: add    $0x8,%rsp
  0x0000000124993690: jmpq   0x000000012499369a
  0x0000000124993695: callq  0x0000000114baa514 = InterpreterRuntime::quicken_io_cc(JavaThread*)
  0x000000012499369a: movabs $0x0,%r10
  0x00000001249936a4: mov    %r10,0x320(%r15)
  0x00000001249936ab: movabs $0x0,%r10
  0x00000001249936b5: mov    %r10,0x330(%r15)
  0x00000001249936bc: movabs $0x0,%r10
  0x00000001249936c6: mov    %r10,0x328(%r15)
  0x00000001249936cd: vzeroupper 
  0x00000001249936d0: cmpq   $0x0,0x8(%r15)
  0x00000001249936d8: je     0x00000001249936e3
  0x00000001249936de: jmpq   0x0000000124975780
  0x00000001249936e3: mov    -0x40(%rbp),%r13
  0x00000001249936e7: mov    -0x38(%rbp),%r14
  0x00000001249936eb: retq   
  0x00000001249936ec: mov    0x388(%r15),%rax
  0x00000001249936f3: movabs $0x0,%r10
  0x00000001249936fd: mov    %r10,0x388(%r15)
  0x0000000124993704: pop    %rdx
  0x0000000124993705: mov    0x8(%rdx),%edx
  0x0000000124993708: movabs $0x800000000,%r12
  0x0000000124993712: add    %r12,%rdx
  0x0000000124993715: xor    %r12,%r12
  0x0000000124993718: jmp    0x000000012499373b
  0x000000012499371a: mov    0x8(%rax),%edx
  0x000000012499371d: movabs $0x800000000,%r12
  0x0000000124993727: add    %r12,%rdx
  0x000000012499372a: xor    %r12,%r12
  0x000000012499372d: mov    0x40(%rcx,%rbx,8),%bx
  0x0000000124993732: mov    0x28(%rcx),%rcx
  0x0000000124993736: mov    0x8(%rcx,%rbx,8),%rax
  0x000000012499373b: mov    -0x28(%rbp),%rcx
  0x000000012499373f: test   %rcx,%rcx
  0x0000000124993742: je     0x00000001249937d2
  0x0000000124993748: mov    0x18(%rcx),%rdi
  0x000000012499374c: cmp    %rdx,%rdi
  0x000000012499374f: jne    0x0000000124993764
  0x0000000124993755: addq   $0x1,0x20(%rcx)
  0x000000012499375a: sbbq   $0x0,0x20(%rcx)
  0x000000012499375f: jmpq   0x00000001249937ca
  0x0000000124993764: test   %rdi,%rdi
  0x0000000124993767: je     0x00000001249937a4
  0x000000012499376d: mov    0x28(%rcx),%rdi
  0x0000000124993771: cmp    %rdx,%rdi
  0x0000000124993774: jne    0x0000000124993789
  0x000000012499377a: addq   $0x1,0x30(%rcx)
  0x000000012499377f: sbbq   $0x0,0x30(%rcx)
  0x0000000124993784: jmpq   0x00000001249937ca
  0x0000000124993789: test   %rdi,%rdi
  0x000000012499378c: jne    0x00000001249937ca
  0x0000000124993792: mov    %rdx,0x28(%rcx)
  0x0000000124993796: mov    $0x1,%edi
  0x000000012499379b: mov    %rdi,0x30(%rcx)
  0x000000012499379f: jmpq   0x00000001249937ca
  0x00000001249937a4: cmp    0x28(%rcx),%rdx
  0x00000001249937a8: jne    0x00000001249937bd
  0x00000001249937ae: addq   $0x1,0x30(%rcx)
  0x00000001249937b3: sbbq   $0x0,0x30(%rcx)
  0x00000001249937b8: jmpq   0x00000001249937ca
  0x00000001249937bd: mov    %rdx,0x18(%rcx)
  0x00000001249937c1: mov    $0x1,%edi
  0x00000001249937c6: mov    %rdi,0x20(%rcx)
  0x00000001249937ca: add    $0x38,%rcx
  0x00000001249937ce: mov    %rcx,-0x28(%rbp)
  0x00000001249937d2: cmp    %rax,%rdx
  0x00000001249937d5: je     0x0000000124993834
  0x00000001249937db: mov    0x10(%rax),%ecx
  0x00000001249937de: cmp    (%rdx,%rcx,1),%rax
  0x00000001249937e2: je     0x0000000124993834
  0x00000001249937e8: cmp    $0x20,%ecx
  0x00000001249937eb: jne    0x0000000124993813
  0x00000001249937f1: push   %rax
  0x00000001249937f2: mov    %rax,%rax
  0x00000001249937f5: push   %rdi
  0x00000001249937f6: mov    0x28(%rdx),%rdi
  0x00000001249937fa: mov    (%rdi),%ecx
  0x00000001249937fc: add    $0x8,%rdi
  0x0000000124993800: test   %rax,%rax
  0x0000000124993803: repnz scas %es:(%rdi),%rax
  0x0000000124993806: pop    %rdi
  0x0000000124993807: pop    %rax
  0x0000000124993808: jne    0x0000000124993813
  0x000000012499380a: mov    %rax,0x20(%rdx)
  0x000000012499380e: jmpq   0x0000000124993834
  0x0000000124993813: mov    -0x28(%rbp),%rcx
  0x0000000124993817: test   %rcx,%rcx
  0x000000012499381a: je     0x0000000124993830
  0x0000000124993820: addq   $0xffffffffffffffff,-0x30(%rcx)
  0x0000000124993825: js     0x0000000124993830
  0x000000012499382b: addq   $0x1,-0x30(%rcx)
  0x0000000124993830: xor    %eax,%eax
  0x0000000124993832: jmp    0x0000000124993857
  0x0000000124993834: mov    $0x1,%eax
  0x0000000124993839: jmpq   0x0000000124993857
  0x000000012499383e: mov    -0x28(%rbp),%rcx
  0x0000000124993842: test   %rcx,%rcx
  0x0000000124993845: je     0x0000000124993857
  0x000000012499384b: orb    $0x1,0x1(%rcx)
  0x000000012499384f: add    $0x38,%rcx
  0x0000000124993853: mov    %rcx,-0x28(%rbp)
  0x0000000124993857: movzbl 0x3(%r13),%ebx
  0x000000012499385c: add    $0x3,%r13
  0x0000000124993860: movabs $0x1151d5220,%r10
  0x000000012499386a: jmpq   *(%r10,%rbx,8)
  0x000000012499386e: xchg   %ax,%ax
  0x0000000124993870: add    %al,(%rax)
  0x0000000124993872: add    %al,(%rax)
  0x0000000124993874: add    %al,(%rax)
  0x0000000124993876: add    %al,(%rax)
  0x0000000124993878: add    %al,(%rax)
  0x000000012499387a: add    %al,(%rax)
  0x000000012499387c: add    %al,(%rax)
  0x000000012499387e: add    %al,(%rax)

----------------------------------------------------------------------
monitorenter  194 monitorenter  [0x00000001249938a0, 0x0000000124993ac0]  544 bytes

  0x00000001249938a0: pop    %rax
  0x00000001249938a1: cmp    (%rax),%rax
  0x00000001249938a4: xor    %esi,%esi
  0x00000001249938a6: mov    -0x48(%rbp),%rcx
  0x00000001249938aa: lea    -0x48(%rbp),%rdx
  0x00000001249938ae: jmp    0x00000001249938c6
  0x00000001249938b0: cmpq   $0x0,0x8(%rcx)
  0x00000001249938b8: cmove  %rcx,%rsi
  0x00000001249938bc: cmp    0x8(%rcx),%rax
  0x00000001249938c0: je     0x00000001249938cb
  0x00000001249938c2: add    $0x10,%rcx
  0x00000001249938c6: cmp    %rdx,%rcx
  0x00000001249938c9: jne    0x00000001249938b0
  0x00000001249938cb: test   %rsi,%rsi
  0x00000001249938ce: jne    0x00000001249938fc
  0x00000001249938d4: mov    -0x48(%rbp),%rsi
  0x00000001249938d8: sub    $0x10,%rsp
  0x00000001249938dc: sub    $0x10,%rsi
  0x00000001249938e0: mov    %rsp,%rcx
  0x00000001249938e3: mov    %rsi,-0x48(%rbp)
  0x00000001249938e7: jmpq   0x00000001249938f7
  0x00000001249938ec: mov    0x10(%rcx),%rdx
  0x00000001249938f0: mov    %rdx,(%rcx)
  0x00000001249938f3: add    $0x8,%rcx
  0x00000001249938f7: cmp    %rsi,%rcx
  0x00000001249938fa: jne    0x00000001249938ec
  0x00000001249938fc: inc    %r13
  0x00000001249938ff: mov    %rax,0x8(%rsi)
  0x0000000124993903: mov    0x8(%rsi),%rcx
  0x0000000124993907: mov    (%rcx),%rax
  0x000000012499390a: mov    %rax,%rbx
  0x000000012499390d: and    $0x7,%rbx
  0x0000000124993911: cmp    $0x5,%rbx
  0x0000000124993915: jne    0x00000001249939c0
  0x000000012499391b: mov    0x8(%rcx),%ebx
  0x000000012499391e: movabs $0x800000000,%r12
  0x0000000124993928: add    %r12,%rbx
  0x000000012499392b: xor    %r12,%r12
  0x000000012499392e: mov    0xb8(%rbx),%rbx
  0x0000000124993935: or     %r15,%rbx
  0x0000000124993938: xor    %rax,%rbx
  0x000000012499393b: and    $0xffffffffffffff87,%rbx
  0x000000012499393f: je     0x0000000124993a85
  0x0000000124993945: test   $0x7,%rbx
  0x000000012499394c: jne    0x00000001249939a1
  0x000000012499394e: test   $0x300,%rbx
  0x0000000124993955: jne    0x0000000124993974
  0x0000000124993957: and    $0x37f,%rax
  0x000000012499395e: mov    %rax,%rbx
  0x0000000124993961: or     %r15,%rbx
  0x0000000124993964: lock cmpxchg %rbx,(%rcx)
  0x0000000124993969: jne    0x00000001249939e9
  0x000000012499396f: jmpq   0x0000000124993a85
  0x0000000124993974: mov    0x8(%rcx),%ebx
  0x0000000124993977: movabs $0x800000000,%r12
  0x0000000124993981: add    %r12,%rbx
  0x0000000124993984: xor    %r12,%r12
  0x0000000124993987: mov    0xb8(%rbx),%rbx
  0x000000012499398e: or     %r15,%rbx
  0x0000000124993991: lock cmpxchg %rbx,(%rcx)
  0x0000000124993996: jne    0x00000001249939e9
  0x000000012499399c: jmpq   0x0000000124993a85
  0x00000001249939a1: mov    0x8(%rcx),%ebx
  0x00000001249939a4: movabs $0x800000000,%r12
  0x00000001249939ae: add    %r12,%rbx
  0x00000001249939b1: xor    %r12,%r12
  0x00000001249939b4: mov    0xb8(%rbx),%rbx
  0x00000001249939bb: lock cmpxchg %rbx,(%rcx)
  0x00000001249939c0: mov    $0x1,%eax
  0x00000001249939c5: or     (%rcx),%rax
  0x00000001249939c8: mov    %rax,(%rsi)
  0x00000001249939cb: lock cmpxchg %rsi,(%rcx)
  0x00000001249939d0: je     0x0000000124993a85
  0x00000001249939d6: sub    %rsp,%rax
  0x00000001249939d9: and    $0xfffffffffffff007,%rax
  0x00000001249939e0: mov    %rax,(%rsi)
  0x00000001249939e3: je     0x0000000124993a85
  0x00000001249939e9: callq  0x00000001249939f3
  0x00000001249939ee: jmpq   0x0000000124993a85
  0x00000001249939f3: lea    0x8(%rsp),%rax
  0x00000001249939f8: mov    %r13,-0x40(%rbp)
  0x00000001249939fc: mov    %r15,%rdi
  0x00000001249939ff: vzeroupper 
  0x0000000124993a02: mov    %rbp,0x330(%r15)
  0x0000000124993a09: mov    %rax,0x320(%r15)
  0x0000000124993a10: test   $0xf,%esp
  0x0000000124993a16: je     0x0000000124993a2e
  0x0000000124993a1c: sub    $0x8,%rsp
  0x0000000124993a20: callq  0x0000000114babba4 = InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*)
  0x0000000124993a25: add    $0x8,%rsp
  0x0000000124993a29: jmpq   0x0000000124993a33
  0x0000000124993a2e: callq  0x0000000114babba4 = InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*)
  0x0000000124993a33: movabs $0x0,%r10
  0x0000000124993a3d: mov    %r10,0x320(%r15)
  0x0000000124993a44: movabs $0x0,%r10
  0x0000000124993a4e: mov    %r10,0x330(%r15)
  0x0000000124993a55: movabs $0x0,%r10
  0x0000000124993a5f: mov    %r10,0x328(%r15)
  0x0000000124993a66: vzeroupper 
  0x0000000124993a69: cmpq   $0x0,0x8(%r15)
  0x0000000124993a71: je     0x0000000124993a7c
  0x0000000124993a77: jmpq   0x0000000124975780
  0x0000000124993a7c: mov    -0x40(%rbp),%r13
  0x0000000124993a80: mov    -0x38(%rbp),%r14
  0x0000000124993a84: retq   
  0x0000000124993a85: mov    %r13,-0x40(%rbp)
  0x0000000124993a89: mov    %eax,-0x14000(%rsp)
  0x0000000124993a90: movzbl 0x0(%r13),%ebx
  0x0000000124993a95: movabs $0x1151d7a20,%r10
  0x0000000124993a9f: jmpq   *(%r10,%rbx,8)
  0x0000000124993aa3: nopl   0x0(%rax,%rax,1)
  0x0000000124993aa8: add    %al,(%rax)
  0x0000000124993aaa: add    %al,(%rax)
  0x0000000124993aac: add    %al,(%rax)
  0x0000000124993aae: add    %al,(%rax)
  0x0000000124993ab0: add    %al,(%rax)
  0x0000000124993ab2: add    %al,(%rax)
  0x0000000124993ab4: add    %al,(%rax)
  0x0000000124993ab6: add    %al,(%rax)
  0x0000000124993ab8: add    %al,(%rax)
  0x0000000124993aba: add    %al,(%rax)
  0x0000000124993abc: add    %al,(%rax)
  0x0000000124993abe: add    %al,(%rax)

----------------------------------------------------------------------
monitorexit  195 monitorexit  [0x0000000124993ae0, 0x0000000124993cc0]  480 bytes

  0x0000000124993ae0: pop    %rax
  0x0000000124993ae1: cmp    (%rax),%rax
  0x0000000124993ae4: mov    -0x48(%rbp),%rsi
  0x0000000124993ae8: lea    -0x48(%rbp),%rdx
  0x0000000124993aec: jmp    0x0000000124993afc
  0x0000000124993aee: cmp    0x8(%rsi),%rax
  0x0000000124993af2: je     0x0000000124993bb1
  0x0000000124993af8: add    $0x10,%rsi
  0x0000000124993afc: cmp    %rdx,%rsi
  0x0000000124993aff: jne    0x0000000124993aee
  0x0000000124993b01: callq  0x0000000124993b0b
  0x0000000124993b06: jmpq   0x0000000124993b9d
  0x0000000124993b0b: lea    0x8(%rsp),%rax
  0x0000000124993b10: mov    %r13,-0x40(%rbp)
  0x0000000124993b14: mov    %r15,%rdi
  0x0000000124993b17: vzeroupper 
  0x0000000124993b1a: mov    %rbp,0x330(%r15)
  0x0000000124993b21: mov    %rax,0x320(%r15)
  0x0000000124993b28: test   $0xf,%esp
  0x0000000124993b2e: je     0x0000000124993b46
  0x0000000124993b34: sub    $0x8,%rsp
  0x0000000124993b38: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x0000000124993b3d: add    $0x8,%rsp
  0x0000000124993b41: jmpq   0x0000000124993b4b
  0x0000000124993b46: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x0000000124993b4b: movabs $0x0,%r10
  0x0000000124993b55: mov    %r10,0x320(%r15)
  0x0000000124993b5c: movabs $0x0,%r10
  0x0000000124993b66: mov    %r10,0x330(%r15)
  0x0000000124993b6d: movabs $0x0,%r10
  0x0000000124993b77: mov    %r10,0x328(%r15)
  0x0000000124993b7e: vzeroupper 
  0x0000000124993b81: cmpq   $0x0,0x8(%r15)
  0x0000000124993b89: je     0x0000000124993b94
  0x0000000124993b8f: jmpq   0x0000000124975780
  0x0000000124993b94: mov    -0x40(%rbp),%r13
  0x0000000124993b98: mov    -0x38(%rbp),%r14
  0x0000000124993b9c: retq   
  0x0000000124993b9d: movabs $0x114ff3493,%rdi
  0x0000000124993ba7: and    $0xfffffffffffffff0,%rsp
  0x0000000124993bab: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124993bb0: hlt    
  0x0000000124993bb1: push   %rax
  0x0000000124993bb2: mov    %r13,-0x40(%rbp)
  0x0000000124993bb6: lea    (%rsi),%rax
  0x0000000124993bb9: mov    0x8(%rsi),%rcx
  0x0000000124993bbd: movq   $0x0,0x8(%rsi)
  0x0000000124993bc5: mov    (%rcx),%rdx
  0x0000000124993bc8: and    $0x7,%rdx
  0x0000000124993bcc: cmp    $0x5,%rdx
  0x0000000124993bd0: je     0x0000000124993c8d
  0x0000000124993bd6: mov    (%rax),%rdx
  0x0000000124993bd9: test   %rdx,%rdx
  0x0000000124993bdc: je     0x0000000124993c8d
  0x0000000124993be2: lock cmpxchg %rdx,(%rcx)
  0x0000000124993be7: je     0x0000000124993c8d
  0x0000000124993bed: mov    %rcx,0x8(%rsi)
  0x0000000124993bf1: callq  0x0000000124993bfb
  0x0000000124993bf6: jmpq   0x0000000124993c8d
  0x0000000124993bfb: lea    0x8(%rsp),%rax
  0x0000000124993c00: mov    %r13,-0x40(%rbp)
  0x0000000124993c04: mov    %r15,%rdi
  0x0000000124993c07: vzeroupper 
  0x0000000124993c0a: mov    %rbp,0x330(%r15)
  0x0000000124993c11: mov    %rax,0x320(%r15)
  0x0000000124993c18: test   $0xf,%esp
  0x0000000124993c1e: je     0x0000000124993c36
  0x0000000124993c24: sub    $0x8,%rsp
  0x0000000124993c28: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x0000000124993c2d: add    $0x8,%rsp
  0x0000000124993c31: jmpq   0x0000000124993c3b
  0x0000000124993c36: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x0000000124993c3b: movabs $0x0,%r10
  0x0000000124993c45: mov    %r10,0x320(%r15)
  0x0000000124993c4c: movabs $0x0,%r10
  0x0000000124993c56: mov    %r10,0x330(%r15)
  0x0000000124993c5d: movabs $0x0,%r10
  0x0000000124993c67: mov    %r10,0x328(%r15)
  0x0000000124993c6e: vzeroupper 
  0x0000000124993c71: cmpq   $0x0,0x8(%r15)
  0x0000000124993c79: je     0x0000000124993c84
  0x0000000124993c7f: jmpq   0x0000000124975780
  0x0000000124993c84: mov    -0x40(%rbp),%r13
  0x0000000124993c88: mov    -0x38(%rbp),%r14
  0x0000000124993c8c: retq   
  0x0000000124993c8d: mov    -0x40(%rbp),%r13
  0x0000000124993c91: pop    %rax
  0x0000000124993c92: movzbl 0x1(%r13),%ebx
  0x0000000124993c97: inc    %r13
  0x0000000124993c9a: movabs $0x1151d7a20,%r10
  0x0000000124993ca4: jmpq   *(%r10,%rbx,8)
  0x0000000124993ca8: add    %al,(%rax)
  0x0000000124993caa: add    %al,(%rax)
  0x0000000124993cac: add    %al,(%rax)
  0x0000000124993cae: add    %al,(%rax)
  0x0000000124993cb0: add    %al,(%rax)
  0x0000000124993cb2: add    %al,(%rax)
  0x0000000124993cb4: add    %al,(%rax)
  0x0000000124993cb6: add    %al,(%rax)
  0x0000000124993cb8: add    %al,(%rax)
  0x0000000124993cba: add    %al,(%rax)
  0x0000000124993cbc: add    %al,(%rax)
  0x0000000124993cbe: add    %al,(%rax)

----------------------------------------------------------------------
wide  196 wide  [0x0000000124993ce0, 0x0000000124993d40]  96 bytes

  0x0000000124993ce0: push   %rax
  0x0000000124993ce1: jmpq   0x0000000124993d1f
  0x0000000124993ce6: sub    $0x8,%rsp
  0x0000000124993cea: vmovss %xmm0,(%rsp)
  0x0000000124993cef: jmpq   0x0000000124993d1f
  0x0000000124993cf4: sub    $0x10,%rsp
  0x0000000124993cf8: vmovsd %xmm0,(%rsp)
  0x0000000124993cfd: jmpq   0x0000000124993d1f
  0x0000000124993d02: sub    $0x10,%rsp
  0x0000000124993d06: mov    %rax,(%rsp)
  0x0000000124993d0a: movabs $0x0,%r10
  0x0000000124993d14: mov    %r10,0x8(%rsp)
  0x0000000124993d19: jmpq   0x0000000124993d1f
  0x0000000124993d1e: push   %rax
  0x0000000124993d1f: movzbl 0x1(%r13),%ebx
  0x0000000124993d24: movabs $0x1151dd820,%r10
  0x0000000124993d2e: jmpq   *(%r10,%rbx,8)
  0x0000000124993d32: nopw   0x0(%rax,%rax,1)
  0x0000000124993d38: add    %al,(%rax)
  0x0000000124993d3a: add    %al,(%rax)
  0x0000000124993d3c: add    %al,(%rax)
  0x0000000124993d3e: add    %al,(%rax)

----------------------------------------------------------------------
multianewarray  197 multianewarray  [0x0000000124993d60, 0x0000000124993e80]  288 bytes

  0x0000000124993d60: push   %rax
  0x0000000124993d61: jmpq   0x0000000124993d9f
  0x0000000124993d66: sub    $0x8,%rsp
  0x0000000124993d6a: vmovss %xmm0,(%rsp)
  0x0000000124993d6f: jmpq   0x0000000124993d9f
  0x0000000124993d74: sub    $0x10,%rsp
  0x0000000124993d78: vmovsd %xmm0,(%rsp)
  0x0000000124993d7d: jmpq   0x0000000124993d9f
  0x0000000124993d82: sub    $0x10,%rsp
  0x0000000124993d86: mov    %rax,(%rsp)
  0x0000000124993d8a: movabs $0x0,%r10
  0x0000000124993d94: mov    %r10,0x8(%rsp)
  0x0000000124993d99: jmpq   0x0000000124993d9f
  0x0000000124993d9e: push   %rax
  0x0000000124993d9f: movzbl 0x3(%r13),%eax
  0x0000000124993da4: lea    -0x8(%rsp,%rax,8),%rsi
  0x0000000124993da9: callq  0x0000000124993db3
  0x0000000124993dae: jmpq   0x0000000124993e5d
  0x0000000124993db3: lea    0x8(%rsp),%rax
  0x0000000124993db8: mov    %r13,-0x40(%rbp)
  0x0000000124993dbc: mov    %r15,%rdi
  0x0000000124993dbf: vzeroupper 
  0x0000000124993dc2: mov    %rbp,0x330(%r15)
  0x0000000124993dc9: mov    %rax,0x320(%r15)
  0x0000000124993dd0: test   $0xf,%esp
  0x0000000124993dd6: je     0x0000000124993dee
  0x0000000124993ddc: sub    $0x8,%rsp
  0x0000000124993de0: callq  0x0000000114baa288 = InterpreterRuntime::multianewarray(JavaThread*, int*)
  0x0000000124993de5: add    $0x8,%rsp
  0x0000000124993de9: jmpq   0x0000000124993df3
  0x0000000124993dee: callq  0x0000000114baa288 = InterpreterRuntime::multianewarray(JavaThread*, int*)
  0x0000000124993df3: movabs $0x0,%r10
  0x0000000124993dfd: mov    %r10,0x320(%r15)
  0x0000000124993e04: movabs $0x0,%r10
  0x0000000124993e0e: mov    %r10,0x330(%r15)
  0x0000000124993e15: movabs $0x0,%r10
  0x0000000124993e1f: mov    %r10,0x328(%r15)
  0x0000000124993e26: vzeroupper 
  0x0000000124993e29: cmpq   $0x0,0x8(%r15)
  0x0000000124993e31: je     0x0000000124993e3c
  0x0000000124993e37: jmpq   0x0000000124975780
  0x0000000124993e3c: mov    0x380(%r15),%rax
  0x0000000124993e43: movabs $0x0,%r10
  0x0000000124993e4d: mov    %r10,0x380(%r15)
  0x0000000124993e54: mov    -0x40(%rbp),%r13
  0x0000000124993e58: mov    -0x38(%rbp),%r14
  0x0000000124993e5c: retq   
  0x0000000124993e5d: movzbl 0x3(%r13),%ebx
  0x0000000124993e62: lea    (%rsp,%rbx,8),%rsp
  0x0000000124993e66: movzbl 0x4(%r13),%ebx
  0x0000000124993e6b: add    $0x4,%r13
  0x0000000124993e6f: movabs $0x1151d7220,%r10
  0x0000000124993e79: jmpq   *(%r10,%rbx,8)
  0x0000000124993e7d: data16 xchg %ax,%ax

----------------------------------------------------------------------
ifnull  198 ifnull  [0x0000000124993ea0, 0x00000001249942c0]  1056 bytes

  0x0000000124993ea0: pop    %rax
  0x0000000124993ea1: test   %rax,%rax
  0x0000000124993ea4: jne    0x0000000124994272
  0x0000000124993eaa: mov    -0x18(%rbp),%rcx
  0x0000000124993eae: mov    -0x28(%rbp),%rax
  0x0000000124993eb2: test   %rax,%rax
  0x0000000124993eb5: je     0x0000000124993ed3
  0x0000000124993ebb: mov    0x8(%rax),%rbx
  0x0000000124993ebf: add    $0x1,%rbx
  0x0000000124993ec3: sbb    $0x0,%rbx
  0x0000000124993ec7: mov    %rbx,0x8(%rax)
  0x0000000124993ecb: add    0x10(%rax),%rax
  0x0000000124993ecf: mov    %rax,-0x28(%rbp)
  0x0000000124993ed3: movswl 0x1(%r13),%edx
  0x0000000124993ed8: bswap  %edx
  0x0000000124993eda: sar    $0x10,%edx
  0x0000000124993edd: movslq %edx,%rdx
  0x0000000124993ee0: add    %rdx,%r13
  0x0000000124993ee3: test   %edx,%edx
  0x0000000124993ee5: jns    0x0000000124993fe7
  0x0000000124993eeb: mov    0x18(%rcx),%rax
  0x0000000124993eef: test   %rax,%rax
  0x0000000124993ef2: jne    0x0000000124993fa8
  0x0000000124993ef8: push   %rdx
  0x0000000124993ef9: push   %rcx
  0x0000000124993efa: callq  0x0000000124993f04
  0x0000000124993eff: jmpq   0x0000000124993f99
  0x0000000124993f04: mov    %rcx,%rsi
  0x0000000124993f07: lea    0x8(%rsp),%rax
  0x0000000124993f0c: mov    %r13,-0x40(%rbp)
  0x0000000124993f10: mov    %r15,%rdi
  0x0000000124993f13: vzeroupper 
  0x0000000124993f16: mov    %rbp,0x330(%r15)
  0x0000000124993f1d: mov    %rax,0x320(%r15)
  0x0000000124993f24: test   $0xf,%esp
  0x0000000124993f2a: je     0x0000000124993f42
  0x0000000124993f30: sub    $0x8,%rsp
  0x0000000124993f34: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x0000000124993f39: add    $0x8,%rsp
  0x0000000124993f3d: jmpq   0x0000000124993f47
  0x0000000124993f42: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x0000000124993f47: movabs $0x0,%r10
  0x0000000124993f51: mov    %r10,0x320(%r15)
  0x0000000124993f58: movabs $0x0,%r10
  0x0000000124993f62: mov    %r10,0x330(%r15)
  0x0000000124993f69: movabs $0x0,%r10
  0x0000000124993f73: mov    %r10,0x328(%r15)
  0x0000000124993f7a: vzeroupper 
  0x0000000124993f7d: cmpq   $0x0,0x8(%r15)
  0x0000000124993f85: je     0x0000000124993f90
  0x0000000124993f8b: jmpq   0x0000000124975780
  0x0000000124993f90: mov    -0x40(%rbp),%r13
  0x0000000124993f94: mov    -0x38(%rbp),%r14
  0x0000000124993f98: retq   
  0x0000000124993f99: pop    %rcx
  0x0000000124993f9a: pop    %rdx
  0x0000000124993f9b: mov    0x18(%rcx),%rax
  0x0000000124993f9f: test   %rax,%rax
  0x0000000124993fa2: je     0x0000000124993fe7
  0x0000000124993fa8: mov    0x10(%rcx),%rbx
  0x0000000124993fac: test   %rbx,%rbx
  0x0000000124993faf: je     0x0000000124993fd1
  0x0000000124993fb1: mov    0x108(%rbx),%eax
  0x0000000124993fb7: add    $0x8,%eax
  0x0000000124993fba: mov    %eax,0x108(%rbx)
  0x0000000124993fc0: and    0x11c(%rbx),%eax
  0x0000000124993fc6: je     0x0000000124994101
  0x0000000124993fcc: jmpq   0x0000000124993fe7
  0x0000000124993fd1: mov    0x18(%rcx),%rcx
  0x0000000124993fd5: mov    0x1c(%rcx),%eax
  0x0000000124993fd8: add    $0x8,%eax
  0x0000000124993fdb: mov    %eax,0x1c(%rcx)
  0x0000000124993fde: and    0x34(%rcx),%eax
  0x0000000124993fe1: je     0x0000000124994101
  0x0000000124993fe7: movzbl 0x0(%r13),%ebx
  0x0000000124993fec: testb  $0x8,0x108(%r15)
  0x0000000124993ff4: je     0x0000000124994002
  0x0000000124993ff6: movabs $0x1151dd020,%r10
  0x0000000124994000: jmp    0x000000012499400c
  0x0000000124994002: movabs $0x1151d7a20,%r10
  0x000000012499400c: jmpq   *(%r10,%rbx,8)
  0x0000000124994010: callq  0x000000012499401a
  0x0000000124994015: jmpq   0x00000001249940ac
  0x000000012499401a: lea    0x8(%rsp),%rax
  0x000000012499401f: mov    %r13,-0x40(%rbp)
  0x0000000124994023: mov    %r15,%rdi
  0x0000000124994026: vzeroupper 
  0x0000000124994029: mov    %rbp,0x330(%r15)
  0x0000000124994030: mov    %rax,0x320(%r15)
  0x0000000124994037: test   $0xf,%esp
  0x000000012499403d: je     0x0000000124994055
  0x0000000124994043: sub    $0x8,%rsp
  0x0000000124994047: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012499404c: add    $0x8,%rsp
  0x0000000124994050: jmpq   0x000000012499405a
  0x0000000124994055: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012499405a: movabs $0x0,%r10
  0x0000000124994064: mov    %r10,0x320(%r15)
  0x000000012499406b: movabs $0x0,%r10
  0x0000000124994075: mov    %r10,0x330(%r15)
  0x000000012499407c: movabs $0x0,%r10
  0x0000000124994086: mov    %r10,0x328(%r15)
  0x000000012499408d: vzeroupper 
  0x0000000124994090: cmpq   $0x0,0x8(%r15)
  0x0000000124994098: je     0x00000001249940a3
  0x000000012499409e: jmpq   0x0000000124975780
  0x00000001249940a3: mov    -0x40(%rbp),%r13
  0x00000001249940a7: mov    -0x38(%rbp),%r14
  0x00000001249940ab: retq   
  0x00000001249940ac: push   %rax
  0x00000001249940ad: push   %rbx
  0x00000001249940ae: mov    -0x18(%rbp),%rbx
  0x00000001249940b2: mov    0x10(%rbx),%rax
  0x00000001249940b6: test   %rax,%rax
  0x00000001249940b9: je     0x00000001249940f6
  0x00000001249940bf: mov    %r13,%rsi
  0x00000001249940c2: mov    %rbx,%rdi
  0x00000001249940c5: test   $0xf,%esp
  0x00000001249940cb: je     0x00000001249940e3
  0x00000001249940d1: sub    $0x8,%rsp
  0x00000001249940d5: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00000001249940da: add    $0x8,%rsp
  0x00000001249940de: jmpq   0x00000001249940e8
  0x00000001249940e3: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00000001249940e8: mov    0x10(%rbx),%rbx
  0x00000001249940ec: add    $0x138,%rbx
  0x00000001249940f3: add    %rbx,%rax
  0x00000001249940f6: mov    %rax,-0x28(%rbp)
  0x00000001249940fa: pop    %rbx
  0x00000001249940fb: pop    %rax
  0x00000001249940fc: jmpq   0x0000000124993fe7
  0x0000000124994101: neg    %rdx
  0x0000000124994104: add    %r13,%rdx
  0x0000000124994107: callq  0x0000000124994111
  0x000000012499410c: jmpq   0x00000001249941a6
  0x0000000124994111: mov    %rdx,%rsi
  0x0000000124994114: lea    0x8(%rsp),%rax
  0x0000000124994119: mov    %r13,-0x40(%rbp)
  0x000000012499411d: mov    %r15,%rdi
  0x0000000124994120: vzeroupper 
  0x0000000124994123: mov    %rbp,0x330(%r15)
  0x000000012499412a: mov    %rax,0x320(%r15)
  0x0000000124994131: test   $0xf,%esp
  0x0000000124994137: je     0x000000012499414f
  0x000000012499413d: sub    $0x8,%rsp
  0x0000000124994141: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x0000000124994146: add    $0x8,%rsp
  0x000000012499414a: jmpq   0x0000000124994154
  0x000000012499414f: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x0000000124994154: movabs $0x0,%r10
  0x000000012499415e: mov    %r10,0x320(%r15)
  0x0000000124994165: movabs $0x0,%r10
  0x000000012499416f: mov    %r10,0x330(%r15)
  0x0000000124994176: movabs $0x0,%r10
  0x0000000124994180: mov    %r10,0x328(%r15)
  0x0000000124994187: vzeroupper 
  0x000000012499418a: cmpq   $0x0,0x8(%r15)
  0x0000000124994192: je     0x000000012499419d
  0x0000000124994198: jmpq   0x0000000124975780
  0x000000012499419d: mov    -0x40(%rbp),%r13
  0x00000001249941a1: mov    -0x38(%rbp),%r14
  0x00000001249941a5: retq   
  0x00000001249941a6: test   %rax,%rax
  0x00000001249941a9: je     0x0000000124993fe7
  0x00000001249941af: cmpb   $0x0,0x156(%rax)
  0x00000001249941b6: jne    0x0000000124993fe7
  0x00000001249941bc: mov    %rax,%rbx
  0x00000001249941bf: callq  0x00000001249941c9
  0x00000001249941c4: jmpq   0x000000012499425b
  0x00000001249941c9: lea    0x8(%rsp),%rax
  0x00000001249941ce: mov    %r13,-0x40(%rbp)
  0x00000001249941d2: mov    %r15,%rdi
  0x00000001249941d5: vzeroupper 
  0x00000001249941d8: mov    %rbp,0x330(%r15)
  0x00000001249941df: mov    %rax,0x320(%r15)
  0x00000001249941e6: test   $0xf,%esp
  0x00000001249941ec: je     0x0000000124994204
  0x00000001249941f2: sub    $0x8,%rsp
  0x00000001249941f6: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00000001249941fb: add    $0x8,%rsp
  0x00000001249941ff: jmpq   0x0000000124994209
  0x0000000124994204: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x0000000124994209: movabs $0x0,%r10
  0x0000000124994213: mov    %r10,0x320(%r15)
  0x000000012499421a: movabs $0x0,%r10
  0x0000000124994224: mov    %r10,0x330(%r15)
  0x000000012499422b: movabs $0x0,%r10
  0x0000000124994235: mov    %r10,0x328(%r15)
  0x000000012499423c: vzeroupper 
  0x000000012499423f: cmpq   $0x0,0x8(%r15)
  0x0000000124994247: je     0x0000000124994252
  0x000000012499424d: jmpq   0x0000000124975780
  0x0000000124994252: mov    -0x40(%rbp),%r13
  0x0000000124994256: mov    -0x38(%rbp),%r14
  0x000000012499425a: retq   
  0x000000012499425b: mov    %rax,%rsi
  0x000000012499425e: mov    -0x8(%rbp),%rdx
  0x0000000124994262: leaveq 
  0x0000000124994263: pop    %rcx
  0x0000000124994264: mov    %rdx,%rsp
  0x0000000124994267: and    $0xfffffffffffffff0,%rsp
  0x000000012499426b: push   %rcx
  0x000000012499426c: jmpq   *0x110(%rbx)
  0x0000000124994272: mov    -0x28(%rbp),%rax
  0x0000000124994276: test   %rax,%rax
  0x0000000124994279: je     0x0000000124994291
  0x000000012499427f: addq   $0x1,0x18(%rax)
  0x0000000124994284: sbbq   $0x0,0x18(%rax)
  0x0000000124994289: add    $0x20,%rax
  0x000000012499428d: mov    %rax,-0x28(%rbp)
  0x0000000124994291: movzbl 0x3(%r13),%ebx
  0x0000000124994296: add    $0x3,%r13
  0x000000012499429a: movabs $0x1151d7a20,%r10
  0x00000001249942a4: jmpq   *(%r10,%rbx,8)
  0x00000001249942a8: add    %al,(%rax)
  0x00000001249942aa: add    %al,(%rax)
  0x00000001249942ac: add    %al,(%rax)
  0x00000001249942ae: add    %al,(%rax)
  0x00000001249942b0: add    %al,(%rax)
  0x00000001249942b2: add    %al,(%rax)
  0x00000001249942b4: add    %al,(%rax)
  0x00000001249942b6: add    %al,(%rax)
  0x00000001249942b8: add    %al,(%rax)
  0x00000001249942ba: add    %al,(%rax)
  0x00000001249942bc: add    %al,(%rax)
  0x00000001249942be: add    %al,(%rax)

----------------------------------------------------------------------
ifnonnull  199 ifnonnull  [0x00000001249942e0, 0x0000000124994700]  1056 bytes

  0x00000001249942e0: pop    %rax
  0x00000001249942e1: test   %rax,%rax
  0x00000001249942e4: je     0x00000001249946b2
  0x00000001249942ea: mov    -0x18(%rbp),%rcx
  0x00000001249942ee: mov    -0x28(%rbp),%rax
  0x00000001249942f2: test   %rax,%rax
  0x00000001249942f5: je     0x0000000124994313
  0x00000001249942fb: mov    0x8(%rax),%rbx
  0x00000001249942ff: add    $0x1,%rbx
  0x0000000124994303: sbb    $0x0,%rbx
  0x0000000124994307: mov    %rbx,0x8(%rax)
  0x000000012499430b: add    0x10(%rax),%rax
  0x000000012499430f: mov    %rax,-0x28(%rbp)
  0x0000000124994313: movswl 0x1(%r13),%edx
  0x0000000124994318: bswap  %edx
  0x000000012499431a: sar    $0x10,%edx
  0x000000012499431d: movslq %edx,%rdx
  0x0000000124994320: add    %rdx,%r13
  0x0000000124994323: test   %edx,%edx
  0x0000000124994325: jns    0x0000000124994427
  0x000000012499432b: mov    0x18(%rcx),%rax
  0x000000012499432f: test   %rax,%rax
  0x0000000124994332: jne    0x00000001249943e8
  0x0000000124994338: push   %rdx
  0x0000000124994339: push   %rcx
  0x000000012499433a: callq  0x0000000124994344
  0x000000012499433f: jmpq   0x00000001249943d9
  0x0000000124994344: mov    %rcx,%rsi
  0x0000000124994347: lea    0x8(%rsp),%rax
  0x000000012499434c: mov    %r13,-0x40(%rbp)
  0x0000000124994350: mov    %r15,%rdi
  0x0000000124994353: vzeroupper 
  0x0000000124994356: mov    %rbp,0x330(%r15)
  0x000000012499435d: mov    %rax,0x320(%r15)
  0x0000000124994364: test   $0xf,%esp
  0x000000012499436a: je     0x0000000124994382
  0x0000000124994370: sub    $0x8,%rsp
  0x0000000124994374: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x0000000124994379: add    $0x8,%rsp
  0x000000012499437d: jmpq   0x0000000124994387
  0x0000000124994382: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x0000000124994387: movabs $0x0,%r10
  0x0000000124994391: mov    %r10,0x320(%r15)
  0x0000000124994398: movabs $0x0,%r10
  0x00000001249943a2: mov    %r10,0x330(%r15)
  0x00000001249943a9: movabs $0x0,%r10
  0x00000001249943b3: mov    %r10,0x328(%r15)
  0x00000001249943ba: vzeroupper 
  0x00000001249943bd: cmpq   $0x0,0x8(%r15)
  0x00000001249943c5: je     0x00000001249943d0
  0x00000001249943cb: jmpq   0x0000000124975780
  0x00000001249943d0: mov    -0x40(%rbp),%r13
  0x00000001249943d4: mov    -0x38(%rbp),%r14
  0x00000001249943d8: retq   
  0x00000001249943d9: pop    %rcx
  0x00000001249943da: pop    %rdx
  0x00000001249943db: mov    0x18(%rcx),%rax
  0x00000001249943df: test   %rax,%rax
  0x00000001249943e2: je     0x0000000124994427
  0x00000001249943e8: mov    0x10(%rcx),%rbx
  0x00000001249943ec: test   %rbx,%rbx
  0x00000001249943ef: je     0x0000000124994411
  0x00000001249943f1: mov    0x108(%rbx),%eax
  0x00000001249943f7: add    $0x8,%eax
  0x00000001249943fa: mov    %eax,0x108(%rbx)
  0x0000000124994400: and    0x11c(%rbx),%eax
  0x0000000124994406: je     0x0000000124994541
  0x000000012499440c: jmpq   0x0000000124994427
  0x0000000124994411: mov    0x18(%rcx),%rcx
  0x0000000124994415: mov    0x1c(%rcx),%eax
  0x0000000124994418: add    $0x8,%eax
  0x000000012499441b: mov    %eax,0x1c(%rcx)
  0x000000012499441e: and    0x34(%rcx),%eax
  0x0000000124994421: je     0x0000000124994541
  0x0000000124994427: movzbl 0x0(%r13),%ebx
  0x000000012499442c: testb  $0x8,0x108(%r15)
  0x0000000124994434: je     0x0000000124994442
  0x0000000124994436: movabs $0x1151dd020,%r10
  0x0000000124994440: jmp    0x000000012499444c
  0x0000000124994442: movabs $0x1151d7a20,%r10
  0x000000012499444c: jmpq   *(%r10,%rbx,8)
  0x0000000124994450: callq  0x000000012499445a
  0x0000000124994455: jmpq   0x00000001249944ec
  0x000000012499445a: lea    0x8(%rsp),%rax
  0x000000012499445f: mov    %r13,-0x40(%rbp)
  0x0000000124994463: mov    %r15,%rdi
  0x0000000124994466: vzeroupper 
  0x0000000124994469: mov    %rbp,0x330(%r15)
  0x0000000124994470: mov    %rax,0x320(%r15)
  0x0000000124994477: test   $0xf,%esp
  0x000000012499447d: je     0x0000000124994495
  0x0000000124994483: sub    $0x8,%rsp
  0x0000000124994487: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012499448c: add    $0x8,%rsp
  0x0000000124994490: jmpq   0x000000012499449a
  0x0000000124994495: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012499449a: movabs $0x0,%r10
  0x00000001249944a4: mov    %r10,0x320(%r15)
  0x00000001249944ab: movabs $0x0,%r10
  0x00000001249944b5: mov    %r10,0x330(%r15)
  0x00000001249944bc: movabs $0x0,%r10
  0x00000001249944c6: mov    %r10,0x328(%r15)
  0x00000001249944cd: vzeroupper 
  0x00000001249944d0: cmpq   $0x0,0x8(%r15)
  0x00000001249944d8: je     0x00000001249944e3
  0x00000001249944de: jmpq   0x0000000124975780
  0x00000001249944e3: mov    -0x40(%rbp),%r13
  0x00000001249944e7: mov    -0x38(%rbp),%r14
  0x00000001249944eb: retq   
  0x00000001249944ec: push   %rax
  0x00000001249944ed: push   %rbx
  0x00000001249944ee: mov    -0x18(%rbp),%rbx
  0x00000001249944f2: mov    0x10(%rbx),%rax
  0x00000001249944f6: test   %rax,%rax
  0x00000001249944f9: je     0x0000000124994536
  0x00000001249944ff: mov    %r13,%rsi
  0x0000000124994502: mov    %rbx,%rdi
  0x0000000124994505: test   $0xf,%esp
  0x000000012499450b: je     0x0000000124994523
  0x0000000124994511: sub    $0x8,%rsp
  0x0000000124994515: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012499451a: add    $0x8,%rsp
  0x000000012499451e: jmpq   0x0000000124994528
  0x0000000124994523: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x0000000124994528: mov    0x10(%rbx),%rbx
  0x000000012499452c: add    $0x138,%rbx
  0x0000000124994533: add    %rbx,%rax
  0x0000000124994536: mov    %rax,-0x28(%rbp)
  0x000000012499453a: pop    %rbx
  0x000000012499453b: pop    %rax
  0x000000012499453c: jmpq   0x0000000124994427
  0x0000000124994541: neg    %rdx
  0x0000000124994544: add    %r13,%rdx
  0x0000000124994547: callq  0x0000000124994551
  0x000000012499454c: jmpq   0x00000001249945e6
  0x0000000124994551: mov    %rdx,%rsi
  0x0000000124994554: lea    0x8(%rsp),%rax
  0x0000000124994559: mov    %r13,-0x40(%rbp)
  0x000000012499455d: mov    %r15,%rdi
  0x0000000124994560: vzeroupper 
  0x0000000124994563: mov    %rbp,0x330(%r15)
  0x000000012499456a: mov    %rax,0x320(%r15)
  0x0000000124994571: test   $0xf,%esp
  0x0000000124994577: je     0x000000012499458f
  0x000000012499457d: sub    $0x8,%rsp
  0x0000000124994581: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x0000000124994586: add    $0x8,%rsp
  0x000000012499458a: jmpq   0x0000000124994594
  0x000000012499458f: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x0000000124994594: movabs $0x0,%r10
  0x000000012499459e: mov    %r10,0x320(%r15)
  0x00000001249945a5: movabs $0x0,%r10
  0x00000001249945af: mov    %r10,0x330(%r15)
  0x00000001249945b6: movabs $0x0,%r10
  0x00000001249945c0: mov    %r10,0x328(%r15)
  0x00000001249945c7: vzeroupper 
  0x00000001249945ca: cmpq   $0x0,0x8(%r15)
  0x00000001249945d2: je     0x00000001249945dd
  0x00000001249945d8: jmpq   0x0000000124975780
  0x00000001249945dd: mov    -0x40(%rbp),%r13
  0x00000001249945e1: mov    -0x38(%rbp),%r14
  0x00000001249945e5: retq   
  0x00000001249945e6: test   %rax,%rax
  0x00000001249945e9: je     0x0000000124994427
  0x00000001249945ef: cmpb   $0x0,0x156(%rax)
  0x00000001249945f6: jne    0x0000000124994427
  0x00000001249945fc: mov    %rax,%rbx
  0x00000001249945ff: callq  0x0000000124994609
  0x0000000124994604: jmpq   0x000000012499469b
  0x0000000124994609: lea    0x8(%rsp),%rax
  0x000000012499460e: mov    %r13,-0x40(%rbp)
  0x0000000124994612: mov    %r15,%rdi
  0x0000000124994615: vzeroupper 
  0x0000000124994618: mov    %rbp,0x330(%r15)
  0x000000012499461f: mov    %rax,0x320(%r15)
  0x0000000124994626: test   $0xf,%esp
  0x000000012499462c: je     0x0000000124994644
  0x0000000124994632: sub    $0x8,%rsp
  0x0000000124994636: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x000000012499463b: add    $0x8,%rsp
  0x000000012499463f: jmpq   0x0000000124994649
  0x0000000124994644: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x0000000124994649: movabs $0x0,%r10
  0x0000000124994653: mov    %r10,0x320(%r15)
  0x000000012499465a: movabs $0x0,%r10
  0x0000000124994664: mov    %r10,0x330(%r15)
  0x000000012499466b: movabs $0x0,%r10
  0x0000000124994675: mov    %r10,0x328(%r15)
  0x000000012499467c: vzeroupper 
  0x000000012499467f: cmpq   $0x0,0x8(%r15)
  0x0000000124994687: je     0x0000000124994692
  0x000000012499468d: jmpq   0x0000000124975780
  0x0000000124994692: mov    -0x40(%rbp),%r13
  0x0000000124994696: mov    -0x38(%rbp),%r14
  0x000000012499469a: retq   
  0x000000012499469b: mov    %rax,%rsi
  0x000000012499469e: mov    -0x8(%rbp),%rdx
  0x00000001249946a2: leaveq 
  0x00000001249946a3: pop    %rcx
  0x00000001249946a4: mov    %rdx,%rsp
  0x00000001249946a7: and    $0xfffffffffffffff0,%rsp
  0x00000001249946ab: push   %rcx
  0x00000001249946ac: jmpq   *0x110(%rbx)
  0x00000001249946b2: mov    -0x28(%rbp),%rax
  0x00000001249946b6: test   %rax,%rax
  0x00000001249946b9: je     0x00000001249946d1
  0x00000001249946bf: addq   $0x1,0x18(%rax)
  0x00000001249946c4: sbbq   $0x0,0x18(%rax)
  0x00000001249946c9: add    $0x20,%rax
  0x00000001249946cd: mov    %rax,-0x28(%rbp)
  0x00000001249946d1: movzbl 0x3(%r13),%ebx
  0x00000001249946d6: add    $0x3,%r13
  0x00000001249946da: movabs $0x1151d7a20,%r10
  0x00000001249946e4: jmpq   *(%r10,%rbx,8)
  0x00000001249946e8: add    %al,(%rax)
  0x00000001249946ea: add    %al,(%rax)
  0x00000001249946ec: add    %al,(%rax)
  0x00000001249946ee: add    %al,(%rax)
  0x00000001249946f0: add    %al,(%rax)
  0x00000001249946f2: add    %al,(%rax)
  0x00000001249946f4: add    %al,(%rax)
  0x00000001249946f6: add    %al,(%rax)
  0x00000001249946f8: add    %al,(%rax)
  0x00000001249946fa: add    %al,(%rax)
  0x00000001249946fc: add    %al,(%rax)
  0x00000001249946fe: add    %al,(%rax)

----------------------------------------------------------------------
goto_w  200 goto_w  [0x0000000124994720, 0x0000000124994b40]  1056 bytes

  0x0000000124994720: push   %rax
  0x0000000124994721: jmpq   0x000000012499475f
  0x0000000124994726: sub    $0x8,%rsp
  0x000000012499472a: vmovss %xmm0,(%rsp)
  0x000000012499472f: jmpq   0x000000012499475f
  0x0000000124994734: sub    $0x10,%rsp
  0x0000000124994738: vmovsd %xmm0,(%rsp)
  0x000000012499473d: jmpq   0x000000012499475f
  0x0000000124994742: sub    $0x10,%rsp
  0x0000000124994746: mov    %rax,(%rsp)
  0x000000012499474a: movabs $0x0,%r10
  0x0000000124994754: mov    %r10,0x8(%rsp)
  0x0000000124994759: jmpq   0x000000012499475f
  0x000000012499475e: push   %rax
  0x000000012499475f: mov    -0x18(%rbp),%rcx
  0x0000000124994763: mov    -0x28(%rbp),%rax
  0x0000000124994767: test   %rax,%rax
  0x000000012499476a: je     0x0000000124994788
  0x0000000124994770: mov    0x8(%rax),%rbx
  0x0000000124994774: add    $0x1,%rbx
  0x0000000124994778: sbb    $0x0,%rbx
  0x000000012499477c: mov    %rbx,0x8(%rax)
  0x0000000124994780: add    0x10(%rax),%rax
  0x0000000124994784: mov    %rax,-0x28(%rbp)
  0x0000000124994788: mov    0x1(%r13),%edx
  0x000000012499478c: bswap  %edx
  0x000000012499478e: movslq %edx,%rdx
  0x0000000124994791: add    %rdx,%r13
  0x0000000124994794: test   %edx,%edx
  0x0000000124994796: jns    0x0000000124994898
  0x000000012499479c: mov    0x18(%rcx),%rax
  0x00000001249947a0: test   %rax,%rax
  0x00000001249947a3: jne    0x0000000124994859
  0x00000001249947a9: push   %rdx
  0x00000001249947aa: push   %rcx
  0x00000001249947ab: callq  0x00000001249947b5
  0x00000001249947b0: jmpq   0x000000012499484a
  0x00000001249947b5: mov    %rcx,%rsi
  0x00000001249947b8: lea    0x8(%rsp),%rax
  0x00000001249947bd: mov    %r13,-0x40(%rbp)
  0x00000001249947c1: mov    %r15,%rdi
  0x00000001249947c4: vzeroupper 
  0x00000001249947c7: mov    %rbp,0x330(%r15)
  0x00000001249947ce: mov    %rax,0x320(%r15)
  0x00000001249947d5: test   $0xf,%esp
  0x00000001249947db: je     0x00000001249947f3
  0x00000001249947e1: sub    $0x8,%rsp
  0x00000001249947e5: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00000001249947ea: add    $0x8,%rsp
  0x00000001249947ee: jmpq   0x00000001249947f8
  0x00000001249947f3: callq  0x0000000114bad0ec = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00000001249947f8: movabs $0x0,%r10
  0x0000000124994802: mov    %r10,0x320(%r15)
  0x0000000124994809: movabs $0x0,%r10
  0x0000000124994813: mov    %r10,0x330(%r15)
  0x000000012499481a: movabs $0x0,%r10
  0x0000000124994824: mov    %r10,0x328(%r15)
  0x000000012499482b: vzeroupper 
  0x000000012499482e: cmpq   $0x0,0x8(%r15)
  0x0000000124994836: je     0x0000000124994841
  0x000000012499483c: jmpq   0x0000000124975780
  0x0000000124994841: mov    -0x40(%rbp),%r13
  0x0000000124994845: mov    -0x38(%rbp),%r14
  0x0000000124994849: retq   
  0x000000012499484a: pop    %rcx
  0x000000012499484b: pop    %rdx
  0x000000012499484c: mov    0x18(%rcx),%rax
  0x0000000124994850: test   %rax,%rax
  0x0000000124994853: je     0x0000000124994898
  0x0000000124994859: mov    0x10(%rcx),%rbx
  0x000000012499485d: test   %rbx,%rbx
  0x0000000124994860: je     0x0000000124994882
  0x0000000124994862: mov    0x108(%rbx),%eax
  0x0000000124994868: add    $0x8,%eax
  0x000000012499486b: mov    %eax,0x108(%rbx)
  0x0000000124994871: and    0x11c(%rbx),%eax
  0x0000000124994877: je     0x00000001249949b2
  0x000000012499487d: jmpq   0x0000000124994898
  0x0000000124994882: mov    0x18(%rcx),%rcx
  0x0000000124994886: mov    0x1c(%rcx),%eax
  0x0000000124994889: add    $0x8,%eax
  0x000000012499488c: mov    %eax,0x1c(%rcx)
  0x000000012499488f: and    0x34(%rcx),%eax
  0x0000000124994892: je     0x00000001249949b2
  0x0000000124994898: movzbl 0x0(%r13),%ebx
  0x000000012499489d: testb  $0x8,0x108(%r15)
  0x00000001249948a5: je     0x00000001249948b3
  0x00000001249948a7: movabs $0x1151dd020,%r10
  0x00000001249948b1: jmp    0x00000001249948bd
  0x00000001249948b3: movabs $0x1151d7a20,%r10
  0x00000001249948bd: jmpq   *(%r10,%rbx,8)
  0x00000001249948c1: callq  0x00000001249948cb
  0x00000001249948c6: jmpq   0x000000012499495d
  0x00000001249948cb: lea    0x8(%rsp),%rax
  0x00000001249948d0: mov    %r13,-0x40(%rbp)
  0x00000001249948d4: mov    %r15,%rdi
  0x00000001249948d7: vzeroupper 
  0x00000001249948da: mov    %rbp,0x330(%r15)
  0x00000001249948e1: mov    %rax,0x320(%r15)
  0x00000001249948e8: test   $0xf,%esp
  0x00000001249948ee: je     0x0000000124994906
  0x00000001249948f4: sub    $0x8,%rsp
  0x00000001249948f8: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x00000001249948fd: add    $0x8,%rsp
  0x0000000124994901: jmpq   0x000000012499490b
  0x0000000124994906: callq  0x0000000114bacdd2 = InterpreterRuntime::profile_method(JavaThread*)
  0x000000012499490b: movabs $0x0,%r10
  0x0000000124994915: mov    %r10,0x320(%r15)
  0x000000012499491c: movabs $0x0,%r10
  0x0000000124994926: mov    %r10,0x330(%r15)
  0x000000012499492d: movabs $0x0,%r10
  0x0000000124994937: mov    %r10,0x328(%r15)
  0x000000012499493e: vzeroupper 
  0x0000000124994941: cmpq   $0x0,0x8(%r15)
  0x0000000124994949: je     0x0000000124994954
  0x000000012499494f: jmpq   0x0000000124975780
  0x0000000124994954: mov    -0x40(%rbp),%r13
  0x0000000124994958: mov    -0x38(%rbp),%r14
  0x000000012499495c: retq   
  0x000000012499495d: push   %rax
  0x000000012499495e: push   %rbx
  0x000000012499495f: mov    -0x18(%rbp),%rbx
  0x0000000124994963: mov    0x10(%rbx),%rax
  0x0000000124994967: test   %rax,%rax
  0x000000012499496a: je     0x00000001249949a7
  0x0000000124994970: mov    %r13,%rsi
  0x0000000124994973: mov    %rbx,%rdi
  0x0000000124994976: test   $0xf,%esp
  0x000000012499497c: je     0x0000000124994994
  0x0000000124994982: sub    $0x8,%rsp
  0x0000000124994986: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x000000012499498b: add    $0x8,%rsp
  0x000000012499498f: jmpq   0x0000000124994999
  0x0000000124994994: callq  0x0000000114bacd9e = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x0000000124994999: mov    0x10(%rbx),%rbx
  0x000000012499499d: add    $0x138,%rbx
  0x00000001249949a4: add    %rbx,%rax
  0x00000001249949a7: mov    %rax,-0x28(%rbp)
  0x00000001249949ab: pop    %rbx
  0x00000001249949ac: pop    %rax
  0x00000001249949ad: jmpq   0x0000000124994898
  0x00000001249949b2: neg    %rdx
  0x00000001249949b5: add    %r13,%rdx
  0x00000001249949b8: callq  0x00000001249949c2
  0x00000001249949bd: jmpq   0x0000000124994a57
  0x00000001249949c2: mov    %rdx,%rsi
  0x00000001249949c5: lea    0x8(%rsp),%rax
  0x00000001249949ca: mov    %r13,-0x40(%rbp)
  0x00000001249949ce: mov    %r15,%rdi
  0x00000001249949d1: vzeroupper 
  0x00000001249949d4: mov    %rbp,0x330(%r15)
  0x00000001249949db: mov    %rax,0x320(%r15)
  0x00000001249949e2: test   $0xf,%esp
  0x00000001249949e8: je     0x0000000124994a00
  0x00000001249949ee: sub    $0x8,%rsp
  0x00000001249949f2: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00000001249949f7: add    $0x8,%rsp
  0x00000001249949fb: jmpq   0x0000000124994a05
  0x0000000124994a00: callq  0x0000000114bac9d6 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x0000000124994a05: movabs $0x0,%r10
  0x0000000124994a0f: mov    %r10,0x320(%r15)
  0x0000000124994a16: movabs $0x0,%r10
  0x0000000124994a20: mov    %r10,0x330(%r15)
  0x0000000124994a27: movabs $0x0,%r10
  0x0000000124994a31: mov    %r10,0x328(%r15)
  0x0000000124994a38: vzeroupper 
  0x0000000124994a3b: cmpq   $0x0,0x8(%r15)
  0x0000000124994a43: je     0x0000000124994a4e
  0x0000000124994a49: jmpq   0x0000000124975780
  0x0000000124994a4e: mov    -0x40(%rbp),%r13
  0x0000000124994a52: mov    -0x38(%rbp),%r14
  0x0000000124994a56: retq   
  0x0000000124994a57: test   %rax,%rax
  0x0000000124994a5a: je     0x0000000124994898
  0x0000000124994a60: cmpb   $0x0,0x156(%rax)
  0x0000000124994a67: jne    0x0000000124994898
  0x0000000124994a6d: mov    %rax,%rbx
  0x0000000124994a70: callq  0x0000000124994a7a
  0x0000000124994a75: jmpq   0x0000000124994b0c
  0x0000000124994a7a: lea    0x8(%rsp),%rax
  0x0000000124994a7f: mov    %r13,-0x40(%rbp)
  0x0000000124994a83: mov    %r15,%rdi
  0x0000000124994a86: vzeroupper 
  0x0000000124994a89: mov    %rbp,0x330(%r15)
  0x0000000124994a90: mov    %rax,0x320(%r15)
  0x0000000124994a97: test   $0xf,%esp
  0x0000000124994a9d: je     0x0000000124994ab5
  0x0000000124994aa3: sub    $0x8,%rsp
  0x0000000124994aa7: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x0000000124994aac: add    $0x8,%rsp
  0x0000000124994ab0: jmpq   0x0000000124994aba
  0x0000000124994ab5: callq  0x0000000114e9a798 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x0000000124994aba: movabs $0x0,%r10
  0x0000000124994ac4: mov    %r10,0x320(%r15)
  0x0000000124994acb: movabs $0x0,%r10
  0x0000000124994ad5: mov    %r10,0x330(%r15)
  0x0000000124994adc: movabs $0x0,%r10
  0x0000000124994ae6: mov    %r10,0x328(%r15)
  0x0000000124994aed: vzeroupper 
  0x0000000124994af0: cmpq   $0x0,0x8(%r15)
  0x0000000124994af8: je     0x0000000124994b03
  0x0000000124994afe: jmpq   0x0000000124975780
  0x0000000124994b03: mov    -0x40(%rbp),%r13
  0x0000000124994b07: mov    -0x38(%rbp),%r14
  0x0000000124994b0b: retq   
  0x0000000124994b0c: mov    %rax,%rsi
  0x0000000124994b0f: mov    -0x8(%rbp),%rdx
  0x0000000124994b13: leaveq 
  0x0000000124994b14: pop    %rcx
  0x0000000124994b15: mov    %rdx,%rsp
  0x0000000124994b18: and    $0xfffffffffffffff0,%rsp
  0x0000000124994b1c: push   %rcx
  0x0000000124994b1d: jmpq   *0x110(%rbx)
  0x0000000124994b23: movzbl 0x5(%r13),%ebx
  0x0000000124994b28: add    $0x5,%r13
  0x0000000124994b2c: movabs $0x1151d7a20,%r10
  0x0000000124994b36: jmpq   *(%r10,%rbx,8)
  0x0000000124994b3a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
jsr_w  201 jsr_w  [0x0000000124994b60, 0x0000000124994c20]  192 bytes

  0x0000000124994b60: push   %rax
  0x0000000124994b61: jmpq   0x0000000124994b9f
  0x0000000124994b66: sub    $0x8,%rsp
  0x0000000124994b6a: vmovss %xmm0,(%rsp)
  0x0000000124994b6f: jmpq   0x0000000124994b9f
  0x0000000124994b74: sub    $0x10,%rsp
  0x0000000124994b78: vmovsd %xmm0,(%rsp)
  0x0000000124994b7d: jmpq   0x0000000124994b9f
  0x0000000124994b82: sub    $0x10,%rsp
  0x0000000124994b86: mov    %rax,(%rsp)
  0x0000000124994b8a: movabs $0x0,%r10
  0x0000000124994b94: mov    %r10,0x8(%rsp)
  0x0000000124994b99: jmpq   0x0000000124994b9f
  0x0000000124994b9e: push   %rax
  0x0000000124994b9f: mov    -0x18(%rbp),%rcx
  0x0000000124994ba3: mov    -0x28(%rbp),%rax
  0x0000000124994ba7: test   %rax,%rax
  0x0000000124994baa: je     0x0000000124994bc8
  0x0000000124994bb0: mov    0x8(%rax),%rbx
  0x0000000124994bb4: add    $0x1,%rbx
  0x0000000124994bb8: sbb    $0x0,%rbx
  0x0000000124994bbc: mov    %rbx,0x8(%rax)
  0x0000000124994bc0: add    0x10(%rax),%rax
  0x0000000124994bc4: mov    %rax,-0x28(%rbp)
  0x0000000124994bc8: mov    0x1(%r13),%edx
  0x0000000124994bcc: bswap  %edx
  0x0000000124994bce: movslq %edx,%rdx
  0x0000000124994bd1: movzbl 0x0(%r13,%rdx,1),%ebx
  0x0000000124994bd7: lea    -0x33(%r13),%rax
  0x0000000124994bdb: sub    0x8(%rcx),%rax
  0x0000000124994bdf: add    %rdx,%r13
  0x0000000124994be2: push   %rax
  0x0000000124994be3: testb  $0x8,0x108(%r15)
  0x0000000124994beb: je     0x0000000124994bf9
  0x0000000124994bed: movabs $0x1151dd020,%r10
  0x0000000124994bf7: jmp    0x0000000124994c03
  0x0000000124994bf9: movabs $0x1151d7a20,%r10
  0x0000000124994c03: jmpq   *(%r10,%rbx,8)
  0x0000000124994c07: movzbl 0x5(%r13),%ebx
  0x0000000124994c0c: add    $0x5,%r13
  0x0000000124994c10: movabs $0x1151d7a20,%r10
  0x0000000124994c1a: jmpq   *(%r10,%rbx,8)
  0x0000000124994c1e: xchg   %ax,%ax

----------------------------------------------------------------------
breakpoint  202 breakpoint  [0x0000000124994c40, 0x0000000124994de0]  416 bytes

  0x0000000124994c40: push   %rax
  0x0000000124994c41: jmpq   0x0000000124994c7f
  0x0000000124994c46: sub    $0x8,%rsp
  0x0000000124994c4a: vmovss %xmm0,(%rsp)
  0x0000000124994c4f: jmpq   0x0000000124994c7f
  0x0000000124994c54: sub    $0x10,%rsp
  0x0000000124994c58: vmovsd %xmm0,(%rsp)
  0x0000000124994c5d: jmpq   0x0000000124994c7f
  0x0000000124994c62: sub    $0x10,%rsp
  0x0000000124994c66: mov    %rax,(%rsp)
  0x0000000124994c6a: movabs $0x0,%r10
  0x0000000124994c74: mov    %r10,0x8(%rsp)
  0x0000000124994c79: jmpq   0x0000000124994c7f
  0x0000000124994c7e: push   %rax
  0x0000000124994c7f: mov    -0x18(%rbp),%rsi
  0x0000000124994c83: callq  0x0000000124994c8d
  0x0000000124994c88: jmpq   0x0000000124994d22
  0x0000000124994c8d: mov    %r13,%rdx
  0x0000000124994c90: lea    0x8(%rsp),%rax
  0x0000000124994c95: mov    %r13,-0x40(%rbp)
  0x0000000124994c99: mov    %r15,%rdi
  0x0000000124994c9c: vzeroupper 
  0x0000000124994c9f: mov    %rbp,0x330(%r15)
  0x0000000124994ca6: mov    %rax,0x320(%r15)
  0x0000000124994cad: test   $0xf,%esp
  0x0000000124994cb3: je     0x0000000124994ccb
  0x0000000124994cb9: sub    $0x8,%rsp
  0x0000000124994cbd: callq  0x0000000114babf5a = InterpreterRuntime::get_original_bytecode_at(JavaThread*, Method*, unsigned char*)
  0x0000000124994cc2: add    $0x8,%rsp
  0x0000000124994cc6: jmpq   0x0000000124994cd0
  0x0000000124994ccb: callq  0x0000000114babf5a = InterpreterRuntime::get_original_bytecode_at(JavaThread*, Method*, unsigned char*)
  0x0000000124994cd0: movabs $0x0,%r10
  0x0000000124994cda: mov    %r10,0x320(%r15)
  0x0000000124994ce1: movabs $0x0,%r10
  0x0000000124994ceb: mov    %r10,0x330(%r15)
  0x0000000124994cf2: movabs $0x0,%r10
  0x0000000124994cfc: mov    %r10,0x328(%r15)
  0x0000000124994d03: vzeroupper 
  0x0000000124994d06: cmpq   $0x0,0x8(%r15)
  0x0000000124994d0e: je     0x0000000124994d19
  0x0000000124994d14: jmpq   0x0000000124975780
  0x0000000124994d19: mov    -0x40(%rbp),%r13
  0x0000000124994d1d: mov    -0x38(%rbp),%r14
  0x0000000124994d21: retq   
  0x0000000124994d22: mov    %rax,%rbx
  0x0000000124994d25: mov    -0x18(%rbp),%rsi
  0x0000000124994d29: callq  0x0000000124994d33
  0x0000000124994d2e: jmpq   0x0000000124994dc8
  0x0000000124994d33: mov    %r13,%rdx
  0x0000000124994d36: lea    0x8(%rsp),%rax
  0x0000000124994d3b: mov    %r13,-0x40(%rbp)
  0x0000000124994d3f: mov    %r15,%rdi
  0x0000000124994d42: vzeroupper 
  0x0000000124994d45: mov    %rbp,0x330(%r15)
  0x0000000124994d4c: mov    %rax,0x320(%r15)
  0x0000000124994d53: test   $0xf,%esp
  0x0000000124994d59: je     0x0000000124994d71
  0x0000000124994d5f: sub    $0x8,%rsp
  0x0000000124994d63: callq  0x0000000114bac07a = InterpreterRuntime::_breakpoint(JavaThread*, Method*, unsigned char*)
  0x0000000124994d68: add    $0x8,%rsp
  0x0000000124994d6c: jmpq   0x0000000124994d76
  0x0000000124994d71: callq  0x0000000114bac07a = InterpreterRuntime::_breakpoint(JavaThread*, Method*, unsigned char*)
  0x0000000124994d76: movabs $0x0,%r10
  0x0000000124994d80: mov    %r10,0x320(%r15)
  0x0000000124994d87: movabs $0x0,%r10
  0x0000000124994d91: mov    %r10,0x330(%r15)
  0x0000000124994d98: movabs $0x0,%r10
  0x0000000124994da2: mov    %r10,0x328(%r15)
  0x0000000124994da9: vzeroupper 
  0x0000000124994dac: cmpq   $0x0,0x8(%r15)
  0x0000000124994db4: je     0x0000000124994dbf
  0x0000000124994dba: jmpq   0x0000000124975780
  0x0000000124994dbf: mov    -0x40(%rbp),%r13
  0x0000000124994dc3: mov    -0x38(%rbp),%r14
  0x0000000124994dc7: retq   
  0x0000000124994dc8: movabs $0x1151d2a20,%r10
  0x0000000124994dd2: jmpq   *(%r10,%rbx,8)
  0x0000000124994dd6: xchg   %ax,%ax
  0x0000000124994dd8: add    %al,(%rax)
  0x0000000124994dda: add    %al,(%rax)
  0x0000000124994ddc: add    %al,(%rax)
  0x0000000124994dde: add    %al,(%rax)

----------------------------------------------------------------------
fast_agetfield  203 fast_agetfield  [0x0000000124994e00, 0x0000000124994e40]  64 bytes

  0x0000000124994e00: pop    %rax
  0x0000000124994e01: movzwl 0x1(%r13),%ebx
  0x0000000124994e06: mov    -0x30(%rbp),%rcx
  0x0000000124994e0a: shl    $0x2,%ebx
  0x0000000124994e0d: mov    0x38(%rcx,%rbx,8),%rbx
  0x0000000124994e12: cmp    (%rax),%rax
  0x0000000124994e15: mov    (%rax,%rbx,1),%eax
  0x0000000124994e18: shl    $0x3,%rax
  0x0000000124994e1c: movzbl 0x3(%r13),%ebx
  0x0000000124994e21: add    $0x3,%r13
  0x0000000124994e25: movabs $0x1151d7220,%r10
  0x0000000124994e2f: jmpq   *(%r10,%rbx,8)
  0x0000000124994e33: nopl   0x0(%rax,%rax,1)
  0x0000000124994e38: add    %al,(%rax)
  0x0000000124994e3a: add    %al,(%rax)
  0x0000000124994e3c: add    %al,(%rax)
  0x0000000124994e3e: add    %al,(%rax)

----------------------------------------------------------------------
fast_bgetfield  204 fast_bgetfield  [0x0000000124994e60, 0x0000000124994ea0]  64 bytes

  0x0000000124994e60: pop    %rax
  0x0000000124994e61: movzwl 0x1(%r13),%ebx
  0x0000000124994e66: mov    -0x30(%rbp),%rcx
  0x0000000124994e6a: shl    $0x2,%ebx
  0x0000000124994e6d: mov    0x38(%rcx,%rbx,8),%rbx
  0x0000000124994e72: cmp    (%rax),%rax
  0x0000000124994e75: movsbl (%rax,%rbx,1),%eax
  0x0000000124994e79: movzbl 0x3(%r13),%ebx
  0x0000000124994e7e: add    $0x3,%r13
  0x0000000124994e82: movabs $0x1151d5220,%r10
  0x0000000124994e8c: jmpq   *(%r10,%rbx,8)
  0x0000000124994e90: add    %al,(%rax)
  0x0000000124994e92: add    %al,(%rax)
  0x0000000124994e94: add    %al,(%rax)
  0x0000000124994e96: add    %al,(%rax)
  0x0000000124994e98: add    %al,(%rax)
  0x0000000124994e9a: add    %al,(%rax)
  0x0000000124994e9c: add    %al,(%rax)
  0x0000000124994e9e: add    %al,(%rax)

----------------------------------------------------------------------
fast_cgetfield  205 fast_cgetfield  [0x0000000124994ec0, 0x0000000124994f00]  64 bytes

  0x0000000124994ec0: pop    %rax
  0x0000000124994ec1: movzwl 0x1(%r13),%ebx
  0x0000000124994ec6: mov    -0x30(%rbp),%rcx
  0x0000000124994eca: shl    $0x2,%ebx
  0x0000000124994ecd: mov    0x38(%rcx,%rbx,8),%rbx
  0x0000000124994ed2: cmp    (%rax),%rax
  0x0000000124994ed5: movzwl (%rax,%rbx,1),%eax
  0x0000000124994ed9: movzbl 0x3(%r13),%ebx
  0x0000000124994ede: add    $0x3,%r13
  0x0000000124994ee2: movabs $0x1151d5220,%r10
  0x0000000124994eec: jmpq   *(%r10,%rbx,8)
  0x0000000124994ef0: add    %al,(%rax)
  0x0000000124994ef2: add    %al,(%rax)
  0x0000000124994ef4: add    %al,(%rax)
  0x0000000124994ef6: add    %al,(%rax)
  0x0000000124994ef8: add    %al,(%rax)
  0x0000000124994efa: add    %al,(%rax)
  0x0000000124994efc: add    %al,(%rax)
  0x0000000124994efe: add    %al,(%rax)

----------------------------------------------------------------------
fast_dgetfield  206 fast_dgetfield  [0x0000000124994f20, 0x0000000124994f60]  64 bytes

  0x0000000124994f20: pop    %rax
  0x0000000124994f21: movzwl 0x1(%r13),%ebx
  0x0000000124994f26: mov    -0x30(%rbp),%rcx
  0x0000000124994f2a: shl    $0x2,%ebx
  0x0000000124994f2d: mov    0x38(%rcx,%rbx,8),%rbx
  0x0000000124994f32: cmp    (%rax),%rax
  0x0000000124994f35: vmovsd (%rax,%rbx,1),%xmm0
  0x0000000124994f3a: movzbl 0x3(%r13),%ebx
  0x0000000124994f3f: add    $0x3,%r13
  0x0000000124994f43: movabs $0x1151d6a20,%r10
  0x0000000124994f4d: jmpq   *(%r10,%rbx,8)
  0x0000000124994f51: nopl   0x0(%rax)
  0x0000000124994f58: add    %al,(%rax)
  0x0000000124994f5a: add    %al,(%rax)
  0x0000000124994f5c: add    %al,(%rax)
  0x0000000124994f5e: add    %al,(%rax)

----------------------------------------------------------------------
fast_fgetfield  207 fast_fgetfield  [0x0000000124994f80, 0x0000000124994fc0]  64 bytes

  0x0000000124994f80: pop    %rax
  0x0000000124994f81: movzwl 0x1(%r13),%ebx
  0x0000000124994f86: mov    -0x30(%rbp),%rcx
  0x0000000124994f8a: shl    $0x2,%ebx
  0x0000000124994f8d: mov    0x38(%rcx,%rbx,8),%rbx
  0x0000000124994f92: cmp    (%rax),%rax
  0x0000000124994f95: vmovss (%rax,%rbx,1),%xmm0
  0x0000000124994f9a: movzbl 0x3(%r13),%ebx
  0x0000000124994f9f: add    $0x3,%r13
  0x0000000124994fa3: movabs $0x1151d6220,%r10
  0x0000000124994fad: jmpq   *(%r10,%rbx,8)
  0x0000000124994fb1: nopl   0x0(%rax)
  0x0000000124994fb8: add    %al,(%rax)
  0x0000000124994fba: add    %al,(%rax)
  0x0000000124994fbc: add    %al,(%rax)
  0x0000000124994fbe: add    %al,(%rax)

----------------------------------------------------------------------
fast_igetfield  208 fast_igetfield  [0x0000000124994fe0, 0x0000000124995020]  64 bytes

  0x0000000124994fe0: pop    %rax
  0x0000000124994fe1: movzwl 0x1(%r13),%ebx
  0x0000000124994fe6: mov    -0x30(%rbp),%rcx
  0x0000000124994fea: shl    $0x2,%ebx
  0x0000000124994fed: mov    0x38(%rcx,%rbx,8),%rbx
  0x0000000124994ff2: cmp    (%rax),%rax
  0x0000000124994ff5: mov    (%rax,%rbx,1),%eax
  0x0000000124994ff8: movzbl 0x3(%r13),%ebx
  0x0000000124994ffd: add    $0x3,%r13
  0x0000000124995001: movabs $0x1151d5220,%r10
  0x000000012499500b: jmpq   *(%r10,%rbx,8)
  0x000000012499500f: nop
  0x0000000124995010: add    %al,(%rax)
  0x0000000124995012: add    %al,(%rax)
  0x0000000124995014: add    %al,(%rax)
  0x0000000124995016: add    %al,(%rax)
  0x0000000124995018: add    %al,(%rax)
  0x000000012499501a: add    %al,(%rax)
  0x000000012499501c: add    %al,(%rax)
  0x000000012499501e: add    %al,(%rax)

----------------------------------------------------------------------
fast_lgetfield  209 fast_lgetfield  [0x0000000124995040, 0x0000000124995080]  64 bytes

  0x0000000124995040: pop    %rax
  0x0000000124995041: movzwl 0x1(%r13),%ebx
  0x0000000124995046: mov    -0x30(%rbp),%rcx
  0x000000012499504a: shl    $0x2,%ebx
  0x000000012499504d: mov    0x38(%rcx,%rbx,8),%rbx
  0x0000000124995052: cmp    (%rax),%rax
  0x0000000124995055: mov    (%rax,%rbx,1),%rax
  0x0000000124995059: movzbl 0x3(%r13),%ebx
  0x000000012499505e: add    $0x3,%r13
  0x0000000124995062: movabs $0x1151d5a20,%r10
  0x000000012499506c: jmpq   *(%r10,%rbx,8)
  0x0000000124995070: add    %al,(%rax)
  0x0000000124995072: add    %al,(%rax)
  0x0000000124995074: add    %al,(%rax)
  0x0000000124995076: add    %al,(%rax)
  0x0000000124995078: add    %al,(%rax)
  0x000000012499507a: add    %al,(%rax)
  0x000000012499507c: add    %al,(%rax)
  0x000000012499507e: add    %al,(%rax)

----------------------------------------------------------------------
fast_sgetfield  210 fast_sgetfield  [0x00000001249950a0, 0x00000001249950e0]  64 bytes

  0x00000001249950a0: pop    %rax
  0x00000001249950a1: movzwl 0x1(%r13),%ebx
  0x00000001249950a6: mov    -0x30(%rbp),%rcx
  0x00000001249950aa: shl    $0x2,%ebx
  0x00000001249950ad: mov    0x38(%rcx,%rbx,8),%rbx
  0x00000001249950b2: cmp    (%rax),%rax
  0x00000001249950b5: movswl (%rax,%rbx,1),%eax
  0x00000001249950b9: movzbl 0x3(%r13),%ebx
  0x00000001249950be: add    $0x3,%r13
  0x00000001249950c2: movabs $0x1151d5220,%r10
  0x00000001249950cc: jmpq   *(%r10,%rbx,8)
  0x00000001249950d0: add    %al,(%rax)
  0x00000001249950d2: add    %al,(%rax)
  0x00000001249950d4: add    %al,(%rax)
  0x00000001249950d6: add    %al,(%rax)
  0x00000001249950d8: add    %al,(%rax)
  0x00000001249950da: add    %al,(%rax)
  0x00000001249950dc: add    %al,(%rax)
  0x00000001249950de: add    %al,(%rax)

----------------------------------------------------------------------
fast_aputfield  211 fast_aputfield  [0x0000000124995100, 0x0000000124995260]  352 bytes

  0x0000000124995100: pop    %rax
  0x0000000124995101: movzwl 0x1(%r13),%ebx
  0x0000000124995106: mov    -0x30(%rbp),%rcx
  0x000000012499510a: shl    $0x2,%ebx
  0x000000012499510d: mov    0x40(%rcx,%rbx,8),%edx
  0x0000000124995111: mov    0x38(%rcx,%rbx,8),%rbx
  0x0000000124995116: shr    $0x15,%edx
  0x0000000124995119: and    $0x1,%edx
  0x000000012499511c: pop    %rcx
  0x000000012499511d: cmp    (%rcx),%rax
  0x0000000124995120: lea    (%rcx,%rbx,1),%rdx
  0x0000000124995124: cmpb   $0x0,0x30(%r15)
  0x0000000124995129: je     0x0000000124995190
  0x000000012499512f: mov    (%rdx),%ebx
  0x0000000124995131: shl    $0x3,%rbx
  0x0000000124995135: cmp    $0x0,%rbx
  0x0000000124995139: je     0x0000000124995190
  0x000000012499513f: mov    0x38(%r15),%r8
  0x0000000124995143: cmp    $0x0,%r8
  0x0000000124995147: je     0x0000000124995161
  0x000000012499514d: sub    $0x8,%r8
  0x0000000124995151: mov    %r8,0x38(%r15)
  0x0000000124995155: add    0x48(%r15),%r8
  0x0000000124995159: mov    %rbx,(%r8)
  0x000000012499515c: jmpq   0x0000000124995190
  0x0000000124995161: push   %rax
  0x0000000124995162: push   %rdx
  0x0000000124995163: push   %rbx
  0x0000000124995164: mov    %r15,%rsi
  0x0000000124995167: mov    %rbx,%rdi
  0x000000012499516a: test   $0xf,%esp
  0x0000000124995170: je     0x0000000124995188
  0x0000000124995176: sub    $0x8,%rsp
  0x000000012499517a: callq  0x0000000114b0185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x000000012499517f: add    $0x8,%rsp
  0x0000000124995183: jmpq   0x000000012499518d
  0x0000000124995188: callq  0x0000000114b0185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x000000012499518d: pop    %rbx
  0x000000012499518e: pop    %rdx
  0x000000012499518f: pop    %rax
  0x0000000124995190: mov    %rax,%rbx
  0x0000000124995193: shr    $0x3,%rax
  0x0000000124995197: mov    %eax,(%rdx)
  0x0000000124995199: mov    %rdx,%r8
  0x000000012499519c: xor    %rbx,%r8
  0x000000012499519f: shr    $0x16,%r8
  0x00000001249951a3: je     0x000000012499523b
  0x00000001249951a9: cmp    $0x0,%rbx
  0x00000001249951ad: je     0x000000012499523b
  0x00000001249951b3: mov    %rdx,%r8
  0x00000001249951b6: shr    $0x9,%r8
  0x00000001249951ba: movabs $0x1155db000,%rbx
  0x00000001249951c4: add    %rbx,%r8
  0x00000001249951c7: cmpb   $0x20,(%r8)
  0x00000001249951cb: je     0x000000012499523b
  0x00000001249951d1: lock addl $0x0,-0x40(%rsp)
  0x00000001249951d7: cmpb   $0x0,(%r8)
  0x00000001249951db: je     0x000000012499523b
  0x00000001249951e1: movb   $0x0,(%r8)
  0x00000001249951e5: cmpl   $0x0,0x70(%r15)
  0x00000001249951ed: je     0x000000012499520e
  0x00000001249951f3: subl   $0x8,0x70(%r15)
  0x00000001249951f8: mov    0x80(%r15),%rbx
  0x00000001249951ff: movslq 0x70(%r15),%r10
  0x0000000124995203: add    %r10,%rbx
  0x0000000124995206: mov    %r8,(%rbx)
  0x0000000124995209: jmpq   0x000000012499523b
  0x000000012499520e: push   %rdx
  0x000000012499520f: push   %rbx
  0x0000000124995210: mov    %r15,%rsi
  0x0000000124995213: mov    %r8,%rdi
  0x0000000124995216: test   $0xf,%esp
  0x000000012499521c: je     0x0000000124995234
  0x0000000124995222: sub    $0x8,%rsp
  0x0000000124995226: callq  0x0000000114b01882 = G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*)
  0x000000012499522b: add    $0x8,%rsp
  0x000000012499522f: jmpq   0x0000000124995239
  0x0000000124995234: callq  0x0000000114b01882 = G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*)
  0x0000000124995239: pop    %rbx
  0x000000012499523a: pop    %rdx
  0x000000012499523b: test   %edx,%edx
  0x000000012499523d: je     0x0000000124995249
  0x0000000124995243: lock addl $0x0,-0x40(%rsp)
  0x0000000124995249: movzbl 0x3(%r13),%ebx
  0x000000012499524e: add    $0x3,%r13
  0x0000000124995252: movabs $0x1151d7a20,%r10
  0x000000012499525c: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
fast_bputfield  212 fast_bputfield  [0x0000000124995280, 0x00000001249952e0]  96 bytes

  0x0000000124995280: mov    (%rsp),%eax
  0x0000000124995283: add    $0x8,%rsp
  0x0000000124995287: movzwl 0x1(%r13),%ebx
  0x000000012499528c: mov    -0x30(%rbp),%rcx
  0x0000000124995290: shl    $0x2,%ebx
  0x0000000124995293: mov    0x40(%rcx,%rbx,8),%edx
  0x0000000124995297: mov    0x38(%rcx,%rbx,8),%rbx
  0x000000012499529c: shr    $0x15,%edx
  0x000000012499529f: and    $0x1,%edx
  0x00000001249952a2: pop    %rcx
  0x00000001249952a3: cmp    (%rcx),%rax
  0x00000001249952a6: mov    %al,(%rcx,%rbx,1)
  0x00000001249952a9: test   %edx,%edx
  0x00000001249952ab: je     0x00000001249952b7
  0x00000001249952b1: lock addl $0x0,-0x40(%rsp)
  0x00000001249952b7: movzbl 0x3(%r13),%ebx
  0x00000001249952bc: add    $0x3,%r13
  0x00000001249952c0: movabs $0x1151d7a20,%r10
  0x00000001249952ca: jmpq   *(%r10,%rbx,8)
  0x00000001249952ce: xchg   %ax,%ax
  0x00000001249952d0: add    %al,(%rax)
  0x00000001249952d2: add    %al,(%rax)
  0x00000001249952d4: add    %al,(%rax)
  0x00000001249952d6: add    %al,(%rax)
  0x00000001249952d8: add    %al,(%rax)
  0x00000001249952da: add    %al,(%rax)
  0x00000001249952dc: add    %al,(%rax)
  0x00000001249952de: add    %al,(%rax)

----------------------------------------------------------------------
fast_zputfield  213 fast_zputfield  [0x0000000124995300, 0x0000000124995360]  96 bytes

  0x0000000124995300: mov    (%rsp),%eax
  0x0000000124995303: add    $0x8,%rsp
  0x0000000124995307: movzwl 0x1(%r13),%ebx
  0x000000012499530c: mov    -0x30(%rbp),%rcx
  0x0000000124995310: shl    $0x2,%ebx
  0x0000000124995313: mov    0x40(%rcx,%rbx,8),%edx
  0x0000000124995317: mov    0x38(%rcx,%rbx,8),%rbx
  0x000000012499531c: shr    $0x15,%edx
  0x000000012499531f: and    $0x1,%edx
  0x0000000124995322: pop    %rcx
  0x0000000124995323: cmp    (%rcx),%rax
  0x0000000124995326: and    $0x1,%eax
  0x0000000124995329: mov    %al,(%rcx,%rbx,1)
  0x000000012499532c: test   %edx,%edx
  0x000000012499532e: je     0x000000012499533a
  0x0000000124995334: lock addl $0x0,-0x40(%rsp)
  0x000000012499533a: movzbl 0x3(%r13),%ebx
  0x000000012499533f: add    $0x3,%r13
  0x0000000124995343: movabs $0x1151d7a20,%r10
  0x000000012499534d: jmpq   *(%r10,%rbx,8)
  0x0000000124995351: nopl   0x0(%rax)
  0x0000000124995358: add    %al,(%rax)
  0x000000012499535a: add    %al,(%rax)
  0x000000012499535c: add    %al,(%rax)
  0x000000012499535e: add    %al,(%rax)

----------------------------------------------------------------------
fast_cputfield  214 fast_cputfield  [0x0000000124995380, 0x00000001249953e0]  96 bytes

  0x0000000124995380: mov    (%rsp),%eax
  0x0000000124995383: add    $0x8,%rsp
  0x0000000124995387: movzwl 0x1(%r13),%ebx
  0x000000012499538c: mov    -0x30(%rbp),%rcx
  0x0000000124995390: shl    $0x2,%ebx
  0x0000000124995393: mov    0x40(%rcx,%rbx,8),%edx
  0x0000000124995397: mov    0x38(%rcx,%rbx,8),%rbx
  0x000000012499539c: shr    $0x15,%edx
  0x000000012499539f: and    $0x1,%edx
  0x00000001249953a2: pop    %rcx
  0x00000001249953a3: cmp    (%rcx),%rax
  0x00000001249953a6: mov    %ax,(%rcx,%rbx,1)
  0x00000001249953aa: test   %edx,%edx
  0x00000001249953ac: je     0x00000001249953b8
  0x00000001249953b2: lock addl $0x0,-0x40(%rsp)
  0x00000001249953b8: movzbl 0x3(%r13),%ebx
  0x00000001249953bd: add    $0x3,%r13
  0x00000001249953c1: movabs $0x1151d7a20,%r10
  0x00000001249953cb: jmpq   *(%r10,%rbx,8)
  0x00000001249953cf: nop
  0x00000001249953d0: add    %al,(%rax)
  0x00000001249953d2: add    %al,(%rax)
  0x00000001249953d4: add    %al,(%rax)
  0x00000001249953d6: add    %al,(%rax)
  0x00000001249953d8: add    %al,(%rax)
  0x00000001249953da: add    %al,(%rax)
  0x00000001249953dc: add    %al,(%rax)
  0x00000001249953de: add    %al,(%rax)

----------------------------------------------------------------------
fast_dputfield  215 fast_dputfield  [0x0000000124995400, 0x0000000124995460]  96 bytes

  0x0000000124995400: vmovsd (%rsp),%xmm0
  0x0000000124995405: add    $0x10,%rsp
  0x0000000124995409: movzwl 0x1(%r13),%ebx
  0x000000012499540e: mov    -0x30(%rbp),%rcx
  0x0000000124995412: shl    $0x2,%ebx
  0x0000000124995415: mov    0x40(%rcx,%rbx,8),%edx
  0x0000000124995419: mov    0x38(%rcx,%rbx,8),%rbx
  0x000000012499541e: shr    $0x15,%edx
  0x0000000124995421: and    $0x1,%edx
  0x0000000124995424: pop    %rcx
  0x0000000124995425: cmp    (%rcx),%rax
  0x0000000124995428: vmovsd %xmm0,(%rcx,%rbx,1)
  0x000000012499542d: test   %edx,%edx
  0x000000012499542f: je     0x000000012499543b
  0x0000000124995435: lock addl $0x0,-0x40(%rsp)
  0x000000012499543b: movzbl 0x3(%r13),%ebx
  0x0000000124995440: add    $0x3,%r13
  0x0000000124995444: movabs $0x1151d7a20,%r10
  0x000000012499544e: jmpq   *(%r10,%rbx,8)
  0x0000000124995452: nopw   0x0(%rax,%rax,1)
  0x0000000124995458: add    %al,(%rax)
  0x000000012499545a: add    %al,(%rax)
  0x000000012499545c: add    %al,(%rax)
  0x000000012499545e: add    %al,(%rax)

----------------------------------------------------------------------
fast_fputfield  216 fast_fputfield  [0x0000000124995480, 0x00000001249954e0]  96 bytes

  0x0000000124995480: vmovss (%rsp),%xmm0
  0x0000000124995485: add    $0x8,%rsp
  0x0000000124995489: movzwl 0x1(%r13),%ebx
  0x000000012499548e: mov    -0x30(%rbp),%rcx
  0x0000000124995492: shl    $0x2,%ebx
  0x0000000124995495: mov    0x40(%rcx,%rbx,8),%edx
  0x0000000124995499: mov    0x38(%rcx,%rbx,8),%rbx
  0x000000012499549e: shr    $0x15,%edx
  0x00000001249954a1: and    $0x1,%edx
  0x00000001249954a4: pop    %rcx
  0x00000001249954a5: cmp    (%rcx),%rax
  0x00000001249954a8: vmovss %xmm0,(%rcx,%rbx,1)
  0x00000001249954ad: test   %edx,%edx
  0x00000001249954af: je     0x00000001249954bb
  0x00000001249954b5: lock addl $0x0,-0x40(%rsp)
  0x00000001249954bb: movzbl 0x3(%r13),%ebx
  0x00000001249954c0: add    $0x3,%r13
  0x00000001249954c4: movabs $0x1151d7a20,%r10
  0x00000001249954ce: jmpq   *(%r10,%rbx,8)
  0x00000001249954d2: nopw   0x0(%rax,%rax,1)
  0x00000001249954d8: add    %al,(%rax)
  0x00000001249954da: add    %al,(%rax)
  0x00000001249954dc: add    %al,(%rax)
  0x00000001249954de: add    %al,(%rax)

----------------------------------------------------------------------
fast_iputfield  217 fast_iputfield  [0x0000000124995500, 0x0000000124995560]  96 bytes

  0x0000000124995500: mov    (%rsp),%eax
  0x0000000124995503: add    $0x8,%rsp
  0x0000000124995507: movzwl 0x1(%r13),%ebx
  0x000000012499550c: mov    -0x30(%rbp),%rcx
  0x0000000124995510: shl    $0x2,%ebx
  0x0000000124995513: mov    0x40(%rcx,%rbx,8),%edx
  0x0000000124995517: mov    0x38(%rcx,%rbx,8),%rbx
  0x000000012499551c: shr    $0x15,%edx
  0x000000012499551f: and    $0x1,%edx
  0x0000000124995522: pop    %rcx
  0x0000000124995523: cmp    (%rcx),%rax
  0x0000000124995526: mov    %eax,(%rcx,%rbx,1)
  0x0000000124995529: test   %edx,%edx
  0x000000012499552b: je     0x0000000124995537
  0x0000000124995531: lock addl $0x0,-0x40(%rsp)
  0x0000000124995537: movzbl 0x3(%r13),%ebx
  0x000000012499553c: add    $0x3,%r13
  0x0000000124995540: movabs $0x1151d7a20,%r10
  0x000000012499554a: jmpq   *(%r10,%rbx,8)
  0x000000012499554e: xchg   %ax,%ax
  0x0000000124995550: add    %al,(%rax)
  0x0000000124995552: add    %al,(%rax)
  0x0000000124995554: add    %al,(%rax)
  0x0000000124995556: add    %al,(%rax)
  0x0000000124995558: add    %al,(%rax)
  0x000000012499555a: add    %al,(%rax)
  0x000000012499555c: add    %al,(%rax)
  0x000000012499555e: add    %al,(%rax)

----------------------------------------------------------------------
fast_lputfield  218 fast_lputfield  [0x0000000124995580, 0x00000001249955e0]  96 bytes

  0x0000000124995580: mov    (%rsp),%rax
  0x0000000124995584: add    $0x10,%rsp
  0x0000000124995588: movzwl 0x1(%r13),%ebx
  0x000000012499558d: mov    -0x30(%rbp),%rcx
  0x0000000124995591: shl    $0x2,%ebx
  0x0000000124995594: mov    0x40(%rcx,%rbx,8),%edx
  0x0000000124995598: mov    0x38(%rcx,%rbx,8),%rbx
  0x000000012499559d: shr    $0x15,%edx
  0x00000001249955a0: and    $0x1,%edx
  0x00000001249955a3: pop    %rcx
  0x00000001249955a4: cmp    (%rcx),%rax
  0x00000001249955a7: mov    %rax,(%rcx,%rbx,1)
  0x00000001249955ab: test   %edx,%edx
  0x00000001249955ad: je     0x00000001249955b9
  0x00000001249955b3: lock addl $0x0,-0x40(%rsp)
  0x00000001249955b9: movzbl 0x3(%r13),%ebx
  0x00000001249955be: add    $0x3,%r13
  0x00000001249955c2: movabs $0x1151d7a20,%r10
  0x00000001249955cc: jmpq   *(%r10,%rbx,8)
  0x00000001249955d0: add    %al,(%rax)
  0x00000001249955d2: add    %al,(%rax)
  0x00000001249955d4: add    %al,(%rax)
  0x00000001249955d6: add    %al,(%rax)
  0x00000001249955d8: add    %al,(%rax)
  0x00000001249955da: add    %al,(%rax)
  0x00000001249955dc: add    %al,(%rax)
  0x00000001249955de: add    %al,(%rax)

----------------------------------------------------------------------
fast_sputfield  219 fast_sputfield  [0x0000000124995600, 0x0000000124995660]  96 bytes

  0x0000000124995600: mov    (%rsp),%eax
  0x0000000124995603: add    $0x8,%rsp
  0x0000000124995607: movzwl 0x1(%r13),%ebx
  0x000000012499560c: mov    -0x30(%rbp),%rcx
  0x0000000124995610: shl    $0x2,%ebx
  0x0000000124995613: mov    0x40(%rcx,%rbx,8),%edx
  0x0000000124995617: mov    0x38(%rcx,%rbx,8),%rbx
  0x000000012499561c: shr    $0x15,%edx
  0x000000012499561f: and    $0x1,%edx
  0x0000000124995622: pop    %rcx
  0x0000000124995623: cmp    (%rcx),%rax
  0x0000000124995626: mov    %ax,(%rcx,%rbx,1)
  0x000000012499562a: test   %edx,%edx
  0x000000012499562c: je     0x0000000124995638
  0x0000000124995632: lock addl $0x0,-0x40(%rsp)
  0x0000000124995638: movzbl 0x3(%r13),%ebx
  0x000000012499563d: add    $0x3,%r13
  0x0000000124995641: movabs $0x1151d7a20,%r10
  0x000000012499564b: jmpq   *(%r10,%rbx,8)
  0x000000012499564f: nop
  0x0000000124995650: add    %al,(%rax)
  0x0000000124995652: add    %al,(%rax)
  0x0000000124995654: add    %al,(%rax)
  0x0000000124995656: add    %al,(%rax)
  0x0000000124995658: add    %al,(%rax)
  0x000000012499565a: add    %al,(%rax)
  0x000000012499565c: add    %al,(%rax)
  0x000000012499565e: add    %al,(%rax)

----------------------------------------------------------------------
fast_aload_0  220 fast_aload_0  [0x0000000124995680, 0x00000001249956e0]  96 bytes

  0x0000000124995680: push   %rax
  0x0000000124995681: jmpq   0x00000001249956bf
  0x0000000124995686: sub    $0x8,%rsp
  0x000000012499568a: vmovss %xmm0,(%rsp)
  0x000000012499568f: jmpq   0x00000001249956bf
  0x0000000124995694: sub    $0x10,%rsp
  0x0000000124995698: vmovsd %xmm0,(%rsp)
  0x000000012499569d: jmpq   0x00000001249956bf
  0x00000001249956a2: sub    $0x10,%rsp
  0x00000001249956a6: mov    %rax,(%rsp)
  0x00000001249956aa: movabs $0x0,%r10
  0x00000001249956b4: mov    %r10,0x8(%rsp)
  0x00000001249956b9: jmpq   0x00000001249956bf
  0x00000001249956be: push   %rax
  0x00000001249956bf: mov    (%r14),%rax
  0x00000001249956c2: movzbl 0x1(%r13),%ebx
  0x00000001249956c7: inc    %r13
  0x00000001249956ca: movabs $0x1151d7220,%r10
  0x00000001249956d4: jmpq   *(%r10,%rbx,8)
  0x00000001249956d8: add    %al,(%rax)
  0x00000001249956da: add    %al,(%rax)
  0x00000001249956dc: add    %al,(%rax)
  0x00000001249956de: add    %al,(%rax)

----------------------------------------------------------------------
fast_iaccess_0  221 fast_iaccess_0  [0x0000000124995700, 0x0000000124995780]  128 bytes

  0x0000000124995700: push   %rax
  0x0000000124995701: jmpq   0x000000012499573f
  0x0000000124995706: sub    $0x8,%rsp
  0x000000012499570a: vmovss %xmm0,(%rsp)
  0x000000012499570f: jmpq   0x000000012499573f
  0x0000000124995714: sub    $0x10,%rsp
  0x0000000124995718: vmovsd %xmm0,(%rsp)
  0x000000012499571d: jmpq   0x000000012499573f
  0x0000000124995722: sub    $0x10,%rsp
  0x0000000124995726: mov    %rax,(%rsp)
  0x000000012499572a: movabs $0x0,%r10
  0x0000000124995734: mov    %r10,0x8(%rsp)
  0x0000000124995739: jmpq   0x000000012499573f
  0x000000012499573e: push   %rax
  0x000000012499573f: mov    (%r14),%rax
  0x0000000124995742: movzwl 0x2(%r13),%edx
  0x0000000124995747: mov    -0x30(%rbp),%rcx
  0x000000012499574b: shl    $0x2,%edx
  0x000000012499574e: mov    0x38(%rcx,%rdx,8),%rbx
  0x0000000124995753: inc    %r13
  0x0000000124995756: cmp    (%rax),%rax
  0x0000000124995759: mov    (%rax,%rbx,1),%eax
  0x000000012499575c: dec    %r13
  0x000000012499575f: movzbl 0x4(%r13),%ebx
  0x0000000124995764: add    $0x4,%r13
  0x0000000124995768: movabs $0x1151d5220,%r10
  0x0000000124995772: jmpq   *(%r10,%rbx,8)
  0x0000000124995776: xchg   %ax,%ax
  0x0000000124995778: add    %al,(%rax)
  0x000000012499577a: add    %al,(%rax)
  0x000000012499577c: add    %al,(%rax)
  0x000000012499577e: add    %al,(%rax)

----------------------------------------------------------------------
fast_aaccess_0  222 fast_aaccess_0  [0x00000001249957a0, 0x0000000124995820]  128 bytes

  0x00000001249957a0: push   %rax
  0x00000001249957a1: jmpq   0x00000001249957df
  0x00000001249957a6: sub    $0x8,%rsp
  0x00000001249957aa: vmovss %xmm0,(%rsp)
  0x00000001249957af: jmpq   0x00000001249957df
  0x00000001249957b4: sub    $0x10,%rsp
  0x00000001249957b8: vmovsd %xmm0,(%rsp)
  0x00000001249957bd: jmpq   0x00000001249957df
  0x00000001249957c2: sub    $0x10,%rsp
  0x00000001249957c6: mov    %rax,(%rsp)
  0x00000001249957ca: movabs $0x0,%r10
  0x00000001249957d4: mov    %r10,0x8(%rsp)
  0x00000001249957d9: jmpq   0x00000001249957df
  0x00000001249957de: push   %rax
  0x00000001249957df: mov    (%r14),%rax
  0x00000001249957e2: movzwl 0x2(%r13),%edx
  0x00000001249957e7: mov    -0x30(%rbp),%rcx
  0x00000001249957eb: shl    $0x2,%edx
  0x00000001249957ee: mov    0x38(%rcx,%rdx,8),%rbx
  0x00000001249957f3: inc    %r13
  0x00000001249957f6: cmp    (%rax),%rax
  0x00000001249957f9: mov    (%rax,%rbx,1),%eax
  0x00000001249957fc: shl    $0x3,%rax
  0x0000000124995800: dec    %r13
  0x0000000124995803: movzbl 0x4(%r13),%ebx
  0x0000000124995808: add    $0x4,%r13
  0x000000012499580c: movabs $0x1151d7220,%r10
  0x0000000124995816: jmpq   *(%r10,%rbx,8)
  0x000000012499581a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
fast_faccess_0  223 fast_faccess_0  [0x0000000124995840, 0x00000001249958c0]  128 bytes

  0x0000000124995840: push   %rax
  0x0000000124995841: jmpq   0x000000012499587f
  0x0000000124995846: sub    $0x8,%rsp
  0x000000012499584a: vmovss %xmm0,(%rsp)
  0x000000012499584f: jmpq   0x000000012499587f
  0x0000000124995854: sub    $0x10,%rsp
  0x0000000124995858: vmovsd %xmm0,(%rsp)
  0x000000012499585d: jmpq   0x000000012499587f
  0x0000000124995862: sub    $0x10,%rsp
  0x0000000124995866: mov    %rax,(%rsp)
  0x000000012499586a: movabs $0x0,%r10
  0x0000000124995874: mov    %r10,0x8(%rsp)
  0x0000000124995879: jmpq   0x000000012499587f
  0x000000012499587e: push   %rax
  0x000000012499587f: mov    (%r14),%rax
  0x0000000124995882: movzwl 0x2(%r13),%edx
  0x0000000124995887: mov    -0x30(%rbp),%rcx
  0x000000012499588b: shl    $0x2,%edx
  0x000000012499588e: mov    0x38(%rcx,%rdx,8),%rbx
  0x0000000124995893: inc    %r13
  0x0000000124995896: cmp    (%rax),%rax
  0x0000000124995899: vmovss (%rax,%rbx,1),%xmm0
  0x000000012499589e: dec    %r13
  0x00000001249958a1: movzbl 0x4(%r13),%ebx
  0x00000001249958a6: add    $0x4,%r13
  0x00000001249958aa: movabs $0x1151d6220,%r10
  0x00000001249958b4: jmpq   *(%r10,%rbx,8)
  0x00000001249958b8: add    %al,(%rax)
  0x00000001249958ba: add    %al,(%rax)
  0x00000001249958bc: add    %al,(%rax)
  0x00000001249958be: add    %al,(%rax)

----------------------------------------------------------------------
fast_iload  224 fast_iload  [0x00000001249958e0, 0x0000000124995960]  128 bytes

  0x00000001249958e0: push   %rax
  0x00000001249958e1: jmpq   0x000000012499591f
  0x00000001249958e6: sub    $0x8,%rsp
  0x00000001249958ea: vmovss %xmm0,(%rsp)
  0x00000001249958ef: jmpq   0x000000012499591f
  0x00000001249958f4: sub    $0x10,%rsp
  0x00000001249958f8: vmovsd %xmm0,(%rsp)
  0x00000001249958fd: jmpq   0x000000012499591f
  0x0000000124995902: sub    $0x10,%rsp
  0x0000000124995906: mov    %rax,(%rsp)
  0x000000012499590a: movabs $0x0,%r10
  0x0000000124995914: mov    %r10,0x8(%rsp)
  0x0000000124995919: jmpq   0x000000012499591f
  0x000000012499591e: push   %rax
  0x000000012499591f: movzbl 0x1(%r13),%ebx
  0x0000000124995924: neg    %rbx
  0x0000000124995927: mov    (%r14,%rbx,8),%eax
  0x000000012499592b: movzbl 0x2(%r13),%ebx
  0x0000000124995930: add    $0x2,%r13
  0x0000000124995934: movabs $0x1151d5220,%r10
  0x000000012499593e: jmpq   *(%r10,%rbx,8)
  0x0000000124995942: nopw   0x0(%rax,%rax,1)
  0x0000000124995948: add    %al,(%rax)
  0x000000012499594a: add    %al,(%rax)
  0x000000012499594c: add    %al,(%rax)
  0x000000012499594e: add    %al,(%rax)
  0x0000000124995950: add    %al,(%rax)
  0x0000000124995952: add    %al,(%rax)
  0x0000000124995954: add    %al,(%rax)
  0x0000000124995956: add    %al,(%rax)
  0x0000000124995958: add    %al,(%rax)
  0x000000012499595a: add    %al,(%rax)
  0x000000012499595c: add    %al,(%rax)
  0x000000012499595e: add    %al,(%rax)

----------------------------------------------------------------------
fast_iload2  225 fast_iload2  [0x0000000124995980, 0x0000000124995a00]  128 bytes

  0x0000000124995980: push   %rax
  0x0000000124995981: jmpq   0x00000001249959bf
  0x0000000124995986: sub    $0x8,%rsp
  0x000000012499598a: vmovss %xmm0,(%rsp)
  0x000000012499598f: jmpq   0x00000001249959bf
  0x0000000124995994: sub    $0x10,%rsp
  0x0000000124995998: vmovsd %xmm0,(%rsp)
  0x000000012499599d: jmpq   0x00000001249959bf
  0x00000001249959a2: sub    $0x10,%rsp
  0x00000001249959a6: mov    %rax,(%rsp)
  0x00000001249959aa: movabs $0x0,%r10
  0x00000001249959b4: mov    %r10,0x8(%rsp)
  0x00000001249959b9: jmpq   0x00000001249959bf
  0x00000001249959be: push   %rax
  0x00000001249959bf: movzbl 0x1(%r13),%ebx
  0x00000001249959c4: neg    %rbx
  0x00000001249959c7: mov    (%r14,%rbx,8),%eax
  0x00000001249959cb: push   %rax
  0x00000001249959cc: movzbl 0x3(%r13),%ebx
  0x00000001249959d1: neg    %rbx
  0x00000001249959d4: mov    (%r14,%rbx,8),%eax
  0x00000001249959d8: movzbl 0x4(%r13),%ebx
  0x00000001249959dd: add    $0x4,%r13
  0x00000001249959e1: movabs $0x1151d5220,%r10
  0x00000001249959eb: jmpq   *(%r10,%rbx,8)
  0x00000001249959ef: nop
  0x00000001249959f0: add    %al,(%rax)
  0x00000001249959f2: add    %al,(%rax)
  0x00000001249959f4: add    %al,(%rax)
  0x00000001249959f6: add    %al,(%rax)
  0x00000001249959f8: add    %al,(%rax)
  0x00000001249959fa: add    %al,(%rax)
  0x00000001249959fc: add    %al,(%rax)
  0x00000001249959fe: add    %al,(%rax)

----------------------------------------------------------------------
fast_icaload  226 fast_icaload  [0x0000000124995a20, 0x0000000124995aa0]  128 bytes

  0x0000000124995a20: push   %rax
  0x0000000124995a21: jmpq   0x0000000124995a5f
  0x0000000124995a26: sub    $0x8,%rsp
  0x0000000124995a2a: vmovss %xmm0,(%rsp)
  0x0000000124995a2f: jmpq   0x0000000124995a5f
  0x0000000124995a34: sub    $0x10,%rsp
  0x0000000124995a38: vmovsd %xmm0,(%rsp)
  0x0000000124995a3d: jmpq   0x0000000124995a5f
  0x0000000124995a42: sub    $0x10,%rsp
  0x0000000124995a46: mov    %rax,(%rsp)
  0x0000000124995a4a: movabs $0x0,%r10
  0x0000000124995a54: mov    %r10,0x8(%rsp)
  0x0000000124995a59: jmpq   0x0000000124995a5f
  0x0000000124995a5e: push   %rax
  0x0000000124995a5f: movzbl 0x1(%r13),%ebx
  0x0000000124995a64: neg    %rbx
  0x0000000124995a67: mov    (%r14,%rbx,8),%eax
  0x0000000124995a6b: pop    %rdx
  0x0000000124995a6c: movslq %eax,%rax
  0x0000000124995a6f: cmp    0xc(%rdx),%eax
  0x0000000124995a72: mov    %eax,%ebx
  0x0000000124995a74: jb     0x0000000124995a7e
  0x0000000124995a76: mov    %rdx,%rsi
  0x0000000124995a79: jmpq   0x0000000124982aa0
  0x0000000124995a7e: movzwl 0x10(%rdx,%rax,2),%eax
  0x0000000124995a83: movzbl 0x3(%r13),%ebx
  0x0000000124995a88: add    $0x3,%r13
  0x0000000124995a8c: movabs $0x1151d5220,%r10
  0x0000000124995a96: jmpq   *(%r10,%rbx,8)
  0x0000000124995a9a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
fast_invokevfinal  227 fast_invokevfinal  [0x0000000124995ac0, 0x0000000124995b20]  96 bytes

  0x0000000124995ac0: push   %rax
  0x0000000124995ac1: jmpq   0x0000000124995aff
  0x0000000124995ac6: sub    $0x8,%rsp
  0x0000000124995aca: vmovss %xmm0,(%rsp)
  0x0000000124995acf: jmpq   0x0000000124995aff
  0x0000000124995ad4: sub    $0x10,%rsp
  0x0000000124995ad8: vmovsd %xmm0,(%rsp)
  0x0000000124995add: jmpq   0x0000000124995aff
  0x0000000124995ae2: sub    $0x10,%rsp
  0x0000000124995ae6: mov    %rax,(%rsp)
  0x0000000124995aea: movabs $0x0,%r10
  0x0000000124995af4: mov    %r10,0x8(%rsp)
  0x0000000124995af9: jmpq   0x0000000124995aff
  0x0000000124995afe: push   %rax
  0x0000000124995aff: movabs $0x115051c83,%rdi
  0x0000000124995b09: and    $0xfffffffffffffff0,%rsp
  0x0000000124995b0d: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124995b12: hlt    
  0x0000000124995b13: nopl   0x0(%rax,%rax,1)
  0x0000000124995b18: add    %al,(%rax)
  0x0000000124995b1a: add    %al,(%rax)
  0x0000000124995b1c: add    %al,(%rax)
  0x0000000124995b1e: add    %al,(%rax)

----------------------------------------------------------------------
fast_linearswitch  228 fast_linearswitch  [0x0000000124995b40, 0x0000000124995c00]  192 bytes

  0x0000000124995b40: mov    (%rsp),%eax
  0x0000000124995b43: add    $0x8,%rsp
  0x0000000124995b47: bswap  %eax
  0x0000000124995b49: lea    0x4(%r13),%rbx
  0x0000000124995b4d: and    $0xfffffffffffffffc,%rbx
  0x0000000124995b51: mov    0x4(%rbx),%ecx
  0x0000000124995b54: bswap  %ecx
  0x0000000124995b56: jmp    0x0000000124995b62
  0x0000000124995b58: cmp    0x8(%rbx,%rcx,8),%eax
  0x0000000124995b5c: je     0x0000000124995b8c
  0x0000000124995b62: dec    %ecx
  0x0000000124995b64: jge    0x0000000124995b58
  0x0000000124995b66: mov    -0x28(%rbp),%rax
  0x0000000124995b6a: test   %rax,%rax
  0x0000000124995b6d: je     0x0000000124995b85
  0x0000000124995b73: addq   $0x1,0x10(%rax)
  0x0000000124995b78: sbbq   $0x0,0x10(%rax)
  0x0000000124995b7d: add    0x18(%rax),%rax
  0x0000000124995b81: mov    %rax,-0x28(%rbp)
  0x0000000124995b85: mov    (%rbx),%edx
  0x0000000124995b87: jmpq   0x0000000124995bbd
  0x0000000124995b8c: mov    0xc(%rbx,%rcx,8),%edx
  0x0000000124995b90: mov    -0x28(%rbp),%rax
  0x0000000124995b94: test   %rax,%rax
  0x0000000124995b97: je     0x0000000124995bbd
  0x0000000124995b9d: mov    $0x10,%ebx
  0x0000000124995ba2: imul   %rbx,%rcx
  0x0000000124995ba6: add    $0x20,%rcx
  0x0000000124995baa: addq   $0x1,(%rax,%rcx,1)
  0x0000000124995baf: sbbq   $0x0,(%rax,%rcx,1)
  0x0000000124995bb4: add    0x8(%rax,%rcx,1),%rax
  0x0000000124995bb9: mov    %rax,-0x28(%rbp)
  0x0000000124995bbd: bswap  %edx
  0x0000000124995bbf: movslq %edx,%rdx
  0x0000000124995bc2: movzbl 0x0(%r13,%rdx,1),%ebx
  0x0000000124995bc8: add    %rdx,%r13
  0x0000000124995bcb: testb  $0x8,0x108(%r15)
  0x0000000124995bd3: je     0x0000000124995be1
  0x0000000124995bd5: movabs $0x1151dd020,%r10
  0x0000000124995bdf: jmp    0x0000000124995beb
  0x0000000124995be1: movabs $0x1151d7a20,%r10
  0x0000000124995beb: jmpq   *(%r10,%rbx,8)
  0x0000000124995bef: nop
  0x0000000124995bf0: add    %al,(%rax)
  0x0000000124995bf2: add    %al,(%rax)
  0x0000000124995bf4: add    %al,(%rax)
  0x0000000124995bf6: add    %al,(%rax)
  0x0000000124995bf8: add    %al,(%rax)
  0x0000000124995bfa: add    %al,(%rax)
  0x0000000124995bfc: add    %al,(%rax)
  0x0000000124995bfe: add    %al,(%rax)

----------------------------------------------------------------------
fast_binaryswitch  229 fast_binaryswitch  [0x0000000124995c20, 0x0000000124995d20]  256 bytes

  0x0000000124995c20: mov    (%rsp),%eax
  0x0000000124995c23: add    $0x8,%rsp
  0x0000000124995c27: lea    0xc(%r13),%rbx
  0x0000000124995c2b: and    $0xfffffffffffffffc,%rbx
  0x0000000124995c2f: xor    %ecx,%ecx
  0x0000000124995c31: mov    -0x4(%rbx),%edx
  0x0000000124995c34: bswap  %edx
  0x0000000124995c36: jmpq   0x0000000124995c4e
  0x0000000124995c3b: lea    (%ecx,%edx,1),%edi
  0x0000000124995c3f: sar    %edi
  0x0000000124995c41: mov    (%rbx,%rdi,8),%esi
  0x0000000124995c44: bswap  %esi
  0x0000000124995c46: cmp    %esi,%eax
  0x0000000124995c48: cmovl  %edi,%edx
  0x0000000124995c4b: cmovge %edi,%ecx
  0x0000000124995c4e: lea    0x1(%ecx),%edi
  0x0000000124995c52: cmp    %edx,%edi
  0x0000000124995c54: jl     0x0000000124995c3b
  0x0000000124995c56: mov    (%rbx,%rcx,8),%esi
  0x0000000124995c59: bswap  %esi
  0x0000000124995c5b: cmp    %esi,%eax
  0x0000000124995c5d: jne    0x0000000124995cc6
  0x0000000124995c63: mov    0x4(%rbx,%rcx,8),%edx
  0x0000000124995c67: mov    -0x28(%rbp),%rax
  0x0000000124995c6b: test   %rax,%rax
  0x0000000124995c6e: je     0x0000000124995c94
  0x0000000124995c74: mov    $0x10,%ebx
  0x0000000124995c79: imul   %rbx,%rcx
  0x0000000124995c7d: add    $0x20,%rcx
  0x0000000124995c81: addq   $0x1,(%rax,%rcx,1)
  0x0000000124995c86: sbbq   $0x0,(%rax,%rcx,1)
  0x0000000124995c8b: add    0x8(%rax,%rcx,1),%rax
  0x0000000124995c90: mov    %rax,-0x28(%rbp)
  0x0000000124995c94: bswap  %edx
  0x0000000124995c96: movslq %edx,%rdx
  0x0000000124995c99: movzbl 0x0(%r13,%rdx,1),%ebx
  0x0000000124995c9f: add    %rdx,%r13
  0x0000000124995ca2: testb  $0x8,0x108(%r15)
  0x0000000124995caa: je     0x0000000124995cb8
  0x0000000124995cac: movabs $0x1151dd020,%r10
  0x0000000124995cb6: jmp    0x0000000124995cc2
  0x0000000124995cb8: movabs $0x1151d7a20,%r10
  0x0000000124995cc2: jmpq   *(%r10,%rbx,8)
  0x0000000124995cc6: mov    -0x28(%rbp),%rcx
  0x0000000124995cca: test   %rcx,%rcx
  0x0000000124995ccd: je     0x0000000124995ce5
  0x0000000124995cd3: addq   $0x1,0x10(%rcx)
  0x0000000124995cd8: sbbq   $0x0,0x10(%rcx)
  0x0000000124995cdd: add    0x18(%rcx),%rcx
  0x0000000124995ce1: mov    %rcx,-0x28(%rbp)
  0x0000000124995ce5: mov    -0x8(%rbx),%edx
  0x0000000124995ce8: bswap  %edx
  0x0000000124995cea: movslq %edx,%rdx
  0x0000000124995ced: movzbl 0x0(%r13,%rdx,1),%ebx
  0x0000000124995cf3: add    %rdx,%r13
  0x0000000124995cf6: testb  $0x8,0x108(%r15)
  0x0000000124995cfe: je     0x0000000124995d0c
  0x0000000124995d00: movabs $0x1151dd020,%r10
  0x0000000124995d0a: jmp    0x0000000124995d16
  0x0000000124995d0c: movabs $0x1151d7a20,%r10
  0x0000000124995d16: jmpq   *(%r10,%rbx,8)
  0x0000000124995d1a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
fast_aldc  230 fast_aldc  [0x0000000124995d40, 0x0000000124995ea0]  352 bytes

  0x0000000124995d40: push   %rax
  0x0000000124995d41: jmpq   0x0000000124995d7f
  0x0000000124995d46: sub    $0x8,%rsp
  0x0000000124995d4a: vmovss %xmm0,(%rsp)
  0x0000000124995d4f: jmpq   0x0000000124995d7f
  0x0000000124995d54: sub    $0x10,%rsp
  0x0000000124995d58: vmovsd %xmm0,(%rsp)
  0x0000000124995d5d: jmpq   0x0000000124995d7f
  0x0000000124995d62: sub    $0x10,%rsp
  0x0000000124995d66: mov    %rax,(%rsp)
  0x0000000124995d6a: movabs $0x0,%r10
  0x0000000124995d74: mov    %r10,0x8(%rsp)
  0x0000000124995d79: jmpq   0x0000000124995d7f
  0x0000000124995d7e: push   %rax
  0x0000000124995d7f: movzbl 0x1(%r13),%edx
  0x0000000124995d84: mov    -0x18(%rbp),%rax
  0x0000000124995d88: mov    0x8(%rax),%rax
  0x0000000124995d8c: mov    0x8(%rax),%rax
  0x0000000124995d90: mov    0x10(%rax),%rax
  0x0000000124995d94: mov    0x10(%rax),%rax
  0x0000000124995d98: mov    (%rax),%rax
  0x0000000124995d9b: mov    0x10(%rax,%rdx,4),%eax
  0x0000000124995d9f: shl    $0x3,%rax
  0x0000000124995da3: test   %rax,%rax
  0x0000000124995da6: jne    0x0000000124995e65
  0x0000000124995dac: mov    $0xe6,%esi
  0x0000000124995db1: callq  0x0000000124995dbb
  0x0000000124995db6: jmpq   0x0000000124995e65
  0x0000000124995dbb: lea    0x8(%rsp),%rax
  0x0000000124995dc0: mov    %r13,-0x40(%rbp)
  0x0000000124995dc4: mov    %r15,%rdi
  0x0000000124995dc7: vzeroupper 
  0x0000000124995dca: mov    %rbp,0x330(%r15)
  0x0000000124995dd1: mov    %rax,0x320(%r15)
  0x0000000124995dd8: test   $0xf,%esp
  0x0000000124995dde: je     0x0000000124995df6
  0x0000000124995de4: sub    $0x8,%rsp
  0x0000000124995de8: callq  0x0000000114ba9de6 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0x0000000124995ded: add    $0x8,%rsp
  0x0000000124995df1: jmpq   0x0000000124995dfb
  0x0000000124995df6: callq  0x0000000114ba9de6 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0x0000000124995dfb: movabs $0x0,%r10
  0x0000000124995e05: mov    %r10,0x320(%r15)
  0x0000000124995e0c: movabs $0x0,%r10
  0x0000000124995e16: mov    %r10,0x330(%r15)
  0x0000000124995e1d: movabs $0x0,%r10
  0x0000000124995e27: mov    %r10,0x328(%r15)
  0x0000000124995e2e: vzeroupper 
  0x0000000124995e31: cmpq   $0x0,0x8(%r15)
  0x0000000124995e39: je     0x0000000124995e44
  0x0000000124995e3f: jmpq   0x0000000124975780
  0x0000000124995e44: mov    0x380(%r15),%rax
  0x0000000124995e4b: movabs $0x0,%r10
  0x0000000124995e55: mov    %r10,0x380(%r15)
  0x0000000124995e5c: mov    -0x40(%rbp),%r13
  0x0000000124995e60: mov    -0x38(%rbp),%r14
  0x0000000124995e64: retq   
  0x0000000124995e65: mov    -0xf7b3474(%rip),%rdx        # 0x00000001151e29f8 = Universe::_the_null_sentinel
  0x0000000124995e6c: cmp    %rax,%rdx
  0x0000000124995e6f: jne    0x0000000124995e74
  0x0000000124995e71: xor    %rax,%rax
  0x0000000124995e74: movzbl 0x2(%r13),%ebx
  0x0000000124995e79: add    $0x2,%r13
  0x0000000124995e7d: movabs $0x1151d7220,%r10
  0x0000000124995e87: jmpq   *(%r10,%rbx,8)
  0x0000000124995e8b: nopl   0x0(%rax,%rax,1)
  0x0000000124995e90: add    %al,(%rax)
  0x0000000124995e92: add    %al,(%rax)
  0x0000000124995e94: add    %al,(%rax)
  0x0000000124995e96: add    %al,(%rax)
  0x0000000124995e98: add    %al,(%rax)
  0x0000000124995e9a: add    %al,(%rax)
  0x0000000124995e9c: add    %al,(%rax)
  0x0000000124995e9e: add    %al,(%rax)

----------------------------------------------------------------------
fast_aldc_w  231 fast_aldc_w  [0x0000000124995ec0, 0x0000000124996020]  352 bytes

  0x0000000124995ec0: push   %rax
  0x0000000124995ec1: jmpq   0x0000000124995eff
  0x0000000124995ec6: sub    $0x8,%rsp
  0x0000000124995eca: vmovss %xmm0,(%rsp)
  0x0000000124995ecf: jmpq   0x0000000124995eff
  0x0000000124995ed4: sub    $0x10,%rsp
  0x0000000124995ed8: vmovsd %xmm0,(%rsp)
  0x0000000124995edd: jmpq   0x0000000124995eff
  0x0000000124995ee2: sub    $0x10,%rsp
  0x0000000124995ee6: mov    %rax,(%rsp)
  0x0000000124995eea: movabs $0x0,%r10
  0x0000000124995ef4: mov    %r10,0x8(%rsp)
  0x0000000124995ef9: jmpq   0x0000000124995eff
  0x0000000124995efe: push   %rax
  0x0000000124995eff: movzwl 0x1(%r13),%edx
  0x0000000124995f04: mov    -0x18(%rbp),%rax
  0x0000000124995f08: mov    0x8(%rax),%rax
  0x0000000124995f0c: mov    0x8(%rax),%rax
  0x0000000124995f10: mov    0x10(%rax),%rax
  0x0000000124995f14: mov    0x10(%rax),%rax
  0x0000000124995f18: mov    (%rax),%rax
  0x0000000124995f1b: mov    0x10(%rax,%rdx,4),%eax
  0x0000000124995f1f: shl    $0x3,%rax
  0x0000000124995f23: test   %rax,%rax
  0x0000000124995f26: jne    0x0000000124995fe5
  0x0000000124995f2c: mov    $0xe7,%esi
  0x0000000124995f31: callq  0x0000000124995f3b
  0x0000000124995f36: jmpq   0x0000000124995fe5
  0x0000000124995f3b: lea    0x8(%rsp),%rax
  0x0000000124995f40: mov    %r13,-0x40(%rbp)
  0x0000000124995f44: mov    %r15,%rdi
  0x0000000124995f47: vzeroupper 
  0x0000000124995f4a: mov    %rbp,0x330(%r15)
  0x0000000124995f51: mov    %rax,0x320(%r15)
  0x0000000124995f58: test   $0xf,%esp
  0x0000000124995f5e: je     0x0000000124995f76
  0x0000000124995f64: sub    $0x8,%rsp
  0x0000000124995f68: callq  0x0000000114ba9de6 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0x0000000124995f6d: add    $0x8,%rsp
  0x0000000124995f71: jmpq   0x0000000124995f7b
  0x0000000124995f76: callq  0x0000000114ba9de6 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0x0000000124995f7b: movabs $0x0,%r10
  0x0000000124995f85: mov    %r10,0x320(%r15)
  0x0000000124995f8c: movabs $0x0,%r10
  0x0000000124995f96: mov    %r10,0x330(%r15)
  0x0000000124995f9d: movabs $0x0,%r10
  0x0000000124995fa7: mov    %r10,0x328(%r15)
  0x0000000124995fae: vzeroupper 
  0x0000000124995fb1: cmpq   $0x0,0x8(%r15)
  0x0000000124995fb9: je     0x0000000124995fc4
  0x0000000124995fbf: jmpq   0x0000000124975780
  0x0000000124995fc4: mov    0x380(%r15),%rax
  0x0000000124995fcb: movabs $0x0,%r10
  0x0000000124995fd5: mov    %r10,0x380(%r15)
  0x0000000124995fdc: mov    -0x40(%rbp),%r13
  0x0000000124995fe0: mov    -0x38(%rbp),%r14
  0x0000000124995fe4: retq   
  0x0000000124995fe5: mov    -0xf7b35f4(%rip),%rdx        # 0x00000001151e29f8 = Universe::_the_null_sentinel
  0x0000000124995fec: cmp    %rax,%rdx
  0x0000000124995fef: jne    0x0000000124995ff4
  0x0000000124995ff1: xor    %rax,%rax
  0x0000000124995ff4: movzbl 0x3(%r13),%ebx
  0x0000000124995ff9: add    $0x3,%r13
  0x0000000124995ffd: movabs $0x1151d7220,%r10
  0x0000000124996007: jmpq   *(%r10,%rbx,8)
  0x000000012499600b: nopl   0x0(%rax,%rax,1)
  0x0000000124996010: add    %al,(%rax)
  0x0000000124996012: add    %al,(%rax)
  0x0000000124996014: add    %al,(%rax)
  0x0000000124996016: add    %al,(%rax)
  0x0000000124996018: add    %al,(%rax)
  0x000000012499601a: add    %al,(%rax)
  0x000000012499601c: add    %al,(%rax)
  0x000000012499601e: add    %al,(%rax)

----------------------------------------------------------------------
return_register_finalizer  232 return_register_finalizer  [0x0000000124996040, 0x0000000124996520]  1248 bytes

  0x0000000124996040: push   %rax
  0x0000000124996041: jmpq   0x000000012499607f
  0x0000000124996046: sub    $0x8,%rsp
  0x000000012499604a: vmovss %xmm0,(%rsp)
  0x000000012499604f: jmpq   0x000000012499607f
  0x0000000124996054: sub    $0x10,%rsp
  0x0000000124996058: vmovsd %xmm0,(%rsp)
  0x000000012499605d: jmpq   0x000000012499607f
  0x0000000124996062: sub    $0x10,%rsp
  0x0000000124996066: mov    %rax,(%rsp)
  0x000000012499606a: movabs $0x0,%r10
  0x0000000124996074: mov    %r10,0x8(%rsp)
  0x0000000124996079: jmpq   0x000000012499607f
  0x000000012499607e: push   %rax
  0x000000012499607f: mov    (%r14),%rsi
  0x0000000124996082: mov    0x8(%rsi),%edi
  0x0000000124996085: movabs $0x800000000,%r12
  0x000000012499608f: add    %r12,%rdi
  0x0000000124996092: xor    %r12,%r12
  0x0000000124996095: mov    0xa4(%rdi),%edi
  0x000000012499609b: test   $0x40000000,%edi
  0x00000001249960a1: je     0x0000000124996143
  0x00000001249960a7: callq  0x00000001249960b1
  0x00000001249960ac: jmpq   0x0000000124996143
  0x00000001249960b1: lea    0x8(%rsp),%rax
  0x00000001249960b6: mov    %r13,-0x40(%rbp)
  0x00000001249960ba: mov    %r15,%rdi
  0x00000001249960bd: vzeroupper 
  0x00000001249960c0: mov    %rbp,0x330(%r15)
  0x00000001249960c7: mov    %rax,0x320(%r15)
  0x00000001249960ce: test   $0xf,%esp
  0x00000001249960d4: je     0x00000001249960ec
  0x00000001249960da: sub    $0x8,%rsp
  0x00000001249960de: callq  0x0000000114baa498 = InterpreterRuntime::register_finalizer(JavaThread*, oopDesc*)
  0x00000001249960e3: add    $0x8,%rsp
  0x00000001249960e7: jmpq   0x00000001249960f1
  0x00000001249960ec: callq  0x0000000114baa498 = InterpreterRuntime::register_finalizer(JavaThread*, oopDesc*)
  0x00000001249960f1: movabs $0x0,%r10
  0x00000001249960fb: mov    %r10,0x320(%r15)
  0x0000000124996102: movabs $0x0,%r10
  0x000000012499610c: mov    %r10,0x330(%r15)
  0x0000000124996113: movabs $0x0,%r10
  0x000000012499611d: mov    %r10,0x328(%r15)
  0x0000000124996124: vzeroupper 
  0x0000000124996127: cmpq   $0x0,0x8(%r15)
  0x000000012499612f: je     0x000000012499613a
  0x0000000124996135: jmpq   0x0000000124975780
  0x000000012499613a: mov    -0x40(%rbp),%r13
  0x000000012499613e: mov    -0x38(%rbp),%r14
  0x0000000124996142: retq   
  0x0000000124996143: mov    0x3dd(%r15),%bl
  0x000000012499614a: movb   $0x0,0x3dd(%r15)
  0x0000000124996152: mov    -0x18(%rbp),%rcx
  0x0000000124996156: mov    0x20(%rcx),%ecx
  0x0000000124996159: test   $0x20,%ecx
  0x000000012499615f: je     0x000000012499630e
  0x0000000124996165: test   $0xff,%bl
  0x0000000124996168: jne    0x00000001249963e2
  0x000000012499616e: lea    -0x58(%rbp),%rsi
  0x0000000124996172: mov    0x8(%rsi),%rax
  0x0000000124996176: test   %rax,%rax
  0x0000000124996179: jne    0x000000012499622f
  0x000000012499617f: callq  0x0000000124996189
  0x0000000124996184: jmpq   0x000000012499621b
  0x0000000124996189: lea    0x8(%rsp),%rax
  0x000000012499618e: mov    %r13,-0x40(%rbp)
  0x0000000124996192: mov    %r15,%rdi
  0x0000000124996195: vzeroupper 
  0x0000000124996198: mov    %rbp,0x330(%r15)
  0x000000012499619f: mov    %rax,0x320(%r15)
  0x00000001249961a6: test   $0xf,%esp
  0x00000001249961ac: je     0x00000001249961c4
  0x00000001249961b2: sub    $0x8,%rsp
  0x00000001249961b6: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00000001249961bb: add    $0x8,%rsp
  0x00000001249961bf: jmpq   0x00000001249961c9
  0x00000001249961c4: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00000001249961c9: movabs $0x0,%r10
  0x00000001249961d3: mov    %r10,0x320(%r15)
  0x00000001249961da: movabs $0x0,%r10
  0x00000001249961e4: mov    %r10,0x330(%r15)
  0x00000001249961eb: movabs $0x0,%r10
  0x00000001249961f5: mov    %r10,0x328(%r15)
  0x00000001249961fc: vzeroupper 
  0x00000001249961ff: cmpq   $0x0,0x8(%r15)
  0x0000000124996207: je     0x0000000124996212
  0x000000012499620d: jmpq   0x0000000124975780
  0x0000000124996212: mov    -0x40(%rbp),%r13
  0x0000000124996216: mov    -0x38(%rbp),%r14
  0x000000012499621a: retq   
  0x000000012499621b: movabs $0x114ff3493,%rdi
  0x0000000124996225: and    $0xfffffffffffffff0,%rsp
  0x0000000124996229: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000012499622e: hlt    
  0x000000012499622f: mov    %r13,-0x40(%rbp)
  0x0000000124996233: lea    (%rsi),%rax
  0x0000000124996236: mov    0x8(%rsi),%rcx
  0x000000012499623a: movq   $0x0,0x8(%rsi)
  0x0000000124996242: mov    (%rcx),%rdx
  0x0000000124996245: and    $0x7,%rdx
  0x0000000124996249: cmp    $0x5,%rdx
  0x000000012499624d: je     0x000000012499630a
  0x0000000124996253: mov    (%rax),%rdx
  0x0000000124996256: test   %rdx,%rdx
  0x0000000124996259: je     0x000000012499630a
  0x000000012499625f: lock cmpxchg %rdx,(%rcx)
  0x0000000124996264: je     0x000000012499630a
  0x000000012499626a: mov    %rcx,0x8(%rsi)
  0x000000012499626e: callq  0x0000000124996278
  0x0000000124996273: jmpq   0x000000012499630a
  0x0000000124996278: lea    0x8(%rsp),%rax
  0x000000012499627d: mov    %r13,-0x40(%rbp)
  0x0000000124996281: mov    %r15,%rdi
  0x0000000124996284: vzeroupper 
  0x0000000124996287: mov    %rbp,0x330(%r15)
  0x000000012499628e: mov    %rax,0x320(%r15)
  0x0000000124996295: test   $0xf,%esp
  0x000000012499629b: je     0x00000001249962b3
  0x00000001249962a1: sub    $0x8,%rsp
  0x00000001249962a5: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00000001249962aa: add    $0x8,%rsp
  0x00000001249962ae: jmpq   0x00000001249962b8
  0x00000001249962b3: callq  0x0000000114babc82 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00000001249962b8: movabs $0x0,%r10
  0x00000001249962c2: mov    %r10,0x320(%r15)
  0x00000001249962c9: movabs $0x0,%r10
  0x00000001249962d3: mov    %r10,0x330(%r15)
  0x00000001249962da: movabs $0x0,%r10
  0x00000001249962e4: mov    %r10,0x328(%r15)
  0x00000001249962eb: vzeroupper 
  0x00000001249962ee: cmpq   $0x0,0x8(%r15)
  0x00000001249962f6: je     0x0000000124996301
  0x00000001249962fc: jmpq   0x0000000124975780
  0x0000000124996301: mov    -0x40(%rbp),%r13
  0x0000000124996305: mov    -0x38(%rbp),%r14
  0x0000000124996309: retq   
  0x000000012499630a: mov    -0x40(%rbp),%r13
  0x000000012499630e: mov    -0x48(%rbp),%rsi
  0x0000000124996312: lea    -0x48(%rbp),%rbx
  0x0000000124996316: jmpq   0x00000001249963dd
  0x000000012499631b: callq  0x0000000124996325
  0x0000000124996320: jmpq   0x00000001249963b7
  0x0000000124996325: lea    0x8(%rsp),%rax
  0x000000012499632a: mov    %r13,-0x40(%rbp)
  0x000000012499632e: mov    %r15,%rdi
  0x0000000124996331: vzeroupper 
  0x0000000124996334: mov    %rbp,0x330(%r15)
  0x000000012499633b: mov    %rax,0x320(%r15)
  0x0000000124996342: test   $0xf,%esp
  0x0000000124996348: je     0x0000000124996360
  0x000000012499634e: sub    $0x8,%rsp
  0x0000000124996352: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x0000000124996357: add    $0x8,%rsp
  0x000000012499635b: jmpq   0x0000000124996365
  0x0000000124996360: callq  0x0000000114babd78 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x0000000124996365: movabs $0x0,%r10
  0x000000012499636f: mov    %r10,0x320(%r15)
  0x0000000124996376: movabs $0x0,%r10
  0x0000000124996380: mov    %r10,0x330(%r15)
  0x0000000124996387: movabs $0x0,%r10
  0x0000000124996391: mov    %r10,0x328(%r15)
  0x0000000124996398: vzeroupper 
  0x000000012499639b: cmpq   $0x0,0x8(%r15)
  0x00000001249963a3: je     0x00000001249963ae
  0x00000001249963a9: jmpq   0x0000000124975780
  0x00000001249963ae: mov    -0x40(%rbp),%r13
  0x00000001249963b2: mov    -0x38(%rbp),%r14
  0x00000001249963b6: retq   
  0x00000001249963b7: movabs $0x114ff3493,%rdi
  0x00000001249963c1: and    $0xfffffffffffffff0,%rsp
  0x00000001249963c5: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x00000001249963ca: hlt    
  0x00000001249963cb: cmpq   $0x0,0x8(%rsi)
  0x00000001249963d3: jne    0x000000012499631b
  0x00000001249963d9: add    $0x10,%rsi
  0x00000001249963dd: cmp    %rbx,%rsi
  0x00000001249963e0: jne    0x00000001249963cb
  0x00000001249963e2: cmpb   $0x0,-0xf7dc30f(%rip)        # 0x00000001151ba0da = DTraceMethodProbes
  0x00000001249963e9: je     0x0000000124996419
  0x00000001249963ef: mov    -0x18(%rbp),%rsi
  0x00000001249963f3: mov    %r15,%rdi
  0x00000001249963f6: test   $0xf,%esp
  0x00000001249963fc: je     0x0000000124996414
  0x0000000124996402: sub    $0x8,%rsp
  0x0000000124996406: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x000000012499640b: add    $0x8,%rsp
  0x000000012499640f: jmpq   0x0000000124996419
  0x0000000124996414: callq  0x0000000114e979b8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x0000000124996419: mov    -0x8(%rbp),%rbx
  0x000000012499641d: cmpl   $0x3,0x408(%r15)
  0x0000000124996428: je     0x0000000124996511
  0x000000012499642e: cmp    0x418(%r15),%rbx
  0x0000000124996435: jle    0x0000000124996511
  0x000000012499643b: mov    %r15,%rdi
  0x000000012499643e: test   $0xf,%esp
  0x0000000124996444: je     0x000000012499645c
  0x000000012499644a: sub    $0x8,%rsp
  0x000000012499644e: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x0000000124996453: add    $0x8,%rsp
  0x0000000124996457: jmpq   0x0000000124996461
  0x000000012499645c: callq  0x0000000114e9aaac = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x0000000124996461: callq  0x000000012499646b
  0x0000000124996466: jmpq   0x00000001249964fd
  0x000000012499646b: lea    0x8(%rsp),%rax
  0x0000000124996470: mov    %r13,-0x40(%rbp)
  0x0000000124996474: mov    %r15,%rdi
  0x0000000124996477: vzeroupper 
  0x000000012499647a: mov    %rbp,0x330(%r15)
  0x0000000124996481: mov    %rax,0x320(%r15)
  0x0000000124996488: test   $0xf,%esp
  0x000000012499648e: je     0x00000001249964a6
  0x0000000124996494: sub    $0x8,%rsp
  0x0000000124996498: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x000000012499649d: add    $0x8,%rsp
  0x00000001249964a1: jmpq   0x00000001249964ab
  0x00000001249964a6: callq  0x0000000114baa8de = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00000001249964ab: movabs $0x0,%r10
  0x00000001249964b5: mov    %r10,0x320(%r15)
  0x00000001249964bc: movabs $0x0,%r10
  0x00000001249964c6: mov    %r10,0x330(%r15)
  0x00000001249964cd: movabs $0x0,%r10
  0x00000001249964d7: mov    %r10,0x328(%r15)
  0x00000001249964de: vzeroupper 
  0x00000001249964e1: cmpq   $0x0,0x8(%r15)
  0x00000001249964e9: je     0x00000001249964f4
  0x00000001249964ef: jmpq   0x0000000124975780
  0x00000001249964f4: mov    -0x40(%rbp),%r13
  0x00000001249964f8: mov    -0x38(%rbp),%r14
  0x00000001249964fc: retq   
  0x00000001249964fd: movabs $0x114ff3493,%rdi
  0x0000000124996507: and    $0xfffffffffffffff0,%rsp
  0x000000012499650b: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124996510: hlt    
  0x0000000124996511: leaveq 
  0x0000000124996512: pop    %r13
  0x0000000124996514: mov    %rbx,%rsp
  0x0000000124996517: jmpq   *%r13
  0x000000012499651a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
invokehandle  233 invokehandle  [0x0000000124996540, 0x0000000124996840]  768 bytes

  0x0000000124996540: push   %rax
  0x0000000124996541: jmpq   0x000000012499657f
  0x0000000124996546: sub    $0x8,%rsp
  0x000000012499654a: vmovss %xmm0,(%rsp)
  0x000000012499654f: jmpq   0x000000012499657f
  0x0000000124996554: sub    $0x10,%rsp
  0x0000000124996558: vmovsd %xmm0,(%rsp)
  0x000000012499655d: jmpq   0x000000012499657f
  0x0000000124996562: sub    $0x10,%rsp
  0x0000000124996566: mov    %rax,(%rsp)
  0x000000012499656a: movabs $0x0,%r10
  0x0000000124996574: mov    %r10,0x8(%rsp)
  0x0000000124996579: jmpq   0x000000012499657f
  0x000000012499657e: push   %rax
  0x000000012499657f: mov    %r13,-0x40(%rbp)
  0x0000000124996583: movzwl 0x1(%r13),%edx
  0x0000000124996588: mov    -0x30(%rbp),%rcx
  0x000000012499658c: shl    $0x2,%edx
  0x000000012499658f: mov    0x28(%rcx,%rdx,8),%ebx
  0x0000000124996593: shr    $0x10,%ebx
  0x0000000124996596: and    $0xff,%ebx
  0x000000012499659c: cmp    $0xe9,%ebx
  0x00000001249965a2: je     0x0000000124996658
  0x00000001249965a8: mov    $0xe9,%ebx
  0x00000001249965ad: callq  0x00000001249965b7
  0x00000001249965b2: jmpq   0x000000012499664c
  0x00000001249965b7: mov    %rbx,%rsi
  0x00000001249965ba: lea    0x8(%rsp),%rax
  0x00000001249965bf: mov    %r13,-0x40(%rbp)
  0x00000001249965c3: mov    %r15,%rdi
  0x00000001249965c6: vzeroupper 
  0x00000001249965c9: mov    %rbp,0x330(%r15)
  0x00000001249965d0: mov    %rax,0x320(%r15)
  0x00000001249965d7: test   $0xf,%esp
  0x00000001249965dd: je     0x00000001249965f5
  0x00000001249965e3: sub    $0x8,%rsp
  0x00000001249965e7: callq  0x0000000114bac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x00000001249965ec: add    $0x8,%rsp
  0x00000001249965f0: jmpq   0x00000001249965fa
  0x00000001249965f5: callq  0x0000000114bac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x00000001249965fa: movabs $0x0,%r10
  0x0000000124996604: mov    %r10,0x320(%r15)
  0x000000012499660b: movabs $0x0,%r10
  0x0000000124996615: mov    %r10,0x330(%r15)
  0x000000012499661c: movabs $0x0,%r10
  0x0000000124996626: mov    %r10,0x328(%r15)
  0x000000012499662d: vzeroupper 
  0x0000000124996630: cmpq   $0x0,0x8(%r15)
  0x0000000124996638: je     0x0000000124996643
  0x000000012499663e: jmpq   0x0000000124975780
  0x0000000124996643: mov    -0x40(%rbp),%r13
  0x0000000124996647: mov    -0x38(%rbp),%r14
  0x000000012499664b: retq   
  0x000000012499664c: movzwl 0x1(%r13),%edx
  0x0000000124996651: mov    -0x30(%rbp),%rcx
  0x0000000124996655: shl    $0x2,%edx
  0x0000000124996658: mov    0x30(%rcx,%rdx,8),%rbx
  0x000000012499665d: mov    0x38(%rcx,%rdx,8),%rax
  0x0000000124996662: mov    0x40(%rcx,%rdx,8),%edx
  0x0000000124996666: test   $0x1000000,%edx
  0x000000012499666c: je     0x0000000124996697
  0x0000000124996672: push   %rbx
  0x0000000124996673: mov    %rax,%rbx
  0x0000000124996676: mov    -0x18(%rbp),%rax
  0x000000012499667a: mov    0x8(%rax),%rax
  0x000000012499667e: mov    0x8(%rax),%rax
  0x0000000124996682: mov    0x10(%rax),%rax
  0x0000000124996686: mov    0x10(%rax),%rax
  0x000000012499668a: mov    (%rax),%rax
  0x000000012499668d: mov    0x10(%rax,%rbx,4),%eax
  0x0000000124996691: shl    $0x3,%rax
  0x0000000124996695: pop    %rbx
  0x0000000124996696: push   %rax
  0x0000000124996697: mov    %edx,%ecx
  0x0000000124996699: and    $0xff,%ecx
  0x000000012499669f: mov    -0x8(%rsp,%rcx,8),%rcx
  0x00000001249966a4: shr    $0x1c,%edx
  0x00000001249966a7: movabs $0x1151d8730,%r10
  0x00000001249966b1: mov    (%r10,%rdx,8),%rdx
  0x00000001249966b5: push   %rdx
  0x00000001249966b6: cmp    (%rcx),%rax
  0x00000001249966b9: mov    -0x28(%rbp),%rax
  0x00000001249966bd: test   %rax,%rax
  0x00000001249966c0: je     0x00000001249966d8
  0x00000001249966c6: addq   $0x1,0x8(%rax)
  0x00000001249966cb: sbbq   $0x0,0x8(%rax)
  0x00000001249966d0: add    $0x38,%rax
  0x00000001249966d4: mov    %rax,-0x28(%rbp)
  0x00000001249966d8: mov    -0x28(%rbp),%rdx
  0x00000001249966dc: test   %rdx,%rdx
  0x00000001249966df: je     0x000000012499682c
  0x00000001249966e5: cmpb   $0xb,-0x38(%rdx)
  0x00000001249966e9: jne    0x000000012499682c
  0x00000001249966ef: add    $0x8,%rdx
  0x00000001249966f3: mov    -0x8(%rdx),%r13
  0x00000001249966f7: sub    $0x0,%r13d
  0x00000001249966fb: cmp    $0x2,%r13d
  0x00000001249966ff: jl     0x0000000124996821
  0x0000000124996705: mov    0x8(%rbx),%r13
  0x0000000124996709: movzwl 0x34(%r13),%r13d
  0x000000012499670e: sub    (%rdx),%r13
  0x0000000124996711: sub    $0x1,%r13d
  0x0000000124996715: mov    0x8(%rsp,%r13,8),%r13
  0x000000012499671a: test   %r13,%r13
  0x000000012499671d: jne    0x0000000124996729
  0x000000012499671f: orq    $0x1,0x8(%rdx)
  0x0000000124996727: jmp    0x0000000124996782
  0x0000000124996729: mov    0x8(%r13),%r13d
  0x000000012499672d: movabs $0x800000000,%r12
  0x0000000124996737: add    %r12,%r13
  0x000000012499673a: xor    %r12,%r12
  0x000000012499673d: xor    0x8(%rdx),%r13
  0x0000000124996741: test   $0xfffffffffffffffc,%r13
  0x0000000124996748: je     0x0000000124996782
  0x000000012499674a: test   $0x2,%r13
  0x0000000124996751: jne    0x0000000124996782
  0x0000000124996753: cmpq   $0x0,0x8(%rdx)
  0x000000012499675b: je     0x000000012499677e
  0x000000012499675d: cmpq   $0x1,0x8(%rdx)
  0x0000000124996765: je     0x000000012499677e
  0x0000000124996767: xor    0x8(%rdx),%r13
  0x000000012499676b: test   $0xfffffffffffffffc,%r13
  0x0000000124996772: je     0x0000000124996782
  0x0000000124996774: orq    $0x2,0x8(%rdx)
  0x000000012499677c: jmp    0x0000000124996782
  0x000000012499677e: mov    %r13,0x8(%rdx)
  0x0000000124996782: add    $0x10,%rdx
  0x0000000124996786: mov    -0x18(%rdx),%r13
  0x000000012499678a: sub    $0x2,%r13d
  0x000000012499678e: cmp    $0x2,%r13d
  0x0000000124996792: jl     0x0000000124996821
  0x0000000124996798: mov    0x8(%rbx),%r13
  0x000000012499679c: movzwl 0x34(%r13),%r13d
  0x00000001249967a1: sub    (%rdx),%r13
  0x00000001249967a4: sub    $0x1,%r13d
  0x00000001249967a8: mov    0x8(%rsp,%r13,8),%r13
  0x00000001249967ad: test   %r13,%r13
  0x00000001249967b0: jne    0x00000001249967bc
  0x00000001249967b2: orq    $0x1,0x8(%rdx)
  0x00000001249967ba: jmp    0x0000000124996815
  0x00000001249967bc: mov    0x8(%r13),%r13d
  0x00000001249967c0: movabs $0x800000000,%r12
  0x00000001249967ca: add    %r12,%r13
  0x00000001249967cd: xor    %r12,%r12
  0x00000001249967d0: xor    0x8(%rdx),%r13
  0x00000001249967d4: test   $0xfffffffffffffffc,%r13
  0x00000001249967db: je     0x0000000124996815
  0x00000001249967dd: test   $0x2,%r13
  0x00000001249967e4: jne    0x0000000124996815
  0x00000001249967e6: cmpq   $0x0,0x8(%rdx)
  0x00000001249967ee: je     0x0000000124996811
  0x00000001249967f0: cmpq   $0x1,0x8(%rdx)
  0x00000001249967f8: je     0x0000000124996811
  0x00000001249967fa: xor    0x8(%rdx),%r13
  0x00000001249967fe: test   $0xfffffffffffffffc,%r13
  0x0000000124996805: je     0x0000000124996815
  0x0000000124996807: orq    $0x2,0x8(%rdx)
  0x000000012499680f: jmp    0x0000000124996815
  0x0000000124996811: mov    %r13,0x8(%rdx)
  0x0000000124996815: add    $0x10,%rdx
  0x0000000124996819: mov    -0x28(%rdx),%r13
  0x000000012499681d: sub    $0x4,%r13d
  0x0000000124996821: shl    $0x3,%r13d
  0x0000000124996825: add    %r13,%rdx
  0x0000000124996828: mov    %rdx,-0x28(%rbp)
  0x000000012499682c: lea    0x8(%rsp),%r13
  0x0000000124996831: mov    %r13,-0x10(%rbp)
  0x0000000124996835: jmpq   *0x48(%rbx)
  0x0000000124996838: add    %al,(%rax)
  0x000000012499683a: add    %al,(%rax)
  0x000000012499683c: add    %al,(%rax)
  0x000000012499683e: add    %al,(%rax)

----------------------------------------------------------------------
nofast_getfield  234 nofast_getfield  [0x0000000124996860, 0x0000000124996a80]  544 bytes

  0x0000000124996860: push   %rax
  0x0000000124996861: jmpq   0x000000012499689f
  0x0000000124996866: sub    $0x8,%rsp
  0x000000012499686a: vmovss %xmm0,(%rsp)
  0x000000012499686f: jmpq   0x000000012499689f
  0x0000000124996874: sub    $0x10,%rsp
  0x0000000124996878: vmovsd %xmm0,(%rsp)
  0x000000012499687d: jmpq   0x000000012499689f
  0x0000000124996882: sub    $0x10,%rsp
  0x0000000124996886: mov    %rax,(%rsp)
  0x000000012499688a: movabs $0x0,%r10
  0x0000000124996894: mov    %r10,0x8(%rsp)
  0x0000000124996899: jmpq   0x000000012499689f
  0x000000012499689e: push   %rax
  0x000000012499689f: movzwl 0x1(%r13),%edx
  0x00000001249968a4: mov    -0x30(%rbp),%rcx
  0x00000001249968a8: shl    $0x2,%edx
  0x00000001249968ab: mov    0x28(%rcx,%rdx,8),%ebx
  0x00000001249968af: shr    $0x10,%ebx
  0x00000001249968b2: and    $0xff,%ebx
  0x00000001249968b8: cmp    $0xb4,%ebx
  0x00000001249968be: je     0x0000000124996974
  0x00000001249968c4: mov    $0xb4,%ebx
  0x00000001249968c9: callq  0x00000001249968d3
  0x00000001249968ce: jmpq   0x0000000124996968
  0x00000001249968d3: mov    %rbx,%rsi
  0x00000001249968d6: lea    0x8(%rsp),%rax
  0x00000001249968db: mov    %r13,-0x40(%rbp)
  0x00000001249968df: mov    %r15,%rdi
  0x00000001249968e2: vzeroupper 
  0x00000001249968e5: mov    %rbp,0x330(%r15)
  0x00000001249968ec: mov    %rax,0x320(%r15)
  0x00000001249968f3: test   $0xf,%esp
  0x00000001249968f9: je     0x0000000124996911
  0x00000001249968ff: sub    $0x8,%rsp
  0x0000000124996903: callq  0x0000000114bac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x0000000124996908: add    $0x8,%rsp
  0x000000012499690c: jmpq   0x0000000124996916
  0x0000000124996911: callq  0x0000000114bac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x0000000124996916: movabs $0x0,%r10
  0x0000000124996920: mov    %r10,0x320(%r15)
  0x0000000124996927: movabs $0x0,%r10
  0x0000000124996931: mov    %r10,0x330(%r15)
  0x0000000124996938: movabs $0x0,%r10
  0x0000000124996942: mov    %r10,0x328(%r15)
  0x0000000124996949: vzeroupper 
  0x000000012499694c: cmpq   $0x0,0x8(%r15)
  0x0000000124996954: je     0x000000012499695f
  0x000000012499695a: jmpq   0x0000000124975780
  0x000000012499695f: mov    -0x40(%rbp),%r13
  0x0000000124996963: mov    -0x38(%rbp),%r14
  0x0000000124996967: retq   
  0x0000000124996968: movzwl 0x1(%r13),%edx
  0x000000012499696d: mov    -0x30(%rbp),%rcx
  0x0000000124996971: shl    $0x2,%edx
  0x0000000124996974: mov    0x38(%rcx,%rdx,8),%rbx
  0x0000000124996979: mov    0x40(%rcx,%rdx,8),%eax
  0x000000012499697d: pop    %rcx
  0x000000012499697e: cmp    (%rcx),%rax
  0x0000000124996981: shr    $0x1c,%eax
  0x0000000124996984: and    $0xf,%eax
  0x0000000124996987: jne    0x0000000124996997
  0x000000012499698d: movsbl (%rcx,%rbx,1),%eax
  0x0000000124996991: push   %rax
  0x0000000124996992: jmpq   0x0000000124996a4b
  0x0000000124996997: cmp    $0x1,%eax
  0x000000012499699a: jne    0x00000001249969aa
  0x00000001249969a0: movzbl (%rcx,%rbx,1),%eax
  0x00000001249969a4: push   %rax
  0x00000001249969a5: jmpq   0x0000000124996a4b
  0x00000001249969aa: cmp    $0x8,%eax
  0x00000001249969ad: jne    0x00000001249969c0
  0x00000001249969b3: mov    (%rcx,%rbx,1),%eax
  0x00000001249969b6: shl    $0x3,%rax
  0x00000001249969ba: push   %rax
  0x00000001249969bb: jmpq   0x0000000124996a4b
  0x00000001249969c0: cmp    $0x4,%eax
  0x00000001249969c3: jne    0x00000001249969d2
  0x00000001249969c9: mov    (%rcx,%rbx,1),%eax
  0x00000001249969cc: push   %rax
  0x00000001249969cd: jmpq   0x0000000124996a4b
  0x00000001249969d2: cmp    $0x2,%eax
  0x00000001249969d5: jne    0x00000001249969e5
  0x00000001249969db: movzwl (%rcx,%rbx,1),%eax
  0x00000001249969df: push   %rax
  0x00000001249969e0: jmpq   0x0000000124996a4b
  0x00000001249969e5: cmp    $0x3,%eax
  0x00000001249969e8: jne    0x00000001249969f8
  0x00000001249969ee: movswl (%rcx,%rbx,1),%eax
  0x00000001249969f2: push   %rax
  0x00000001249969f3: jmpq   0x0000000124996a4b
  0x00000001249969f8: cmp    $0x5,%eax
  0x00000001249969fb: jne    0x0000000124996a21
  0x0000000124996a01: mov    (%rcx,%rbx,1),%rax
  0x0000000124996a05: sub    $0x10,%rsp
  0x0000000124996a09: mov    %rax,(%rsp)
  0x0000000124996a0d: movabs $0x0,%r10
  0x0000000124996a17: mov    %r10,0x8(%rsp)
  0x0000000124996a1c: jmpq   0x0000000124996a4b
  0x0000000124996a21: cmp    $0x6,%eax
  0x0000000124996a24: jne    0x0000000124996a3d
  0x0000000124996a2a: vmovss (%rcx,%rbx,1),%xmm0
  0x0000000124996a2f: sub    $0x8,%rsp
  0x0000000124996a33: vmovss %xmm0,(%rsp)
  0x0000000124996a38: jmpq   0x0000000124996a4b
  0x0000000124996a3d: vmovsd (%rcx,%rbx,1),%xmm0
  0x0000000124996a42: sub    $0x10,%rsp
  0x0000000124996a46: vmovsd %xmm0,(%rsp)
  0x0000000124996a4b: movzbl 0x3(%r13),%ebx
  0x0000000124996a50: add    $0x3,%r13
  0x0000000124996a54: movabs $0x1151d7a20,%r10
  0x0000000124996a5e: jmpq   *(%r10,%rbx,8)
  0x0000000124996a62: nopw   0x0(%rax,%rax,1)
  0x0000000124996a68: add    %al,(%rax)
  0x0000000124996a6a: add    %al,(%rax)
  0x0000000124996a6c: add    %al,(%rax)
  0x0000000124996a6e: add    %al,(%rax)
  0x0000000124996a70: add    %al,(%rax)
  0x0000000124996a72: add    %al,(%rax)
  0x0000000124996a74: add    %al,(%rax)
  0x0000000124996a76: add    %al,(%rax)
  0x0000000124996a78: add    %al,(%rax)
  0x0000000124996a7a: add    %al,(%rax)
  0x0000000124996a7c: add    %al,(%rax)
  0x0000000124996a7e: add    %al,(%rax)

----------------------------------------------------------------------
nofast_putfield  235 nofast_putfield  [0x0000000124996aa0, 0x0000000124996e00]  864 bytes

  0x0000000124996aa0: push   %rax
  0x0000000124996aa1: jmpq   0x0000000124996adf
  0x0000000124996aa6: sub    $0x8,%rsp
  0x0000000124996aaa: vmovss %xmm0,(%rsp)
  0x0000000124996aaf: jmpq   0x0000000124996adf
  0x0000000124996ab4: sub    $0x10,%rsp
  0x0000000124996ab8: vmovsd %xmm0,(%rsp)
  0x0000000124996abd: jmpq   0x0000000124996adf
  0x0000000124996ac2: sub    $0x10,%rsp
  0x0000000124996ac6: mov    %rax,(%rsp)
  0x0000000124996aca: movabs $0x0,%r10
  0x0000000124996ad4: mov    %r10,0x8(%rsp)
  0x0000000124996ad9: jmpq   0x0000000124996adf
  0x0000000124996ade: push   %rax
  0x0000000124996adf: movzwl 0x1(%r13),%edx
  0x0000000124996ae4: mov    -0x30(%rbp),%rcx
  0x0000000124996ae8: shl    $0x2,%edx
  0x0000000124996aeb: mov    0x28(%rcx,%rdx,8),%ebx
  0x0000000124996aef: shr    $0x18,%ebx
  0x0000000124996af2: and    $0xff,%ebx
  0x0000000124996af8: cmp    $0xb5,%ebx
  0x0000000124996afe: je     0x0000000124996bb4
  0x0000000124996b04: mov    $0xb5,%ebx
  0x0000000124996b09: callq  0x0000000124996b13
  0x0000000124996b0e: jmpq   0x0000000124996ba8
  0x0000000124996b13: mov    %rbx,%rsi
  0x0000000124996b16: lea    0x8(%rsp),%rax
  0x0000000124996b1b: mov    %r13,-0x40(%rbp)
  0x0000000124996b1f: mov    %r15,%rdi
  0x0000000124996b22: vzeroupper 
  0x0000000124996b25: mov    %rbp,0x330(%r15)
  0x0000000124996b2c: mov    %rax,0x320(%r15)
  0x0000000124996b33: test   $0xf,%esp
  0x0000000124996b39: je     0x0000000124996b51
  0x0000000124996b3f: sub    $0x8,%rsp
  0x0000000124996b43: callq  0x0000000114bac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x0000000124996b48: add    $0x8,%rsp
  0x0000000124996b4c: jmpq   0x0000000124996b56
  0x0000000124996b51: callq  0x0000000114bac8e2 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x0000000124996b56: movabs $0x0,%r10
  0x0000000124996b60: mov    %r10,0x320(%r15)
  0x0000000124996b67: movabs $0x0,%r10
  0x0000000124996b71: mov    %r10,0x330(%r15)
  0x0000000124996b78: movabs $0x0,%r10
  0x0000000124996b82: mov    %r10,0x328(%r15)
  0x0000000124996b89: vzeroupper 
  0x0000000124996b8c: cmpq   $0x0,0x8(%r15)
  0x0000000124996b94: je     0x0000000124996b9f
  0x0000000124996b9a: jmpq   0x0000000124975780
  0x0000000124996b9f: mov    -0x40(%rbp),%r13
  0x0000000124996ba3: mov    -0x38(%rbp),%r14
  0x0000000124996ba7: retq   
  0x0000000124996ba8: movzwl 0x1(%r13),%edx
  0x0000000124996bad: mov    -0x30(%rbp),%rcx
  0x0000000124996bb1: shl    $0x2,%edx
  0x0000000124996bb4: mov    0x38(%rcx,%rdx,8),%rbx
  0x0000000124996bb9: mov    0x40(%rcx,%rdx,8),%eax
  0x0000000124996bbd: mov    %eax,%edx
  0x0000000124996bbf: shr    $0x15,%edx
  0x0000000124996bc2: and    $0x1,%edx
  0x0000000124996bc5: shr    $0x1c,%eax
  0x0000000124996bc8: and    $0xf,%eax
  0x0000000124996bcb: jne    0x0000000124996be4
  0x0000000124996bd1: mov    (%rsp),%eax
  0x0000000124996bd4: add    $0x8,%rsp
  0x0000000124996bd8: pop    %rcx
  0x0000000124996bd9: cmp    (%rcx),%rax
  0x0000000124996bdc: mov    %al,(%rcx,%rbx,1)
  0x0000000124996bdf: jmpq   0x0000000124996dd7
  0x0000000124996be4: cmp    $0x1,%eax
  0x0000000124996be7: jne    0x0000000124996c03
  0x0000000124996bed: mov    (%rsp),%eax
  0x0000000124996bf0: add    $0x8,%rsp
  0x0000000124996bf4: pop    %rcx
  0x0000000124996bf5: cmp    (%rcx),%rax
  0x0000000124996bf8: and    $0x1,%eax
  0x0000000124996bfb: mov    %al,(%rcx,%rbx,1)
  0x0000000124996bfe: jmpq   0x0000000124996dd7
  0x0000000124996c03: cmp    $0x8,%eax
  0x0000000124996c06: jne    0x0000000124996d31
  0x0000000124996c0c: pop    %rax
  0x0000000124996c0d: pop    %rcx
  0x0000000124996c0e: cmp    (%rcx),%rax
  0x0000000124996c11: lea    (%rcx,%rbx,1),%rdx
  0x0000000124996c15: cmpb   $0x0,0x30(%r15)
  0x0000000124996c1a: je     0x0000000124996c81
  0x0000000124996c20: mov    (%rdx),%ebx
  0x0000000124996c22: shl    $0x3,%rbx
  0x0000000124996c26: cmp    $0x0,%rbx
  0x0000000124996c2a: je     0x0000000124996c81
  0x0000000124996c30: mov    0x38(%r15),%r8
  0x0000000124996c34: cmp    $0x0,%r8
  0x0000000124996c38: je     0x0000000124996c52
  0x0000000124996c3e: sub    $0x8,%r8
  0x0000000124996c42: mov    %r8,0x38(%r15)
  0x0000000124996c46: add    0x48(%r15),%r8
  0x0000000124996c4a: mov    %rbx,(%r8)
  0x0000000124996c4d: jmpq   0x0000000124996c81
  0x0000000124996c52: push   %rax
  0x0000000124996c53: push   %rdx
  0x0000000124996c54: push   %rbx
  0x0000000124996c55: mov    %r15,%rsi
  0x0000000124996c58: mov    %rbx,%rdi
  0x0000000124996c5b: test   $0xf,%esp
  0x0000000124996c61: je     0x0000000124996c79
  0x0000000124996c67: sub    $0x8,%rsp
  0x0000000124996c6b: callq  0x0000000114b0185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x0000000124996c70: add    $0x8,%rsp
  0x0000000124996c74: jmpq   0x0000000124996c7e
  0x0000000124996c79: callq  0x0000000114b0185e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x0000000124996c7e: pop    %rbx
  0x0000000124996c7f: pop    %rdx
  0x0000000124996c80: pop    %rax
  0x0000000124996c81: mov    %rax,%rbx
  0x0000000124996c84: shr    $0x3,%rax
  0x0000000124996c88: mov    %eax,(%rdx)
  0x0000000124996c8a: mov    %rdx,%r8
  0x0000000124996c8d: xor    %rbx,%r8
  0x0000000124996c90: shr    $0x16,%r8
  0x0000000124996c94: je     0x0000000124996d2c
  0x0000000124996c9a: cmp    $0x0,%rbx
  0x0000000124996c9e: je     0x0000000124996d2c
  0x0000000124996ca4: mov    %rdx,%r8
  0x0000000124996ca7: shr    $0x9,%r8
  0x0000000124996cab: movabs $0x1155db000,%rbx
  0x0000000124996cb5: add    %rbx,%r8
  0x0000000124996cb8: cmpb   $0x20,(%r8)
  0x0000000124996cbc: je     0x0000000124996d2c
  0x0000000124996cc2: lock addl $0x0,-0x40(%rsp)
  0x0000000124996cc8: cmpb   $0x0,(%r8)
  0x0000000124996ccc: je     0x0000000124996d2c
  0x0000000124996cd2: movb   $0x0,(%r8)
  0x0000000124996cd6: cmpl   $0x0,0x70(%r15)
  0x0000000124996cde: je     0x0000000124996cff
  0x0000000124996ce4: subl   $0x8,0x70(%r15)
  0x0000000124996ce9: mov    0x80(%r15),%rbx
  0x0000000124996cf0: movslq 0x70(%r15),%r10
  0x0000000124996cf4: add    %r10,%rbx
  0x0000000124996cf7: mov    %r8,(%rbx)
  0x0000000124996cfa: jmpq   0x0000000124996d2c
  0x0000000124996cff: push   %rdx
  0x0000000124996d00: push   %rbx
  0x0000000124996d01: mov    %r15,%rsi
  0x0000000124996d04: mov    %r8,%rdi
  0x0000000124996d07: test   $0xf,%esp
  0x0000000124996d0d: je     0x0000000124996d25
  0x0000000124996d13: sub    $0x8,%rsp
  0x0000000124996d17: callq  0x0000000114b01882 = G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*)
  0x0000000124996d1c: add    $0x8,%rsp
  0x0000000124996d20: jmpq   0x0000000124996d2a
  0x0000000124996d25: callq  0x0000000114b01882 = G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*)
  0x0000000124996d2a: pop    %rbx
  0x0000000124996d2b: pop    %rdx
  0x0000000124996d2c: jmpq   0x0000000124996dd7
  0x0000000124996d31: cmp    $0x4,%eax
  0x0000000124996d34: jne    0x0000000124996d4d
  0x0000000124996d3a: mov    (%rsp),%eax
  0x0000000124996d3d: add    $0x8,%rsp
  0x0000000124996d41: pop    %rcx
  0x0000000124996d42: cmp    (%rcx),%rax
  0x0000000124996d45: mov    %eax,(%rcx,%rbx,1)
  0x0000000124996d48: jmpq   0x0000000124996dd7
  0x0000000124996d4d: cmp    $0x2,%eax
  0x0000000124996d50: jne    0x0000000124996d6a
  0x0000000124996d56: mov    (%rsp),%eax
  0x0000000124996d59: add    $0x8,%rsp
  0x0000000124996d5d: pop    %rcx
  0x0000000124996d5e: cmp    (%rcx),%rax
  0x0000000124996d61: mov    %ax,(%rcx,%rbx,1)
  0x0000000124996d65: jmpq   0x0000000124996dd7
  0x0000000124996d6a: cmp    $0x3,%eax
  0x0000000124996d6d: jne    0x0000000124996d87
  0x0000000124996d73: mov    (%rsp),%eax
  0x0000000124996d76: add    $0x8,%rsp
  0x0000000124996d7a: pop    %rcx
  0x0000000124996d7b: cmp    (%rcx),%rax
  0x0000000124996d7e: mov    %ax,(%rcx,%rbx,1)
  0x0000000124996d82: jmpq   0x0000000124996dd7
  0x0000000124996d87: cmp    $0x5,%eax
  0x0000000124996d8a: jne    0x0000000124996da5
  0x0000000124996d90: mov    (%rsp),%rax
  0x0000000124996d94: add    $0x10,%rsp
  0x0000000124996d98: pop    %rcx
  0x0000000124996d99: cmp    (%rcx),%rax
  0x0000000124996d9c: mov    %rax,(%rcx,%rbx,1)
  0x0000000124996da0: jmpq   0x0000000124996dd7
  0x0000000124996da5: cmp    $0x6,%eax
  0x0000000124996da8: jne    0x0000000124996dc5
  0x0000000124996dae: vmovss (%rsp),%xmm0
  0x0000000124996db3: add    $0x8,%rsp
  0x0000000124996db7: pop    %rcx
  0x0000000124996db8: cmp    (%rcx),%rax
  0x0000000124996dbb: vmovss %xmm0,(%rcx,%rbx,1)
  0x0000000124996dc0: jmpq   0x0000000124996dd7
  0x0000000124996dc5: vmovsd (%rsp),%xmm0
  0x0000000124996dca: add    $0x10,%rsp
  0x0000000124996dce: pop    %rcx
  0x0000000124996dcf: cmp    (%rcx),%rax
  0x0000000124996dd2: vmovsd %xmm0,(%rcx,%rbx,1)
  0x0000000124996dd7: test   %edx,%edx
  0x0000000124996dd9: je     0x0000000124996de5
  0x0000000124996ddf: lock addl $0x0,-0x40(%rsp)
  0x0000000124996de5: movzbl 0x3(%r13),%ebx
  0x0000000124996dea: add    $0x3,%r13
  0x0000000124996dee: movabs $0x1151d7a20,%r10
  0x0000000124996df8: jmpq   *(%r10,%rbx,8)
  0x0000000124996dfc: nopl   0x0(%rax)

----------------------------------------------------------------------
nofast_aload_0  236 nofast_aload_0  [0x0000000124996e20, 0x0000000124996e80]  96 bytes

  0x0000000124996e20: push   %rax
  0x0000000124996e21: jmpq   0x0000000124996e5f
  0x0000000124996e26: sub    $0x8,%rsp
  0x0000000124996e2a: vmovss %xmm0,(%rsp)
  0x0000000124996e2f: jmpq   0x0000000124996e5f
  0x0000000124996e34: sub    $0x10,%rsp
  0x0000000124996e38: vmovsd %xmm0,(%rsp)
  0x0000000124996e3d: jmpq   0x0000000124996e5f
  0x0000000124996e42: sub    $0x10,%rsp
  0x0000000124996e46: mov    %rax,(%rsp)
  0x0000000124996e4a: movabs $0x0,%r10
  0x0000000124996e54: mov    %r10,0x8(%rsp)
  0x0000000124996e59: jmpq   0x0000000124996e5f
  0x0000000124996e5e: push   %rax
  0x0000000124996e5f: mov    (%r14),%rax
  0x0000000124996e62: movzbl 0x1(%r13),%ebx
  0x0000000124996e67: inc    %r13
  0x0000000124996e6a: movabs $0x1151d7220,%r10
  0x0000000124996e74: jmpq   *(%r10,%rbx,8)
  0x0000000124996e78: add    %al,(%rax)
  0x0000000124996e7a: add    %al,(%rax)
  0x0000000124996e7c: add    %al,(%rax)
  0x0000000124996e7e: add    %al,(%rax)

----------------------------------------------------------------------
nofast_iload  237 nofast_iload  [0x0000000124996ea0, 0x0000000124996f20]  128 bytes

  0x0000000124996ea0: push   %rax
  0x0000000124996ea1: jmpq   0x0000000124996edf
  0x0000000124996ea6: sub    $0x8,%rsp
  0x0000000124996eaa: vmovss %xmm0,(%rsp)
  0x0000000124996eaf: jmpq   0x0000000124996edf
  0x0000000124996eb4: sub    $0x10,%rsp
  0x0000000124996eb8: vmovsd %xmm0,(%rsp)
  0x0000000124996ebd: jmpq   0x0000000124996edf
  0x0000000124996ec2: sub    $0x10,%rsp
  0x0000000124996ec6: mov    %rax,(%rsp)
  0x0000000124996eca: movabs $0x0,%r10
  0x0000000124996ed4: mov    %r10,0x8(%rsp)
  0x0000000124996ed9: jmpq   0x0000000124996edf
  0x0000000124996ede: push   %rax
  0x0000000124996edf: movzbl 0x1(%r13),%ebx
  0x0000000124996ee4: neg    %rbx
  0x0000000124996ee7: mov    (%r14,%rbx,8),%eax
  0x0000000124996eeb: movzbl 0x2(%r13),%ebx
  0x0000000124996ef0: add    $0x2,%r13
  0x0000000124996ef4: movabs $0x1151d5220,%r10
  0x0000000124996efe: jmpq   *(%r10,%rbx,8)
  0x0000000124996f02: nopw   0x0(%rax,%rax,1)
  0x0000000124996f08: add    %al,(%rax)
  0x0000000124996f0a: add    %al,(%rax)
  0x0000000124996f0c: add    %al,(%rax)
  0x0000000124996f0e: add    %al,(%rax)
  0x0000000124996f10: add    %al,(%rax)
  0x0000000124996f12: add    %al,(%rax)
  0x0000000124996f14: add    %al,(%rax)
  0x0000000124996f16: add    %al,(%rax)
  0x0000000124996f18: add    %al,(%rax)
  0x0000000124996f1a: add    %al,(%rax)
  0x0000000124996f1c: add    %al,(%rax)
  0x0000000124996f1e: add    %al,(%rax)

----------------------------------------------------------------------
_shouldnotreachhere  238 _shouldnotreachhere  [0x0000000124996f40, 0x0000000124996fc0]  128 bytes

  0x0000000124996f40: push   %rax
  0x0000000124996f41: jmpq   0x0000000124996f7f
  0x0000000124996f46: sub    $0x8,%rsp
  0x0000000124996f4a: vmovss %xmm0,(%rsp)
  0x0000000124996f4f: jmpq   0x0000000124996f7f
  0x0000000124996f54: sub    $0x10,%rsp
  0x0000000124996f58: vmovsd %xmm0,(%rsp)
  0x0000000124996f5d: jmpq   0x0000000124996f7f
  0x0000000124996f62: sub    $0x10,%rsp
  0x0000000124996f66: mov    %rax,(%rsp)
  0x0000000124996f6a: movabs $0x0,%r10
  0x0000000124996f74: mov    %r10,0x8(%rsp)
  0x0000000124996f79: jmpq   0x0000000124996f7f
  0x0000000124996f7e: push   %rax
  0x0000000124996f7f: movabs $0x115051bfc,%rdi
  0x0000000124996f89: and    $0xfffffffffffffff0,%rsp
  0x0000000124996f8d: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124996f92: hlt    
  0x0000000124996f93: movzbl 0x1(%r13),%ebx
  0x0000000124996f98: inc    %r13
  0x0000000124996f9b: movabs $0x1151d7a20,%r10
  0x0000000124996fa5: jmpq   *(%r10,%rbx,8)
  0x0000000124996fa9: nopl   0x0(%rax)
  0x0000000124996fb0: add    %al,(%rax)
  0x0000000124996fb2: add    %al,(%rax)
  0x0000000124996fb4: add    %al,(%rax)
  0x0000000124996fb6: add    %al,(%rax)
  0x0000000124996fb8: add    %al,(%rax)
  0x0000000124996fba: add    %al,(%rax)
  0x0000000124996fbc: add    %al,(%rax)
  0x0000000124996fbe: add    %al,(%rax)

----------------------------------------------------------------------
deoptimization entry points  [0x0000000124996fe0, 0x00000001249991e0]  8704 bytes

  0x0000000124996fe0: movq   $0x0,-0x10(%rbp)
  0x0000000124996fe8: mov    -0x40(%rbp),%r13
  0x0000000124996fec: mov    -0x38(%rbp),%r14
  0x0000000124996ff0: cmpq   $0x0,0x8(%r15)
  0x0000000124996ff8: je     0x00000001249970ae
  0x0000000124996ffe: callq  0x0000000124997008
  0x0000000124997003: jmpq   0x000000012499709a
  0x0000000124997008: lea    0x8(%rsp),%rax
  0x000000012499700d: mov    %r13,-0x40(%rbp)
  0x0000000124997011: mov    %r15,%rdi
  0x0000000124997014: vzeroupper 
  0x0000000124997017: mov    %rbp,0x330(%r15)
  0x000000012499701e: mov    %rax,0x320(%r15)
  0x0000000124997025: test   $0xf,%esp
  0x000000012499702b: je     0x0000000124997043
  0x0000000124997031: sub    $0x8,%rsp
  0x0000000124997035: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000012499703a: add    $0x8,%rsp
  0x000000012499703e: jmpq   0x0000000124997048
  0x0000000124997043: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124997048: movabs $0x0,%r10
  0x0000000124997052: mov    %r10,0x320(%r15)
  0x0000000124997059: movabs $0x0,%r10
  0x0000000124997063: mov    %r10,0x330(%r15)
  0x000000012499706a: movabs $0x0,%r10
  0x0000000124997074: mov    %r10,0x328(%r15)
  0x000000012499707b: vzeroupper 
  0x000000012499707e: cmpq   $0x0,0x8(%r15)
  0x0000000124997086: je     0x0000000124997091
  0x000000012499708c: jmpq   0x0000000124975780
  0x0000000124997091: mov    -0x40(%rbp),%r13
  0x0000000124997095: mov    -0x38(%rbp),%r14
  0x0000000124997099: retq   
  0x000000012499709a: movabs $0x114ff3493,%rdi
  0x00000001249970a4: and    $0xfffffffffffffff0,%rsp
  0x00000001249970a8: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x00000001249970ad: hlt    
  0x00000001249970ae: movzbl 0x0(%r13),%ebx
  0x00000001249970b3: movabs $0x1151d7a20,%r10
  0x00000001249970bd: jmpq   *(%r10,%rbx,8)
  0x00000001249970c1: movq   $0x0,-0x10(%rbp)
  0x00000001249970c9: mov    -0x40(%rbp),%r13
  0x00000001249970cd: mov    -0x38(%rbp),%r14
  0x00000001249970d1: cmpq   $0x0,0x8(%r15)
  0x00000001249970d9: je     0x000000012499718f
  0x00000001249970df: callq  0x00000001249970e9
  0x00000001249970e4: jmpq   0x000000012499717b
  0x00000001249970e9: lea    0x8(%rsp),%rax
  0x00000001249970ee: mov    %r13,-0x40(%rbp)
  0x00000001249970f2: mov    %r15,%rdi
  0x00000001249970f5: vzeroupper 
  0x00000001249970f8: mov    %rbp,0x330(%r15)
  0x00000001249970ff: mov    %rax,0x320(%r15)
  0x0000000124997106: test   $0xf,%esp
  0x000000012499710c: je     0x0000000124997124
  0x0000000124997112: sub    $0x8,%rsp
  0x0000000124997116: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000012499711b: add    $0x8,%rsp
  0x000000012499711f: jmpq   0x0000000124997129
  0x0000000124997124: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124997129: movabs $0x0,%r10
  0x0000000124997133: mov    %r10,0x320(%r15)
  0x000000012499713a: movabs $0x0,%r10
  0x0000000124997144: mov    %r10,0x330(%r15)
  0x000000012499714b: movabs $0x0,%r10
  0x0000000124997155: mov    %r10,0x328(%r15)
  0x000000012499715c: vzeroupper 
  0x000000012499715f: cmpq   $0x0,0x8(%r15)
  0x0000000124997167: je     0x0000000124997172
  0x000000012499716d: jmpq   0x0000000124975780
  0x0000000124997172: mov    -0x40(%rbp),%r13
  0x0000000124997176: mov    -0x38(%rbp),%r14
  0x000000012499717a: retq   
  0x000000012499717b: movabs $0x114ff3493,%rdi
  0x0000000124997185: and    $0xfffffffffffffff0,%rsp
  0x0000000124997189: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000012499718e: hlt    
  0x000000012499718f: movzbl 0x1(%r13),%ebx
  0x0000000124997194: inc    %r13
  0x0000000124997197: movabs $0x1151d5220,%r10
  0x00000001249971a1: jmpq   *(%r10,%rbx,8)
  0x00000001249971a5: movq   $0x0,-0x10(%rbp)
  0x00000001249971ad: mov    -0x40(%rbp),%r13
  0x00000001249971b1: mov    -0x38(%rbp),%r14
  0x00000001249971b5: cmpq   $0x0,0x8(%r15)
  0x00000001249971bd: je     0x0000000124997273
  0x00000001249971c3: callq  0x00000001249971cd
  0x00000001249971c8: jmpq   0x000000012499725f
  0x00000001249971cd: lea    0x8(%rsp),%rax
  0x00000001249971d2: mov    %r13,-0x40(%rbp)
  0x00000001249971d6: mov    %r15,%rdi
  0x00000001249971d9: vzeroupper 
  0x00000001249971dc: mov    %rbp,0x330(%r15)
  0x00000001249971e3: mov    %rax,0x320(%r15)
  0x00000001249971ea: test   $0xf,%esp
  0x00000001249971f0: je     0x0000000124997208
  0x00000001249971f6: sub    $0x8,%rsp
  0x00000001249971fa: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00000001249971ff: add    $0x8,%rsp
  0x0000000124997203: jmpq   0x000000012499720d
  0x0000000124997208: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000012499720d: movabs $0x0,%r10
  0x0000000124997217: mov    %r10,0x320(%r15)
  0x000000012499721e: movabs $0x0,%r10
  0x0000000124997228: mov    %r10,0x330(%r15)
  0x000000012499722f: movabs $0x0,%r10
  0x0000000124997239: mov    %r10,0x328(%r15)
  0x0000000124997240: vzeroupper 
  0x0000000124997243: cmpq   $0x0,0x8(%r15)
  0x000000012499724b: je     0x0000000124997256
  0x0000000124997251: jmpq   0x0000000124975780
  0x0000000124997256: mov    -0x40(%rbp),%r13
  0x000000012499725a: mov    -0x38(%rbp),%r14
  0x000000012499725e: retq   
  0x000000012499725f: movabs $0x114ff3493,%rdi
  0x0000000124997269: and    $0xfffffffffffffff0,%rsp
  0x000000012499726d: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124997272: hlt    
  0x0000000124997273: movzbl 0x1(%r13),%ebx
  0x0000000124997278: inc    %r13
  0x000000012499727b: movabs $0x1151d7220,%r10
  0x0000000124997285: jmpq   *(%r10,%rbx,8)
  0x0000000124997289: movq   $0x0,-0x10(%rbp)
  0x0000000124997291: mov    -0x40(%rbp),%r13
  0x0000000124997295: mov    -0x38(%rbp),%r14
  0x0000000124997299: cmpq   $0x0,0x8(%r15)
  0x00000001249972a1: je     0x0000000124997357
  0x00000001249972a7: callq  0x00000001249972b1
  0x00000001249972ac: jmpq   0x0000000124997343
  0x00000001249972b1: lea    0x8(%rsp),%rax
  0x00000001249972b6: mov    %r13,-0x40(%rbp)
  0x00000001249972ba: mov    %r15,%rdi
  0x00000001249972bd: vzeroupper 
  0x00000001249972c0: mov    %rbp,0x330(%r15)
  0x00000001249972c7: mov    %rax,0x320(%r15)
  0x00000001249972ce: test   $0xf,%esp
  0x00000001249972d4: je     0x00000001249972ec
  0x00000001249972da: sub    $0x8,%rsp
  0x00000001249972de: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00000001249972e3: add    $0x8,%rsp
  0x00000001249972e7: jmpq   0x00000001249972f1
  0x00000001249972ec: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00000001249972f1: movabs $0x0,%r10
  0x00000001249972fb: mov    %r10,0x320(%r15)
  0x0000000124997302: movabs $0x0,%r10
  0x000000012499730c: mov    %r10,0x330(%r15)
  0x0000000124997313: movabs $0x0,%r10
  0x000000012499731d: mov    %r10,0x328(%r15)
  0x0000000124997324: vzeroupper 
  0x0000000124997327: cmpq   $0x0,0x8(%r15)
  0x000000012499732f: je     0x000000012499733a
  0x0000000124997335: jmpq   0x0000000124975780
  0x000000012499733a: mov    -0x40(%rbp),%r13
  0x000000012499733e: mov    -0x38(%rbp),%r14
  0x0000000124997342: retq   
  0x0000000124997343: movabs $0x114ff3493,%rdi
  0x000000012499734d: and    $0xfffffffffffffff0,%rsp
  0x0000000124997351: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124997356: hlt    
  0x0000000124997357: movzbl 0x1(%r13),%ebx
  0x000000012499735c: inc    %r13
  0x000000012499735f: movabs $0x1151d5a20,%r10
  0x0000000124997369: jmpq   *(%r10,%rbx,8)
  0x000000012499736d: movq   $0x0,-0x10(%rbp)
  0x0000000124997375: mov    -0x40(%rbp),%r13
  0x0000000124997379: mov    -0x38(%rbp),%r14
  0x000000012499737d: cmpq   $0x0,0x8(%r15)
  0x0000000124997385: je     0x000000012499743b
  0x000000012499738b: callq  0x0000000124997395
  0x0000000124997390: jmpq   0x0000000124997427
  0x0000000124997395: lea    0x8(%rsp),%rax
  0x000000012499739a: mov    %r13,-0x40(%rbp)
  0x000000012499739e: mov    %r15,%rdi
  0x00000001249973a1: vzeroupper 
  0x00000001249973a4: mov    %rbp,0x330(%r15)
  0x00000001249973ab: mov    %rax,0x320(%r15)
  0x00000001249973b2: test   $0xf,%esp
  0x00000001249973b8: je     0x00000001249973d0
  0x00000001249973be: sub    $0x8,%rsp
  0x00000001249973c2: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00000001249973c7: add    $0x8,%rsp
  0x00000001249973cb: jmpq   0x00000001249973d5
  0x00000001249973d0: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00000001249973d5: movabs $0x0,%r10
  0x00000001249973df: mov    %r10,0x320(%r15)
  0x00000001249973e6: movabs $0x0,%r10
  0x00000001249973f0: mov    %r10,0x330(%r15)
  0x00000001249973f7: movabs $0x0,%r10
  0x0000000124997401: mov    %r10,0x328(%r15)
  0x0000000124997408: vzeroupper 
  0x000000012499740b: cmpq   $0x0,0x8(%r15)
  0x0000000124997413: je     0x000000012499741e
  0x0000000124997419: jmpq   0x0000000124975780
  0x000000012499741e: mov    -0x40(%rbp),%r13
  0x0000000124997422: mov    -0x38(%rbp),%r14
  0x0000000124997426: retq   
  0x0000000124997427: movabs $0x114ff3493,%rdi
  0x0000000124997431: and    $0xfffffffffffffff0,%rsp
  0x0000000124997435: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000012499743a: hlt    
  0x000000012499743b: movzbl 0x1(%r13),%ebx
  0x0000000124997440: inc    %r13
  0x0000000124997443: movabs $0x1151d6220,%r10
  0x000000012499744d: jmpq   *(%r10,%rbx,8)
  0x0000000124997451: movq   $0x0,-0x10(%rbp)
  0x0000000124997459: mov    -0x40(%rbp),%r13
  0x000000012499745d: mov    -0x38(%rbp),%r14
  0x0000000124997461: cmpq   $0x0,0x8(%r15)
  0x0000000124997469: je     0x000000012499751f
  0x000000012499746f: callq  0x0000000124997479
  0x0000000124997474: jmpq   0x000000012499750b
  0x0000000124997479: lea    0x8(%rsp),%rax
  0x000000012499747e: mov    %r13,-0x40(%rbp)
  0x0000000124997482: mov    %r15,%rdi
  0x0000000124997485: vzeroupper 
  0x0000000124997488: mov    %rbp,0x330(%r15)
  0x000000012499748f: mov    %rax,0x320(%r15)
  0x0000000124997496: test   $0xf,%esp
  0x000000012499749c: je     0x00000001249974b4
  0x00000001249974a2: sub    $0x8,%rsp
  0x00000001249974a6: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00000001249974ab: add    $0x8,%rsp
  0x00000001249974af: jmpq   0x00000001249974b9
  0x00000001249974b4: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00000001249974b9: movabs $0x0,%r10
  0x00000001249974c3: mov    %r10,0x320(%r15)
  0x00000001249974ca: movabs $0x0,%r10
  0x00000001249974d4: mov    %r10,0x330(%r15)
  0x00000001249974db: movabs $0x0,%r10
  0x00000001249974e5: mov    %r10,0x328(%r15)
  0x00000001249974ec: vzeroupper 
  0x00000001249974ef: cmpq   $0x0,0x8(%r15)
  0x00000001249974f7: je     0x0000000124997502
  0x00000001249974fd: jmpq   0x0000000124975780
  0x0000000124997502: mov    -0x40(%rbp),%r13
  0x0000000124997506: mov    -0x38(%rbp),%r14
  0x000000012499750a: retq   
  0x000000012499750b: movabs $0x114ff3493,%rdi
  0x0000000124997515: and    $0xfffffffffffffff0,%rsp
  0x0000000124997519: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000012499751e: hlt    
  0x000000012499751f: movzbl 0x1(%r13),%ebx
  0x0000000124997524: inc    %r13
  0x0000000124997527: movabs $0x1151d6a20,%r10
  0x0000000124997531: jmpq   *(%r10,%rbx,8)
  0x0000000124997535: movq   $0x0,-0x10(%rbp)
  0x000000012499753d: mov    -0x40(%rbp),%r13
  0x0000000124997541: mov    -0x38(%rbp),%r14
  0x0000000124997545: cmpq   $0x0,0x8(%r15)
  0x000000012499754d: je     0x0000000124997603
  0x0000000124997553: callq  0x000000012499755d
  0x0000000124997558: jmpq   0x00000001249975ef
  0x000000012499755d: lea    0x8(%rsp),%rax
  0x0000000124997562: mov    %r13,-0x40(%rbp)
  0x0000000124997566: mov    %r15,%rdi
  0x0000000124997569: vzeroupper 
  0x000000012499756c: mov    %rbp,0x330(%r15)
  0x0000000124997573: mov    %rax,0x320(%r15)
  0x000000012499757a: test   $0xf,%esp
  0x0000000124997580: je     0x0000000124997598
  0x0000000124997586: sub    $0x8,%rsp
  0x000000012499758a: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000012499758f: add    $0x8,%rsp
  0x0000000124997593: jmpq   0x000000012499759d
  0x0000000124997598: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000012499759d: movabs $0x0,%r10
  0x00000001249975a7: mov    %r10,0x320(%r15)
  0x00000001249975ae: movabs $0x0,%r10
  0x00000001249975b8: mov    %r10,0x330(%r15)
  0x00000001249975bf: movabs $0x0,%r10
  0x00000001249975c9: mov    %r10,0x328(%r15)
  0x00000001249975d0: vzeroupper 
  0x00000001249975d3: cmpq   $0x0,0x8(%r15)
  0x00000001249975db: je     0x00000001249975e6
  0x00000001249975e1: jmpq   0x0000000124975780
  0x00000001249975e6: mov    -0x40(%rbp),%r13
  0x00000001249975ea: mov    -0x38(%rbp),%r14
  0x00000001249975ee: retq   
  0x00000001249975ef: movabs $0x114ff3493,%rdi
  0x00000001249975f9: and    $0xfffffffffffffff0,%rsp
  0x00000001249975fd: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124997602: hlt    
  0x0000000124997603: movzbl 0x1(%r13),%ebx
  0x0000000124997608: inc    %r13
  0x000000012499760b: movabs $0x1151d7a20,%r10
  0x0000000124997615: jmpq   *(%r10,%rbx,8)
  0x0000000124997619: movq   $0x0,-0x10(%rbp)
  0x0000000124997621: mov    -0x40(%rbp),%r13
  0x0000000124997625: mov    -0x38(%rbp),%r14
  0x0000000124997629: cmpq   $0x0,0x8(%r15)
  0x0000000124997631: je     0x00000001249976e7
  0x0000000124997637: callq  0x0000000124997641
  0x000000012499763c: jmpq   0x00000001249976d3
  0x0000000124997641: lea    0x8(%rsp),%rax
  0x0000000124997646: mov    %r13,-0x40(%rbp)
  0x000000012499764a: mov    %r15,%rdi
  0x000000012499764d: vzeroupper 
  0x0000000124997650: mov    %rbp,0x330(%r15)
  0x0000000124997657: mov    %rax,0x320(%r15)
  0x000000012499765e: test   $0xf,%esp
  0x0000000124997664: je     0x000000012499767c
  0x000000012499766a: sub    $0x8,%rsp
  0x000000012499766e: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124997673: add    $0x8,%rsp
  0x0000000124997677: jmpq   0x0000000124997681
  0x000000012499767c: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124997681: movabs $0x0,%r10
  0x000000012499768b: mov    %r10,0x320(%r15)
  0x0000000124997692: movabs $0x0,%r10
  0x000000012499769c: mov    %r10,0x330(%r15)
  0x00000001249976a3: movabs $0x0,%r10
  0x00000001249976ad: mov    %r10,0x328(%r15)
  0x00000001249976b4: vzeroupper 
  0x00000001249976b7: cmpq   $0x0,0x8(%r15)
  0x00000001249976bf: je     0x00000001249976ca
  0x00000001249976c5: jmpq   0x0000000124975780
  0x00000001249976ca: mov    -0x40(%rbp),%r13
  0x00000001249976ce: mov    -0x38(%rbp),%r14
  0x00000001249976d2: retq   
  0x00000001249976d3: movabs $0x114ff3493,%rdi
  0x00000001249976dd: and    $0xfffffffffffffff0,%rsp
  0x00000001249976e1: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x00000001249976e6: hlt    
  0x00000001249976e7: movzbl 0x2(%r13),%ebx
  0x00000001249976ec: add    $0x2,%r13
  0x00000001249976f0: movabs $0x1151d5220,%r10
  0x00000001249976fa: jmpq   *(%r10,%rbx,8)
  0x00000001249976fe: movq   $0x0,-0x10(%rbp)
  0x0000000124997706: mov    -0x40(%rbp),%r13
  0x000000012499770a: mov    -0x38(%rbp),%r14
  0x000000012499770e: cmpq   $0x0,0x8(%r15)
  0x0000000124997716: je     0x00000001249977cc
  0x000000012499771c: callq  0x0000000124997726
  0x0000000124997721: jmpq   0x00000001249977b8
  0x0000000124997726: lea    0x8(%rsp),%rax
  0x000000012499772b: mov    %r13,-0x40(%rbp)
  0x000000012499772f: mov    %r15,%rdi
  0x0000000124997732: vzeroupper 
  0x0000000124997735: mov    %rbp,0x330(%r15)
  0x000000012499773c: mov    %rax,0x320(%r15)
  0x0000000124997743: test   $0xf,%esp
  0x0000000124997749: je     0x0000000124997761
  0x000000012499774f: sub    $0x8,%rsp
  0x0000000124997753: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124997758: add    $0x8,%rsp
  0x000000012499775c: jmpq   0x0000000124997766
  0x0000000124997761: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124997766: movabs $0x0,%r10
  0x0000000124997770: mov    %r10,0x320(%r15)
  0x0000000124997777: movabs $0x0,%r10
  0x0000000124997781: mov    %r10,0x330(%r15)
  0x0000000124997788: movabs $0x0,%r10
  0x0000000124997792: mov    %r10,0x328(%r15)
  0x0000000124997799: vzeroupper 
  0x000000012499779c: cmpq   $0x0,0x8(%r15)
  0x00000001249977a4: je     0x00000001249977af
  0x00000001249977aa: jmpq   0x0000000124975780
  0x00000001249977af: mov    -0x40(%rbp),%r13
  0x00000001249977b3: mov    -0x38(%rbp),%r14
  0x00000001249977b7: retq   
  0x00000001249977b8: movabs $0x114ff3493,%rdi
  0x00000001249977c2: and    $0xfffffffffffffff0,%rsp
  0x00000001249977c6: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x00000001249977cb: hlt    
  0x00000001249977cc: movzbl 0x2(%r13),%ebx
  0x00000001249977d1: add    $0x2,%r13
  0x00000001249977d5: movabs $0x1151d7220,%r10
  0x00000001249977df: jmpq   *(%r10,%rbx,8)
  0x00000001249977e3: movq   $0x0,-0x10(%rbp)
  0x00000001249977eb: mov    -0x40(%rbp),%r13
  0x00000001249977ef: mov    -0x38(%rbp),%r14
  0x00000001249977f3: cmpq   $0x0,0x8(%r15)
  0x00000001249977fb: je     0x00000001249978b1
  0x0000000124997801: callq  0x000000012499780b
  0x0000000124997806: jmpq   0x000000012499789d
  0x000000012499780b: lea    0x8(%rsp),%rax
  0x0000000124997810: mov    %r13,-0x40(%rbp)
  0x0000000124997814: mov    %r15,%rdi
  0x0000000124997817: vzeroupper 
  0x000000012499781a: mov    %rbp,0x330(%r15)
  0x0000000124997821: mov    %rax,0x320(%r15)
  0x0000000124997828: test   $0xf,%esp
  0x000000012499782e: je     0x0000000124997846
  0x0000000124997834: sub    $0x8,%rsp
  0x0000000124997838: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000012499783d: add    $0x8,%rsp
  0x0000000124997841: jmpq   0x000000012499784b
  0x0000000124997846: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000012499784b: movabs $0x0,%r10
  0x0000000124997855: mov    %r10,0x320(%r15)
  0x000000012499785c: movabs $0x0,%r10
  0x0000000124997866: mov    %r10,0x330(%r15)
  0x000000012499786d: movabs $0x0,%r10
  0x0000000124997877: mov    %r10,0x328(%r15)
  0x000000012499787e: vzeroupper 
  0x0000000124997881: cmpq   $0x0,0x8(%r15)
  0x0000000124997889: je     0x0000000124997894
  0x000000012499788f: jmpq   0x0000000124975780
  0x0000000124997894: mov    -0x40(%rbp),%r13
  0x0000000124997898: mov    -0x38(%rbp),%r14
  0x000000012499789c: retq   
  0x000000012499789d: movabs $0x114ff3493,%rdi
  0x00000001249978a7: and    $0xfffffffffffffff0,%rsp
  0x00000001249978ab: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x00000001249978b0: hlt    
  0x00000001249978b1: movzbl 0x2(%r13),%ebx
  0x00000001249978b6: add    $0x2,%r13
  0x00000001249978ba: movabs $0x1151d5a20,%r10
  0x00000001249978c4: jmpq   *(%r10,%rbx,8)
  0x00000001249978c8: movq   $0x0,-0x10(%rbp)
  0x00000001249978d0: mov    -0x40(%rbp),%r13
  0x00000001249978d4: mov    -0x38(%rbp),%r14
  0x00000001249978d8: cmpq   $0x0,0x8(%r15)
  0x00000001249978e0: je     0x0000000124997996
  0x00000001249978e6: callq  0x00000001249978f0
  0x00000001249978eb: jmpq   0x0000000124997982
  0x00000001249978f0: lea    0x8(%rsp),%rax
  0x00000001249978f5: mov    %r13,-0x40(%rbp)
  0x00000001249978f9: mov    %r15,%rdi
  0x00000001249978fc: vzeroupper 
  0x00000001249978ff: mov    %rbp,0x330(%r15)
  0x0000000124997906: mov    %rax,0x320(%r15)
  0x000000012499790d: test   $0xf,%esp
  0x0000000124997913: je     0x000000012499792b
  0x0000000124997919: sub    $0x8,%rsp
  0x000000012499791d: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124997922: add    $0x8,%rsp
  0x0000000124997926: jmpq   0x0000000124997930
  0x000000012499792b: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124997930: movabs $0x0,%r10
  0x000000012499793a: mov    %r10,0x320(%r15)
  0x0000000124997941: movabs $0x0,%r10
  0x000000012499794b: mov    %r10,0x330(%r15)
  0x0000000124997952: movabs $0x0,%r10
  0x000000012499795c: mov    %r10,0x328(%r15)
  0x0000000124997963: vzeroupper 
  0x0000000124997966: cmpq   $0x0,0x8(%r15)
  0x000000012499796e: je     0x0000000124997979
  0x0000000124997974: jmpq   0x0000000124975780
  0x0000000124997979: mov    -0x40(%rbp),%r13
  0x000000012499797d: mov    -0x38(%rbp),%r14
  0x0000000124997981: retq   
  0x0000000124997982: movabs $0x114ff3493,%rdi
  0x000000012499798c: and    $0xfffffffffffffff0,%rsp
  0x0000000124997990: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124997995: hlt    
  0x0000000124997996: movzbl 0x2(%r13),%ebx
  0x000000012499799b: add    $0x2,%r13
  0x000000012499799f: movabs $0x1151d6220,%r10
  0x00000001249979a9: jmpq   *(%r10,%rbx,8)
  0x00000001249979ad: movq   $0x0,-0x10(%rbp)
  0x00000001249979b5: mov    -0x40(%rbp),%r13
  0x00000001249979b9: mov    -0x38(%rbp),%r14
  0x00000001249979bd: cmpq   $0x0,0x8(%r15)
  0x00000001249979c5: je     0x0000000124997a7b
  0x00000001249979cb: callq  0x00000001249979d5
  0x00000001249979d0: jmpq   0x0000000124997a67
  0x00000001249979d5: lea    0x8(%rsp),%rax
  0x00000001249979da: mov    %r13,-0x40(%rbp)
  0x00000001249979de: mov    %r15,%rdi
  0x00000001249979e1: vzeroupper 
  0x00000001249979e4: mov    %rbp,0x330(%r15)
  0x00000001249979eb: mov    %rax,0x320(%r15)
  0x00000001249979f2: test   $0xf,%esp
  0x00000001249979f8: je     0x0000000124997a10
  0x00000001249979fe: sub    $0x8,%rsp
  0x0000000124997a02: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124997a07: add    $0x8,%rsp
  0x0000000124997a0b: jmpq   0x0000000124997a15
  0x0000000124997a10: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124997a15: movabs $0x0,%r10
  0x0000000124997a1f: mov    %r10,0x320(%r15)
  0x0000000124997a26: movabs $0x0,%r10
  0x0000000124997a30: mov    %r10,0x330(%r15)
  0x0000000124997a37: movabs $0x0,%r10
  0x0000000124997a41: mov    %r10,0x328(%r15)
  0x0000000124997a48: vzeroupper 
  0x0000000124997a4b: cmpq   $0x0,0x8(%r15)
  0x0000000124997a53: je     0x0000000124997a5e
  0x0000000124997a59: jmpq   0x0000000124975780
  0x0000000124997a5e: mov    -0x40(%rbp),%r13
  0x0000000124997a62: mov    -0x38(%rbp),%r14
  0x0000000124997a66: retq   
  0x0000000124997a67: movabs $0x114ff3493,%rdi
  0x0000000124997a71: and    $0xfffffffffffffff0,%rsp
  0x0000000124997a75: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124997a7a: hlt    
  0x0000000124997a7b: movzbl 0x2(%r13),%ebx
  0x0000000124997a80: add    $0x2,%r13
  0x0000000124997a84: movabs $0x1151d6a20,%r10
  0x0000000124997a8e: jmpq   *(%r10,%rbx,8)
  0x0000000124997a92: movq   $0x0,-0x10(%rbp)
  0x0000000124997a9a: mov    -0x40(%rbp),%r13
  0x0000000124997a9e: mov    -0x38(%rbp),%r14
  0x0000000124997aa2: cmpq   $0x0,0x8(%r15)
  0x0000000124997aaa: je     0x0000000124997b60
  0x0000000124997ab0: callq  0x0000000124997aba
  0x0000000124997ab5: jmpq   0x0000000124997b4c
  0x0000000124997aba: lea    0x8(%rsp),%rax
  0x0000000124997abf: mov    %r13,-0x40(%rbp)
  0x0000000124997ac3: mov    %r15,%rdi
  0x0000000124997ac6: vzeroupper 
  0x0000000124997ac9: mov    %rbp,0x330(%r15)
  0x0000000124997ad0: mov    %rax,0x320(%r15)
  0x0000000124997ad7: test   $0xf,%esp
  0x0000000124997add: je     0x0000000124997af5
  0x0000000124997ae3: sub    $0x8,%rsp
  0x0000000124997ae7: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124997aec: add    $0x8,%rsp
  0x0000000124997af0: jmpq   0x0000000124997afa
  0x0000000124997af5: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124997afa: movabs $0x0,%r10
  0x0000000124997b04: mov    %r10,0x320(%r15)
  0x0000000124997b0b: movabs $0x0,%r10
  0x0000000124997b15: mov    %r10,0x330(%r15)
  0x0000000124997b1c: movabs $0x0,%r10
  0x0000000124997b26: mov    %r10,0x328(%r15)
  0x0000000124997b2d: vzeroupper 
  0x0000000124997b30: cmpq   $0x0,0x8(%r15)
  0x0000000124997b38: je     0x0000000124997b43
  0x0000000124997b3e: jmpq   0x0000000124975780
  0x0000000124997b43: mov    -0x40(%rbp),%r13
  0x0000000124997b47: mov    -0x38(%rbp),%r14
  0x0000000124997b4b: retq   
  0x0000000124997b4c: movabs $0x114ff3493,%rdi
  0x0000000124997b56: and    $0xfffffffffffffff0,%rsp
  0x0000000124997b5a: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124997b5f: hlt    
  0x0000000124997b60: movzbl 0x2(%r13),%ebx
  0x0000000124997b65: add    $0x2,%r13
  0x0000000124997b69: movabs $0x1151d7a20,%r10
  0x0000000124997b73: jmpq   *(%r10,%rbx,8)
  0x0000000124997b77: movq   $0x0,-0x10(%rbp)
  0x0000000124997b7f: mov    -0x40(%rbp),%r13
  0x0000000124997b83: mov    -0x38(%rbp),%r14
  0x0000000124997b87: cmpq   $0x0,0x8(%r15)
  0x0000000124997b8f: je     0x0000000124997c45
  0x0000000124997b95: callq  0x0000000124997b9f
  0x0000000124997b9a: jmpq   0x0000000124997c31
  0x0000000124997b9f: lea    0x8(%rsp),%rax
  0x0000000124997ba4: mov    %r13,-0x40(%rbp)
  0x0000000124997ba8: mov    %r15,%rdi
  0x0000000124997bab: vzeroupper 
  0x0000000124997bae: mov    %rbp,0x330(%r15)
  0x0000000124997bb5: mov    %rax,0x320(%r15)
  0x0000000124997bbc: test   $0xf,%esp
  0x0000000124997bc2: je     0x0000000124997bda
  0x0000000124997bc8: sub    $0x8,%rsp
  0x0000000124997bcc: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124997bd1: add    $0x8,%rsp
  0x0000000124997bd5: jmpq   0x0000000124997bdf
  0x0000000124997bda: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124997bdf: movabs $0x0,%r10
  0x0000000124997be9: mov    %r10,0x320(%r15)
  0x0000000124997bf0: movabs $0x0,%r10
  0x0000000124997bfa: mov    %r10,0x330(%r15)
  0x0000000124997c01: movabs $0x0,%r10
  0x0000000124997c0b: mov    %r10,0x328(%r15)
  0x0000000124997c12: vzeroupper 
  0x0000000124997c15: cmpq   $0x0,0x8(%r15)
  0x0000000124997c1d: je     0x0000000124997c28
  0x0000000124997c23: jmpq   0x0000000124975780
  0x0000000124997c28: mov    -0x40(%rbp),%r13
  0x0000000124997c2c: mov    -0x38(%rbp),%r14
  0x0000000124997c30: retq   
  0x0000000124997c31: movabs $0x114ff3493,%rdi
  0x0000000124997c3b: and    $0xfffffffffffffff0,%rsp
  0x0000000124997c3f: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124997c44: hlt    
  0x0000000124997c45: movzbl 0x3(%r13),%ebx
  0x0000000124997c4a: add    $0x3,%r13
  0x0000000124997c4e: movabs $0x1151d5220,%r10
  0x0000000124997c58: jmpq   *(%r10,%rbx,8)
  0x0000000124997c5c: movq   $0x0,-0x10(%rbp)
  0x0000000124997c64: mov    -0x40(%rbp),%r13
  0x0000000124997c68: mov    -0x38(%rbp),%r14
  0x0000000124997c6c: cmpq   $0x0,0x8(%r15)
  0x0000000124997c74: je     0x0000000124997d2a
  0x0000000124997c7a: callq  0x0000000124997c84
  0x0000000124997c7f: jmpq   0x0000000124997d16
  0x0000000124997c84: lea    0x8(%rsp),%rax
  0x0000000124997c89: mov    %r13,-0x40(%rbp)
  0x0000000124997c8d: mov    %r15,%rdi
  0x0000000124997c90: vzeroupper 
  0x0000000124997c93: mov    %rbp,0x330(%r15)
  0x0000000124997c9a: mov    %rax,0x320(%r15)
  0x0000000124997ca1: test   $0xf,%esp
  0x0000000124997ca7: je     0x0000000124997cbf
  0x0000000124997cad: sub    $0x8,%rsp
  0x0000000124997cb1: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124997cb6: add    $0x8,%rsp
  0x0000000124997cba: jmpq   0x0000000124997cc4
  0x0000000124997cbf: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124997cc4: movabs $0x0,%r10
  0x0000000124997cce: mov    %r10,0x320(%r15)
  0x0000000124997cd5: movabs $0x0,%r10
  0x0000000124997cdf: mov    %r10,0x330(%r15)
  0x0000000124997ce6: movabs $0x0,%r10
  0x0000000124997cf0: mov    %r10,0x328(%r15)
  0x0000000124997cf7: vzeroupper 
  0x0000000124997cfa: cmpq   $0x0,0x8(%r15)
  0x0000000124997d02: je     0x0000000124997d0d
  0x0000000124997d08: jmpq   0x0000000124975780
  0x0000000124997d0d: mov    -0x40(%rbp),%r13
  0x0000000124997d11: mov    -0x38(%rbp),%r14
  0x0000000124997d15: retq   
  0x0000000124997d16: movabs $0x114ff3493,%rdi
  0x0000000124997d20: and    $0xfffffffffffffff0,%rsp
  0x0000000124997d24: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124997d29: hlt    
  0x0000000124997d2a: movzbl 0x3(%r13),%ebx
  0x0000000124997d2f: add    $0x3,%r13
  0x0000000124997d33: movabs $0x1151d7220,%r10
  0x0000000124997d3d: jmpq   *(%r10,%rbx,8)
  0x0000000124997d41: movq   $0x0,-0x10(%rbp)
  0x0000000124997d49: mov    -0x40(%rbp),%r13
  0x0000000124997d4d: mov    -0x38(%rbp),%r14
  0x0000000124997d51: cmpq   $0x0,0x8(%r15)
  0x0000000124997d59: je     0x0000000124997e0f
  0x0000000124997d5f: callq  0x0000000124997d69
  0x0000000124997d64: jmpq   0x0000000124997dfb
  0x0000000124997d69: lea    0x8(%rsp),%rax
  0x0000000124997d6e: mov    %r13,-0x40(%rbp)
  0x0000000124997d72: mov    %r15,%rdi
  0x0000000124997d75: vzeroupper 
  0x0000000124997d78: mov    %rbp,0x330(%r15)
  0x0000000124997d7f: mov    %rax,0x320(%r15)
  0x0000000124997d86: test   $0xf,%esp
  0x0000000124997d8c: je     0x0000000124997da4
  0x0000000124997d92: sub    $0x8,%rsp
  0x0000000124997d96: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124997d9b: add    $0x8,%rsp
  0x0000000124997d9f: jmpq   0x0000000124997da9
  0x0000000124997da4: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124997da9: movabs $0x0,%r10
  0x0000000124997db3: mov    %r10,0x320(%r15)
  0x0000000124997dba: movabs $0x0,%r10
  0x0000000124997dc4: mov    %r10,0x330(%r15)
  0x0000000124997dcb: movabs $0x0,%r10
  0x0000000124997dd5: mov    %r10,0x328(%r15)
  0x0000000124997ddc: vzeroupper 
  0x0000000124997ddf: cmpq   $0x0,0x8(%r15)
  0x0000000124997de7: je     0x0000000124997df2
  0x0000000124997ded: jmpq   0x0000000124975780
  0x0000000124997df2: mov    -0x40(%rbp),%r13
  0x0000000124997df6: mov    -0x38(%rbp),%r14
  0x0000000124997dfa: retq   
  0x0000000124997dfb: movabs $0x114ff3493,%rdi
  0x0000000124997e05: and    $0xfffffffffffffff0,%rsp
  0x0000000124997e09: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124997e0e: hlt    
  0x0000000124997e0f: movzbl 0x3(%r13),%ebx
  0x0000000124997e14: add    $0x3,%r13
  0x0000000124997e18: movabs $0x1151d5a20,%r10
  0x0000000124997e22: jmpq   *(%r10,%rbx,8)
  0x0000000124997e26: movq   $0x0,-0x10(%rbp)
  0x0000000124997e2e: mov    -0x40(%rbp),%r13
  0x0000000124997e32: mov    -0x38(%rbp),%r14
  0x0000000124997e36: cmpq   $0x0,0x8(%r15)
  0x0000000124997e3e: je     0x0000000124997ef4
  0x0000000124997e44: callq  0x0000000124997e4e
  0x0000000124997e49: jmpq   0x0000000124997ee0
  0x0000000124997e4e: lea    0x8(%rsp),%rax
  0x0000000124997e53: mov    %r13,-0x40(%rbp)
  0x0000000124997e57: mov    %r15,%rdi
  0x0000000124997e5a: vzeroupper 
  0x0000000124997e5d: mov    %rbp,0x330(%r15)
  0x0000000124997e64: mov    %rax,0x320(%r15)
  0x0000000124997e6b: test   $0xf,%esp
  0x0000000124997e71: je     0x0000000124997e89
  0x0000000124997e77: sub    $0x8,%rsp
  0x0000000124997e7b: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124997e80: add    $0x8,%rsp
  0x0000000124997e84: jmpq   0x0000000124997e8e
  0x0000000124997e89: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124997e8e: movabs $0x0,%r10
  0x0000000124997e98: mov    %r10,0x320(%r15)
  0x0000000124997e9f: movabs $0x0,%r10
  0x0000000124997ea9: mov    %r10,0x330(%r15)
  0x0000000124997eb0: movabs $0x0,%r10
  0x0000000124997eba: mov    %r10,0x328(%r15)
  0x0000000124997ec1: vzeroupper 
  0x0000000124997ec4: cmpq   $0x0,0x8(%r15)
  0x0000000124997ecc: je     0x0000000124997ed7
  0x0000000124997ed2: jmpq   0x0000000124975780
  0x0000000124997ed7: mov    -0x40(%rbp),%r13
  0x0000000124997edb: mov    -0x38(%rbp),%r14
  0x0000000124997edf: retq   
  0x0000000124997ee0: movabs $0x114ff3493,%rdi
  0x0000000124997eea: and    $0xfffffffffffffff0,%rsp
  0x0000000124997eee: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124997ef3: hlt    
  0x0000000124997ef4: movzbl 0x3(%r13),%ebx
  0x0000000124997ef9: add    $0x3,%r13
  0x0000000124997efd: movabs $0x1151d6220,%r10
  0x0000000124997f07: jmpq   *(%r10,%rbx,8)
  0x0000000124997f0b: movq   $0x0,-0x10(%rbp)
  0x0000000124997f13: mov    -0x40(%rbp),%r13
  0x0000000124997f17: mov    -0x38(%rbp),%r14
  0x0000000124997f1b: cmpq   $0x0,0x8(%r15)
  0x0000000124997f23: je     0x0000000124997fd9
  0x0000000124997f29: callq  0x0000000124997f33
  0x0000000124997f2e: jmpq   0x0000000124997fc5
  0x0000000124997f33: lea    0x8(%rsp),%rax
  0x0000000124997f38: mov    %r13,-0x40(%rbp)
  0x0000000124997f3c: mov    %r15,%rdi
  0x0000000124997f3f: vzeroupper 
  0x0000000124997f42: mov    %rbp,0x330(%r15)
  0x0000000124997f49: mov    %rax,0x320(%r15)
  0x0000000124997f50: test   $0xf,%esp
  0x0000000124997f56: je     0x0000000124997f6e
  0x0000000124997f5c: sub    $0x8,%rsp
  0x0000000124997f60: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124997f65: add    $0x8,%rsp
  0x0000000124997f69: jmpq   0x0000000124997f73
  0x0000000124997f6e: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124997f73: movabs $0x0,%r10
  0x0000000124997f7d: mov    %r10,0x320(%r15)
  0x0000000124997f84: movabs $0x0,%r10
  0x0000000124997f8e: mov    %r10,0x330(%r15)
  0x0000000124997f95: movabs $0x0,%r10
  0x0000000124997f9f: mov    %r10,0x328(%r15)
  0x0000000124997fa6: vzeroupper 
  0x0000000124997fa9: cmpq   $0x0,0x8(%r15)
  0x0000000124997fb1: je     0x0000000124997fbc
  0x0000000124997fb7: jmpq   0x0000000124975780
  0x0000000124997fbc: mov    -0x40(%rbp),%r13
  0x0000000124997fc0: mov    -0x38(%rbp),%r14
  0x0000000124997fc4: retq   
  0x0000000124997fc5: movabs $0x114ff3493,%rdi
  0x0000000124997fcf: and    $0xfffffffffffffff0,%rsp
  0x0000000124997fd3: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124997fd8: hlt    
  0x0000000124997fd9: movzbl 0x3(%r13),%ebx
  0x0000000124997fde: add    $0x3,%r13
  0x0000000124997fe2: movabs $0x1151d6a20,%r10
  0x0000000124997fec: jmpq   *(%r10,%rbx,8)
  0x0000000124997ff0: movq   $0x0,-0x10(%rbp)
  0x0000000124997ff8: mov    -0x40(%rbp),%r13
  0x0000000124997ffc: mov    -0x38(%rbp),%r14
  0x0000000124998000: cmpq   $0x0,0x8(%r15)
  0x0000000124998008: je     0x00000001249980be
  0x000000012499800e: callq  0x0000000124998018
  0x0000000124998013: jmpq   0x00000001249980aa
  0x0000000124998018: lea    0x8(%rsp),%rax
  0x000000012499801d: mov    %r13,-0x40(%rbp)
  0x0000000124998021: mov    %r15,%rdi
  0x0000000124998024: vzeroupper 
  0x0000000124998027: mov    %rbp,0x330(%r15)
  0x000000012499802e: mov    %rax,0x320(%r15)
  0x0000000124998035: test   $0xf,%esp
  0x000000012499803b: je     0x0000000124998053
  0x0000000124998041: sub    $0x8,%rsp
  0x0000000124998045: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000012499804a: add    $0x8,%rsp
  0x000000012499804e: jmpq   0x0000000124998058
  0x0000000124998053: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124998058: movabs $0x0,%r10
  0x0000000124998062: mov    %r10,0x320(%r15)
  0x0000000124998069: movabs $0x0,%r10
  0x0000000124998073: mov    %r10,0x330(%r15)
  0x000000012499807a: movabs $0x0,%r10
  0x0000000124998084: mov    %r10,0x328(%r15)
  0x000000012499808b: vzeroupper 
  0x000000012499808e: cmpq   $0x0,0x8(%r15)
  0x0000000124998096: je     0x00000001249980a1
  0x000000012499809c: jmpq   0x0000000124975780
  0x00000001249980a1: mov    -0x40(%rbp),%r13
  0x00000001249980a5: mov    -0x38(%rbp),%r14
  0x00000001249980a9: retq   
  0x00000001249980aa: movabs $0x114ff3493,%rdi
  0x00000001249980b4: and    $0xfffffffffffffff0,%rsp
  0x00000001249980b8: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x00000001249980bd: hlt    
  0x00000001249980be: movzbl 0x3(%r13),%ebx
  0x00000001249980c3: add    $0x3,%r13
  0x00000001249980c7: movabs $0x1151d7a20,%r10
  0x00000001249980d1: jmpq   *(%r10,%rbx,8)
  0x00000001249980d5: movq   $0x0,-0x10(%rbp)
  0x00000001249980dd: mov    -0x40(%rbp),%r13
  0x00000001249980e1: mov    -0x38(%rbp),%r14
  0x00000001249980e5: cmpq   $0x0,0x8(%r15)
  0x00000001249980ed: je     0x00000001249981a3
  0x00000001249980f3: callq  0x00000001249980fd
  0x00000001249980f8: jmpq   0x000000012499818f
  0x00000001249980fd: lea    0x8(%rsp),%rax
  0x0000000124998102: mov    %r13,-0x40(%rbp)
  0x0000000124998106: mov    %r15,%rdi
  0x0000000124998109: vzeroupper 
  0x000000012499810c: mov    %rbp,0x330(%r15)
  0x0000000124998113: mov    %rax,0x320(%r15)
  0x000000012499811a: test   $0xf,%esp
  0x0000000124998120: je     0x0000000124998138
  0x0000000124998126: sub    $0x8,%rsp
  0x000000012499812a: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000012499812f: add    $0x8,%rsp
  0x0000000124998133: jmpq   0x000000012499813d
  0x0000000124998138: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000012499813d: movabs $0x0,%r10
  0x0000000124998147: mov    %r10,0x320(%r15)
  0x000000012499814e: movabs $0x0,%r10
  0x0000000124998158: mov    %r10,0x330(%r15)
  0x000000012499815f: movabs $0x0,%r10
  0x0000000124998169: mov    %r10,0x328(%r15)
  0x0000000124998170: vzeroupper 
  0x0000000124998173: cmpq   $0x0,0x8(%r15)
  0x000000012499817b: je     0x0000000124998186
  0x0000000124998181: jmpq   0x0000000124975780
  0x0000000124998186: mov    -0x40(%rbp),%r13
  0x000000012499818a: mov    -0x38(%rbp),%r14
  0x000000012499818e: retq   
  0x000000012499818f: movabs $0x114ff3493,%rdi
  0x0000000124998199: and    $0xfffffffffffffff0,%rsp
  0x000000012499819d: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x00000001249981a2: hlt    
  0x00000001249981a3: movzbl 0x4(%r13),%ebx
  0x00000001249981a8: add    $0x4,%r13
  0x00000001249981ac: movabs $0x1151d5220,%r10
  0x00000001249981b6: jmpq   *(%r10,%rbx,8)
  0x00000001249981ba: movq   $0x0,-0x10(%rbp)
  0x00000001249981c2: mov    -0x40(%rbp),%r13
  0x00000001249981c6: mov    -0x38(%rbp),%r14
  0x00000001249981ca: cmpq   $0x0,0x8(%r15)
  0x00000001249981d2: je     0x0000000124998288
  0x00000001249981d8: callq  0x00000001249981e2
  0x00000001249981dd: jmpq   0x0000000124998274
  0x00000001249981e2: lea    0x8(%rsp),%rax
  0x00000001249981e7: mov    %r13,-0x40(%rbp)
  0x00000001249981eb: mov    %r15,%rdi
  0x00000001249981ee: vzeroupper 
  0x00000001249981f1: mov    %rbp,0x330(%r15)
  0x00000001249981f8: mov    %rax,0x320(%r15)
  0x00000001249981ff: test   $0xf,%esp
  0x0000000124998205: je     0x000000012499821d
  0x000000012499820b: sub    $0x8,%rsp
  0x000000012499820f: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124998214: add    $0x8,%rsp
  0x0000000124998218: jmpq   0x0000000124998222
  0x000000012499821d: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124998222: movabs $0x0,%r10
  0x000000012499822c: mov    %r10,0x320(%r15)
  0x0000000124998233: movabs $0x0,%r10
  0x000000012499823d: mov    %r10,0x330(%r15)
  0x0000000124998244: movabs $0x0,%r10
  0x000000012499824e: mov    %r10,0x328(%r15)
  0x0000000124998255: vzeroupper 
  0x0000000124998258: cmpq   $0x0,0x8(%r15)
  0x0000000124998260: je     0x000000012499826b
  0x0000000124998266: jmpq   0x0000000124975780
  0x000000012499826b: mov    -0x40(%rbp),%r13
  0x000000012499826f: mov    -0x38(%rbp),%r14
  0x0000000124998273: retq   
  0x0000000124998274: movabs $0x114ff3493,%rdi
  0x000000012499827e: and    $0xfffffffffffffff0,%rsp
  0x0000000124998282: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124998287: hlt    
  0x0000000124998288: movzbl 0x4(%r13),%ebx
  0x000000012499828d: add    $0x4,%r13
  0x0000000124998291: movabs $0x1151d7220,%r10
  0x000000012499829b: jmpq   *(%r10,%rbx,8)
  0x000000012499829f: movq   $0x0,-0x10(%rbp)
  0x00000001249982a7: mov    -0x40(%rbp),%r13
  0x00000001249982ab: mov    -0x38(%rbp),%r14
  0x00000001249982af: cmpq   $0x0,0x8(%r15)
  0x00000001249982b7: je     0x000000012499836d
  0x00000001249982bd: callq  0x00000001249982c7
  0x00000001249982c2: jmpq   0x0000000124998359
  0x00000001249982c7: lea    0x8(%rsp),%rax
  0x00000001249982cc: mov    %r13,-0x40(%rbp)
  0x00000001249982d0: mov    %r15,%rdi
  0x00000001249982d3: vzeroupper 
  0x00000001249982d6: mov    %rbp,0x330(%r15)
  0x00000001249982dd: mov    %rax,0x320(%r15)
  0x00000001249982e4: test   $0xf,%esp
  0x00000001249982ea: je     0x0000000124998302
  0x00000001249982f0: sub    $0x8,%rsp
  0x00000001249982f4: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00000001249982f9: add    $0x8,%rsp
  0x00000001249982fd: jmpq   0x0000000124998307
  0x0000000124998302: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124998307: movabs $0x0,%r10
  0x0000000124998311: mov    %r10,0x320(%r15)
  0x0000000124998318: movabs $0x0,%r10
  0x0000000124998322: mov    %r10,0x330(%r15)
  0x0000000124998329: movabs $0x0,%r10
  0x0000000124998333: mov    %r10,0x328(%r15)
  0x000000012499833a: vzeroupper 
  0x000000012499833d: cmpq   $0x0,0x8(%r15)
  0x0000000124998345: je     0x0000000124998350
  0x000000012499834b: jmpq   0x0000000124975780
  0x0000000124998350: mov    -0x40(%rbp),%r13
  0x0000000124998354: mov    -0x38(%rbp),%r14
  0x0000000124998358: retq   
  0x0000000124998359: movabs $0x114ff3493,%rdi
  0x0000000124998363: and    $0xfffffffffffffff0,%rsp
  0x0000000124998367: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000012499836c: hlt    
  0x000000012499836d: movzbl 0x4(%r13),%ebx
  0x0000000124998372: add    $0x4,%r13
  0x0000000124998376: movabs $0x1151d5a20,%r10
  0x0000000124998380: jmpq   *(%r10,%rbx,8)
  0x0000000124998384: movq   $0x0,-0x10(%rbp)
  0x000000012499838c: mov    -0x40(%rbp),%r13
  0x0000000124998390: mov    -0x38(%rbp),%r14
  0x0000000124998394: cmpq   $0x0,0x8(%r15)
  0x000000012499839c: je     0x0000000124998452
  0x00000001249983a2: callq  0x00000001249983ac
  0x00000001249983a7: jmpq   0x000000012499843e
  0x00000001249983ac: lea    0x8(%rsp),%rax
  0x00000001249983b1: mov    %r13,-0x40(%rbp)
  0x00000001249983b5: mov    %r15,%rdi
  0x00000001249983b8: vzeroupper 
  0x00000001249983bb: mov    %rbp,0x330(%r15)
  0x00000001249983c2: mov    %rax,0x320(%r15)
  0x00000001249983c9: test   $0xf,%esp
  0x00000001249983cf: je     0x00000001249983e7
  0x00000001249983d5: sub    $0x8,%rsp
  0x00000001249983d9: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00000001249983de: add    $0x8,%rsp
  0x00000001249983e2: jmpq   0x00000001249983ec
  0x00000001249983e7: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00000001249983ec: movabs $0x0,%r10
  0x00000001249983f6: mov    %r10,0x320(%r15)
  0x00000001249983fd: movabs $0x0,%r10
  0x0000000124998407: mov    %r10,0x330(%r15)
  0x000000012499840e: movabs $0x0,%r10
  0x0000000124998418: mov    %r10,0x328(%r15)
  0x000000012499841f: vzeroupper 
  0x0000000124998422: cmpq   $0x0,0x8(%r15)
  0x000000012499842a: je     0x0000000124998435
  0x0000000124998430: jmpq   0x0000000124975780
  0x0000000124998435: mov    -0x40(%rbp),%r13
  0x0000000124998439: mov    -0x38(%rbp),%r14
  0x000000012499843d: retq   
  0x000000012499843e: movabs $0x114ff3493,%rdi
  0x0000000124998448: and    $0xfffffffffffffff0,%rsp
  0x000000012499844c: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124998451: hlt    
  0x0000000124998452: movzbl 0x4(%r13),%ebx
  0x0000000124998457: add    $0x4,%r13
  0x000000012499845b: movabs $0x1151d6220,%r10
  0x0000000124998465: jmpq   *(%r10,%rbx,8)
  0x0000000124998469: movq   $0x0,-0x10(%rbp)
  0x0000000124998471: mov    -0x40(%rbp),%r13
  0x0000000124998475: mov    -0x38(%rbp),%r14
  0x0000000124998479: cmpq   $0x0,0x8(%r15)
  0x0000000124998481: je     0x0000000124998537
  0x0000000124998487: callq  0x0000000124998491
  0x000000012499848c: jmpq   0x0000000124998523
  0x0000000124998491: lea    0x8(%rsp),%rax
  0x0000000124998496: mov    %r13,-0x40(%rbp)
  0x000000012499849a: mov    %r15,%rdi
  0x000000012499849d: vzeroupper 
  0x00000001249984a0: mov    %rbp,0x330(%r15)
  0x00000001249984a7: mov    %rax,0x320(%r15)
  0x00000001249984ae: test   $0xf,%esp
  0x00000001249984b4: je     0x00000001249984cc
  0x00000001249984ba: sub    $0x8,%rsp
  0x00000001249984be: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00000001249984c3: add    $0x8,%rsp
  0x00000001249984c7: jmpq   0x00000001249984d1
  0x00000001249984cc: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00000001249984d1: movabs $0x0,%r10
  0x00000001249984db: mov    %r10,0x320(%r15)
  0x00000001249984e2: movabs $0x0,%r10
  0x00000001249984ec: mov    %r10,0x330(%r15)
  0x00000001249984f3: movabs $0x0,%r10
  0x00000001249984fd: mov    %r10,0x328(%r15)
  0x0000000124998504: vzeroupper 
  0x0000000124998507: cmpq   $0x0,0x8(%r15)
  0x000000012499850f: je     0x000000012499851a
  0x0000000124998515: jmpq   0x0000000124975780
  0x000000012499851a: mov    -0x40(%rbp),%r13
  0x000000012499851e: mov    -0x38(%rbp),%r14
  0x0000000124998522: retq   
  0x0000000124998523: movabs $0x114ff3493,%rdi
  0x000000012499852d: and    $0xfffffffffffffff0,%rsp
  0x0000000124998531: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124998536: hlt    
  0x0000000124998537: movzbl 0x4(%r13),%ebx
  0x000000012499853c: add    $0x4,%r13
  0x0000000124998540: movabs $0x1151d6a20,%r10
  0x000000012499854a: jmpq   *(%r10,%rbx,8)
  0x000000012499854e: movq   $0x0,-0x10(%rbp)
  0x0000000124998556: mov    -0x40(%rbp),%r13
  0x000000012499855a: mov    -0x38(%rbp),%r14
  0x000000012499855e: cmpq   $0x0,0x8(%r15)
  0x0000000124998566: je     0x000000012499861c
  0x000000012499856c: callq  0x0000000124998576
  0x0000000124998571: jmpq   0x0000000124998608
  0x0000000124998576: lea    0x8(%rsp),%rax
  0x000000012499857b: mov    %r13,-0x40(%rbp)
  0x000000012499857f: mov    %r15,%rdi
  0x0000000124998582: vzeroupper 
  0x0000000124998585: mov    %rbp,0x330(%r15)
  0x000000012499858c: mov    %rax,0x320(%r15)
  0x0000000124998593: test   $0xf,%esp
  0x0000000124998599: je     0x00000001249985b1
  0x000000012499859f: sub    $0x8,%rsp
  0x00000001249985a3: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00000001249985a8: add    $0x8,%rsp
  0x00000001249985ac: jmpq   0x00000001249985b6
  0x00000001249985b1: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00000001249985b6: movabs $0x0,%r10
  0x00000001249985c0: mov    %r10,0x320(%r15)
  0x00000001249985c7: movabs $0x0,%r10
  0x00000001249985d1: mov    %r10,0x330(%r15)
  0x00000001249985d8: movabs $0x0,%r10
  0x00000001249985e2: mov    %r10,0x328(%r15)
  0x00000001249985e9: vzeroupper 
  0x00000001249985ec: cmpq   $0x0,0x8(%r15)
  0x00000001249985f4: je     0x00000001249985ff
  0x00000001249985fa: jmpq   0x0000000124975780
  0x00000001249985ff: mov    -0x40(%rbp),%r13
  0x0000000124998603: mov    -0x38(%rbp),%r14
  0x0000000124998607: retq   
  0x0000000124998608: movabs $0x114ff3493,%rdi
  0x0000000124998612: and    $0xfffffffffffffff0,%rsp
  0x0000000124998616: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x000000012499861b: hlt    
  0x000000012499861c: movzbl 0x4(%r13),%ebx
  0x0000000124998621: add    $0x4,%r13
  0x0000000124998625: movabs $0x1151d7a20,%r10
  0x000000012499862f: jmpq   *(%r10,%rbx,8)
  0x0000000124998633: movq   $0x0,-0x10(%rbp)
  0x000000012499863b: mov    -0x40(%rbp),%r13
  0x000000012499863f: mov    -0x38(%rbp),%r14
  0x0000000124998643: cmpq   $0x0,0x8(%r15)
  0x000000012499864b: je     0x0000000124998701
  0x0000000124998651: callq  0x000000012499865b
  0x0000000124998656: jmpq   0x00000001249986ed
  0x000000012499865b: lea    0x8(%rsp),%rax
  0x0000000124998660: mov    %r13,-0x40(%rbp)
  0x0000000124998664: mov    %r15,%rdi
  0x0000000124998667: vzeroupper 
  0x000000012499866a: mov    %rbp,0x330(%r15)
  0x0000000124998671: mov    %rax,0x320(%r15)
  0x0000000124998678: test   $0xf,%esp
  0x000000012499867e: je     0x0000000124998696
  0x0000000124998684: sub    $0x8,%rsp
  0x0000000124998688: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000012499868d: add    $0x8,%rsp
  0x0000000124998691: jmpq   0x000000012499869b
  0x0000000124998696: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000012499869b: movabs $0x0,%r10
  0x00000001249986a5: mov    %r10,0x320(%r15)
  0x00000001249986ac: movabs $0x0,%r10
  0x00000001249986b6: mov    %r10,0x330(%r15)
  0x00000001249986bd: movabs $0x0,%r10
  0x00000001249986c7: mov    %r10,0x328(%r15)
  0x00000001249986ce: vzeroupper 
  0x00000001249986d1: cmpq   $0x0,0x8(%r15)
  0x00000001249986d9: je     0x00000001249986e4
  0x00000001249986df: jmpq   0x0000000124975780
  0x00000001249986e4: mov    -0x40(%rbp),%r13
  0x00000001249986e8: mov    -0x38(%rbp),%r14
  0x00000001249986ec: retq   
  0x00000001249986ed: movabs $0x114ff3493,%rdi
  0x00000001249986f7: and    $0xfffffffffffffff0,%rsp
  0x00000001249986fb: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124998700: hlt    
  0x0000000124998701: movzbl 0x5(%r13),%ebx
  0x0000000124998706: add    $0x5,%r13
  0x000000012499870a: movabs $0x1151d5220,%r10
  0x0000000124998714: jmpq   *(%r10,%rbx,8)
  0x0000000124998718: movq   $0x0,-0x10(%rbp)
  0x0000000124998720: mov    -0x40(%rbp),%r13
  0x0000000124998724: mov    -0x38(%rbp),%r14
  0x0000000124998728: cmpq   $0x0,0x8(%r15)
  0x0000000124998730: je     0x00000001249987e6
  0x0000000124998736: callq  0x0000000124998740
  0x000000012499873b: jmpq   0x00000001249987d2
  0x0000000124998740: lea    0x8(%rsp),%rax
  0x0000000124998745: mov    %r13,-0x40(%rbp)
  0x0000000124998749: mov    %r15,%rdi
  0x000000012499874c: vzeroupper 
  0x000000012499874f: mov    %rbp,0x330(%r15)
  0x0000000124998756: mov    %rax,0x320(%r15)
  0x000000012499875d: test   $0xf,%esp
  0x0000000124998763: je     0x000000012499877b
  0x0000000124998769: sub    $0x8,%rsp
  0x000000012499876d: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124998772: add    $0x8,%rsp
  0x0000000124998776: jmpq   0x0000000124998780
  0x000000012499877b: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124998780: movabs $0x0,%r10
  0x000000012499878a: mov    %r10,0x320(%r15)
  0x0000000124998791: movabs $0x0,%r10
  0x000000012499879b: mov    %r10,0x330(%r15)
  0x00000001249987a2: movabs $0x0,%r10
  0x00000001249987ac: mov    %r10,0x328(%r15)
  0x00000001249987b3: vzeroupper 
  0x00000001249987b6: cmpq   $0x0,0x8(%r15)
  0x00000001249987be: je     0x00000001249987c9
  0x00000001249987c4: jmpq   0x0000000124975780
  0x00000001249987c9: mov    -0x40(%rbp),%r13
  0x00000001249987cd: mov    -0x38(%rbp),%r14
  0x00000001249987d1: retq   
  0x00000001249987d2: movabs $0x114ff3493,%rdi
  0x00000001249987dc: and    $0xfffffffffffffff0,%rsp
  0x00000001249987e0: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x00000001249987e5: hlt    
  0x00000001249987e6: movzbl 0x5(%r13),%ebx
  0x00000001249987eb: add    $0x5,%r13
  0x00000001249987ef: movabs $0x1151d7220,%r10
  0x00000001249987f9: jmpq   *(%r10,%rbx,8)
  0x00000001249987fd: movq   $0x0,-0x10(%rbp)
  0x0000000124998805: mov    -0x40(%rbp),%r13
  0x0000000124998809: mov    -0x38(%rbp),%r14
  0x000000012499880d: cmpq   $0x0,0x8(%r15)
  0x0000000124998815: je     0x00000001249988cb
  0x000000012499881b: callq  0x0000000124998825
  0x0000000124998820: jmpq   0x00000001249988b7
  0x0000000124998825: lea    0x8(%rsp),%rax
  0x000000012499882a: mov    %r13,-0x40(%rbp)
  0x000000012499882e: mov    %r15,%rdi
  0x0000000124998831: vzeroupper 
  0x0000000124998834: mov    %rbp,0x330(%r15)
  0x000000012499883b: mov    %rax,0x320(%r15)
  0x0000000124998842: test   $0xf,%esp
  0x0000000124998848: je     0x0000000124998860
  0x000000012499884e: sub    $0x8,%rsp
  0x0000000124998852: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124998857: add    $0x8,%rsp
  0x000000012499885b: jmpq   0x0000000124998865
  0x0000000124998860: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124998865: movabs $0x0,%r10
  0x000000012499886f: mov    %r10,0x320(%r15)
  0x0000000124998876: movabs $0x0,%r10
  0x0000000124998880: mov    %r10,0x330(%r15)
  0x0000000124998887: movabs $0x0,%r10
  0x0000000124998891: mov    %r10,0x328(%r15)
  0x0000000124998898: vzeroupper 
  0x000000012499889b: cmpq   $0x0,0x8(%r15)
  0x00000001249988a3: je     0x00000001249988ae
  0x00000001249988a9: jmpq   0x0000000124975780
  0x00000001249988ae: mov    -0x40(%rbp),%r13
  0x00000001249988b2: mov    -0x38(%rbp),%r14
  0x00000001249988b6: retq   
  0x00000001249988b7: movabs $0x114ff3493,%rdi
  0x00000001249988c1: and    $0xfffffffffffffff0,%rsp
  0x00000001249988c5: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x00000001249988ca: hlt    
  0x00000001249988cb: movzbl 0x5(%r13),%ebx
  0x00000001249988d0: add    $0x5,%r13
  0x00000001249988d4: movabs $0x1151d5a20,%r10
  0x00000001249988de: jmpq   *(%r10,%rbx,8)
  0x00000001249988e2: movq   $0x0,-0x10(%rbp)
  0x00000001249988ea: mov    -0x40(%rbp),%r13
  0x00000001249988ee: mov    -0x38(%rbp),%r14
  0x00000001249988f2: cmpq   $0x0,0x8(%r15)
  0x00000001249988fa: je     0x00000001249989b0
  0x0000000124998900: callq  0x000000012499890a
  0x0000000124998905: jmpq   0x000000012499899c
  0x000000012499890a: lea    0x8(%rsp),%rax
  0x000000012499890f: mov    %r13,-0x40(%rbp)
  0x0000000124998913: mov    %r15,%rdi
  0x0000000124998916: vzeroupper 
  0x0000000124998919: mov    %rbp,0x330(%r15)
  0x0000000124998920: mov    %rax,0x320(%r15)
  0x0000000124998927: test   $0xf,%esp
  0x000000012499892d: je     0x0000000124998945
  0x0000000124998933: sub    $0x8,%rsp
  0x0000000124998937: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000012499893c: add    $0x8,%rsp
  0x0000000124998940: jmpq   0x000000012499894a
  0x0000000124998945: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x000000012499894a: movabs $0x0,%r10
  0x0000000124998954: mov    %r10,0x320(%r15)
  0x000000012499895b: movabs $0x0,%r10
  0x0000000124998965: mov    %r10,0x330(%r15)
  0x000000012499896c: movabs $0x0,%r10
  0x0000000124998976: mov    %r10,0x328(%r15)
  0x000000012499897d: vzeroupper 
  0x0000000124998980: cmpq   $0x0,0x8(%r15)
  0x0000000124998988: je     0x0000000124998993
  0x000000012499898e: jmpq   0x0000000124975780
  0x0000000124998993: mov    -0x40(%rbp),%r13
  0x0000000124998997: mov    -0x38(%rbp),%r14
  0x000000012499899b: retq   
  0x000000012499899c: movabs $0x114ff3493,%rdi
  0x00000001249989a6: and    $0xfffffffffffffff0,%rsp
  0x00000001249989aa: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x00000001249989af: hlt    
  0x00000001249989b0: movzbl 0x5(%r13),%ebx
  0x00000001249989b5: add    $0x5,%r13
  0x00000001249989b9: movabs $0x1151d6220,%r10
  0x00000001249989c3: jmpq   *(%r10,%rbx,8)
  0x00000001249989c7: movq   $0x0,-0x10(%rbp)
  0x00000001249989cf: mov    -0x40(%rbp),%r13
  0x00000001249989d3: mov    -0x38(%rbp),%r14
  0x00000001249989d7: cmpq   $0x0,0x8(%r15)
  0x00000001249989df: je     0x0000000124998a95
  0x00000001249989e5: callq  0x00000001249989ef
  0x00000001249989ea: jmpq   0x0000000124998a81
  0x00000001249989ef: lea    0x8(%rsp),%rax
  0x00000001249989f4: mov    %r13,-0x40(%rbp)
  0x00000001249989f8: mov    %r15,%rdi
  0x00000001249989fb: vzeroupper 
  0x00000001249989fe: mov    %rbp,0x330(%r15)
  0x0000000124998a05: mov    %rax,0x320(%r15)
  0x0000000124998a0c: test   $0xf,%esp
  0x0000000124998a12: je     0x0000000124998a2a
  0x0000000124998a18: sub    $0x8,%rsp
  0x0000000124998a1c: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124998a21: add    $0x8,%rsp
  0x0000000124998a25: jmpq   0x0000000124998a2f
  0x0000000124998a2a: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124998a2f: movabs $0x0,%r10
  0x0000000124998a39: mov    %r10,0x320(%r15)
  0x0000000124998a40: movabs $0x0,%r10
  0x0000000124998a4a: mov    %r10,0x330(%r15)
  0x0000000124998a51: movabs $0x0,%r10
  0x0000000124998a5b: mov    %r10,0x328(%r15)
  0x0000000124998a62: vzeroupper 
  0x0000000124998a65: cmpq   $0x0,0x8(%r15)
  0x0000000124998a6d: je     0x0000000124998a78
  0x0000000124998a73: jmpq   0x0000000124975780
  0x0000000124998a78: mov    -0x40(%rbp),%r13
  0x0000000124998a7c: mov    -0x38(%rbp),%r14
  0x0000000124998a80: retq   
  0x0000000124998a81: movabs $0x114ff3493,%rdi
  0x0000000124998a8b: and    $0xfffffffffffffff0,%rsp
  0x0000000124998a8f: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124998a94: hlt    
  0x0000000124998a95: movzbl 0x5(%r13),%ebx
  0x0000000124998a9a: add    $0x5,%r13
  0x0000000124998a9e: movabs $0x1151d6a20,%r10
  0x0000000124998aa8: jmpq   *(%r10,%rbx,8)
  0x0000000124998aac: movq   $0x0,-0x10(%rbp)
  0x0000000124998ab4: mov    -0x40(%rbp),%r13
  0x0000000124998ab8: mov    -0x38(%rbp),%r14
  0x0000000124998abc: cmpq   $0x0,0x8(%r15)
  0x0000000124998ac4: je     0x0000000124998b7a
  0x0000000124998aca: callq  0x0000000124998ad4
  0x0000000124998acf: jmpq   0x0000000124998b66
  0x0000000124998ad4: lea    0x8(%rsp),%rax
  0x0000000124998ad9: mov    %r13,-0x40(%rbp)
  0x0000000124998add: mov    %r15,%rdi
  0x0000000124998ae0: vzeroupper 
  0x0000000124998ae3: mov    %rbp,0x330(%r15)
  0x0000000124998aea: mov    %rax,0x320(%r15)
  0x0000000124998af1: test   $0xf,%esp
  0x0000000124998af7: je     0x0000000124998b0f
  0x0000000124998afd: sub    $0x8,%rsp
  0x0000000124998b01: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124998b06: add    $0x8,%rsp
  0x0000000124998b0a: jmpq   0x0000000124998b14
  0x0000000124998b0f: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124998b14: movabs $0x0,%r10
  0x0000000124998b1e: mov    %r10,0x320(%r15)
  0x0000000124998b25: movabs $0x0,%r10
  0x0000000124998b2f: mov    %r10,0x330(%r15)
  0x0000000124998b36: movabs $0x0,%r10
  0x0000000124998b40: mov    %r10,0x328(%r15)
  0x0000000124998b47: vzeroupper 
  0x0000000124998b4a: cmpq   $0x0,0x8(%r15)
  0x0000000124998b52: je     0x0000000124998b5d
  0x0000000124998b58: jmpq   0x0000000124975780
  0x0000000124998b5d: mov    -0x40(%rbp),%r13
  0x0000000124998b61: mov    -0x38(%rbp),%r14
  0x0000000124998b65: retq   
  0x0000000124998b66: movabs $0x114ff3493,%rdi
  0x0000000124998b70: and    $0xfffffffffffffff0,%rsp
  0x0000000124998b74: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124998b79: hlt    
  0x0000000124998b7a: movzbl 0x5(%r13),%ebx
  0x0000000124998b7f: add    $0x5,%r13
  0x0000000124998b83: movabs $0x1151d7a20,%r10
  0x0000000124998b8d: jmpq   *(%r10,%rbx,8)
  0x0000000124998b91: movq   $0x0,-0x10(%rbp)
  0x0000000124998b99: mov    -0x40(%rbp),%r13
  0x0000000124998b9d: mov    -0x38(%rbp),%r14
  0x0000000124998ba1: cmpq   $0x0,0x8(%r15)
  0x0000000124998ba9: je     0x0000000124998c5f
  0x0000000124998baf: callq  0x0000000124998bb9
  0x0000000124998bb4: jmpq   0x0000000124998c4b
  0x0000000124998bb9: lea    0x8(%rsp),%rax
  0x0000000124998bbe: mov    %r13,-0x40(%rbp)
  0x0000000124998bc2: mov    %r15,%rdi
  0x0000000124998bc5: vzeroupper 
  0x0000000124998bc8: mov    %rbp,0x330(%r15)
  0x0000000124998bcf: mov    %rax,0x320(%r15)
  0x0000000124998bd6: test   $0xf,%esp
  0x0000000124998bdc: je     0x0000000124998bf4
  0x0000000124998be2: sub    $0x8,%rsp
  0x0000000124998be6: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124998beb: add    $0x8,%rsp
  0x0000000124998bef: jmpq   0x0000000124998bf9
  0x0000000124998bf4: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124998bf9: movabs $0x0,%r10
  0x0000000124998c03: mov    %r10,0x320(%r15)
  0x0000000124998c0a: movabs $0x0,%r10
  0x0000000124998c14: mov    %r10,0x330(%r15)
  0x0000000124998c1b: movabs $0x0,%r10
  0x0000000124998c25: mov    %r10,0x328(%r15)
  0x0000000124998c2c: vzeroupper 
  0x0000000124998c2f: cmpq   $0x0,0x8(%r15)
  0x0000000124998c37: je     0x0000000124998c42
  0x0000000124998c3d: jmpq   0x0000000124975780
  0x0000000124998c42: mov    -0x40(%rbp),%r13
  0x0000000124998c46: mov    -0x38(%rbp),%r14
  0x0000000124998c4a: retq   
  0x0000000124998c4b: movabs $0x114ff3493,%rdi
  0x0000000124998c55: and    $0xfffffffffffffff0,%rsp
  0x0000000124998c59: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124998c5e: hlt    
  0x0000000124998c5f: movzbl 0x6(%r13),%ebx
  0x0000000124998c64: add    $0x6,%r13
  0x0000000124998c68: movabs $0x1151d5220,%r10
  0x0000000124998c72: jmpq   *(%r10,%rbx,8)
  0x0000000124998c76: movq   $0x0,-0x10(%rbp)
  0x0000000124998c7e: mov    -0x40(%rbp),%r13
  0x0000000124998c82: mov    -0x38(%rbp),%r14
  0x0000000124998c86: cmpq   $0x0,0x8(%r15)
  0x0000000124998c8e: je     0x0000000124998d44
  0x0000000124998c94: callq  0x0000000124998c9e
  0x0000000124998c99: jmpq   0x0000000124998d30
  0x0000000124998c9e: lea    0x8(%rsp),%rax
  0x0000000124998ca3: mov    %r13,-0x40(%rbp)
  0x0000000124998ca7: mov    %r15,%rdi
  0x0000000124998caa: vzeroupper 
  0x0000000124998cad: mov    %rbp,0x330(%r15)
  0x0000000124998cb4: mov    %rax,0x320(%r15)
  0x0000000124998cbb: test   $0xf,%esp
  0x0000000124998cc1: je     0x0000000124998cd9
  0x0000000124998cc7: sub    $0x8,%rsp
  0x0000000124998ccb: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124998cd0: add    $0x8,%rsp
  0x0000000124998cd4: jmpq   0x0000000124998cde
  0x0000000124998cd9: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124998cde: movabs $0x0,%r10
  0x0000000124998ce8: mov    %r10,0x320(%r15)
  0x0000000124998cef: movabs $0x0,%r10
  0x0000000124998cf9: mov    %r10,0x330(%r15)
  0x0000000124998d00: movabs $0x0,%r10
  0x0000000124998d0a: mov    %r10,0x328(%r15)
  0x0000000124998d11: vzeroupper 
  0x0000000124998d14: cmpq   $0x0,0x8(%r15)
  0x0000000124998d1c: je     0x0000000124998d27
  0x0000000124998d22: jmpq   0x0000000124975780
  0x0000000124998d27: mov    -0x40(%rbp),%r13
  0x0000000124998d2b: mov    -0x38(%rbp),%r14
  0x0000000124998d2f: retq   
  0x0000000124998d30: movabs $0x114ff3493,%rdi
  0x0000000124998d3a: and    $0xfffffffffffffff0,%rsp
  0x0000000124998d3e: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124998d43: hlt    
  0x0000000124998d44: movzbl 0x6(%r13),%ebx
  0x0000000124998d49: add    $0x6,%r13
  0x0000000124998d4d: movabs $0x1151d7220,%r10
  0x0000000124998d57: jmpq   *(%r10,%rbx,8)
  0x0000000124998d5b: movq   $0x0,-0x10(%rbp)
  0x0000000124998d63: mov    -0x40(%rbp),%r13
  0x0000000124998d67: mov    -0x38(%rbp),%r14
  0x0000000124998d6b: cmpq   $0x0,0x8(%r15)
  0x0000000124998d73: je     0x0000000124998e29
  0x0000000124998d79: callq  0x0000000124998d83
  0x0000000124998d7e: jmpq   0x0000000124998e15
  0x0000000124998d83: lea    0x8(%rsp),%rax
  0x0000000124998d88: mov    %r13,-0x40(%rbp)
  0x0000000124998d8c: mov    %r15,%rdi
  0x0000000124998d8f: vzeroupper 
  0x0000000124998d92: mov    %rbp,0x330(%r15)
  0x0000000124998d99: mov    %rax,0x320(%r15)
  0x0000000124998da0: test   $0xf,%esp
  0x0000000124998da6: je     0x0000000124998dbe
  0x0000000124998dac: sub    $0x8,%rsp
  0x0000000124998db0: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124998db5: add    $0x8,%rsp
  0x0000000124998db9: jmpq   0x0000000124998dc3
  0x0000000124998dbe: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124998dc3: movabs $0x0,%r10
  0x0000000124998dcd: mov    %r10,0x320(%r15)
  0x0000000124998dd4: movabs $0x0,%r10
  0x0000000124998dde: mov    %r10,0x330(%r15)
  0x0000000124998de5: movabs $0x0,%r10
  0x0000000124998def: mov    %r10,0x328(%r15)
  0x0000000124998df6: vzeroupper 
  0x0000000124998df9: cmpq   $0x0,0x8(%r15)
  0x0000000124998e01: je     0x0000000124998e0c
  0x0000000124998e07: jmpq   0x0000000124975780
  0x0000000124998e0c: mov    -0x40(%rbp),%r13
  0x0000000124998e10: mov    -0x38(%rbp),%r14
  0x0000000124998e14: retq   
  0x0000000124998e15: movabs $0x114ff3493,%rdi
  0x0000000124998e1f: and    $0xfffffffffffffff0,%rsp
  0x0000000124998e23: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124998e28: hlt    
  0x0000000124998e29: movzbl 0x6(%r13),%ebx
  0x0000000124998e2e: add    $0x6,%r13
  0x0000000124998e32: movabs $0x1151d5a20,%r10
  0x0000000124998e3c: jmpq   *(%r10,%rbx,8)
  0x0000000124998e40: movq   $0x0,-0x10(%rbp)
  0x0000000124998e48: mov    -0x40(%rbp),%r13
  0x0000000124998e4c: mov    -0x38(%rbp),%r14
  0x0000000124998e50: cmpq   $0x0,0x8(%r15)
  0x0000000124998e58: je     0x0000000124998f0e
  0x0000000124998e5e: callq  0x0000000124998e68
  0x0000000124998e63: jmpq   0x0000000124998efa
  0x0000000124998e68: lea    0x8(%rsp),%rax
  0x0000000124998e6d: mov    %r13,-0x40(%rbp)
  0x0000000124998e71: mov    %r15,%rdi
  0x0000000124998e74: vzeroupper 
  0x0000000124998e77: mov    %rbp,0x330(%r15)
  0x0000000124998e7e: mov    %rax,0x320(%r15)
  0x0000000124998e85: test   $0xf,%esp
  0x0000000124998e8b: je     0x0000000124998ea3
  0x0000000124998e91: sub    $0x8,%rsp
  0x0000000124998e95: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124998e9a: add    $0x8,%rsp
  0x0000000124998e9e: jmpq   0x0000000124998ea8
  0x0000000124998ea3: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124998ea8: movabs $0x0,%r10
  0x0000000124998eb2: mov    %r10,0x320(%r15)
  0x0000000124998eb9: movabs $0x0,%r10
  0x0000000124998ec3: mov    %r10,0x330(%r15)
  0x0000000124998eca: movabs $0x0,%r10
  0x0000000124998ed4: mov    %r10,0x328(%r15)
  0x0000000124998edb: vzeroupper 
  0x0000000124998ede: cmpq   $0x0,0x8(%r15)
  0x0000000124998ee6: je     0x0000000124998ef1
  0x0000000124998eec: jmpq   0x0000000124975780
  0x0000000124998ef1: mov    -0x40(%rbp),%r13
  0x0000000124998ef5: mov    -0x38(%rbp),%r14
  0x0000000124998ef9: retq   
  0x0000000124998efa: movabs $0x114ff3493,%rdi
  0x0000000124998f04: and    $0xfffffffffffffff0,%rsp
  0x0000000124998f08: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124998f0d: hlt    
  0x0000000124998f0e: movzbl 0x6(%r13),%ebx
  0x0000000124998f13: add    $0x6,%r13
  0x0000000124998f17: movabs $0x1151d6220,%r10
  0x0000000124998f21: jmpq   *(%r10,%rbx,8)
  0x0000000124998f25: movq   $0x0,-0x10(%rbp)
  0x0000000124998f2d: mov    -0x40(%rbp),%r13
  0x0000000124998f31: mov    -0x38(%rbp),%r14
  0x0000000124998f35: cmpq   $0x0,0x8(%r15)
  0x0000000124998f3d: je     0x0000000124998ff3
  0x0000000124998f43: callq  0x0000000124998f4d
  0x0000000124998f48: jmpq   0x0000000124998fdf
  0x0000000124998f4d: lea    0x8(%rsp),%rax
  0x0000000124998f52: mov    %r13,-0x40(%rbp)
  0x0000000124998f56: mov    %r15,%rdi
  0x0000000124998f59: vzeroupper 
  0x0000000124998f5c: mov    %rbp,0x330(%r15)
  0x0000000124998f63: mov    %rax,0x320(%r15)
  0x0000000124998f6a: test   $0xf,%esp
  0x0000000124998f70: je     0x0000000124998f88
  0x0000000124998f76: sub    $0x8,%rsp
  0x0000000124998f7a: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124998f7f: add    $0x8,%rsp
  0x0000000124998f83: jmpq   0x0000000124998f8d
  0x0000000124998f88: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124998f8d: movabs $0x0,%r10
  0x0000000124998f97: mov    %r10,0x320(%r15)
  0x0000000124998f9e: movabs $0x0,%r10
  0x0000000124998fa8: mov    %r10,0x330(%r15)
  0x0000000124998faf: movabs $0x0,%r10
  0x0000000124998fb9: mov    %r10,0x328(%r15)
  0x0000000124998fc0: vzeroupper 
  0x0000000124998fc3: cmpq   $0x0,0x8(%r15)
  0x0000000124998fcb: je     0x0000000124998fd6
  0x0000000124998fd1: jmpq   0x0000000124975780
  0x0000000124998fd6: mov    -0x40(%rbp),%r13
  0x0000000124998fda: mov    -0x38(%rbp),%r14
  0x0000000124998fde: retq   
  0x0000000124998fdf: movabs $0x114ff3493,%rdi
  0x0000000124998fe9: and    $0xfffffffffffffff0,%rsp
  0x0000000124998fed: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x0000000124998ff2: hlt    
  0x0000000124998ff3: movzbl 0x6(%r13),%ebx
  0x0000000124998ff8: add    $0x6,%r13
  0x0000000124998ffc: movabs $0x1151d6a20,%r10
  0x0000000124999006: jmpq   *(%r10,%rbx,8)
  0x000000012499900a: movq   $0x0,-0x10(%rbp)
  0x0000000124999012: mov    -0x40(%rbp),%r13
  0x0000000124999016: mov    -0x38(%rbp),%r14
  0x000000012499901a: cmpq   $0x0,0x8(%r15)
  0x0000000124999022: je     0x00000001249990d8
  0x0000000124999028: callq  0x0000000124999032
  0x000000012499902d: jmpq   0x00000001249990c4
  0x0000000124999032: lea    0x8(%rsp),%rax
  0x0000000124999037: mov    %r13,-0x40(%rbp)
  0x000000012499903b: mov    %r15,%rdi
  0x000000012499903e: vzeroupper 
  0x0000000124999041: mov    %rbp,0x330(%r15)
  0x0000000124999048: mov    %rax,0x320(%r15)
  0x000000012499904f: test   $0xf,%esp
  0x0000000124999055: je     0x000000012499906d
  0x000000012499905b: sub    $0x8,%rsp
  0x000000012499905f: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124999064: add    $0x8,%rsp
  0x0000000124999068: jmpq   0x0000000124999072
  0x000000012499906d: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124999072: movabs $0x0,%r10
  0x000000012499907c: mov    %r10,0x320(%r15)
  0x0000000124999083: movabs $0x0,%r10
  0x000000012499908d: mov    %r10,0x330(%r15)
  0x0000000124999094: movabs $0x0,%r10
  0x000000012499909e: mov    %r10,0x328(%r15)
  0x00000001249990a5: vzeroupper 
  0x00000001249990a8: cmpq   $0x0,0x8(%r15)
  0x00000001249990b0: je     0x00000001249990bb
  0x00000001249990b6: jmpq   0x0000000124975780
  0x00000001249990bb: mov    -0x40(%rbp),%r13
  0x00000001249990bf: mov    -0x38(%rbp),%r14
  0x00000001249990c3: retq   
  0x00000001249990c4: movabs $0x114ff3493,%rdi
  0x00000001249990ce: and    $0xfffffffffffffff0,%rsp
  0x00000001249990d2: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x00000001249990d7: hlt    
  0x00000001249990d8: movzbl 0x6(%r13),%ebx
  0x00000001249990dd: add    $0x6,%r13
  0x00000001249990e1: movabs $0x1151d7a20,%r10
  0x00000001249990eb: jmpq   *(%r10,%rbx,8)
  0x00000001249990ef: movq   $0x0,-0x10(%rbp)
  0x00000001249990f7: mov    -0x40(%rbp),%r13
  0x00000001249990fb: mov    -0x38(%rbp),%r14
  0x00000001249990ff: cmpq   $0x0,0x8(%r15)
  0x0000000124999107: je     0x00000001249991bd
  0x000000012499910d: callq  0x0000000124999117
  0x0000000124999112: jmpq   0x00000001249991a9
  0x0000000124999117: lea    0x8(%rsp),%rax
  0x000000012499911c: mov    %r13,-0x40(%rbp)
  0x0000000124999120: mov    %r15,%rdi
  0x0000000124999123: vzeroupper 
  0x0000000124999126: mov    %rbp,0x330(%r15)
  0x000000012499912d: mov    %rax,0x320(%r15)
  0x0000000124999134: test   $0xf,%esp
  0x000000012499913a: je     0x0000000124999152
  0x0000000124999140: sub    $0x8,%rsp
  0x0000000124999144: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124999149: add    $0x8,%rsp
  0x000000012499914d: jmpq   0x0000000124999157
  0x0000000124999152: callq  0x0000000114bab318 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x0000000124999157: movabs $0x0,%r10
  0x0000000124999161: mov    %r10,0x320(%r15)
  0x0000000124999168: movabs $0x0,%r10
  0x0000000124999172: mov    %r10,0x330(%r15)
  0x0000000124999179: movabs $0x0,%r10
  0x0000000124999183: mov    %r10,0x328(%r15)
  0x000000012499918a: vzeroupper 
  0x000000012499918d: cmpq   $0x0,0x8(%r15)
  0x0000000124999195: je     0x00000001249991a0
  0x000000012499919b: jmpq   0x0000000124975780
  0x00000001249991a0: mov    -0x40(%rbp),%r13
  0x00000001249991a4: mov    -0x38(%rbp),%r14
  0x00000001249991a8: retq   
  0x00000001249991a9: movabs $0x114ff3493,%rdi
  0x00000001249991b3: and    $0xfffffffffffffff0,%rsp
  0x00000001249991b7: callq  0x0000000114d57808 = MacroAssembler::debug64(char*, long long, long long*)
  0x00000001249991bc: hlt    
  0x00000001249991bd: jmpq   0x000000012499037f
  0x00000001249991c2: nopw   0x0(%rax,%rax,1)
  0x00000001249991c8: add    %al,(%rax)
  0x00000001249991ca: add    %al,(%rax)
  0x00000001249991cc: add    %al,(%rax)
  0x00000001249991ce: add    %al,(%rax)
  0x00000001249991d0: add    %al,(%rax)
  0x00000001249991d2: add    %al,(%rax)
  0x00000001249991d4: add    %al,(%rax)
  0x00000001249991d6: add    %al,(%rax)
  0x00000001249991d8: add    %al,(%rax)
  0x00000001249991da: add    %al,(%rax)
  0x00000001249991dc: add    %al,(%rax)
  0x00000001249991de: add    %al,(%rax)
----------------------------------------------------------------------

55
